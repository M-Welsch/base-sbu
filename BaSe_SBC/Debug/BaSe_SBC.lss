
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000017  00008390  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000003  00803e00  00803e00  0000043b  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000043b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032a9  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c5c  00000000  00000000  000038e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df4  00000000  00000000  0000553d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c8  00000000  00000000  00006334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010d4  00000000  00000000  000065fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a94  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00008164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	73 c1       	rjmp	.+742    	; 0x2ee <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 30       	cpi	r26, 0x03	; 3
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	74 d0       	rcall	.+232    	; 0x13a <main>
  52:	9c c1       	rjmp	.+824    	; 0x38c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
  56:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <flag_button_0_pressed>
	flag_heartbeat = false;
  5a:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_heartbeat>
  5e:	08 95       	ret

00000060 <init_pins>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	e0 e0       	ldi	r30, 0x00	; 0
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	80 e8       	ldi	r24, 0x80	; 128
  66:	86 83       	std	Z+6, r24	; 0x06
  68:	81 83       	std	Z+1, r24	; 0x01
  6a:	80 e4       	ldi	r24, 0x40	; 64
  6c:	81 83       	std	Z+1, r24	; 0x01
  6e:	80 e1       	ldi	r24, 0x10	; 16
  70:	85 83       	std	Z+5, r24	; 0x05
  72:	81 83       	std	Z+1, r24	; 0x01
  74:	8c e0       	ldi	r24, 0x0C	; 12
  76:	82 83       	std	Z+2, r24	; 0x02
  78:	82 89       	ldd	r24, Z+18	; 0x12
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	82 8b       	std	Z+18, r24	; 0x12
  7e:	83 89       	ldd	r24, Z+19	; 0x13
  80:	88 60       	ori	r24, 0x08	; 8
  82:	83 8b       	std	Z+19, r24	; 0x13
  84:	e0 e2       	ldi	r30, 0x20	; 32
  86:	f4 e0       	ldi	r31, 0x04	; 4
  88:	83 e1       	ldi	r24, 0x13	; 19
  8a:	81 83       	std	Z+1, r24	; 0x01
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	82 83       	std	Z+2, r24	; 0x02
  90:	e0 e4       	ldi	r30, 0x40	; 64
  92:	f4 e0       	ldi	r31, 0x04	; 4
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	81 83       	std	Z+1, r24	; 0x01
  98:	15 82       	std	Z+5, r1	; 0x05
  9a:	08 95       	ret

0000009c <set_interrupts_for_buttons>:
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	f4 e0       	ldi	r31, 0x04	; 4
  a0:	82 89       	ldd	r24, Z+18	; 0x12
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	82 8b       	std	Z+18, r24	; 0x12
  a6:	83 89       	ldd	r24, Z+19	; 0x13
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	83 8b       	std	Z+19, r24	; 0x13
  ac:	08 95       	ret

000000ae <led_hmi_off>:
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
  b4:	08 95       	ret

000000b6 <toggle_hmi_led>:
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
  bc:	08 95       	ret

000000be <toggle_display_backlight>:
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
  c4:	08 95       	ret

000000c6 <display_enable>:
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	85 83       	std	Z+5, r24	; 0x05
  ce:	92 e4       	ldi	r25, 0x42	; 66
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <display_enable+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <display_enable+0x10>
  d6:	86 83       	std	Z+6, r24	; 0x06
  d8:	82 e4       	ldi	r24, 0x42	; 66
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <display_enable+0x14>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <display_enable+0x1a>
  e0:	08 95       	ret

000000e2 <set_display_data_pins>:
  e2:	e0 e4       	ldi	r30, 0x40	; 64
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	94 81       	ldd	r25, Z+4	; 0x04
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	94 83       	std	Z+4, r25	; 0x04
  ec:	94 81       	ldd	r25, Z+4	; 0x04
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	98 2b       	or	r25, r24
  f2:	94 83       	std	Z+4, r25	; 0x04
  f4:	08 95       	ret

000000f6 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
  fc:	08 95       	ret

000000fe <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
  fe:	80 e4       	ldi	r24, 0x40	; 64
 100:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 104:	08 95       	ret

00000106 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
 106:	e0 e2       	ldi	r30, 0x20	; 32
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
 10e:	81 83       	std	Z+1, r24	; 0x01
 110:	08 95       	ret

00000112 <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
 118:	08 95       	ret

0000011a <setup_heartbeat_interrupt>:
}

/* Heartbeat */
void setup_heartbeat_interrupt(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 11a:	e0 e2       	ldi	r30, 0x20	; 32
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	85 89       	ldd	r24, Z+21	; 0x15
 120:	89 60       	ori	r24, 0x09	; 9
 122:	85 8b       	std	Z+21, r24	; 0x15
 124:	08 95       	ret

00000126 <init_heatbeat_monitor>:
#include "heartbeat.h"
#include "gpio_interface.h"
#include "flags.h"

void init_heatbeat_monitor(void) {
	setup_heartbeat_interrupt();
 126:	f9 df       	rcall	.-14     	; 0x11a <setup_heartbeat_interrupt>
 128:	08 95       	ret

0000012a <heartbeat_monitor>:
}

void heartbeat_monitor(void) {
	if(flag_heartbeat) {
 12a:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <flag_heartbeat>
 12e:	88 23       	and	r24, r24
 130:	19 f0       	breq	.+6      	; 0x138 <heartbeat_monitor+0xe>
		toggle_display_backlight();
 132:	c5 df       	rcall	.-118    	; 0xbe <toggle_display_backlight>
		flag_heartbeat = false;
 134:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_heartbeat>
 138:	08 95       	ret

0000013a <main>:
#include "heartbeat.h"


int main(void)
{
	init_flags();
 13a:	8d df       	rcall	.-230    	; 0x56 <init_flags>
	init_pins();
 13c:	91 df       	rcall	.-222    	; 0x60 <init_pins>
	init_heatbeat_monitor();
 13e:	f3 df       	rcall	.-26     	; 0x126 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
 140:	ad df       	rcall	.-166    	; 0x9c <set_interrupts_for_buttons>
	init_uart();
 142:	f1 d0       	rcall	.+482    	; 0x326 <init_uart>
	init_display();
 144:	1f d0       	rcall	.+62     	; 0x184 <init_display>
	sei();
 146:	78 94       	sei
	
	display_write_string("Hallo Welt!\n");
 148:	80 e9       	ldi	r24, 0x90	; 144
 14a:	93 e8       	ldi	r25, 0x83	; 131
 14c:	c1 d0       	rcall	.+386    	; 0x2d0 <display_write_string>
	USART0_sendString("I:STARTED");
 14e:	8d e9       	ldi	r24, 0x9D	; 157
 150:	93 e8       	ldi	r25, 0x83	; 131
 152:	fb d0       	rcall	.+502    	; 0x34a <USART0_sendString>
	
    while (1) 
    {
		heartbeat_monitor();
 154:	ea df       	rcall	.-44     	; 0x12a <heartbeat_monitor>
		if(!flag_heartbeat_ok) {
 156:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
 15a:	81 11       	cpse	r24, r1
 15c:	01 c0       	rjmp	.+2      	; 0x160 <main+0x26>
			/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
			disable_usart_tx();
 15e:	d9 df       	rcall	.-78     	; 0x112 <disable_usart_tx>
		}
		
		/* HEART Beat processing doesn't work! */
		
		if (flag_button_0_pressed == true) {
 160:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <flag_button_0_pressed>
 164:	88 23       	and	r24, r24
 166:	19 f0       	breq	.+6      	; 0x16e <main+0x34>
			led_hmi_off();
 168:	a2 df       	rcall	.-188    	; 0xae <led_hmi_off>
			flag_button_0_pressed = false;
 16a:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <flag_button_0_pressed>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	80 e7       	ldi	r24, 0x70	; 112
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x3a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x44>
 17e:	00 00       	nop
		//}
		
		/* let hmi led toggle as a sbc heartbeat */
		
		_delay_ms(100);		
		toggle_hmi_led();
 180:	9a df       	rcall	.-204    	; 0xb6 <toggle_hmi_led>
    }
 182:	e8 cf       	rjmp	.-48     	; 0x154 <main+0x1a>

00000184 <init_display>:
 184:	2f e7       	ldi	r18, 0x7F	; 127
 186:	8a e1       	ldi	r24, 0x1A	; 26
 188:	96 e0       	ldi	r25, 0x06	; 6
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <init_display+0x6>
 192:	00 c0       	rjmp	.+0      	; 0x194 <init_display+0x10>
 194:	00 00       	nop
 196:	b3 df       	rcall	.-154    	; 0xfe <display_clear_rs_pin>
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	a3 df       	rcall	.-186    	; 0xe2 <set_display_data_pins>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	93 df       	rcall	.-218    	; 0xc6 <display_enable>
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <init_display+0x20>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <init_display+0x26>
 1aa:	00 00       	nop
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	99 df       	rcall	.-206    	; 0xe2 <set_display_data_pins>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	89 df       	rcall	.-238    	; 0xc6 <display_enable>
 1b4:	87 e8       	ldi	r24, 0x87	; 135
 1b6:	93 e1       	ldi	r25, 0x13	; 19
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <init_display+0x34>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <init_display+0x3a>
 1be:	00 00       	nop
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	8f df       	rcall	.-226    	; 0xe2 <set_display_data_pins>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	7f df       	rcall	.-258    	; 0xc6 <display_enable>
 1c8:	87 e8       	ldi	r24, 0x87	; 135
 1ca:	93 e1       	ldi	r25, 0x13	; 19
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <init_display+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <init_display+0x4e>
 1d2:	00 00       	nop
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	85 df       	rcall	.-246    	; 0xe2 <set_display_data_pins>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	75 df       	rcall	.-278    	; 0xc6 <display_enable>
 1dc:	87 e8       	ldi	r24, 0x87	; 135
 1de:	93 e1       	ldi	r25, 0x13	; 19
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <init_display+0x5c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <init_display+0x62>
 1e6:	00 00       	nop
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	7b df       	rcall	.-266    	; 0xe2 <set_display_data_pins>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	6b df       	rcall	.-298    	; 0xc6 <display_enable>
 1f0:	87 e8       	ldi	r24, 0x87	; 135
 1f2:	93 e1       	ldi	r25, 0x13	; 19
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <init_display+0x70>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <init_display+0x76>
 1fa:	00 00       	nop
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	71 df       	rcall	.-286    	; 0xe2 <set_display_data_pins>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	61 df       	rcall	.-318    	; 0xc6 <display_enable>
 204:	87 e8       	ldi	r24, 0x87	; 135
 206:	93 e1       	ldi	r25, 0x13	; 19
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <init_display+0x84>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <init_display+0x8a>
 20e:	00 00       	nop
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	67 df       	rcall	.-306    	; 0xe2 <set_display_data_pins>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	57 df       	rcall	.-338    	; 0xc6 <display_enable>
 218:	87 e8       	ldi	r24, 0x87	; 135
 21a:	93 e1       	ldi	r25, 0x13	; 19
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <init_display+0x98>
 220:	00 c0       	rjmp	.+0      	; 0x222 <init_display+0x9e>
 222:	00 00       	nop
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	5d df       	rcall	.-326    	; 0xe2 <set_display_data_pins>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	4d df       	rcall	.-358    	; 0xc6 <display_enable>
 22c:	87 e8       	ldi	r24, 0x87	; 135
 22e:	93 e1       	ldi	r25, 0x13	; 19
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <init_display+0xac>
 234:	00 c0       	rjmp	.+0      	; 0x236 <init_display+0xb2>
 236:	00 00       	nop
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	53 df       	rcall	.-346    	; 0xe2 <set_display_data_pins>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	43 df       	rcall	.-378    	; 0xc6 <display_enable>
 240:	87 e8       	ldi	r24, 0x87	; 135
 242:	93 e1       	ldi	r25, 0x13	; 19
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <init_display+0xc0>
 248:	00 c0       	rjmp	.+0      	; 0x24a <init_display+0xc6>
 24a:	00 00       	nop
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	49 df       	rcall	.-366    	; 0xe2 <set_display_data_pins>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	39 df       	rcall	.-398    	; 0xc6 <display_enable>
 254:	87 e8       	ldi	r24, 0x87	; 135
 256:	93 e1       	ldi	r25, 0x13	; 19
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <init_display+0xd4>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <init_display+0xda>
 25e:	00 00       	nop
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	3f df       	rcall	.-386    	; 0xe2 <set_display_data_pins>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	2f df       	rcall	.-418    	; 0xc6 <display_enable>
 268:	87 e8       	ldi	r24, 0x87	; 135
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <init_display+0xe8>
 270:	00 c0       	rjmp	.+0      	; 0x272 <init_display+0xee>
 272:	00 00       	nop
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	35 df       	rcall	.-406    	; 0xe2 <set_display_data_pins>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	25 df       	rcall	.-438    	; 0xc6 <display_enable>
 27c:	87 e8       	ldi	r24, 0x87	; 135
 27e:	93 e1       	ldi	r25, 0x13	; 19
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <init_display+0xfc>
 284:	00 c0       	rjmp	.+0      	; 0x286 <init_display+0x102>
 286:	00 00       	nop
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	2b df       	rcall	.-426    	; 0xe2 <set_display_data_pins>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	1b df       	rcall	.-458    	; 0xc6 <display_enable>
 290:	87 e8       	ldi	r24, 0x87	; 135
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <init_display+0x110>
 298:	00 c0       	rjmp	.+0      	; 0x29a <init_display+0x116>
 29a:	00 00       	nop
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	21 df       	rcall	.-446    	; 0xe2 <set_display_data_pins>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	11 df       	rcall	.-478    	; 0xc6 <display_enable>
 2a4:	87 e8       	ldi	r24, 0x87	; 135
 2a6:	93 e1       	ldi	r25, 0x13	; 19
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <init_display+0x124>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <init_display+0x12a>
 2ae:	00 00       	nop
 2b0:	08 95       	ret

000002b2 <display_write_char>:
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
 2b6:	1f df       	rcall	.-450    	; 0xf6 <display_set_rs_pin>
 2b8:	8c 2f       	mov	r24, r28
 2ba:	82 95       	swap	r24
 2bc:	8f 70       	andi	r24, 0x0F	; 15
 2be:	11 df       	rcall	.-478    	; 0xe2 <set_display_data_pins>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	01 df       	rcall	.-510    	; 0xc6 <display_enable>
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0d df       	rcall	.-486    	; 0xe2 <set_display_data_pins>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	fd de       	rcall	.-518    	; 0xc6 <display_enable>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <display_write_string>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
 2d6:	0f df       	rcall	.-482    	; 0xf6 <display_set_rs_pin>
 2d8:	88 81       	ld	r24, Y
 2da:	88 23       	and	r24, r24
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <display_write_string+0x18>
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	e8 df       	rcall	.-48     	; 0x2b2 <display_write_char>
 2e2:	89 91       	ld	r24, Y+
 2e4:	81 11       	cpse	r24, r1
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <display_write_string+0x10>
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <__vector_3>:
	display_enable(1);
	_delay_ms(5);
}

ISR(PORTA_PORT_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTA_INTFLAGS & button_0) {
 2fe:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 302:	82 ff       	sbrs	r24, 2
 304:	08 c0       	rjmp	.+16     	; 0x316 <__vector_3+0x28>
		flag_button_0_pressed = true;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
 30c:	e9 e0       	ldi	r30, 0x09	; 9
 30e:	f4 e0       	ldi	r31, 0x04	; 4
 310:	80 81       	ld	r24, Z
 312:	84 70       	andi	r24, 0x04	; 4
 314:	80 83       	st	Z, r24
	}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <init_uart>:
//#define USART0_BAUD_RATE(BAUD_RATE) ((float)(F_CPU * 64 / (16 * (float)BAUD_RATE)) + 0.5)
#define BAUD_RATE 9600
#define UROUND(x) ((2UL*(x)+1)/2)

void init_uart(void) {
	set_pb2_txd_and_pb3_rxd();
 326:	ef de       	rcall	.-546    	; 0x106 <set_pb2_txd_and_pb3_rxd>
	USART0.BAUD = UROUND(64UL*F_CPU/16/BAUD_RATE);
 328:	e0 e0       	ldi	r30, 0x00	; 0
 32a:	f8 e0       	ldi	r31, 0x08	; 8
 32c:	8c e6       	ldi	r24, 0x6C	; 108
 32e:	95 e0       	ldi	r25, 0x05	; 5
 330:	80 87       	std	Z+8, r24	; 0x08
 332:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 334:	80 ec       	ldi	r24, 0xC0	; 192
 336:	86 83       	std	Z+6, r24	; 0x06
 338:	08 95       	ret

0000033a <USART0_sendChar>:
}

void USART0_sendChar(char c) {
	while((USART0.STATUS & USART_DREIF_bm) == 0)
 33a:	e0 e0       	ldi	r30, 0x00	; 0
 33c:	f8 e0       	ldi	r31, 0x08	; 8
 33e:	94 81       	ldd	r25, Z+4	; 0x04
 340:	95 ff       	sbrs	r25, 5
 342:	fd cf       	rjmp	.-6      	; 0x33e <USART0_sendChar+0x4>
	;
	USART0.TXDATAL = c;
 344:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 348:	08 95       	ret

0000034a <USART0_sendString>:
}

void USART0_sendString(char *s) {
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	8c 01       	movw	r16, r24
 358:	7c 01       	movw	r14, r24
	for(size_t i = 0; i < strlen(s); i++) {
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	05 c0       	rjmp	.+10     	; 0x36a <USART0_sendString+0x20>
		USART0_sendChar(s[i]);
 360:	f7 01       	movw	r30, r14
 362:	81 91       	ld	r24, Z+
 364:	7f 01       	movw	r14, r30
 366:	e9 df       	rcall	.-46     	; 0x33a <USART0_sendChar>
	;
	USART0.TXDATAL = c;
}

void USART0_sendString(char *s) {
	for(size_t i = 0; i < strlen(s); i++) {
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	f8 01       	movw	r30, r16
 36c:	01 90       	ld	r0, Z+
 36e:	00 20       	and	r0, r0
 370:	e9 f7       	brne	.-6      	; 0x36c <USART0_sendString+0x22>
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	e0 1b       	sub	r30, r16
 376:	f1 0b       	sbc	r31, r17
 378:	ce 17       	cp	r28, r30
 37a:	df 07       	cpc	r29, r31
 37c:	88 f3       	brcs	.-30     	; 0x360 <USART0_sendString+0x16>
		USART0_sendChar(s[i]);
	}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
