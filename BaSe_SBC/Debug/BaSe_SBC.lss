
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001a83  00001b37  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000185a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000229  0000985a  0000185a  0000190e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000be  00803e04  00803e04  00001b3b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003f8  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f33  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028ad  00000000  00000000  00009eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002137  00000000  00000000  0000c7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000998  00000000  00000000  0000e8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023f4  00000000  00000000  0000f27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001516  00000000  00000000  00011670  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  00012b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	0c c1       	rjmp	.+536    	; 0x220 <__vector_3>
       8:	33 c1       	rjmp	.+614    	; 0x270 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	a0 c5       	rjmp	.+2880   	; 0xb4e <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	80 c1       	rjmp	.+768    	; 0x316 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	66 c7       	rjmp	.+3788   	; 0xefa <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e3 e8       	ldi	r30, 0x83	; 131
      48:	fa e1       	ldi	r31, 0x1A	; 26
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 3c       	cpi	r26, 0xC2	; 194
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	da d1       	rcall	.+948    	; 0x41c <main>
      68:	f6 cb       	rjmp	.-2068   	; 0xfffff856 <__eeprom_end+0xff7ef856>

0000006a <__bad_interrupt>:
      6a:	1e c1       	rjmp	.+572    	; 0x2a8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 1c 3e 	sts	0x3E1C, r1	; 0x803e1c <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <dim_display>:
     1a2:	18 16       	cp	r1, r24
     1a4:	19 06       	cpc	r1, r25
     1a6:	44 f4       	brge	.+16     	; 0x1b8 <dim_display+0x16>
     1a8:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <current_pwr_state>
     1ac:	88 23       	and	r24, r24
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <dim_display+0x16>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b6:	08 95       	ret
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1be:	08 95       	ret

000001c0 <display_enable>:
     1c0:	e0 e0       	ldi	r30, 0x00	; 0
     1c2:	f4 e0       	ldi	r31, 0x04	; 4
     1c4:	80 e8       	ldi	r24, 0x80	; 128
     1c6:	85 83       	std	Z+5, r24	; 0x05
     1c8:	92 e4       	ldi	r25, 0x42	; 66
     1ca:	9a 95       	dec	r25
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <display_enable+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <display_enable+0x10>
     1d0:	86 83       	std	Z+6, r24	; 0x06
     1d2:	82 e4       	ldi	r24, 0x42	; 66
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <display_enable+0x14>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <display_enable+0x1a>
     1da:	08 95       	ret

000001dc <set_display_data_pins>:
     1dc:	e0 e4       	ldi	r30, 0x40	; 64
     1de:	f4 e0       	ldi	r31, 0x04	; 4
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	90 7f       	andi	r25, 0xF0	; 240
     1e4:	94 83       	std	Z+4, r25	; 0x04
     1e6:	94 81       	ldd	r25, Z+4	; 0x04
     1e8:	8f 70       	andi	r24, 0x0F	; 15
     1ea:	98 2b       	or	r25, r24
     1ec:	94 83       	std	Z+4, r25	; 0x04
     1ee:	08 95       	ret

000001f0 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     1f0:	80 e4       	ldi	r24, 0x40	; 64
     1f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     1f6:	08 95       	ret

000001f8 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1f8:	80 e4       	ldi	r24, 0x40	; 64
     1fa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1fe:	08 95       	ret

00000200 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     200:	e0 e2       	ldi	r30, 0x20	; 32
     202:	f4 e0       	ldi	r31, 0x04	; 4
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     208:	81 83       	std	Z+1, r24	; 0x01
     20a:	08 95       	ret

0000020c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     20c:	84 e0       	ldi	r24, 0x04	; 4
     20e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     212:	08 95       	ret

00000214 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     214:	e0 e2       	ldi	r30, 0x20	; 32
     216:	f4 e0       	ldi	r31, 0x04	; 4
     218:	85 89       	ldd	r24, Z+21	; 0x15
     21a:	89 60       	ori	r24, 0x09	; 9
     21c:	85 8b       	std	Z+21, r24	; 0x15
     21e:	08 95       	ret

00000220 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	8f 93       	push	r24
     22c:	ef 93       	push	r30
     22e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     230:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     234:	82 ff       	sbrs	r24, 2
     236:	08 c0       	rjmp	.+16     	; 0x248 <__vector_3+0x28>
		flag_button_0_pressed = true;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     23e:	e9 e0       	ldi	r30, 0x09	; 9
     240:	f4 e0       	ldi	r31, 0x04	; 4
     242:	80 81       	ld	r24, Z
     244:	84 70       	andi	r24, 0x04	; 4
     246:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     248:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     24c:	83 ff       	sbrs	r24, 3
     24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_3+0x40>
		flag_button_1_pressed = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     256:	e9 e0       	ldi	r30, 0x09	; 9
     258:	f4 e0       	ldi	r31, 0x04	; 4
     25a:	80 81       	ld	r24, Z
     25c:	88 70       	andi	r24, 0x08	; 8
     25e:	80 83       	st	Z, r24
	}
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	8f 91       	pop	r24
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	8f 93       	push	r24
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     280:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     284:	85 ff       	sbrs	r24, 5
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_4+0x28>
		flag_heartbeat = true;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     28e:	e9 e2       	ldi	r30, 0x29	; 41
     290:	f4 e0       	ldi	r31, 0x04	; 4
     292:	80 81       	ld	r24, Z
     294:	80 72       	andi	r24, 0x20	; 32
     296:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	8f 91       	pop	r24
     29e:	0f 90       	pop	r0
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	0f 90       	pop	r0
     2a4:	1f 90       	pop	r1
     2a6:	18 95       	reti

000002a8 <__vector_default>:

ISR(BADISR_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	/* This routine is called if a non defined interrupt-vector is requested */
	USART0_sendString_w_newline_eol("bad ISR");
     2ca:	8c e5       	ldi	r24, 0x5C	; 92
     2cc:	98 e9       	ldi	r25, 0x98	; 152
     2ce:	a9 d4       	rcall	.+2386   	; 0xc22 <USART0_sendString_w_newline_eol>
     2d0:	ff 91       	pop	r31
     2d2:	ef 91       	pop	r30
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_newline_eol(buffer);
}
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	fa e0       	ldi	r31, 0x0A	; 10
     2f6:	8b e2       	ldi	r24, 0x2B	; 43
     2f8:	9a e0       	ldi	r25, 0x0A	; 10
     2fa:	86 a3       	std	Z+38, r24	; 0x26
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	82 87       	std	Z+10, r24	; 0x0a
     302:	08 95       	ret

00000304 <init_heatbeat_monitor>:
     304:	87 df       	rcall	.-242    	; 0x214 <setup_interrupt_for_hb_edge_detection>
     306:	f5 df       	rcall	.-22     	; 0x2f2 <setup_interrupt_timeout_detection>
     308:	08 95       	ret

0000030a <heartbeat_monitor>:
     30a:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <flag_heartbeat>
     30e:	81 11       	cpse	r24, r1
     310:	10 92 1c 3e 	sts	0x3E1C, r1	; 0x803e1c <flag_heartbeat>
     314:	08 95       	ret

00000316 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     320:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <flag_bpi_heartbeat_ok>
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     32e:	90 91 1d 3e 	lds	r25, 0x3E1D	; 0x803e1d <flag_button_0_pressed>
     332:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <flag_button_1_pressed>
     336:	81 11       	cpse	r24, r1
     338:	02 c0       	rjmp	.+4      	; 0x33e <mainloop_standby+0x10>
     33a:	99 23       	and	r25, r25
     33c:	41 f0       	breq	.+16     	; 0x34e <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     33e:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <flag_button_0_pressed>
		flag_button_1_pressed = false;
     342:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     34c:	6f d3       	rcall	.+1758   	; 0xa2c <transition_to_pwr_state>
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	80 e7       	ldi	r24, 0x70	; 112
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <mainloop_standby+0x26>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <mainloop_standby+0x30>
     35e:	00 00       	nop
     360:	08 95       	ret

00000362 <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
     362:	cf 93       	push	r28
	if (flag_entering_mainloop_display_on) {
     364:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_entering_mainloop_display_on>
     368:	88 23       	and	r24, r24
     36a:	b9 f0       	breq	.+46     	; 0x39a <mainloop_display_on+0x38>
		flag_entering_mainloop_display_on = false;
     36c:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     370:	8f e5       	ldi	r24, 0x5F	; 95
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     378:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     37c:	85 eb       	ldi	r24, 0xB5	; 181
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     384:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
		button1_action = show_menu_actions;
     388:	80 e7       	ldi	r24, 0x70	; 112
     38a:	94 e0       	ldi	r25, 0x04	; 4
     38c:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     390:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
		dim_display(1);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	04 df       	rcall	.-504    	; 0x1a2 <dim_display>
	}
	show_menu();
     39a:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     39e:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     3a2:	09 95       	icall
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	80 e7       	ldi	r24, 0x70	; 112
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	90 40       	sbci	r25, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <mainloop_display_on+0x48>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <mainloop_display_on+0x52>
     3b4:	00 00       	nop
	_delay_ms(100); //debouncing 
	while(!flag_button_0_pressed & !button_1_pressed()) {
     3b6:	c0 91 1d 3e 	lds	r28, 0x3E1D	; 0x803e1d <flag_button_0_pressed>
     3ba:	e0 de       	rcall	.-576    	; 0x17c <button_1_pressed>
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	89 2b       	or	r24, r25
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <mainloop_display_on+0x62>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	c2 17       	cp	r28, r18
     3c6:	b8 f3       	brcs	.-18     	; 0x3b6 <mainloop_display_on+0x54>
		;
	}
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     3c8:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <flag_button_0_pressed>
     3cc:	88 23       	and	r24, r24
     3ce:	39 f0       	breq	.+14     	; 0x3de <mainloop_display_on+0x7c>
		flag_button_0_pressed = false;
     3d0:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <flag_button_0_pressed>
		button0_action();
     3d4:	e0 91 18 3e 	lds	r30, 0x3E18	; 0x803e18 <button0_action>
     3d8:	f0 91 19 3e 	lds	r31, 0x3E19	; 0x803e19 <button0_action+0x1>
     3dc:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     3de:	ce de       	rcall	.-612    	; 0x17c <button_1_pressed>
     3e0:	89 2b       	or	r24, r25
     3e2:	39 f0       	breq	.+14     	; 0x3f2 <mainloop_display_on+0x90>
		flag_button_1_pressed = false;
     3e4:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_button_1_pressed>
		button1_action();
     3e8:	e0 91 16 3e 	lds	r30, 0x3E16	; 0x803e16 <button1_action>
     3ec:	f0 91 17 3e 	lds	r31, 0x3E17	; 0x803e17 <button1_action+0x1>
     3f0:	09 95       	icall
	}
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     3f6:	8a de       	rcall	.-748    	; 0x10c <init_flags>
	init_pins();
     3f8:	9d de       	rcall	.-710    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     3fa:	84 df       	rcall	.-248    	; 0x304 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     3fc:	c9 de       	rcall	.-622    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     3fe:	dd d3       	rcall	.+1978   	; 0xbba <init_uart>
	init_display();
     400:	34 d1       	rcall	.+616    	; 0x66a <init_display>
	adc_init();
     402:	3f de       	rcall	.-898    	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     404:	81 e1       	ldi	r24, 0x11	; 17
     406:	e4 e6       	ldi	r30, 0x64	; 100
     408:	f8 e9       	ldi	r31, 0x98	; 152
     40a:	a1 e2       	ldi	r26, 0x21	; 33
     40c:	be e3       	ldi	r27, 0x3E	; 62
     40e:	01 90       	ld	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	8a 95       	dec	r24
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	dimmer_init();
     416:	fc d1       	rcall	.+1016   	; 0x810 <dimmer_init>
	sei();
     418:	78 94       	sei
     41a:	08 95       	ret

0000041c <main>:
}

int main(void)
{
	init_sbu();
     41c:	ec df       	rcall	.-40     	; 0x3f6 <init_sbu>

	display_write_string("Standby Unit\nready!");
     41e:	85 e7       	ldi	r24, 0x75	; 117
     420:	98 e9       	ldi	r25, 0x98	; 152
     422:	d3 d1       	rcall	.+934    	; 0x7ca <display_write_string>
	USART0_sendString("I:STARTED");
     424:	89 e8       	ldi	r24, 0x89	; 137
     426:	98 e9       	ldi	r25, 0x98	; 152
     428:	db d3       	rcall	.+1974   	; 0xbe0 <USART0_sendString>
	dim_display(1);
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	b9 de       	rcall	.-654    	; 0x1a2 <dim_display>
	
	current_pwr_state = active;
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     436:	c3 e4       	ldi	r28, 0x43	; 67
     438:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     43a:	0f 2e       	mov	r0, r31
     43c:	f1 eb       	ldi	r31, 0xB1	; 177
     43e:	cf 2e       	mov	r12, r31
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	df 2e       	mov	r13, r31
     444:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     446:	0f 2e       	mov	r0, r31
     448:	f7 e9       	ldi	r31, 0x97	; 151
     44a:	ef 2e       	mov	r14, r31
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	ff 2e       	mov	r15, r31
     450:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     452:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     454:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <current_pwr_state>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	39 f0       	breq	.+14     	; 0x46a <main+0x4e>
     45c:	20 f0       	brcs	.+8      	; 0x466 <main+0x4a>
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	29 f4       	brne	.+10     	; 0x46c <main+0x50>
			case active:
				mainloop = mainloop_active;
     462:	e8 01       	movw	r28, r16
     464:	03 c0       	rjmp	.+6      	; 0x46c <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     466:	e7 01       	movw	r28, r14
				break;
     468:	01 c0       	rjmp	.+2      	; 0x46c <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     46a:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     46c:	fe 01       	movw	r30, r28
     46e:	09 95       	icall
    }
     470:	f1 cf       	rjmp	.-30     	; 0x454 <main+0x38>

00000472 <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     472:	e0 e5       	ldi	r30, 0x50	; 80
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	82 60       	ori	r24, 0x02	; 2
     47a:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     47c:	80 81       	ld	r24, Z
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	80 83       	st	Z, r24
	sleep_cpu();
     482:	88 95       	sleep
     484:	08 95       	ret

00000486 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	8b de       	rcall	.-746    	; 0x1a2 <dim_display>
	heartbeat_monitor();
     48c:	3e df       	rcall	.-388    	; 0x30a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     48e:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <flag_bpi_heartbeat_ok>
     492:	81 11       	cpse	r24, r1
     494:	01 c0       	rjmp	.+2      	; 0x498 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     496:	ba de       	rcall	.-652    	; 0x20c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     498:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <flag_button_0_pressed>
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     4a0:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <flag_button_0_pressed>
		led_hmi_off();
     4a4:	f3 d1       	rcall	.+998    	; 0x88c <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     4a6:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <flag_button_1_pressed>
     4aa:	88 23       	and	r24, r24
     4ac:	29 f0       	breq	.+10     	; 0x4b8 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     4ae:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     4b2:	83 e9       	ldi	r24, 0x93	; 147
     4b4:	98 e9       	ldi	r25, 0x98	; 152
     4b6:	94 d3       	rcall	.+1832   	; 0xbe0 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     4b8:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_usart_string_receive_complete>
     4bc:	88 23       	and	r24, r24
     4be:	19 f0       	breq	.+6      	; 0x4c6 <mainloop_active+0x40>
		USART0_process_incoming_message();
     4c0:	1b d4       	rcall	.+2102   	; 0xcf8 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     4c2:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     4c6:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_string_for_display_received>
     4ca:	88 23       	and	r24, r24
     4cc:	59 f0       	breq	.+22     	; 0x4e4 <mainloop_active+0x5e>
		flag_string_for_display_received = false;
     4ce:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_string_for_display_received>
		display_clear();
     4d2:	8e d1       	rcall	.+796    	; 0x7f0 <display_clear>
		display_write_string(display_line1_content);
     4d4:	88 e5       	ldi	r24, 0x58	; 88
     4d6:	9e e3       	ldi	r25, 0x3E	; 62
     4d8:	78 d1       	rcall	.+752    	; 0x7ca <display_write_string>
		display_next_line();
     4da:	6d d1       	rcall	.+730    	; 0x7b6 <display_next_line>
		display_write_string(display_line2_content);
     4dc:	82 e4       	ldi	r24, 0x42	; 66
     4de:	9e e3       	ldi	r25, 0x3E	; 62
     4e0:	74 d1       	rcall	.+744    	; 0x7ca <display_write_string>
		USART0_send_ready();
     4e2:	a5 d3       	rcall	.+1866   	; 0xc2e <USART0_send_ready>
	}
	
	if (flag_pwr_state_change_request == true) {
     4e4:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_pwr_state_change_request>
     4e8:	88 23       	and	r24, r24
     4ea:	49 f0       	breq	.+18     	; 0x4fe <mainloop_active+0x78>
		display_clear();
     4ec:	81 d1       	rcall	.+770    	; 0x7f0 <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     4ee:	8d e9       	ldi	r24, 0x9D	; 157
     4f0:	98 e9       	ldi	r25, 0x98	; 152
     4f2:	6b d1       	rcall	.+726    	; 0x7ca <display_write_string>
		flag_pwr_state_change_request = false;
     4f4:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     4f8:	80 91 57 3e 	lds	r24, 0x3E57	; 0x803e57 <next_pwr_state>
     4fc:	97 d2       	rcall	.+1326   	; 0xa2c <transition_to_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     4fe:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
     502:	88 23       	and	r24, r24
     504:	39 f0       	breq	.+14     	; 0x514 <mainloop_active+0x8e>
		display_clear();
     506:	74 d1       	rcall	.+744    	; 0x7f0 <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	9e e3       	ldi	r25, 0x3E	; 62
     50c:	5e d1       	rcall	.+700    	; 0x7ca <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     50e:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
		USART0_send_ready();
     512:	8d d3       	rcall	.+1818   	; 0xc2e <USART0_send_ready>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     514:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_received_seconds_to_next_bu>
     518:	88 23       	and	r24, r24
     51a:	11 f1       	breq	.+68     	; 0x560 <mainloop_active+0xda>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     51c:	80 91 56 3e 	lds	r24, 0x3E56	; 0x803e56 <seconds_to_next_bu+0x3>
     520:	8f 93       	push	r24
     522:	80 91 55 3e 	lds	r24, 0x3E55	; 0x803e55 <seconds_to_next_bu+0x2>
     526:	8f 93       	push	r24
     528:	80 91 54 3e 	lds	r24, 0x3E54	; 0x803e54 <seconds_to_next_bu+0x1>
     52c:	8f 93       	push	r24
     52e:	80 91 53 3e 	lds	r24, 0x3E53	; 0x803e53 <seconds_to_next_bu>
     532:	8f 93       	push	r24
     534:	8a eb       	ldi	r24, 0xBA	; 186
     536:	98 e9       	ldi	r25, 0x98	; 152
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	89 e8       	ldi	r24, 0x89	; 137
     53e:	9e e3       	ldi	r25, 0x3E	; 62
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	6c d6       	rcall	.+3288   	; 0x121e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     546:	89 e8       	ldi	r24, 0x89	; 137
     548:	9e e3       	ldi	r25, 0x3E	; 62
     54a:	6b d3       	rcall	.+1750   	; 0xc22 <USART0_sendString_w_newline_eol>
		flag_received_seconds_to_next_bu = false;
     54c:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     550:	c2 d2       	rcall	.+1412   	; 0xad6 <rtc_write_seconds_to_cmp>
		rtc_setup();
     552:	b5 d2       	rcall	.+1386   	; 0xabe <rtc_setup>
		USART0_send_ready();
     554:	6c d3       	rcall	.+1752   	; 0xc2e <USART0_send_ready>
     556:	8d b7       	in	r24, 0x3d	; 61
     558:	9e b7       	in	r25, 0x3e	; 62
     55a:	08 96       	adiw	r24, 0x08	; 8
     55c:	8d bf       	out	0x3d, r24	; 61
     55e:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     560:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_goto_sleep>
     564:	88 23       	and	r24, r24
     566:	79 f0       	breq	.+30     	; 0x586 <mainloop_active+0x100>
		flag_goto_sleep = false;
     568:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_goto_sleep>
		USART0_sendString_w_newline_eol("going to sleep ...\n");
     56c:	87 ed       	ldi	r24, 0xD7	; 215
     56e:	98 e9       	ldi	r25, 0x98	; 152
     570:	58 d3       	rcall	.+1712   	; 0xc22 <USART0_sendString_w_newline_eol>
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	20 e7       	ldi	r18, 0x70	; 112
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	91 50       	subi	r25, 0x01	; 1
     57a:	20 40       	sbci	r18, 0x00	; 0
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <mainloop_active+0xf2>
     580:	00 c0       	rjmp	.+0      	; 0x582 <mainloop_active+0xfc>
     582:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     584:	76 df       	rcall	.-276    	; 0x472 <goto_sleep_standby>
	}
	
	if (flag_request_current_measurement == true) {
     586:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_request_current_measurement>
     58a:	88 23       	and	r24, r24
     58c:	c1 f0       	breq	.+48     	; 0x5be <mainloop_active+0x138>
		flag_request_current_measurement = false;
     58e:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     592:	9c dd       	rcall	.-1224   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"CC:%d", input_current);
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	8b ee       	ldi	r24, 0xEB	; 235
     59a:	98 e9       	ldi	r25, 0x98	; 152
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	89 e8       	ldi	r24, 0x89	; 137
     5a2:	9e e3       	ldi	r25, 0x3E	; 62
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	3a d6       	rcall	.+3188   	; 0x121e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     5aa:	89 e8       	ldi	r24, 0x89	; 137
     5ac:	9e e3       	ldi	r25, 0x3E	; 62
     5ae:	39 d3       	rcall	.+1650   	; 0xc22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     5b0:	3e d3       	rcall	.+1660   	; 0xc2e <USART0_send_ready>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if	(flag_request_temperature_measurement == true) {
     5be:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_request_temperature_measurement>
     5c2:	88 23       	and	r24, r24
     5c4:	c1 f0       	breq	.+48     	; 0x5f6 <mainloop_active+0x170>
		flag_request_temperature_measurement = false;
     5c6:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     5ca:	8c dd       	rcall	.-1256   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TP:%d", temperature);
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	81 ef       	ldi	r24, 0xF1	; 241
     5d2:	98 e9       	ldi	r25, 0x98	; 152
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	89 e8       	ldi	r24, 0x89	; 137
     5da:	9e e3       	ldi	r25, 0x3E	; 62
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	1e d6       	rcall	.+3132   	; 0x121e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     5e2:	89 e8       	ldi	r24, 0x89	; 137
     5e4:	9e e3       	ldi	r25, 0x3E	; 62
     5e6:	1d d3       	rcall	.+1594   	; 0xc22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     5e8:	22 d3       	rcall	.+1604   	; 0xc2e <USART0_send_ready>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_request_3v3_measurement == true) {
     5f6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_request_3v3_measurement>
     5fa:	88 23       	and	r24, r24
     5fc:	c1 f0       	breq	.+48     	; 0x62e <mainloop_active+0x1a8>
		flag_request_3v3_measurement = false;
     5fe:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     602:	58 dd       	rcall	.-1360   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V:%d", voltage_3v3);
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	87 ef       	ldi	r24, 0xF7	; 247
     60a:	98 e9       	ldi	r25, 0x98	; 152
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	89 e8       	ldi	r24, 0x89	; 137
     612:	9e e3       	ldi	r25, 0x3E	; 62
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	02 d6       	rcall	.+3076   	; 0x121e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     61a:	89 e8       	ldi	r24, 0x89	; 137
     61c:	9e e3       	ldi	r25, 0x3E	; 62
     61e:	01 d3       	rcall	.+1538   	; 0xc22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     620:	06 d3       	rcall	.+1548   	; 0xc2e <USART0_send_ready>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_dim_display) {
     62e:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_dim_display>
     632:	88 23       	and	r24, r24
     634:	41 f0       	breq	.+16     	; 0x646 <mainloop_active+0x1c0>
		set_hmi_led_dimming_value(dimming_value_hmi_led);
     636:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <dimming_value_hmi_led>
     63a:	90 91 1b 3e 	lds	r25, 0x3E1B	; 0x803e1b <dimming_value_hmi_led+0x1>
     63e:	18 d1       	rcall	.+560    	; 0x870 <set_hmi_led_dimming_value>
		//Todo: update_default_display_dimming_value_in_eeprom();
		flag_dim_display = false;
     640:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_dim_display>
		USART0_send_ready();
     644:	f4 d2       	rcall	.+1512   	; 0xc2e <USART0_send_ready>
	}
	
	if (flag_dim_hmi_led) {
     646:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_dim_hmi_led>
     64a:	88 23       	and	r24, r24
     64c:	19 f0       	breq	.+6      	; 0x654 <mainloop_active+0x1ce>
		flag_dim_hmi_led = false;
     64e:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_dim_hmi_led>
		USART0_send_ready();
     652:	ed d2       	rcall	.+1498   	; 0xc2e <USART0_send_ready>
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	20 e7       	ldi	r18, 0x70	; 112
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	91 50       	subi	r25, 0x01	; 1
     65c:	20 40       	sbci	r18, 0x00	; 0
     65e:	80 40       	sbci	r24, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <mainloop_active+0x1d4>
     662:	00 c0       	rjmp	.+0      	; 0x664 <mainloop_active+0x1de>
     664:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     666:	17 d1       	rcall	.+558    	; 0x896 <toggle_hmi_led>
     668:	08 95       	ret

0000066a <init_display>:
void set_dimming_value_display_bl(uint16_t dimming_value) {
	TCA0.SINGLE.CMP0 = dimming_value;
}

void set_dimming_value_led(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     66a:	2f e7       	ldi	r18, 0x7F	; 127
     66c:	8a e1       	ldi	r24, 0x1A	; 26
     66e:	96 e0       	ldi	r25, 0x06	; 6
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <init_display+0x6>
     678:	00 c0       	rjmp	.+0      	; 0x67a <init_display+0x10>
     67a:	00 00       	nop
     67c:	bd dd       	rcall	.-1158   	; 0x1f8 <display_clear_rs_pin>
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	ad dd       	rcall	.-1190   	; 0x1dc <set_display_data_pins>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	9d dd       	rcall	.-1222   	; 0x1c0 <display_enable>
     686:	87 e8       	ldi	r24, 0x87	; 135
     688:	93 e1       	ldi	r25, 0x13	; 19
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <init_display+0x20>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <init_display+0x26>
     690:	00 00       	nop
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	a3 dd       	rcall	.-1210   	; 0x1dc <set_display_data_pins>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	93 dd       	rcall	.-1242   	; 0x1c0 <display_enable>
     69a:	87 e8       	ldi	r24, 0x87	; 135
     69c:	93 e1       	ldi	r25, 0x13	; 19
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <init_display+0x34>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <init_display+0x3a>
     6a4:	00 00       	nop
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	99 dd       	rcall	.-1230   	; 0x1dc <set_display_data_pins>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	89 dd       	rcall	.-1262   	; 0x1c0 <display_enable>
     6ae:	87 e8       	ldi	r24, 0x87	; 135
     6b0:	93 e1       	ldi	r25, 0x13	; 19
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <init_display+0x48>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <init_display+0x4e>
     6b8:	00 00       	nop
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	8f dd       	rcall	.-1250   	; 0x1dc <set_display_data_pins>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	7f dd       	rcall	.-1282   	; 0x1c0 <display_enable>
     6c2:	87 e8       	ldi	r24, 0x87	; 135
     6c4:	93 e1       	ldi	r25, 0x13	; 19
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <init_display+0x5c>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <init_display+0x62>
     6cc:	00 00       	nop
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	85 dd       	rcall	.-1270   	; 0x1dc <set_display_data_pins>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	75 dd       	rcall	.-1302   	; 0x1c0 <display_enable>
     6d6:	87 e8       	ldi	r24, 0x87	; 135
     6d8:	93 e1       	ldi	r25, 0x13	; 19
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <init_display+0x70>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <init_display+0x76>
     6e0:	00 00       	nop
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	7b dd       	rcall	.-1290   	; 0x1dc <set_display_data_pins>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	6b dd       	rcall	.-1322   	; 0x1c0 <display_enable>
     6ea:	87 e8       	ldi	r24, 0x87	; 135
     6ec:	93 e1       	ldi	r25, 0x13	; 19
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <init_display+0x84>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <init_display+0x8a>
     6f4:	00 00       	nop
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	71 dd       	rcall	.-1310   	; 0x1dc <set_display_data_pins>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	61 dd       	rcall	.-1342   	; 0x1c0 <display_enable>
     6fe:	87 e8       	ldi	r24, 0x87	; 135
     700:	93 e1       	ldi	r25, 0x13	; 19
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <init_display+0x98>
     706:	00 c0       	rjmp	.+0      	; 0x708 <init_display+0x9e>
     708:	00 00       	nop
     70a:	8c e0       	ldi	r24, 0x0C	; 12
     70c:	67 dd       	rcall	.-1330   	; 0x1dc <set_display_data_pins>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	57 dd       	rcall	.-1362   	; 0x1c0 <display_enable>
     712:	87 e8       	ldi	r24, 0x87	; 135
     714:	93 e1       	ldi	r25, 0x13	; 19
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <init_display+0xac>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <init_display+0xb2>
     71c:	00 00       	nop
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	5d dd       	rcall	.-1350   	; 0x1dc <set_display_data_pins>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	4d dd       	rcall	.-1382   	; 0x1c0 <display_enable>
     726:	87 e8       	ldi	r24, 0x87	; 135
     728:	93 e1       	ldi	r25, 0x13	; 19
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <init_display+0xc0>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <init_display+0xc6>
     730:	00 00       	nop
     732:	86 e0       	ldi	r24, 0x06	; 6
     734:	53 dd       	rcall	.-1370   	; 0x1dc <set_display_data_pins>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	43 dd       	rcall	.-1402   	; 0x1c0 <display_enable>
     73a:	87 e8       	ldi	r24, 0x87	; 135
     73c:	93 e1       	ldi	r25, 0x13	; 19
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <init_display+0xd4>
     742:	00 c0       	rjmp	.+0      	; 0x744 <init_display+0xda>
     744:	00 00       	nop
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	49 dd       	rcall	.-1390   	; 0x1dc <set_display_data_pins>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	39 dd       	rcall	.-1422   	; 0x1c0 <display_enable>
     74e:	87 e8       	ldi	r24, 0x87	; 135
     750:	93 e1       	ldi	r25, 0x13	; 19
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <init_display+0xe8>
     756:	00 c0       	rjmp	.+0      	; 0x758 <init_display+0xee>
     758:	00 00       	nop
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	3f dd       	rcall	.-1410   	; 0x1dc <set_display_data_pins>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	2f dd       	rcall	.-1442   	; 0x1c0 <display_enable>
     762:	87 e8       	ldi	r24, 0x87	; 135
     764:	93 e1       	ldi	r25, 0x13	; 19
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <init_display+0xfc>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <init_display+0x102>
     76c:	00 00       	nop
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	35 dd       	rcall	.-1430   	; 0x1dc <set_display_data_pins>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	25 dd       	rcall	.-1462   	; 0x1c0 <display_enable>
     776:	87 e8       	ldi	r24, 0x87	; 135
     778:	93 e1       	ldi	r25, 0x13	; 19
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <init_display+0x110>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <init_display+0x116>
     780:	00 00       	nop
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	2b dd       	rcall	.-1450   	; 0x1dc <set_display_data_pins>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	1b dd       	rcall	.-1482   	; 0x1c0 <display_enable>
     78a:	87 e8       	ldi	r24, 0x87	; 135
     78c:	93 e1       	ldi	r25, 0x13	; 19
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <init_display+0x124>
     792:	00 c0       	rjmp	.+0      	; 0x794 <init_display+0x12a>
     794:	00 00       	nop
     796:	08 95       	ret

00000798 <display_write_char>:
     798:	cf 93       	push	r28
     79a:	c8 2f       	mov	r28, r24
     79c:	29 dd       	rcall	.-1454   	; 0x1f0 <display_set_rs_pin>
     79e:	8c 2f       	mov	r24, r28
     7a0:	82 95       	swap	r24
     7a2:	8f 70       	andi	r24, 0x0F	; 15
     7a4:	1b dd       	rcall	.-1482   	; 0x1dc <set_display_data_pins>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0b dd       	rcall	.-1514   	; 0x1c0 <display_enable>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	17 dd       	rcall	.-1490   	; 0x1dc <set_display_data_pins>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	07 dd       	rcall	.-1522   	; 0x1c0 <display_enable>
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <display_next_line>:
     7b6:	20 dd       	rcall	.-1472   	; 0x1f8 <display_clear_rs_pin>
     7b8:	8c e0       	ldi	r24, 0x0C	; 12
     7ba:	10 dd       	rcall	.-1504   	; 0x1dc <set_display_data_pins>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	00 dd       	rcall	.-1536   	; 0x1c0 <display_enable>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0c dd       	rcall	.-1512   	; 0x1dc <set_display_data_pins>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	fc dc       	rcall	.-1544   	; 0x1c0 <display_enable>
     7c8:	08 95       	ret

000007ca <display_write_string>:
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	0f dd       	rcall	.-1506   	; 0x1f0 <display_set_rs_pin>
     7d2:	88 81       	ld	r24, Y
     7d4:	88 23       	and	r24, r24
     7d6:	49 f0       	breq	.+18     	; 0x7ea <display_write_string+0x20>
     7d8:	21 96       	adiw	r28, 0x01	; 1
     7da:	8a 30       	cpi	r24, 0x0A	; 10
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <display_write_string+0x18>
     7de:	eb df       	rcall	.-42     	; 0x7b6 <display_next_line>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <display_write_string+0x1a>
     7e2:	da df       	rcall	.-76     	; 0x798 <display_write_char>
     7e4:	89 91       	ld	r24, Y+
     7e6:	81 11       	cpse	r24, r1
     7e8:	f8 cf       	rjmp	.-16     	; 0x7da <display_write_string+0x10>
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <display_clear>:
     7f0:	03 dd       	rcall	.-1530   	; 0x1f8 <display_clear_rs_pin>
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	f3 dc       	rcall	.-1562   	; 0x1dc <set_display_data_pins>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	e3 dc       	rcall	.-1594   	; 0x1c0 <display_enable>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	ef dc       	rcall	.-1570   	; 0x1dc <set_display_data_pins>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	df dc       	rcall	.-1602   	; 0x1c0 <display_enable>
     802:	87 ea       	ldi	r24, 0xA7	; 167
     804:	91 e6       	ldi	r25, 0x61	; 97
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <display_clear+0x16>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <display_clear+0x1c>
     80c:	00 00       	nop
     80e:	08 95       	ret

00000810 <dimmer_init>:
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	fa e0       	ldi	r31, 0x0A	; 10
     814:	82 85       	ldd	r24, Z+10	; 0x0a
     816:	8e 78       	andi	r24, 0x8E	; 142
     818:	82 87       	std	Z+10, r24	; 0x0a
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	83 60       	ori	r24, 0x03	; 3
     81e:	81 83       	std	Z+1, r24	; 0x01
     820:	80 81       	ld	r24, Z
     822:	84 60       	ori	r24, 0x04	; 4
     824:	80 83       	st	Z, r24
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	86 ab       	std	Z+54, r24	; 0x36
     82c:	97 ab       	std	Z+55, r25	; 0x37
     82e:	21 85       	ldd	r18, Z+9	; 0x09
     830:	2e 7f       	andi	r18, 0xFE	; 254
     832:	21 87       	std	Z+9, r18	; 0x09
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b2 e0       	ldi	r27, 0x02	; 2
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	2c 91       	ld	r18, X
     83c:	12 97       	sbiw	r26, 0x02	; 2
     83e:	22 60       	ori	r18, 0x02	; 2
     840:	12 96       	adiw	r26, 0x02	; 2
     842:	2c 93       	st	X, r18
     844:	21 81       	ldd	r18, Z+1	; 0x01
     846:	20 61       	ori	r18, 0x10	; 16
     848:	21 83       	std	Z+1, r18	; 0x01
     84a:	21 81       	ldd	r18, Z+1	; 0x01
     84c:	20 62       	ori	r18, 0x20	; 32
     84e:	21 83       	std	Z+1, r18	; 0x01
     850:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <dimming_value_display>
     854:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <dimming_value_display+0x1>
     858:	80 a7       	std	Z+40, r24	; 0x28
     85a:	91 a7       	std	Z+41, r25	; 0x29
     85c:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <dimming_value_hmi_led>
     860:	90 93 1b 3e 	sts	0x3E1B, r25	; 0x803e1b <dimming_value_hmi_led+0x1>
     864:	82 a7       	std	Z+42, r24	; 0x2a
     866:	93 a7       	std	Z+43, r25	; 0x2b
     868:	80 81       	ld	r24, Z
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
     86e:	08 95       	ret

00000870 <set_hmi_led_dimming_value>:
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     870:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     874:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     878:	08 95       	ret

0000087a <led_hmi_on>:
}

void led_hmi_on(void) {
	set_hmi_led_dimming_value(dimming_value_hmi_led);
     87a:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <dimming_value_hmi_led>
     87e:	90 91 1b 3e 	lds	r25, 0x3E1B	; 0x803e1b <dimming_value_hmi_led+0x1>
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     882:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     886:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     88a:	08 95       	ret

0000088c <led_hmi_off>:
     88c:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     890:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     894:	08 95       	ret

00000896 <toggle_hmi_led>:
void led_hmi_off(void) {
	set_hmi_led_dimming_value(0);
}

void toggle_hmi_led(void) {
	if(TCA0.SINGLE.CMP1 == 0x0000) {
     896:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     89a:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     89e:	89 2b       	or	r24, r25
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <toggle_hmi_led+0x10>
		led_hmi_on();
     8a2:	eb df       	rcall	.-42     	; 0x87a <led_hmi_on>
     8a4:	08 95       	ret
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     8a6:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     8aa:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     8ae:	08 95       	ret

000008b0 <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     8b0:	8f e5       	ldi	r24, 0x5F	; 95
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8b8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     8bc:	08 95       	ret

000008be <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     8be:	98 df       	rcall	.-208    	; 0x7f0 <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     8c0:	8d ef       	ldi	r24, 0xFD	; 253
     8c2:	98 e9       	ldi	r25, 0x98	; 152
     8c4:	82 df       	rcall	.-252    	; 0x7ca <display_write_string>
	button0_action = show_menu_timestamp;
     8c6:	85 eb       	ldi	r24, 0xB5	; 181
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     8ce:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
	button1_action = show_menu_actions;
     8d2:	80 e7       	ldi	r24, 0x70	; 112
     8d4:	94 e0       	ldi	r25, 0x04	; 4
     8d6:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     8da:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
     8de:	08 95       	ret

000008e0 <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     8e0:	80 e7       	ldi	r24, 0x70	; 112
     8e2:	94 e0       	ldi	r25, 0x04	; 4
     8e4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8e8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     8ec:	81 df       	rcall	.-254    	; 0x7f0 <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     8ee:	8f e1       	ldi	r24, 0x1F	; 31
     8f0:	99 e9       	ldi	r25, 0x99	; 153
     8f2:	6b df       	rcall	.-298    	; 0x7ca <display_write_string>
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
     8f4:	87 e8       	ldi	r24, 0x87	; 135
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     8fc:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
	button1_action = show_menu_sure_about_waking_bcu;
     900:	8e e9       	ldi	r24, 0x9E	; 158
     902:	94 e0       	ldi	r25, 0x04	; 4
     904:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     908:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
     90c:	08 95       	ret

0000090e <show_menu_sure_about_waking_bcu_and_backup>:
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}

void show_menu_sure_about_waking_bcu_and_backup() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     90e:	87 e8       	ldi	r24, 0x87	; 135
     910:	94 e0       	ldi	r25, 0x04	; 4
     912:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     916:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     91a:	6a df       	rcall	.-300    	; 0x7f0 <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     91c:	81 e4       	ldi	r24, 0x41	; 65
     91e:	99 e9       	ldi	r25, 0x99	; 153
     920:	54 df       	rcall	.-344    	; 0x7ca <display_write_string>
	button0_action = wake_bcu_and_do_backup_now;
     922:	8e ec       	ldi	r24, 0xCE	; 206
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     92a:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
	button1_action = back_to_main_menu;
     92e:	88 e5       	ldi	r24, 0x58	; 88
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     936:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
     93a:	08 95       	ret

0000093c <show_menu_sure_about_waking_bcu>:
}

void show_menu_sure_about_waking_bcu() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     93c:	87 e8       	ldi	r24, 0x87	; 135
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     944:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     948:	53 df       	rcall	.-346    	; 0x7f0 <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     94a:	81 e4       	ldi	r24, 0x41	; 65
     94c:	99 e9       	ldi	r25, 0x99	; 153
     94e:	3d df       	rcall	.-390    	; 0x7ca <display_write_string>
	button0_action = wake_bcu;
     950:	8a ed       	ldi	r24, 0xDA	; 218
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     958:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
	button1_action = back_to_main_menu;
     95c:	88 e5       	ldi	r24, 0x58	; 88
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     964:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
     968:	08 95       	ret

0000096a <show_menu_timestamp>:
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
	show_menu = show_menu_timestamp;
     96a:	85 eb       	ldi	r24, 0xB5	; 181
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     972:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     976:	3c df       	rcall	.-392    	; 0x7f0 <display_clear>
	display_write_string(""); //Todo: render ETA here!
     978:	8c e9       	ldi	r24, 0x9C	; 156
     97a:	98 e9       	ldi	r25, 0x98	; 152
     97c:	26 df       	rcall	.-436    	; 0x7ca <display_write_string>
	display_next_line();
     97e:	1b df       	rcall	.-458    	; 0x7b6 <display_next_line>
	display_write_string(human_readable_timestamp_next_bu);
     980:	81 e2       	ldi	r24, 0x21	; 33
     982:	9e e3       	ldi	r25, 0x3E	; 62
     984:	22 df       	rcall	.-444    	; 0x7ca <display_write_string>
	button0_action = back_to_main_menu;
     986:	88 e5       	ldi	r24, 0x58	; 88
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <button0_action>
     98e:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <button0_action+0x1>
	button1_action = back_to_main_menu;
     992:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button1_action>
     996:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button1_action+0x1>
     99a:	08 95       	ret

0000099c <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     99c:	29 df       	rcall	.-430    	; 0x7f0 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     99e:	83 e6       	ldi	r24, 0x63	; 99
     9a0:	99 e9       	ldi	r25, 0x99	; 153
     9a2:	13 df       	rcall	.-474    	; 0x7ca <display_write_string>
	flag_schedule_backup_now = true;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_schedule_backup_now>
	next_pwr_state = active;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     9b0:	3d d0       	rcall	.+122    	; 0xa2c <transition_to_pwr_state>
     9b2:	08 95       	ret

000009b4 <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     9b4:	1d df       	rcall	.-454    	; 0x7f0 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     9b6:	83 e6       	ldi	r24, 0x63	; 99
     9b8:	99 e9       	ldi	r25, 0x99	; 153
     9ba:	07 df       	rcall	.-498    	; 0x7ca <display_write_string>
	next_pwr_state = active;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     9c2:	34 d0       	rcall	.+104    	; 0xa2c <transition_to_pwr_state>
     9c4:	08 95       	ret

000009c6 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     9c6:	e0 e0       	ldi	r30, 0x00	; 0
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	84 81       	ldd	r24, Z+4	; 0x04
     9cc:	80 61       	ori	r24, 0x10	; 16
     9ce:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     9d6:	08 95       	ret

000009d8 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     9d8:	e0 e0       	ldi	r30, 0x00	; 0
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	84 81       	ldd	r24, Z+4	; 0x04
     9de:	8f 7e       	andi	r24, 0xEF	; 239
     9e0:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     9e2:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     9e6:	08 95       	ret

000009e8 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     9e8:	e0 e2       	ldi	r30, 0x20	; 32
     9ea:	f4 e0       	ldi	r31, 0x04	; 4
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	8d 7f       	andi	r24, 0xFD	; 253
     9f0:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     9f8:	08 95       	ret

000009fa <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     9fa:	e0 e2       	ldi	r30, 0x20	; 32
     9fc:	f4 e0       	ldi	r31, 0x04	; 4
     9fe:	84 81       	ldd	r24, Z+4	; 0x04
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     a04:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     a08:	08 95       	ret

00000a0a <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     a0a:	f2 de       	rcall	.-540    	; 0x7f0 <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     a0c:	83 e8       	ldi	r24, 0x83	; 131
     a0e:	99 e9       	ldi	r25, 0x99	; 153
     a10:	dc de       	rcall	.-584    	; 0x7ca <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     a12:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <flag_bpi_heartbeat_ok>
     a16:	81 11       	cpse	r24, r1
     a18:	fe cf       	rjmp	.-4      	; 0xa16 <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     a1a:	ea de       	rcall	.-556    	; 0x7f0 <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     a1c:	8e e9       	ldi	r24, 0x9E	; 158
     a1e:	99 e9       	ldi	r25, 0x99	; 153
     a20:	d4 de       	rcall	.-600    	; 0x7ca <display_write_string>
	while (vcc3v3_present() == true) {
     a22:	6c db       	rcall	.-2344   	; 0xfc <vcc3v3_present>
     a24:	81 11       	cpse	r24, r1
     a26:	fd cf       	rjmp	.-6      	; 0xa22 <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	08 95       	ret

00000a2c <transition_to_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void transition_to_pwr_state(enum pwr_states pwr_state) {
     a2c:	cf 93       	push	r28
	switch(pwr_state) {
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	89 f0       	breq	.+34     	; 0xa54 <transition_to_pwr_state+0x28>
     a32:	18 f0       	brcs	.+6      	; 0xa3a <transition_to_pwr_state+0xe>
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	f9 f0       	breq	.+62     	; 0xa76 <transition_to_pwr_state+0x4a>
     a38:	35 c0       	rjmp	.+106    	; 0xaa4 <transition_to_pwr_state+0x78>
		case standby:
			wait_until_bpi_ready_for_shutdown();
     a3a:	e7 df       	rcall	.-50     	; 0xa0a <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     a3c:	de df       	rcall	.-68     	; 0x9fa <disable_bpi_sply>
			dim_display(0);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	af db       	rcall	.-2210   	; 0x1a2 <dim_display>
			led_hmi_off();
     a44:	23 df       	rcall	.-442    	; 0x88c <led_hmi_off>
			disable_5v0_smps();
     a46:	c8 df       	rcall	.-112    	; 0x9d8 <disable_5v0_smps>
			flag_goto_sleep = true;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
			current_pwr_state = standby;
     a4e:	10 92 20 3e 	sts	0x3E20, r1	; 0x803e20 <current_pwr_state>
			break;
     a52:	28 c0       	rjmp	.+80     	; 0xaa4 <transition_to_pwr_state+0x78>
		
		case display_on:
			current_pwr_state = display_on;
     a54:	c1 e0       	ldi	r28, 0x01	; 1
     a56:	c0 93 20 3e 	sts	0x3E20, r28	; 0x803e20 <current_pwr_state>
			set_interrupts_for_buttons();
     a5a:	9a db       	rcall	.-2252   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     a5c:	b4 df       	rcall	.-152    	; 0x9c6 <enable_5v0_smps>
     a5e:	86 e4       	ldi	r24, 0x46	; 70
     a60:	90 e1       	ldi	r25, 0x10	; 16
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <transition_to_pwr_state+0x36>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <transition_to_pwr_state+0x3c>
			_delay_ms(5);
			init_display();
     a68:	00 de       	rcall	.-1024   	; 0x66a <init_display>
			flag_entering_mainloop_display_on = true;
     a6a:	c0 93 08 3e 	sts	0x3E08, r28	; 0x803e08 <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     a6e:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_wakeup_by_rtc>
     a72:	88 23       	and	r24, r24
     a74:	b9 f0       	breq	.+46     	; 0xaa4 <transition_to_pwr_state+0x78>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     a76:	80 e1       	ldi	r24, 0x10	; 16
     a78:	e8 eb       	ldi	r30, 0xB8	; 184
     a7a:	f9 e9       	ldi	r31, 0x99	; 153
     a7c:	a8 e5       	ldi	r26, 0x58	; 88
     a7e:	be e3       	ldi	r27, 0x3E	; 62
     a80:	01 90       	ld	r0, Z+
     a82:	0d 92       	st	X+, r0
     a84:	8a 95       	dec	r24
     a86:	e1 f7       	brne	.-8      	; 0xa80 <transition_to_pwr_state+0x54>
			strcpy(display_line2_content,"Please wait ...");
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	e8 ec       	ldi	r30, 0xC8	; 200
     a8c:	f9 e9       	ldi	r31, 0x99	; 153
     a8e:	a2 e4       	ldi	r26, 0x42	; 66
     a90:	be e3       	ldi	r27, 0x3E	; 62
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	8a 95       	dec	r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <transition_to_pwr_state+0x66>
			enable_5v0_smps();
     a9a:	95 df       	rcall	.-214    	; 0x9c6 <enable_5v0_smps>
			enable_bpi_sply();
     a9c:	a5 df       	rcall	.-182    	; 0x9e8 <enable_bpi_sply>
			current_pwr_state = active;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <current_pwr_state>
			break;
	}
}
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     aa8:	e0 e4       	ldi	r30, 0x40	; 64
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	10 86       	std	Z+8, r1	; 0x08
     aae:	11 86       	std	Z+9, r1	; 0x09
     ab0:	08 95       	ret

00000ab2 <rtc_wait_for_all_status_bits_zero>:
     ab2:	e0 e4       	ldi	r30, 0x40	; 64
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	81 11       	cpse	r24, r1
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <rtc_wait_for_all_status_bits_zero+0x4>
     abc:	08 95       	ret

00000abe <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     abe:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     ac2:	f7 df       	rcall	.-18     	; 0xab2 <rtc_wait_for_all_status_bits_zero>
void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	//RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc; // <- one counter increment represents 32 seconds
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV1024_gc | RTC_RTCEN_bm; // <- 1 second
     ac4:	e0 e4       	ldi	r30, 0x40	; 64
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	81 ed       	ldi	r24, 0xD1	; 209
     aca:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	87 83       	std	Z+7, r24	; 0x07
     ad4:	08 95       	ret

00000ad6 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     ade:	c0 90 53 3e 	lds	r12, 0x3E53	; 0x803e53 <seconds_to_next_bu>
     ae2:	d0 90 54 3e 	lds	r13, 0x3E54	; 0x803e54 <seconds_to_next_bu+0x1>
     ae6:	e0 90 55 3e 	lds	r14, 0x3E55	; 0x803e55 <seconds_to_next_bu+0x2>
     aea:	f0 90 56 3e 	lds	r15, 0x3E56	; 0x803e56 <seconds_to_next_bu+0x3>
     aee:	ff 20       	and	r15, r15
     af0:	2c f4       	brge	.+10     	; 0xafc <rtc_write_seconds_to_cmp+0x26>
     af2:	8f e1       	ldi	r24, 0x1F	; 31
     af4:	c8 0e       	add	r12, r24
     af6:	d1 1c       	adc	r13, r1
     af8:	e1 1c       	adc	r14, r1
     afa:	f1 1c       	adc	r15, r1
     afc:	68 94       	set
     afe:	14 f8       	bld	r1, 4
     b00:	f5 94       	asr	r15
     b02:	e7 94       	ror	r14
     b04:	d7 94       	ror	r13
     b06:	c7 94       	ror	r12
     b08:	16 94       	lsr	r1
     b0a:	d1 f7       	brne	.-12     	; 0xb00 <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     b0c:	ff 92       	push	r15
     b0e:	ef 92       	push	r14
     b10:	df 92       	push	r13
     b12:	cf 92       	push	r12
     b14:	88 ed       	ldi	r24, 0xD8	; 216
     b16:	99 e9       	ldi	r25, 0x99	; 153
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	89 e8       	ldi	r24, 0x89	; 137
     b1e:	9e e3       	ldi	r25, 0x3E	; 62
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	7c d3       	rcall	.+1784   	; 0x121e <sprintf>
	USART0_sendString_w_newline_eol(buffer);
     b26:	89 e8       	ldi	r24, 0x89	; 137
     b28:	9e e3       	ldi	r25, 0x3E	; 62
     b2a:	7b d0       	rcall	.+246    	; 0xc22 <USART0_sendString_w_newline_eol>
	rtc_reset_counter();
     b2c:	bd df       	rcall	.-134    	; 0xaa8 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     b2e:	8c 2d       	mov	r24, r12
     b30:	9d 2d       	mov	r25, r13
     b32:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b36:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	08 96       	adiw	r24, 0x08	; 8
     b40:	8d bf       	out	0x3d, r24	; 61
     b42:	9e bf       	out	0x3e, r25	; 62
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	08 95       	ret

00000b4e <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	2f 93       	push	r18
     b5a:	3f 93       	push	r19
     b5c:	4f 93       	push	r20
     b5e:	5f 93       	push	r21
     b60:	6f 93       	push	r22
     b62:	7f 93       	push	r23
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	83 81       	ldd	r24, Z+3	; 0x03
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     b7a:	85 ef       	ldi	r24, 0xF5	; 245
     b7c:	99 e9       	ldi	r25, 0x99	; 153
     b7e:	30 d0       	rcall	.+96     	; 0xbe0 <USART0_sendString>
	flag_wakeup_by_rtc = true;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     b86:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     b8a:	50 df       	rcall	.-352    	; 0xa2c <transition_to_pwr_state>
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     bae:	e0 e0       	ldi	r30, 0x00	; 0
     bb0:	f8 e0       	ldi	r31, 0x08	; 8
     bb2:	85 81       	ldd	r24, Z+5	; 0x05
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	85 83       	std	Z+5, r24	; 0x05
     bb8:	08 95       	ret

00000bba <init_uart>:
     bba:	22 db       	rcall	.-2492   	; 0x200 <set_pb2_txd_and_pb3_rxd>
     bbc:	e0 e0       	ldi	r30, 0x00	; 0
     bbe:	f8 e0       	ldi	r31, 0x08	; 8
     bc0:	8c e6       	ldi	r24, 0x6C	; 108
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	80 87       	std	Z+8, r24	; 0x08
     bc6:	91 87       	std	Z+9, r25	; 0x09
     bc8:	80 ec       	ldi	r24, 0xC0	; 192
     bca:	86 83       	std	Z+6, r24	; 0x06
     bcc:	f0 df       	rcall	.-32     	; 0xbae <USART0_enable_rx_complete_interrupt>
     bce:	08 95       	ret

00000bd0 <USART0_sendChar>:
     bd0:	e0 e0       	ldi	r30, 0x00	; 0
     bd2:	f8 e0       	ldi	r31, 0x08	; 8
     bd4:	94 81       	ldd	r25, Z+4	; 0x04
     bd6:	95 ff       	sbrs	r25, 5
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <USART0_sendChar+0x4>
     bda:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     bde:	08 95       	ret

00000be0 <USART0_sendString>:
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	8c 01       	movw	r16, r24
     bee:	7c 01       	movw	r14, r24
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <USART0_sendString+0x20>
     bf6:	f7 01       	movw	r30, r14
     bf8:	81 91       	ld	r24, Z+
     bfa:	7f 01       	movw	r14, r30
     bfc:	e9 df       	rcall	.-46     	; 0xbd0 <USART0_sendChar>
     bfe:	21 96       	adiw	r28, 0x01	; 1
     c00:	f8 01       	movw	r30, r16
     c02:	01 90       	ld	r0, Z+
     c04:	00 20       	and	r0, r0
     c06:	e9 f7       	brne	.-6      	; 0xc02 <USART0_sendString+0x22>
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	e0 1b       	sub	r30, r16
     c0c:	f1 0b       	sbc	r31, r17
     c0e:	ce 17       	cp	r28, r30
     c10:	df 07       	cpc	r29, r31
     c12:	88 f3       	brcs	.-30     	; 0xbf6 <USART0_sendString+0x16>
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <USART0_sendString_w_newline_eol>:
     c22:	de df       	rcall	.-68     	; 0xbe0 <USART0_sendString>
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	d4 df       	rcall	.-88     	; 0xbd0 <USART0_sendChar>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	d2 df       	rcall	.-92     	; 0xbd0 <USART0_sendChar>
     c2c:	08 95       	ret

00000c2e <USART0_send_ready>:
     c2e:	8a ef       	ldi	r24, 0xFA	; 250
     c30:	99 e9       	ldi	r25, 0x99	; 153
     c32:	f7 df       	rcall	.-18     	; 0xc22 <USART0_sendString_w_newline_eol>
     c34:	08 95       	ret

00000c36 <USART0_read>:
     c36:	e0 e0       	ldi	r30, 0x00	; 0
     c38:	f8 e0       	ldi	r31, 0x08	; 8
     c3a:	84 81       	ldd	r24, Z+4	; 0x04
     c3c:	88 23       	and	r24, r24
     c3e:	ec f7       	brge	.-6      	; 0xc3a <USART0_read+0x4>
     c40:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     c44:	08 95       	ret

00000c46 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	7c 01       	movw	r14, r24
     c58:	6b 01       	movw	r12, r22
     c5a:	61 32       	cpi	r22, 0x21	; 33
     c5c:	71 05       	cpc	r23, r1
     c5e:	24 f0       	brlt	.+8      	; 0xc68 <USART0_read_string+0x22>
     c60:	68 94       	set
     c62:	cc 24       	eor	r12, r12
     c64:	c5 f8       	bld	r12, 5
     c66:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c68:	dd 20       	and	r13, r13
     c6a:	c4 f0       	brlt	.+48     	; 0xc9c <USART0_read_string+0x56>
     c6c:	e7 01       	movw	r28, r14
     c6e:	00 e0       	ldi	r16, 0x00	; 0
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	7e 01       	movw	r14, r28
		i++;
     c74:	0f 5f       	subi	r16, 0xFF	; 255
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     c78:	de df       	rcall	.-68     	; 0xc36 <USART0_read>
     c7a:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     c7c:	8a 30       	cpi	r24, 0x0A	; 10
     c7e:	21 f0       	breq	.+8      	; 0xc88 <USART0_read_string+0x42>
     c80:	88 23       	and	r24, r24
     c82:	11 f0       	breq	.+4      	; 0xc88 <USART0_read_string+0x42>
     c84:	8d 30       	cpi	r24, 0x0D	; 13
     c86:	31 f4       	brne	.+12     	; 0xc94 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     c88:	f7 01       	movw	r30, r14
     c8a:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     c8c:	c0 16       	cp	r12, r16
     c8e:	d1 06       	cpc	r13, r17
     c90:	3c f4       	brge	.+14     	; 0xca0 <USART0_read_string+0x5a>
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     c94:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c96:	c0 16       	cp	r12, r16
     c98:	d1 06       	cpc	r13, r17
     c9a:	5c f7       	brge	.-42     	; 0xc72 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     c9c:	f7 01       	movw	r30, r14
     c9e:	10 82       	st	Z, r1
	}
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	08 95       	ret

00000cb2 <convert_str_to_long>:
		USART0_sendString_w_newline_eol("ACK:DL");
		flag_dim_hmi_led = true;
	}
}

long convert_str_to_long(char *str) {
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	00 d0       	rcall	.+0      	; 0xcbc <convert_str_to_long+0xa>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	08 2f       	mov	r16, r24
     cc2:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	9a e9       	ldi	r25, 0x9A	; 154
     ccc:	9f 93       	push	r25
     cce:	8f 93       	push	r24
     cd0:	93 d2       	rcall	.+1318   	; 0x11f8 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     cd2:	4a e0       	ldi	r20, 0x0A	; 10
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	be 01       	movw	r22, r28
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	80 2f       	mov	r24, r16
     cde:	91 2f       	mov	r25, r17
     ce0:	36 d1       	rcall	.+620    	; 0xf4e <strtol>
	return ret;
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     d00:	6f e0       	ldi	r22, 0x0F	; 15
     d02:	7a e9       	ldi	r23, 0x9A	; 154
     d04:	89 e6       	ldi	r24, 0x69	; 105
     d06:	9e e3       	ldi	r25, 0x3E	; 62
     d08:	40 d2       	rcall	.+1152   	; 0x118a <strcmp>
     d0a:	89 2b       	or	r24, r25
     d0c:	19 f4       	brne	.+6      	; 0xd14 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_newline_eol("Echo");
     d0e:	84 e1       	ldi	r24, 0x14	; 20
     d10:	9a e9       	ldi	r25, 0x9A	; 154
     d12:	87 df       	rcall	.-242    	; 0xc22 <USART0_sendString_w_newline_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     d14:	69 e1       	ldi	r22, 0x19	; 25
     d16:	7a e9       	ldi	r23, 0x9A	; 154
     d18:	89 e6       	ldi	r24, 0x69	; 105
     d1a:	9e e3       	ldi	r25, 0x3E	; 62
     d1c:	32 d2       	rcall	.+1124   	; 0x1182 <strtok>
     d1e:	d8 2f       	mov	r29, r24
     d20:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     d22:	6a e5       	ldi	r22, 0x5A	; 90
     d24:	78 e9       	ldi	r23, 0x98	; 152
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2b d2       	rcall	.+1110   	; 0x1182 <strtok>
     d2c:	08 2f       	mov	r16, r24
     d2e:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	8b e1       	ldi	r24, 0x1B	; 27
     d3a:	9a e9       	ldi	r25, 0x9A	; 154
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	89 e8       	ldi	r24, 0x89	; 137
     d42:	9e e3       	ldi	r25, 0x3E	; 62
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	6a d2       	rcall	.+1236   	; 0x121e <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     d4a:	6f e2       	ldi	r22, 0x2F	; 47
     d4c:	7a e9       	ldi	r23, 0x9A	; 154
     d4e:	8d 2f       	mov	r24, r29
     d50:	9c 2f       	mov	r25, r28
     d52:	1b d2       	rcall	.+1078   	; 0x118a <strcmp>
     d54:	2d b7       	in	r18, 0x3d	; 61
     d56:	3e b7       	in	r19, 0x3e	; 62
     d58:	28 5f       	subi	r18, 0xF8	; 248
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	2d bf       	out	0x3d, r18	; 61
     d5e:	3e bf       	out	0x3e, r19	; 62
     d60:	89 2b       	or	r24, r25
     d62:	41 f4       	brne	.+16     	; 0xd74 <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_newline_eol("ACK:D1");
     d64:	8b e2       	ldi	r24, 0x2B	; 43
     d66:	9a e9       	ldi	r25, 0x9A	; 154
     d68:	5c df       	rcall	.-328    	; 0xc22 <USART0_sendString_w_newline_eol>
		strcpy(display_line1_content, payload);
     d6a:	60 2f       	mov	r22, r16
     d6c:	71 2f       	mov	r23, r17
     d6e:	88 e5       	ldi	r24, 0x58	; 88
     d70:	9e e3       	ldi	r25, 0x3E	; 62
     d72:	14 d2       	rcall	.+1064   	; 0x119c <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     d74:	66 e3       	ldi	r22, 0x36	; 54
     d76:	7a e9       	ldi	r23, 0x9A	; 154
     d78:	8d 2f       	mov	r24, r29
     d7a:	9c 2f       	mov	r25, r28
     d7c:	06 d2       	rcall	.+1036   	; 0x118a <strcmp>
     d7e:	89 2b       	or	r24, r25
     d80:	59 f4       	brne	.+22     	; 0xd98 <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_newline_eol("ACK:D2");
     d82:	82 e3       	ldi	r24, 0x32	; 50
     d84:	9a e9       	ldi	r25, 0x9A	; 154
     d86:	4d df       	rcall	.-358    	; 0xc22 <USART0_sendString_w_newline_eol>
		strcpy(display_line2_content, payload);
     d88:	60 2f       	mov	r22, r16
     d8a:	71 2f       	mov	r23, r17
     d8c:	82 e4       	ldi	r24, 0x42	; 66
     d8e:	9e e3       	ldi	r25, 0x3E	; 62
     d90:	05 d2       	rcall	.+1034   	; 0x119c <strcpy>
		flag_string_for_display_received = true;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     d98:	61 e6       	ldi	r22, 0x61	; 97
     d9a:	78 e9       	ldi	r23, 0x98	; 152
     d9c:	8d 2f       	mov	r24, r29
     d9e:	9c 2f       	mov	r25, r28
     da0:	f4 d1       	rcall	.+1000   	; 0x118a <strcmp>
     da2:	89 2b       	or	r24, r25
     da4:	29 f4       	brne	.+10     	; 0xdb0 <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_pwr_state_change_request>
		next_pwr_state = standby;
     dac:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     db0:	69 e3       	ldi	r22, 0x39	; 57
     db2:	7a e9       	ldi	r23, 0x9A	; 154
     db4:	8d 2f       	mov	r24, r29
     db6:	9c 2f       	mov	r25, r28
     db8:	e8 d1       	rcall	.+976    	; 0x118a <strcmp>
     dba:	89 2b       	or	r24, r25
     dbc:	11 f5       	brne	.+68     	; 0xe02 <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     dbe:	1f 93       	push	r17
     dc0:	0f 93       	push	r16
     dc2:	8c e3       	ldi	r24, 0x3C	; 60
     dc4:	9a e9       	ldi	r25, 0x9A	; 154
     dc6:	9f 93       	push	r25
     dc8:	8f 93       	push	r24
     dca:	89 e8       	ldi	r24, 0x89	; 137
     dcc:	9e e3       	ldi	r25, 0x3E	; 62
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	25 d2       	rcall	.+1098   	; 0x121e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     dd4:	89 e8       	ldi	r24, 0x89	; 137
     dd6:	9e e3       	ldi	r25, 0x3E	; 62
     dd8:	24 df       	rcall	.-440    	; 0xc22 <USART0_sendString_w_newline_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     dda:	80 2f       	mov	r24, r16
     ddc:	91 2f       	mov	r25, r17
     dde:	69 df       	rcall	.-302    	; 0xcb2 <convert_str_to_long>
     de0:	60 93 53 3e 	sts	0x3E53, r22	; 0x803e53 <seconds_to_next_bu>
     de4:	70 93 54 3e 	sts	0x3E54, r23	; 0x803e54 <seconds_to_next_bu+0x1>
     de8:	80 93 55 3e 	sts	0x3E55, r24	; 0x803e55 <seconds_to_next_bu+0x2>
     dec:	90 93 56 3e 	sts	0x3E56, r25	; 0x803e56 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_received_seconds_to_next_bu>
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     e02:	67 e4       	ldi	r22, 0x47	; 71
     e04:	7a e9       	ldi	r23, 0x9A	; 154
     e06:	8d 2f       	mov	r24, r29
     e08:	9c 2f       	mov	r25, r28
     e0a:	bf d1       	rcall	.+894    	; 0x118a <strcmp>
     e0c:	89 2b       	or	r24, r25
     e0e:	59 f4       	brne	.+22     	; 0xe26 <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     e10:	60 2f       	mov	r22, r16
     e12:	71 2f       	mov	r23, r17
     e14:	81 e2       	ldi	r24, 0x21	; 33
     e16:	9e e3       	ldi	r25, 0x3E	; 62
     e18:	c1 d1       	rcall	.+898    	; 0x119c <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	80 93 31 3e 	sts	0x3E31, r24	; 0x803e31 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     e26:	6a e4       	ldi	r22, 0x4A	; 74
     e28:	7a e9       	ldi	r23, 0x9A	; 154
     e2a:	8d 2f       	mov	r24, r29
     e2c:	9c 2f       	mov	r25, r28
     e2e:	ad d1       	rcall	.+858    	; 0x118a <strcmp>
     e30:	89 2b       	or	r24, r25
     e32:	19 f4       	brne	.+6      	; 0xe3a <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     e3a:	61 e5       	ldi	r22, 0x51	; 81
     e3c:	7a e9       	ldi	r23, 0x9A	; 154
     e3e:	8d 2f       	mov	r24, r29
     e40:	9c 2f       	mov	r25, r28
     e42:	a3 d1       	rcall	.+838    	; 0x118a <strcmp>
     e44:	89 2b       	or	r24, r25
     e46:	31 f4       	brne	.+12     	; 0xe54 <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_newline_eol("ACK:CC");
     e48:	8d e4       	ldi	r24, 0x4D	; 77
     e4a:	9a e9       	ldi	r25, 0x9A	; 154
     e4c:	ea de       	rcall	.-556    	; 0xc22 <USART0_sendString_w_newline_eol>
		flag_request_current_measurement = true;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     e54:	68 e5       	ldi	r22, 0x58	; 88
     e56:	7a e9       	ldi	r23, 0x9A	; 154
     e58:	8d 2f       	mov	r24, r29
     e5a:	9c 2f       	mov	r25, r28
     e5c:	96 d1       	rcall	.+812    	; 0x118a <strcmp>
     e5e:	89 2b       	or	r24, r25
     e60:	31 f4       	brne	.+12     	; 0xe6e <USART0_process_incoming_message+0x176>
		USART0_sendString_w_newline_eol("ACK:TP");
     e62:	84 e5       	ldi	r24, 0x54	; 84
     e64:	9a e9       	ldi	r25, 0x9A	; 154
     e66:	dd de       	rcall	.-582    	; 0xc22 <USART0_sendString_w_newline_eol>
		flag_request_temperature_measurement = true;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     e6e:	6f e5       	ldi	r22, 0x5F	; 95
     e70:	7a e9       	ldi	r23, 0x9A	; 154
     e72:	8d 2f       	mov	r24, r29
     e74:	9c 2f       	mov	r25, r28
     e76:	89 d1       	rcall	.+786    	; 0x118a <strcmp>
     e78:	89 2b       	or	r24, r25
     e7a:	31 f4       	brne	.+12     	; 0xe88 <USART0_process_incoming_message+0x190>
		USART0_sendString_w_newline_eol("ACK:3V");
     e7c:	8b e5       	ldi	r24, 0x5B	; 91
     e7e:	9a e9       	ldi	r25, 0x9A	; 154
     e80:	d0 de       	rcall	.-608    	; 0xc22 <USART0_sendString_w_newline_eol>
		flag_request_3v3_measurement = true;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
     e88:	66 e6       	ldi	r22, 0x66	; 102
     e8a:	7a e9       	ldi	r23, 0x9A	; 154
     e8c:	8d 2f       	mov	r24, r29
     e8e:	9c 2f       	mov	r25, r28
     e90:	7c d1       	rcall	.+760    	; 0x118a <strcmp>
     e92:	89 2b       	or	r24, r25
     e94:	61 f4       	brne	.+24     	; 0xeae <USART0_process_incoming_message+0x1b6>
		USART0_sendString_w_newline_eol("ACK:ON");
     e96:	82 e6       	ldi	r24, 0x62	; 98
     e98:	9a e9       	ldi	r25, 0x9A	; 154
     e9a:	c3 de       	rcall	.-634    	; 0xc22 <USART0_sendString_w_newline_eol>
		if(flag_schedule_backup_now) {
     e9c:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_schedule_backup_now>
     ea0:	88 23       	and	r24, r24
     ea2:	29 f0       	breq	.+10     	; 0xeae <USART0_process_incoming_message+0x1b6>
			flag_schedule_backup_now = false;
     ea4:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_schedule_backup_now>
			USART0_sendString_w_newline_eol("User Backup");
     ea8:	89 e6       	ldi	r24, 0x69	; 105
     eaa:	9a e9       	ldi	r25, 0x9A	; 154
     eac:	ba de       	rcall	.-652    	; 0xc22 <USART0_sendString_w_newline_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
     eae:	69 e7       	ldi	r22, 0x79	; 121
     eb0:	7a e9       	ldi	r23, 0x9A	; 154
     eb2:	8d 2f       	mov	r24, r29
     eb4:	9c 2f       	mov	r25, r28
     eb6:	69 d1       	rcall	.+722    	; 0x118a <strcmp>
     eb8:	89 2b       	or	r24, r25
     eba:	69 f4       	brne	.+26     	; 0xed6 <USART0_process_incoming_message+0x1de>
		USART0_sendString_w_newline_eol("ACK:DB");
     ebc:	85 e7       	ldi	r24, 0x75	; 117
     ebe:	9a e9       	ldi	r25, 0x9A	; 154
     ec0:	b0 de       	rcall	.-672    	; 0xc22 <USART0_sendString_w_newline_eol>
		dimming_value_display = convert_str_to_long(payload);
     ec2:	80 2f       	mov	r24, r16
     ec4:	91 2f       	mov	r25, r17
     ec6:	f5 de       	rcall	.-534    	; 0xcb2 <convert_str_to_long>
     ec8:	60 93 1e 3e 	sts	0x3E1E, r22	; 0x803e1e <dimming_value_display>
     ecc:	70 93 1f 3e 	sts	0x3E1F, r23	; 0x803e1f <dimming_value_display+0x1>
		flag_dim_display = true;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_dim_display>
	}
	
	if(strcmp(message_code, "DL") == 0) {
     ed6:	60 e8       	ldi	r22, 0x80	; 128
     ed8:	7a e9       	ldi	r23, 0x9A	; 154
     eda:	8d 2f       	mov	r24, r29
     edc:	9c 2f       	mov	r25, r28
     ede:	55 d1       	rcall	.+682    	; 0x118a <strcmp>
     ee0:	89 2b       	or	r24, r25
     ee2:	31 f4       	brne	.+12     	; 0xef0 <USART0_process_incoming_message+0x1f8>
		USART0_sendString_w_newline_eol("ACK:DL");
     ee4:	8c e7       	ldi	r24, 0x7C	; 124
     ee6:	9a e9       	ldi	r25, 0x9A	; 154
     ee8:	9c de       	rcall	.-712    	; 0xc22 <USART0_sendString_w_newline_eol>
		flag_dim_hmi_led = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_dim_hmi_led>
	}
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     f1c:	60 e2       	ldi	r22, 0x20	; 32
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	89 e6       	ldi	r24, 0x69	; 105
     f22:	9e e3       	ldi	r25, 0x3E	; 62
     f24:	90 de       	rcall	.-736    	; 0xc46 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_usart_string_receive_complete>
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <strtol>:
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ec ea       	ldi	r30, 0xAC	; 172
     f54:	f7 e0       	ldi	r31, 0x07	; 7
     f56:	43 c4       	rjmp	.+2182   	; 0x17de <__prologue_saves__+0x2>
     f58:	5c 01       	movw	r10, r24
     f5a:	6b 01       	movw	r12, r22
     f5c:	7a 01       	movw	r14, r20
     f5e:	61 15       	cp	r22, r1
     f60:	71 05       	cpc	r23, r1
     f62:	19 f0       	breq	.+6      	; 0xf6a <strtol+0x1c>
     f64:	fb 01       	movw	r30, r22
     f66:	80 83       	st	Z, r24
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	e1 14       	cp	r14, r1
     f6c:	f1 04       	cpc	r15, r1
     f6e:	29 f0       	breq	.+10     	; 0xf7a <strtol+0x2c>
     f70:	c7 01       	movw	r24, r14
     f72:	02 97       	sbiw	r24, 0x02	; 2
     f74:	83 97       	sbiw	r24, 0x23	; 35
     f76:	08 f0       	brcs	.+2      	; 0xf7a <strtol+0x2c>
     f78:	e2 c0       	rjmp	.+452    	; 0x113e <strtol+0x1f0>
     f7a:	e5 01       	movw	r28, r10
     f7c:	21 96       	adiw	r28, 0x01	; 1
     f7e:	f5 01       	movw	r30, r10
     f80:	10 81       	ld	r17, Z
     f82:	81 2f       	mov	r24, r17
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	f4 d0       	rcall	.+488    	; 0x1170 <isspace>
     f88:	89 2b       	or	r24, r25
     f8a:	11 f0       	breq	.+4      	; 0xf90 <strtol+0x42>
     f8c:	5e 01       	movw	r10, r28
     f8e:	f5 cf       	rjmp	.-22     	; 0xf7a <strtol+0x2c>
     f90:	1d 32       	cpi	r17, 0x2D	; 45
     f92:	29 f4       	brne	.+10     	; 0xf9e <strtol+0x50>
     f94:	21 96       	adiw	r28, 0x01	; 1
     f96:	f5 01       	movw	r30, r10
     f98:	11 81       	ldd	r17, Z+1	; 0x01
     f9a:	01 e0       	ldi	r16, 0x01	; 1
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <strtol+0x5e>
     f9e:	1b 32       	cpi	r17, 0x2B	; 43
     fa0:	21 f4       	brne	.+8      	; 0xfaa <strtol+0x5c>
     fa2:	e5 01       	movw	r28, r10
     fa4:	22 96       	adiw	r28, 0x02	; 2
     fa6:	f5 01       	movw	r30, r10
     fa8:	11 81       	ldd	r17, Z+1	; 0x01
     faa:	00 e0       	ldi	r16, 0x00	; 0
     fac:	e1 14       	cp	r14, r1
     fae:	f1 04       	cpc	r15, r1
     fb0:	09 f1       	breq	.+66     	; 0xff4 <strtol+0xa6>
     fb2:	f0 e1       	ldi	r31, 0x10	; 16
     fb4:	ef 16       	cp	r14, r31
     fb6:	f1 04       	cpc	r15, r1
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <strtol+0x76>
     fba:	3e c0       	rjmp	.+124    	; 0x1038 <strtol+0xea>
     fbc:	10 e3       	ldi	r17, 0x30	; 48
     fbe:	e1 14       	cp	r14, r1
     fc0:	f1 04       	cpc	r15, r1
     fc2:	21 f1       	breq	.+72     	; 0x100c <strtol+0xbe>
     fc4:	28 e0       	ldi	r18, 0x08	; 8
     fc6:	e2 16       	cp	r14, r18
     fc8:	f1 04       	cpc	r15, r1
     fca:	01 f1       	breq	.+64     	; 0x100c <strtol+0xbe>
     fcc:	54 f4       	brge	.+20     	; 0xfe2 <strtol+0x94>
     fce:	e2 e0       	ldi	r30, 0x02	; 2
     fd0:	ee 16       	cp	r14, r30
     fd2:	f1 04       	cpc	r15, r1
     fd4:	21 f5       	brne	.+72     	; 0x101e <strtol+0xd0>
     fd6:	81 2c       	mov	r8, r1
     fd8:	91 2c       	mov	r9, r1
     fda:	a1 2c       	mov	r10, r1
     fdc:	b0 e4       	ldi	r27, 0x40	; 64
     fde:	bb 2e       	mov	r11, r27
     fe0:	3d c0       	rjmp	.+122    	; 0x105c <strtol+0x10e>
     fe2:	fa e0       	ldi	r31, 0x0A	; 10
     fe4:	ef 16       	cp	r14, r31
     fe6:	f1 04       	cpc	r15, r1
     fe8:	39 f0       	breq	.+14     	; 0xff8 <strtol+0xaa>
     fea:	20 e1       	ldi	r18, 0x10	; 16
     fec:	e2 16       	cp	r14, r18
     fee:	f1 04       	cpc	r15, r1
     ff0:	b1 f4       	brne	.+44     	; 0x101e <strtol+0xd0>
     ff2:	2f c0       	rjmp	.+94     	; 0x1052 <strtol+0x104>
     ff4:	10 33       	cpi	r17, 0x30	; 48
     ff6:	11 f1       	breq	.+68     	; 0x103c <strtol+0xee>
     ff8:	fa e0       	ldi	r31, 0x0A	; 10
     ffa:	ef 2e       	mov	r14, r31
     ffc:	f1 2c       	mov	r15, r1
     ffe:	ac ec       	ldi	r26, 0xCC	; 204
    1000:	8a 2e       	mov	r8, r26
    1002:	98 2c       	mov	r9, r8
    1004:	a8 2c       	mov	r10, r8
    1006:	ac e0       	ldi	r26, 0x0C	; 12
    1008:	ba 2e       	mov	r11, r26
    100a:	28 c0       	rjmp	.+80     	; 0x105c <strtol+0x10e>
    100c:	78 e0       	ldi	r23, 0x08	; 8
    100e:	e7 2e       	mov	r14, r23
    1010:	f1 2c       	mov	r15, r1
    1012:	81 2c       	mov	r8, r1
    1014:	91 2c       	mov	r9, r1
    1016:	a1 2c       	mov	r10, r1
    1018:	e0 e1       	ldi	r30, 0x10	; 16
    101a:	be 2e       	mov	r11, r30
    101c:	1f c0       	rjmp	.+62     	; 0x105c <strtol+0x10e>
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e8       	ldi	r25, 0x80	; 128
    1026:	97 01       	movw	r18, r14
    1028:	0f 2c       	mov	r0, r15
    102a:	00 0c       	add	r0, r0
    102c:	44 0b       	sbc	r20, r20
    102e:	55 0b       	sbc	r21, r21
    1030:	a9 d3       	rcall	.+1874   	; 0x1784 <__udivmodsi4>
    1032:	49 01       	movw	r8, r18
    1034:	5a 01       	movw	r10, r20
    1036:	12 c0       	rjmp	.+36     	; 0x105c <strtol+0x10e>
    1038:	10 33       	cpi	r17, 0x30	; 48
    103a:	59 f4       	brne	.+22     	; 0x1052 <strtol+0x104>
    103c:	88 81       	ld	r24, Y
    103e:	8f 7d       	andi	r24, 0xDF	; 223
    1040:	88 35       	cpi	r24, 0x58	; 88
    1042:	09 f0       	breq	.+2      	; 0x1046 <strtol+0xf8>
    1044:	bb cf       	rjmp	.-138    	; 0xfbc <strtol+0x6e>
    1046:	19 81       	ldd	r17, Y+1	; 0x01
    1048:	22 96       	adiw	r28, 0x02	; 2
    104a:	02 60       	ori	r16, 0x02	; 2
    104c:	80 e1       	ldi	r24, 0x10	; 16
    104e:	e8 2e       	mov	r14, r24
    1050:	f1 2c       	mov	r15, r1
    1052:	81 2c       	mov	r8, r1
    1054:	91 2c       	mov	r9, r1
    1056:	a1 2c       	mov	r10, r1
    1058:	68 e0       	ldi	r22, 0x08	; 8
    105a:	b6 2e       	mov	r11, r22
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	cb 01       	movw	r24, r22
    1064:	27 01       	movw	r4, r14
    1066:	0f 2c       	mov	r0, r15
    1068:	00 0c       	add	r0, r0
    106a:	66 08       	sbc	r6, r6
    106c:	77 08       	sbc	r7, r7
    106e:	fe 01       	movw	r30, r28
    1070:	50 ed       	ldi	r21, 0xD0	; 208
    1072:	35 2e       	mov	r3, r21
    1074:	31 0e       	add	r3, r17
    1076:	29 e0       	ldi	r18, 0x09	; 9
    1078:	23 15       	cp	r18, r3
    107a:	70 f4       	brcc	.+28     	; 0x1098 <strtol+0x14a>
    107c:	2f eb       	ldi	r18, 0xBF	; 191
    107e:	21 0f       	add	r18, r17
    1080:	2a 31       	cpi	r18, 0x1A	; 26
    1082:	18 f4       	brcc	.+6      	; 0x108a <strtol+0x13c>
    1084:	39 ec       	ldi	r19, 0xC9	; 201
    1086:	33 2e       	mov	r3, r19
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <strtol+0x148>
    108a:	2f e9       	ldi	r18, 0x9F	; 159
    108c:	21 0f       	add	r18, r17
    108e:	2a 31       	cpi	r18, 0x1A	; 26
    1090:	10 f5       	brcc	.+68     	; 0x10d6 <strtol+0x188>
    1092:	29 ea       	ldi	r18, 0xA9	; 169
    1094:	32 2e       	mov	r3, r18
    1096:	31 0e       	add	r3, r17
    1098:	23 2d       	mov	r18, r3
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	2e 15       	cp	r18, r14
    109e:	3f 05       	cpc	r19, r15
    10a0:	d4 f4       	brge	.+52     	; 0x10d6 <strtol+0x188>
    10a2:	47 fd       	sbrc	r20, 7
    10a4:	15 c0       	rjmp	.+42     	; 0x10d0 <strtol+0x182>
    10a6:	86 16       	cp	r8, r22
    10a8:	97 06       	cpc	r9, r23
    10aa:	a8 06       	cpc	r10, r24
    10ac:	b9 06       	cpc	r11, r25
    10ae:	68 f0       	brcs	.+26     	; 0x10ca <strtol+0x17c>
    10b0:	a3 01       	movw	r20, r6
    10b2:	92 01       	movw	r18, r4
    10b4:	58 d3       	rcall	.+1712   	; 0x1766 <__mulsi3>
    10b6:	63 0d       	add	r22, r3
    10b8:	71 1d       	adc	r23, r1
    10ba:	81 1d       	adc	r24, r1
    10bc:	91 1d       	adc	r25, r1
    10be:	61 30       	cpi	r22, 0x01	; 1
    10c0:	71 05       	cpc	r23, r1
    10c2:	81 05       	cpc	r24, r1
    10c4:	20 e8       	ldi	r18, 0x80	; 128
    10c6:	92 07       	cpc	r25, r18
    10c8:	10 f0       	brcs	.+4      	; 0x10ce <strtol+0x180>
    10ca:	4f ef       	ldi	r20, 0xFF	; 255
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <strtol+0x182>
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	21 96       	adiw	r28, 0x01	; 1
    10d2:	10 81       	ld	r17, Z
    10d4:	cc cf       	rjmp	.-104    	; 0x106e <strtol+0x120>
    10d6:	20 2f       	mov	r18, r16
    10d8:	21 70       	andi	r18, 0x01	; 1
    10da:	c1 14       	cp	r12, r1
    10dc:	d1 04       	cpc	r13, r1
    10de:	71 f0       	breq	.+28     	; 0x10fc <strtol+0x1ae>
    10e0:	44 23       	and	r20, r20
    10e2:	29 f0       	breq	.+10     	; 0x10ee <strtol+0x1a0>
    10e4:	21 97       	sbiw	r28, 0x01	; 1
    10e6:	f6 01       	movw	r30, r12
    10e8:	c0 83       	st	Z, r28
    10ea:	d1 83       	std	Z+1, r29	; 0x01
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <strtol+0x1ae>
    10ee:	01 ff       	sbrs	r16, 1
    10f0:	19 c0       	rjmp	.+50     	; 0x1124 <strtol+0x1d6>
    10f2:	22 97       	sbiw	r28, 0x02	; 2
    10f4:	f6 01       	movw	r30, r12
    10f6:	c0 83       	st	Z, r28
    10f8:	d1 83       	std	Z+1, r29	; 0x01
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <strtol+0x1d6>
    10fc:	47 ff       	sbrs	r20, 7
    10fe:	12 c0       	rjmp	.+36     	; 0x1124 <strtol+0x1d6>
    1100:	22 23       	and	r18, r18
    1102:	29 f0       	breq	.+10     	; 0x110e <strtol+0x1c0>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e8       	ldi	r25, 0x80	; 128
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <strtol+0x1c8>
    110e:	6f ef       	ldi	r22, 0xFF	; 255
    1110:	7f ef       	ldi	r23, 0xFF	; 255
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	9f e7       	ldi	r25, 0x7F	; 127
    1116:	22 e2       	ldi	r18, 0x22	; 34
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	20 93 ba 3e 	sts	0x3EBA, r18	; 0x803eba <errno>
    111e:	30 93 bb 3e 	sts	0x3EBB, r19	; 0x803ebb <errno+0x1>
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <strtol+0x1e8>
    1124:	22 23       	and	r18, r18
    1126:	81 f0       	breq	.+32     	; 0x1148 <strtol+0x1fa>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	46 2f       	mov	r20, r22
    1138:	37 2f       	mov	r19, r23
    113a:	28 2f       	mov	r18, r24
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <strtol+0x214>
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <strtol+0x214>
    1148:	97 ff       	sbrs	r25, 7
    114a:	f5 cf       	rjmp	.-22     	; 0x1136 <strtol+0x1e8>
    114c:	82 e2       	ldi	r24, 0x22	; 34
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	80 93 ba 3e 	sts	0x3EBA, r24	; 0x803eba <errno>
    1154:	90 93 bb 3e 	sts	0x3EBB, r25	; 0x803ebb <errno+0x1>
    1158:	6f ef       	ldi	r22, 0xFF	; 255
    115a:	7f ef       	ldi	r23, 0xFF	; 255
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	9f e7       	ldi	r25, 0x7F	; 127
    1160:	ea cf       	rjmp	.-44     	; 0x1136 <strtol+0x1e8>
    1162:	64 2f       	mov	r22, r20
    1164:	73 2f       	mov	r23, r19
    1166:	82 2f       	mov	r24, r18
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	e1 e1       	ldi	r30, 0x11	; 17
    116e:	50 c3       	rjmp	.+1696   	; 0x1810 <__epilogue_restores__+0x2>

00001170 <isspace>:
    1170:	91 11       	cpse	r25, r1
    1172:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__ctype_isfalse>
    1176:	80 32       	cpi	r24, 0x20	; 32
    1178:	19 f0       	breq	.+6      	; 0x1180 <isspace+0x10>
    117a:	89 50       	subi	r24, 0x09	; 9
    117c:	85 50       	subi	r24, 0x05	; 5
    117e:	c8 f7       	brcc	.-14     	; 0x1172 <isspace+0x2>
    1180:	08 95       	ret

00001182 <strtok>:
    1182:	44 e0       	ldi	r20, 0x04	; 4
    1184:	5e e3       	ldi	r21, 0x3E	; 62
    1186:	11 d0       	rcall	.+34     	; 0x11aa <strtok_r>
    1188:	08 95       	ret

0000118a <strcmp>:
    118a:	fb 01       	movw	r30, r22
    118c:	dc 01       	movw	r26, r24
    118e:	8d 91       	ld	r24, X+
    1190:	01 90       	ld	r0, Z+
    1192:	80 19       	sub	r24, r0
    1194:	01 10       	cpse	r0, r1
    1196:	d9 f3       	breq	.-10     	; 0x118e <strcmp+0x4>
    1198:	99 0b       	sbc	r25, r25
    119a:	08 95       	ret

0000119c <strcpy>:
    119c:	fb 01       	movw	r30, r22
    119e:	dc 01       	movw	r26, r24
    11a0:	01 90       	ld	r0, Z+
    11a2:	0d 92       	st	X+, r0
    11a4:	00 20       	and	r0, r0
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <strcpy+0x4>
    11a8:	08 95       	ret

000011aa <strtok_r>:
    11aa:	fa 01       	movw	r30, r20
    11ac:	a1 91       	ld	r26, Z+
    11ae:	b0 81       	ld	r27, Z
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	19 f4       	brne	.+6      	; 0x11ba <strtok_r+0x10>
    11b4:	10 97       	sbiw	r26, 0x00	; 0
    11b6:	e1 f0       	breq	.+56     	; 0x11f0 <strtok_r+0x46>
    11b8:	cd 01       	movw	r24, r26
    11ba:	dc 01       	movw	r26, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0d 90       	ld	r0, X+
    11c0:	00 20       	and	r0, r0
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <strtok_r+0x1e>
    11c4:	c0 01       	movw	r24, r0
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <strtok_r+0x44>
    11c8:	fb 01       	movw	r30, r22
    11ca:	21 91       	ld	r18, Z+
    11cc:	22 23       	and	r18, r18
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <strtok_r+0x2c>
    11d0:	20 15       	cp	r18, r0
    11d2:	d9 f7       	brne	.-10     	; 0x11ca <strtok_r+0x20>
    11d4:	f3 cf       	rjmp	.-26     	; 0x11bc <strtok_r+0x12>
    11d6:	fb 01       	movw	r30, r22
    11d8:	21 91       	ld	r18, Z+
    11da:	20 15       	cp	r18, r0
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <strtok_r+0x3a>
    11de:	1e 92       	st	-X, r1
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <strtok_r+0x46>
    11e4:	22 23       	and	r18, r18
    11e6:	c1 f7       	brne	.-16     	; 0x11d8 <strtok_r+0x2e>
    11e8:	0d 90       	ld	r0, X+
    11ea:	00 20       	and	r0, r0
    11ec:	a1 f7       	brne	.-24     	; 0x11d6 <strtok_r+0x2c>
    11ee:	d0 01       	movw	r26, r0
    11f0:	fa 01       	movw	r30, r20
    11f2:	a1 93       	st	Z+, r26
    11f4:	b0 83       	st	Z, r27
    11f6:	08 95       	ret

000011f8 <printf>:
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e1 e0       	ldi	r30, 0x01	; 1
    11fe:	f9 e0       	ldi	r31, 0x09	; 9
    1200:	fd c2       	rjmp	.+1530   	; 0x17fc <__prologue_saves__+0x20>
    1202:	ae 01       	movw	r20, r28
    1204:	4b 5f       	subi	r20, 0xFB	; 251
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	fa 01       	movw	r30, r20
    120a:	61 91       	ld	r22, Z+
    120c:	71 91       	ld	r23, Z+
    120e:	af 01       	movw	r20, r30
    1210:	80 91 be 3e 	lds	r24, 0x3EBE	; 0x803ebe <__iob+0x2>
    1214:	90 91 bf 3e 	lds	r25, 0x3EBF	; 0x803ebf <__iob+0x3>
    1218:	21 d0       	rcall	.+66     	; 0x125c <vfprintf>
    121a:	e2 e0       	ldi	r30, 0x02	; 2
    121c:	08 c3       	rjmp	.+1552   	; 0x182e <__epilogue_restores__+0x20>

0000121e <sprintf>:
    121e:	ae e0       	ldi	r26, 0x0E	; 14
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e4 e1       	ldi	r30, 0x14	; 20
    1224:	f9 e0       	ldi	r31, 0x09	; 9
    1226:	e8 c2       	rjmp	.+1488   	; 0x17f8 <__prologue_saves__+0x1c>
    1228:	0d 89       	ldd	r16, Y+21	; 0x15
    122a:	1e 89       	ldd	r17, Y+22	; 0x16
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	8c 83       	std	Y+4, r24	; 0x04
    1230:	09 83       	std	Y+1, r16	; 0x01
    1232:	1a 83       	std	Y+2, r17	; 0x02
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	9f e7       	ldi	r25, 0x7F	; 127
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	ae 01       	movw	r20, r28
    123e:	47 5e       	subi	r20, 0xE7	; 231
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	6f 89       	ldd	r22, Y+23	; 0x17
    1244:	78 8d       	ldd	r23, Y+24	; 0x18
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	08 d0       	rcall	.+16     	; 0x125c <vfprintf>
    124c:	ef 81       	ldd	r30, Y+7	; 0x07
    124e:	f8 85       	ldd	r31, Y+8	; 0x08
    1250:	e0 0f       	add	r30, r16
    1252:	f1 1f       	adc	r31, r17
    1254:	10 82       	st	Z, r1
    1256:	2e 96       	adiw	r28, 0x0e	; 14
    1258:	e4 e0       	ldi	r30, 0x04	; 4
    125a:	e7 c2       	rjmp	.+1486   	; 0x182a <__epilogue_restores__+0x1c>

0000125c <vfprintf>:
    125c:	ab e0       	ldi	r26, 0x0B	; 11
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e3       	ldi	r30, 0x33	; 51
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	bb c2       	rjmp	.+1398   	; 0x17dc <__prologue_saves__>
    1266:	6c 01       	movw	r12, r24
    1268:	7b 01       	movw	r14, r22
    126a:	8a 01       	movw	r16, r20
    126c:	fc 01       	movw	r30, r24
    126e:	16 82       	std	Z+6, r1	; 0x06
    1270:	17 82       	std	Z+7, r1	; 0x07
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	81 ff       	sbrs	r24, 1
    1276:	bf c1       	rjmp	.+894    	; 0x15f6 <vfprintf+0x39a>
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	3c 01       	movw	r6, r24
    127e:	f6 01       	movw	r30, r12
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	f7 01       	movw	r30, r14
    1284:	93 fd       	sbrc	r25, 3
    1286:	85 91       	lpm	r24, Z+
    1288:	93 ff       	sbrs	r25, 3
    128a:	81 91       	ld	r24, Z+
    128c:	7f 01       	movw	r14, r30
    128e:	88 23       	and	r24, r24
    1290:	09 f4       	brne	.+2      	; 0x1294 <vfprintf+0x38>
    1292:	ad c1       	rjmp	.+858    	; 0x15ee <vfprintf+0x392>
    1294:	85 32       	cpi	r24, 0x25	; 37
    1296:	39 f4       	brne	.+14     	; 0x12a6 <vfprintf+0x4a>
    1298:	93 fd       	sbrc	r25, 3
    129a:	85 91       	lpm	r24, Z+
    129c:	93 ff       	sbrs	r25, 3
    129e:	81 91       	ld	r24, Z+
    12a0:	7f 01       	movw	r14, r30
    12a2:	85 32       	cpi	r24, 0x25	; 37
    12a4:	21 f4       	brne	.+8      	; 0x12ae <vfprintf+0x52>
    12a6:	b6 01       	movw	r22, r12
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	c3 d1       	rcall	.+902    	; 0x1632 <fputc>
    12ac:	e8 cf       	rjmp	.-48     	; 0x127e <vfprintf+0x22>
    12ae:	91 2c       	mov	r9, r1
    12b0:	21 2c       	mov	r2, r1
    12b2:	31 2c       	mov	r3, r1
    12b4:	ff e1       	ldi	r31, 0x1F	; 31
    12b6:	f3 15       	cp	r31, r3
    12b8:	d8 f0       	brcs	.+54     	; 0x12f0 <vfprintf+0x94>
    12ba:	8b 32       	cpi	r24, 0x2B	; 43
    12bc:	79 f0       	breq	.+30     	; 0x12dc <vfprintf+0x80>
    12be:	38 f4       	brcc	.+14     	; 0x12ce <vfprintf+0x72>
    12c0:	80 32       	cpi	r24, 0x20	; 32
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <vfprintf+0x86>
    12c4:	83 32       	cpi	r24, 0x23	; 35
    12c6:	a1 f4       	brne	.+40     	; 0x12f0 <vfprintf+0x94>
    12c8:	23 2d       	mov	r18, r3
    12ca:	20 61       	ori	r18, 0x10	; 16
    12cc:	1d c0       	rjmp	.+58     	; 0x1308 <vfprintf+0xac>
    12ce:	8d 32       	cpi	r24, 0x2D	; 45
    12d0:	61 f0       	breq	.+24     	; 0x12ea <vfprintf+0x8e>
    12d2:	80 33       	cpi	r24, 0x30	; 48
    12d4:	69 f4       	brne	.+26     	; 0x12f0 <vfprintf+0x94>
    12d6:	23 2d       	mov	r18, r3
    12d8:	21 60       	ori	r18, 0x01	; 1
    12da:	16 c0       	rjmp	.+44     	; 0x1308 <vfprintf+0xac>
    12dc:	83 2d       	mov	r24, r3
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	38 2e       	mov	r3, r24
    12e2:	e3 2d       	mov	r30, r3
    12e4:	e4 60       	ori	r30, 0x04	; 4
    12e6:	3e 2e       	mov	r3, r30
    12e8:	2a c0       	rjmp	.+84     	; 0x133e <vfprintf+0xe2>
    12ea:	f3 2d       	mov	r31, r3
    12ec:	f8 60       	ori	r31, 0x08	; 8
    12ee:	1d c0       	rjmp	.+58     	; 0x132a <vfprintf+0xce>
    12f0:	37 fc       	sbrc	r3, 7
    12f2:	2d c0       	rjmp	.+90     	; 0x134e <vfprintf+0xf2>
    12f4:	20 ed       	ldi	r18, 0xD0	; 208
    12f6:	28 0f       	add	r18, r24
    12f8:	2a 30       	cpi	r18, 0x0A	; 10
    12fa:	40 f0       	brcs	.+16     	; 0x130c <vfprintf+0xb0>
    12fc:	8e 32       	cpi	r24, 0x2E	; 46
    12fe:	b9 f4       	brne	.+46     	; 0x132e <vfprintf+0xd2>
    1300:	36 fc       	sbrc	r3, 6
    1302:	75 c1       	rjmp	.+746    	; 0x15ee <vfprintf+0x392>
    1304:	23 2d       	mov	r18, r3
    1306:	20 64       	ori	r18, 0x40	; 64
    1308:	32 2e       	mov	r3, r18
    130a:	19 c0       	rjmp	.+50     	; 0x133e <vfprintf+0xe2>
    130c:	36 fe       	sbrs	r3, 6
    130e:	06 c0       	rjmp	.+12     	; 0x131c <vfprintf+0xc0>
    1310:	8a e0       	ldi	r24, 0x0A	; 10
    1312:	98 9e       	mul	r9, r24
    1314:	20 0d       	add	r18, r0
    1316:	11 24       	eor	r1, r1
    1318:	92 2e       	mov	r9, r18
    131a:	11 c0       	rjmp	.+34     	; 0x133e <vfprintf+0xe2>
    131c:	ea e0       	ldi	r30, 0x0A	; 10
    131e:	2e 9e       	mul	r2, r30
    1320:	20 0d       	add	r18, r0
    1322:	11 24       	eor	r1, r1
    1324:	22 2e       	mov	r2, r18
    1326:	f3 2d       	mov	r31, r3
    1328:	f0 62       	ori	r31, 0x20	; 32
    132a:	3f 2e       	mov	r3, r31
    132c:	08 c0       	rjmp	.+16     	; 0x133e <vfprintf+0xe2>
    132e:	8c 36       	cpi	r24, 0x6C	; 108
    1330:	21 f4       	brne	.+8      	; 0x133a <vfprintf+0xde>
    1332:	83 2d       	mov	r24, r3
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	38 2e       	mov	r3, r24
    1338:	02 c0       	rjmp	.+4      	; 0x133e <vfprintf+0xe2>
    133a:	88 36       	cpi	r24, 0x68	; 104
    133c:	41 f4       	brne	.+16     	; 0x134e <vfprintf+0xf2>
    133e:	f7 01       	movw	r30, r14
    1340:	93 fd       	sbrc	r25, 3
    1342:	85 91       	lpm	r24, Z+
    1344:	93 ff       	sbrs	r25, 3
    1346:	81 91       	ld	r24, Z+
    1348:	7f 01       	movw	r14, r30
    134a:	81 11       	cpse	r24, r1
    134c:	b3 cf       	rjmp	.-154    	; 0x12b4 <vfprintf+0x58>
    134e:	98 2f       	mov	r25, r24
    1350:	9f 7d       	andi	r25, 0xDF	; 223
    1352:	95 54       	subi	r25, 0x45	; 69
    1354:	93 30       	cpi	r25, 0x03	; 3
    1356:	28 f4       	brcc	.+10     	; 0x1362 <vfprintf+0x106>
    1358:	0c 5f       	subi	r16, 0xFC	; 252
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	9f e3       	ldi	r25, 0x3F	; 63
    135e:	99 83       	std	Y+1, r25	; 0x01
    1360:	0d c0       	rjmp	.+26     	; 0x137c <vfprintf+0x120>
    1362:	83 36       	cpi	r24, 0x63	; 99
    1364:	31 f0       	breq	.+12     	; 0x1372 <vfprintf+0x116>
    1366:	83 37       	cpi	r24, 0x73	; 115
    1368:	71 f0       	breq	.+28     	; 0x1386 <vfprintf+0x12a>
    136a:	83 35       	cpi	r24, 0x53	; 83
    136c:	09 f0       	breq	.+2      	; 0x1370 <vfprintf+0x114>
    136e:	55 c0       	rjmp	.+170    	; 0x141a <vfprintf+0x1be>
    1370:	20 c0       	rjmp	.+64     	; 0x13b2 <vfprintf+0x156>
    1372:	f8 01       	movw	r30, r16
    1374:	80 81       	ld	r24, Z
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	0e 5f       	subi	r16, 0xFE	; 254
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	88 24       	eor	r8, r8
    137e:	83 94       	inc	r8
    1380:	91 2c       	mov	r9, r1
    1382:	53 01       	movw	r10, r6
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <vfprintf+0x14e>
    1386:	28 01       	movw	r4, r16
    1388:	f2 e0       	ldi	r31, 0x02	; 2
    138a:	4f 0e       	add	r4, r31
    138c:	51 1c       	adc	r5, r1
    138e:	f8 01       	movw	r30, r16
    1390:	a0 80       	ld	r10, Z
    1392:	b1 80       	ldd	r11, Z+1	; 0x01
    1394:	36 fe       	sbrs	r3, 6
    1396:	03 c0       	rjmp	.+6      	; 0x139e <vfprintf+0x142>
    1398:	69 2d       	mov	r22, r9
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0x146>
    139e:	6f ef       	ldi	r22, 0xFF	; 255
    13a0:	7f ef       	ldi	r23, 0xFF	; 255
    13a2:	c5 01       	movw	r24, r10
    13a4:	3b d1       	rcall	.+630    	; 0x161c <strnlen>
    13a6:	4c 01       	movw	r8, r24
    13a8:	82 01       	movw	r16, r4
    13aa:	f3 2d       	mov	r31, r3
    13ac:	ff 77       	andi	r31, 0x7F	; 127
    13ae:	3f 2e       	mov	r3, r31
    13b0:	15 c0       	rjmp	.+42     	; 0x13dc <vfprintf+0x180>
    13b2:	28 01       	movw	r4, r16
    13b4:	22 e0       	ldi	r18, 0x02	; 2
    13b6:	42 0e       	add	r4, r18
    13b8:	51 1c       	adc	r5, r1
    13ba:	f8 01       	movw	r30, r16
    13bc:	a0 80       	ld	r10, Z
    13be:	b1 80       	ldd	r11, Z+1	; 0x01
    13c0:	36 fe       	sbrs	r3, 6
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <vfprintf+0x16e>
    13c4:	69 2d       	mov	r22, r9
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <vfprintf+0x172>
    13ca:	6f ef       	ldi	r22, 0xFF	; 255
    13cc:	7f ef       	ldi	r23, 0xFF	; 255
    13ce:	c5 01       	movw	r24, r10
    13d0:	1a d1       	rcall	.+564    	; 0x1606 <strnlen_P>
    13d2:	4c 01       	movw	r8, r24
    13d4:	f3 2d       	mov	r31, r3
    13d6:	f0 68       	ori	r31, 0x80	; 128
    13d8:	3f 2e       	mov	r3, r31
    13da:	82 01       	movw	r16, r4
    13dc:	33 fc       	sbrc	r3, 3
    13de:	19 c0       	rjmp	.+50     	; 0x1412 <vfprintf+0x1b6>
    13e0:	82 2d       	mov	r24, r2
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	88 16       	cp	r8, r24
    13e6:	99 06       	cpc	r9, r25
    13e8:	a0 f4       	brcc	.+40     	; 0x1412 <vfprintf+0x1b6>
    13ea:	b6 01       	movw	r22, r12
    13ec:	80 e2       	ldi	r24, 0x20	; 32
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	20 d1       	rcall	.+576    	; 0x1632 <fputc>
    13f2:	2a 94       	dec	r2
    13f4:	f5 cf       	rjmp	.-22     	; 0x13e0 <vfprintf+0x184>
    13f6:	f5 01       	movw	r30, r10
    13f8:	37 fc       	sbrc	r3, 7
    13fa:	85 91       	lpm	r24, Z+
    13fc:	37 fe       	sbrs	r3, 7
    13fe:	81 91       	ld	r24, Z+
    1400:	5f 01       	movw	r10, r30
    1402:	b6 01       	movw	r22, r12
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	15 d1       	rcall	.+554    	; 0x1632 <fputc>
    1408:	21 10       	cpse	r2, r1
    140a:	2a 94       	dec	r2
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	82 1a       	sub	r8, r18
    1410:	91 08       	sbc	r9, r1
    1412:	81 14       	cp	r8, r1
    1414:	91 04       	cpc	r9, r1
    1416:	79 f7       	brne	.-34     	; 0x13f6 <vfprintf+0x19a>
    1418:	e1 c0       	rjmp	.+450    	; 0x15dc <vfprintf+0x380>
    141a:	84 36       	cpi	r24, 0x64	; 100
    141c:	11 f0       	breq	.+4      	; 0x1422 <vfprintf+0x1c6>
    141e:	89 36       	cpi	r24, 0x69	; 105
    1420:	39 f5       	brne	.+78     	; 0x1470 <vfprintf+0x214>
    1422:	f8 01       	movw	r30, r16
    1424:	37 fe       	sbrs	r3, 7
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <vfprintf+0x1da>
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	0c 5f       	subi	r16, 0xFC	; 252
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <vfprintf+0x1ea>
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	07 2e       	mov	r0, r23
    143c:	00 0c       	add	r0, r0
    143e:	88 0b       	sbc	r24, r24
    1440:	99 0b       	sbc	r25, r25
    1442:	0e 5f       	subi	r16, 0xFE	; 254
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	f3 2d       	mov	r31, r3
    1448:	ff 76       	andi	r31, 0x6F	; 111
    144a:	3f 2e       	mov	r3, r31
    144c:	97 ff       	sbrs	r25, 7
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <vfprintf+0x206>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	f0 68       	ori	r31, 0x80	; 128
    1460:	3f 2e       	mov	r3, r31
    1462:	2a e0       	ldi	r18, 0x0A	; 10
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	a3 01       	movw	r20, r6
    1468:	20 d1       	rcall	.+576    	; 0x16aa <__ultoa_invert>
    146a:	88 2e       	mov	r8, r24
    146c:	86 18       	sub	r8, r6
    146e:	44 c0       	rjmp	.+136    	; 0x14f8 <vfprintf+0x29c>
    1470:	85 37       	cpi	r24, 0x75	; 117
    1472:	31 f4       	brne	.+12     	; 0x1480 <vfprintf+0x224>
    1474:	23 2d       	mov	r18, r3
    1476:	2f 7e       	andi	r18, 0xEF	; 239
    1478:	b2 2e       	mov	r11, r18
    147a:	2a e0       	ldi	r18, 0x0A	; 10
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	25 c0       	rjmp	.+74     	; 0x14ca <vfprintf+0x26e>
    1480:	93 2d       	mov	r25, r3
    1482:	99 7f       	andi	r25, 0xF9	; 249
    1484:	b9 2e       	mov	r11, r25
    1486:	8f 36       	cpi	r24, 0x6F	; 111
    1488:	c1 f0       	breq	.+48     	; 0x14ba <vfprintf+0x25e>
    148a:	18 f4       	brcc	.+6      	; 0x1492 <vfprintf+0x236>
    148c:	88 35       	cpi	r24, 0x58	; 88
    148e:	79 f0       	breq	.+30     	; 0x14ae <vfprintf+0x252>
    1490:	ae c0       	rjmp	.+348    	; 0x15ee <vfprintf+0x392>
    1492:	80 37       	cpi	r24, 0x70	; 112
    1494:	19 f0       	breq	.+6      	; 0x149c <vfprintf+0x240>
    1496:	88 37       	cpi	r24, 0x78	; 120
    1498:	21 f0       	breq	.+8      	; 0x14a2 <vfprintf+0x246>
    149a:	a9 c0       	rjmp	.+338    	; 0x15ee <vfprintf+0x392>
    149c:	e9 2f       	mov	r30, r25
    149e:	e0 61       	ori	r30, 0x10	; 16
    14a0:	be 2e       	mov	r11, r30
    14a2:	b4 fe       	sbrs	r11, 4
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <vfprintf+0x264>
    14a6:	fb 2d       	mov	r31, r11
    14a8:	f4 60       	ori	r31, 0x04	; 4
    14aa:	bf 2e       	mov	r11, r31
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <vfprintf+0x264>
    14ae:	34 fe       	sbrs	r3, 4
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <vfprintf+0x26a>
    14b2:	29 2f       	mov	r18, r25
    14b4:	26 60       	ori	r18, 0x06	; 6
    14b6:	b2 2e       	mov	r11, r18
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <vfprintf+0x26a>
    14ba:	28 e0       	ldi	r18, 0x08	; 8
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <vfprintf+0x26e>
    14c0:	20 e1       	ldi	r18, 0x10	; 16
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x26e>
    14c6:	20 e1       	ldi	r18, 0x10	; 16
    14c8:	32 e0       	ldi	r19, 0x02	; 2
    14ca:	f8 01       	movw	r30, r16
    14cc:	b7 fe       	sbrs	r11, 7
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <vfprintf+0x282>
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	0c 5f       	subi	r16, 0xFC	; 252
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0x28e>
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 5f       	subi	r16, 0xFE	; 254
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	a3 01       	movw	r20, r6
    14ec:	de d0       	rcall	.+444    	; 0x16aa <__ultoa_invert>
    14ee:	88 2e       	mov	r8, r24
    14f0:	86 18       	sub	r8, r6
    14f2:	fb 2d       	mov	r31, r11
    14f4:	ff 77       	andi	r31, 0x7F	; 127
    14f6:	3f 2e       	mov	r3, r31
    14f8:	36 fe       	sbrs	r3, 6
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <vfprintf+0x2ba>
    14fc:	23 2d       	mov	r18, r3
    14fe:	2e 7f       	andi	r18, 0xFE	; 254
    1500:	a2 2e       	mov	r10, r18
    1502:	89 14       	cp	r8, r9
    1504:	58 f4       	brcc	.+22     	; 0x151c <vfprintf+0x2c0>
    1506:	34 fe       	sbrs	r3, 4
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <vfprintf+0x2c4>
    150a:	32 fc       	sbrc	r3, 2
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <vfprintf+0x2c4>
    150e:	83 2d       	mov	r24, r3
    1510:	8e 7e       	andi	r24, 0xEE	; 238
    1512:	a8 2e       	mov	r10, r24
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <vfprintf+0x2c4>
    1516:	b8 2c       	mov	r11, r8
    1518:	a3 2c       	mov	r10, r3
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <vfprintf+0x2c6>
    151c:	b8 2c       	mov	r11, r8
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <vfprintf+0x2c6>
    1520:	b9 2c       	mov	r11, r9
    1522:	a4 fe       	sbrs	r10, 4
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <vfprintf+0x2e8>
    1526:	fe 01       	movw	r30, r28
    1528:	e8 0d       	add	r30, r8
    152a:	f1 1d       	adc	r31, r1
    152c:	80 81       	ld	r24, Z
    152e:	80 33       	cpi	r24, 0x30	; 48
    1530:	21 f4       	brne	.+8      	; 0x153a <vfprintf+0x2de>
    1532:	9a 2d       	mov	r25, r10
    1534:	99 7e       	andi	r25, 0xE9	; 233
    1536:	a9 2e       	mov	r10, r25
    1538:	09 c0       	rjmp	.+18     	; 0x154c <vfprintf+0x2f0>
    153a:	a2 fe       	sbrs	r10, 2
    153c:	06 c0       	rjmp	.+12     	; 0x154a <vfprintf+0x2ee>
    153e:	b3 94       	inc	r11
    1540:	b3 94       	inc	r11
    1542:	04 c0       	rjmp	.+8      	; 0x154c <vfprintf+0x2f0>
    1544:	8a 2d       	mov	r24, r10
    1546:	86 78       	andi	r24, 0x86	; 134
    1548:	09 f0       	breq	.+2      	; 0x154c <vfprintf+0x2f0>
    154a:	b3 94       	inc	r11
    154c:	a3 fc       	sbrc	r10, 3
    154e:	10 c0       	rjmp	.+32     	; 0x1570 <vfprintf+0x314>
    1550:	a0 fe       	sbrs	r10, 0
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <vfprintf+0x304>
    1554:	b2 14       	cp	r11, r2
    1556:	80 f4       	brcc	.+32     	; 0x1578 <vfprintf+0x31c>
    1558:	28 0c       	add	r2, r8
    155a:	92 2c       	mov	r9, r2
    155c:	9b 18       	sub	r9, r11
    155e:	0d c0       	rjmp	.+26     	; 0x157a <vfprintf+0x31e>
    1560:	b2 14       	cp	r11, r2
    1562:	58 f4       	brcc	.+22     	; 0x157a <vfprintf+0x31e>
    1564:	b6 01       	movw	r22, r12
    1566:	80 e2       	ldi	r24, 0x20	; 32
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	63 d0       	rcall	.+198    	; 0x1632 <fputc>
    156c:	b3 94       	inc	r11
    156e:	f8 cf       	rjmp	.-16     	; 0x1560 <vfprintf+0x304>
    1570:	b2 14       	cp	r11, r2
    1572:	18 f4       	brcc	.+6      	; 0x157a <vfprintf+0x31e>
    1574:	2b 18       	sub	r2, r11
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x320>
    1578:	98 2c       	mov	r9, r8
    157a:	21 2c       	mov	r2, r1
    157c:	a4 fe       	sbrs	r10, 4
    157e:	0f c0       	rjmp	.+30     	; 0x159e <vfprintf+0x342>
    1580:	b6 01       	movw	r22, r12
    1582:	80 e3       	ldi	r24, 0x30	; 48
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	55 d0       	rcall	.+170    	; 0x1632 <fputc>
    1588:	a2 fe       	sbrs	r10, 2
    158a:	16 c0       	rjmp	.+44     	; 0x15b8 <vfprintf+0x35c>
    158c:	a1 fc       	sbrc	r10, 1
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <vfprintf+0x33a>
    1590:	88 e7       	ldi	r24, 0x78	; 120
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x33e>
    1596:	88 e5       	ldi	r24, 0x58	; 88
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	b6 01       	movw	r22, r12
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <vfprintf+0x35a>
    159e:	8a 2d       	mov	r24, r10
    15a0:	86 78       	andi	r24, 0x86	; 134
    15a2:	51 f0       	breq	.+20     	; 0x15b8 <vfprintf+0x35c>
    15a4:	a1 fe       	sbrs	r10, 1
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x350>
    15a8:	8b e2       	ldi	r24, 0x2B	; 43
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <vfprintf+0x352>
    15ac:	80 e2       	ldi	r24, 0x20	; 32
    15ae:	a7 fc       	sbrc	r10, 7
    15b0:	8d e2       	ldi	r24, 0x2D	; 45
    15b2:	b6 01       	movw	r22, r12
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	3d d0       	rcall	.+122    	; 0x1632 <fputc>
    15b8:	89 14       	cp	r8, r9
    15ba:	30 f4       	brcc	.+12     	; 0x15c8 <vfprintf+0x36c>
    15bc:	b6 01       	movw	r22, r12
    15be:	80 e3       	ldi	r24, 0x30	; 48
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	37 d0       	rcall	.+110    	; 0x1632 <fputc>
    15c4:	9a 94       	dec	r9
    15c6:	f8 cf       	rjmp	.-16     	; 0x15b8 <vfprintf+0x35c>
    15c8:	8a 94       	dec	r8
    15ca:	f3 01       	movw	r30, r6
    15cc:	e8 0d       	add	r30, r8
    15ce:	f1 1d       	adc	r31, r1
    15d0:	80 81       	ld	r24, Z
    15d2:	b6 01       	movw	r22, r12
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	2d d0       	rcall	.+90     	; 0x1632 <fputc>
    15d8:	81 10       	cpse	r8, r1
    15da:	f6 cf       	rjmp	.-20     	; 0x15c8 <vfprintf+0x36c>
    15dc:	22 20       	and	r2, r2
    15de:	09 f4       	brne	.+2      	; 0x15e2 <vfprintf+0x386>
    15e0:	4e ce       	rjmp	.-868    	; 0x127e <vfprintf+0x22>
    15e2:	b6 01       	movw	r22, r12
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	24 d0       	rcall	.+72     	; 0x1632 <fputc>
    15ea:	2a 94       	dec	r2
    15ec:	f7 cf       	rjmp	.-18     	; 0x15dc <vfprintf+0x380>
    15ee:	f6 01       	movw	r30, r12
    15f0:	86 81       	ldd	r24, Z+6	; 0x06
    15f2:	97 81       	ldd	r25, Z+7	; 0x07
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x39e>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	2b 96       	adiw	r28, 0x0b	; 11
    15fc:	e2 e1       	ldi	r30, 0x12	; 18
    15fe:	07 c1       	rjmp	.+526    	; 0x180e <__epilogue_restores__>

00001600 <__ctype_isfalse>:
    1600:	99 27       	eor	r25, r25
    1602:	88 27       	eor	r24, r24

00001604 <__ctype_istrue>:
    1604:	08 95       	ret

00001606 <strnlen_P>:
    1606:	fc 01       	movw	r30, r24
    1608:	05 90       	lpm	r0, Z+
    160a:	61 50       	subi	r22, 0x01	; 1
    160c:	70 40       	sbci	r23, 0x00	; 0
    160e:	01 10       	cpse	r0, r1
    1610:	d8 f7       	brcc	.-10     	; 0x1608 <strnlen_P+0x2>
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	8e 0f       	add	r24, r30
    1618:	9f 1f       	adc	r25, r31
    161a:	08 95       	ret

0000161c <strnlen>:
    161c:	fc 01       	movw	r30, r24
    161e:	61 50       	subi	r22, 0x01	; 1
    1620:	70 40       	sbci	r23, 0x00	; 0
    1622:	01 90       	ld	r0, Z+
    1624:	01 10       	cpse	r0, r1
    1626:	d8 f7       	brcc	.-10     	; 0x161e <strnlen+0x2>
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	8e 0f       	add	r24, r30
    162e:	9f 1f       	adc	r25, r31
    1630:	08 95       	ret

00001632 <fputc>:
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	fb 01       	movw	r30, r22
    163c:	23 81       	ldd	r18, Z+3	; 0x03
    163e:	21 fd       	sbrc	r18, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <fputc+0x16>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	2c c0       	rjmp	.+88     	; 0x16a0 <fputc+0x6e>
    1648:	22 ff       	sbrs	r18, 2
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <fputc+0x46>
    164c:	46 81       	ldd	r20, Z+6	; 0x06
    164e:	57 81       	ldd	r21, Z+7	; 0x07
    1650:	24 81       	ldd	r18, Z+4	; 0x04
    1652:	35 81       	ldd	r19, Z+5	; 0x05
    1654:	42 17       	cp	r20, r18
    1656:	53 07       	cpc	r21, r19
    1658:	44 f4       	brge	.+16     	; 0x166a <fputc+0x38>
    165a:	a0 81       	ld	r26, Z
    165c:	b1 81       	ldd	r27, Z+1	; 0x01
    165e:	9d 01       	movw	r18, r26
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	20 83       	st	Z, r18
    1666:	31 83       	std	Z+1, r19	; 0x01
    1668:	8c 93       	st	X, r24
    166a:	26 81       	ldd	r18, Z+6	; 0x06
    166c:	37 81       	ldd	r19, Z+7	; 0x07
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	26 83       	std	Z+6, r18	; 0x06
    1674:	37 83       	std	Z+7, r19	; 0x07
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <fputc+0x6e>
    1678:	8b 01       	movw	r16, r22
    167a:	ec 01       	movw	r28, r24
    167c:	fb 01       	movw	r30, r22
    167e:	00 84       	ldd	r0, Z+8	; 0x08
    1680:	f1 85       	ldd	r31, Z+9	; 0x09
    1682:	e0 2d       	mov	r30, r0
    1684:	09 95       	icall
    1686:	89 2b       	or	r24, r25
    1688:	e1 f6       	brne	.-72     	; 0x1642 <fputc+0x10>
    168a:	d8 01       	movw	r26, r16
    168c:	16 96       	adiw	r26, 0x06	; 6
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	17 97       	sbiw	r26, 0x07	; 7
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	16 96       	adiw	r26, 0x06	; 6
    1698:	8d 93       	st	X+, r24
    169a:	9c 93       	st	X, r25
    169c:	17 97       	sbiw	r26, 0x07	; 7
    169e:	ce 01       	movw	r24, r28
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <__ultoa_invert>:
    16aa:	fa 01       	movw	r30, r20
    16ac:	aa 27       	eor	r26, r26
    16ae:	28 30       	cpi	r18, 0x08	; 8
    16b0:	51 f1       	breq	.+84     	; 0x1706 <__ultoa_invert+0x5c>
    16b2:	20 31       	cpi	r18, 0x10	; 16
    16b4:	81 f1       	breq	.+96     	; 0x1716 <__ultoa_invert+0x6c>
    16b6:	e8 94       	clt
    16b8:	6f 93       	push	r22
    16ba:	6e 7f       	andi	r22, 0xFE	; 254
    16bc:	6e 5f       	subi	r22, 0xFE	; 254
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	af 4f       	sbci	r26, 0xFF	; 255
    16c6:	b1 e0       	ldi	r27, 0x01	; 1
    16c8:	3e d0       	rcall	.+124    	; 0x1746 <__ultoa_invert+0x9c>
    16ca:	b4 e0       	ldi	r27, 0x04	; 4
    16cc:	3c d0       	rcall	.+120    	; 0x1746 <__ultoa_invert+0x9c>
    16ce:	67 0f       	add	r22, r23
    16d0:	78 1f       	adc	r23, r24
    16d2:	89 1f       	adc	r24, r25
    16d4:	9a 1f       	adc	r25, r26
    16d6:	a1 1d       	adc	r26, r1
    16d8:	68 0f       	add	r22, r24
    16da:	79 1f       	adc	r23, r25
    16dc:	8a 1f       	adc	r24, r26
    16de:	91 1d       	adc	r25, r1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	6a 0f       	add	r22, r26
    16e4:	71 1d       	adc	r23, r1
    16e6:	81 1d       	adc	r24, r1
    16e8:	91 1d       	adc	r25, r1
    16ea:	a1 1d       	adc	r26, r1
    16ec:	20 d0       	rcall	.+64     	; 0x172e <__ultoa_invert+0x84>
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <__ultoa_invert+0x48>
    16f0:	68 94       	set
    16f2:	3f 91       	pop	r19
    16f4:	2a e0       	ldi	r18, 0x0A	; 10
    16f6:	26 9f       	mul	r18, r22
    16f8:	11 24       	eor	r1, r1
    16fa:	30 19       	sub	r19, r0
    16fc:	30 5d       	subi	r19, 0xD0	; 208
    16fe:	31 93       	st	Z+, r19
    1700:	de f6       	brtc	.-74     	; 0x16b8 <__ultoa_invert+0xe>
    1702:	cf 01       	movw	r24, r30
    1704:	08 95       	ret
    1706:	46 2f       	mov	r20, r22
    1708:	47 70       	andi	r20, 0x07	; 7
    170a:	40 5d       	subi	r20, 0xD0	; 208
    170c:	41 93       	st	Z+, r20
    170e:	b3 e0       	ldi	r27, 0x03	; 3
    1710:	0f d0       	rcall	.+30     	; 0x1730 <__ultoa_invert+0x86>
    1712:	c9 f7       	brne	.-14     	; 0x1706 <__ultoa_invert+0x5c>
    1714:	f6 cf       	rjmp	.-20     	; 0x1702 <__ultoa_invert+0x58>
    1716:	46 2f       	mov	r20, r22
    1718:	4f 70       	andi	r20, 0x0F	; 15
    171a:	40 5d       	subi	r20, 0xD0	; 208
    171c:	4a 33       	cpi	r20, 0x3A	; 58
    171e:	18 f0       	brcs	.+6      	; 0x1726 <__ultoa_invert+0x7c>
    1720:	49 5d       	subi	r20, 0xD9	; 217
    1722:	31 fd       	sbrc	r19, 1
    1724:	40 52       	subi	r20, 0x20	; 32
    1726:	41 93       	st	Z+, r20
    1728:	02 d0       	rcall	.+4      	; 0x172e <__ultoa_invert+0x84>
    172a:	a9 f7       	brne	.-22     	; 0x1716 <__ultoa_invert+0x6c>
    172c:	ea cf       	rjmp	.-44     	; 0x1702 <__ultoa_invert+0x58>
    172e:	b4 e0       	ldi	r27, 0x04	; 4
    1730:	a6 95       	lsr	r26
    1732:	97 95       	ror	r25
    1734:	87 95       	ror	r24
    1736:	77 95       	ror	r23
    1738:	67 95       	ror	r22
    173a:	ba 95       	dec	r27
    173c:	c9 f7       	brne	.-14     	; 0x1730 <__ultoa_invert+0x86>
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 05       	cpc	r22, r1
    1742:	71 05       	cpc	r23, r1
    1744:	08 95       	ret
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	0a 2e       	mov	r0, r26
    174c:	06 94       	lsr	r0
    174e:	57 95       	ror	r21
    1750:	47 95       	ror	r20
    1752:	37 95       	ror	r19
    1754:	27 95       	ror	r18
    1756:	ba 95       	dec	r27
    1758:	c9 f7       	brne	.-14     	; 0x174c <__ultoa_invert+0xa2>
    175a:	62 0f       	add	r22, r18
    175c:	73 1f       	adc	r23, r19
    175e:	84 1f       	adc	r24, r20
    1760:	95 1f       	adc	r25, r21
    1762:	a0 1d       	adc	r26, r0
    1764:	08 95       	ret

00001766 <__mulsi3>:
    1766:	db 01       	movw	r26, r22
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	2d d0       	rcall	.+90     	; 0x17c8 <__muluhisi3>
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	a2 9f       	mul	r26, r18
    1774:	80 0d       	add	r24, r0
    1776:	91 1d       	adc	r25, r1
    1778:	a3 9f       	mul	r26, r19
    177a:	90 0d       	add	r25, r0
    177c:	b2 9f       	mul	r27, r18
    177e:	90 0d       	add	r25, r0
    1780:	11 24       	eor	r1, r1
    1782:	08 95       	ret

00001784 <__udivmodsi4>:
    1784:	a1 e2       	ldi	r26, 0x21	; 33
    1786:	1a 2e       	mov	r1, r26
    1788:	aa 1b       	sub	r26, r26
    178a:	bb 1b       	sub	r27, r27
    178c:	fd 01       	movw	r30, r26
    178e:	0d c0       	rjmp	.+26     	; 0x17aa <__udivmodsi4_ep>

00001790 <__udivmodsi4_loop>:
    1790:	aa 1f       	adc	r26, r26
    1792:	bb 1f       	adc	r27, r27
    1794:	ee 1f       	adc	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	a2 17       	cp	r26, r18
    179a:	b3 07       	cpc	r27, r19
    179c:	e4 07       	cpc	r30, r20
    179e:	f5 07       	cpc	r31, r21
    17a0:	20 f0       	brcs	.+8      	; 0x17aa <__udivmodsi4_ep>
    17a2:	a2 1b       	sub	r26, r18
    17a4:	b3 0b       	sbc	r27, r19
    17a6:	e4 0b       	sbc	r30, r20
    17a8:	f5 0b       	sbc	r31, r21

000017aa <__udivmodsi4_ep>:
    17aa:	66 1f       	adc	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	88 1f       	adc	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	1a 94       	dec	r1
    17b4:	69 f7       	brne	.-38     	; 0x1790 <__udivmodsi4_loop>
    17b6:	60 95       	com	r22
    17b8:	70 95       	com	r23
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	bd 01       	movw	r22, r26
    17c4:	cf 01       	movw	r24, r30
    17c6:	08 95       	ret

000017c8 <__muluhisi3>:
    17c8:	3a d0       	rcall	.+116    	; 0x183e <__umulhisi3>
    17ca:	a5 9f       	mul	r26, r21
    17cc:	90 0d       	add	r25, r0
    17ce:	b4 9f       	mul	r27, r20
    17d0:	90 0d       	add	r25, r0
    17d2:	a4 9f       	mul	r26, r20
    17d4:	80 0d       	add	r24, r0
    17d6:	91 1d       	adc	r25, r1
    17d8:	11 24       	eor	r1, r1
    17da:	08 95       	ret

000017dc <__prologue_saves__>:
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	ca 1b       	sub	r28, r26
    1806:	db 0b       	sbc	r29, r27
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	09 94       	ijmp

0000180e <__epilogue_restores__>:
    180e:	2a 88       	ldd	r2, Y+18	; 0x12
    1810:	39 88       	ldd	r3, Y+17	; 0x11
    1812:	48 88       	ldd	r4, Y+16	; 0x10
    1814:	5f 84       	ldd	r5, Y+15	; 0x0f
    1816:	6e 84       	ldd	r6, Y+14	; 0x0e
    1818:	7d 84       	ldd	r7, Y+13	; 0x0d
    181a:	8c 84       	ldd	r8, Y+12	; 0x0c
    181c:	9b 84       	ldd	r9, Y+11	; 0x0b
    181e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1820:	b9 84       	ldd	r11, Y+9	; 0x09
    1822:	c8 84       	ldd	r12, Y+8	; 0x08
    1824:	df 80       	ldd	r13, Y+7	; 0x07
    1826:	ee 80       	ldd	r14, Y+6	; 0x06
    1828:	fd 80       	ldd	r15, Y+5	; 0x05
    182a:	0c 81       	ldd	r16, Y+4	; 0x04
    182c:	1b 81       	ldd	r17, Y+3	; 0x03
    182e:	aa 81       	ldd	r26, Y+2	; 0x02
    1830:	b9 81       	ldd	r27, Y+1	; 0x01
    1832:	ce 0f       	add	r28, r30
    1834:	d1 1d       	adc	r29, r1
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	ed 01       	movw	r28, r26
    183c:	08 95       	ret

0000183e <__umulhisi3>:
    183e:	a2 9f       	mul	r26, r18
    1840:	b0 01       	movw	r22, r0
    1842:	b3 9f       	mul	r27, r19
    1844:	c0 01       	movw	r24, r0
    1846:	a3 9f       	mul	r26, r19
    1848:	01 d0       	rcall	.+2      	; 0x184c <__umulhisi3+0xe>
    184a:	b2 9f       	mul	r27, r18
    184c:	70 0d       	add	r23, r0
    184e:	81 1d       	adc	r24, r1
    1850:	11 24       	eor	r1, r1
    1852:	91 1d       	adc	r25, r1
    1854:	08 95       	ret

00001856 <_exit>:
    1856:	f8 94       	cli

00001858 <__stop_program>:
    1858:	ff cf       	rjmp	.-2      	; 0x1858 <__stop_program>
