
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001970  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0000975c  0000175c  00001810  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b7  00803e04  00803e04  00001a28  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006dab  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002796  00000000  00000000  00008c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ee9  00000000  00000000  0000b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000944  00000000  00000000  0000d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021c1  00000000  00000000  0000dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000167d  00000000  00000000  0000fda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00011426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	24 c1       	rjmp	.+584    	; 0x250 <__vector_3>
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	5c c5       	rjmp	.+2744   	; 0xac6 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	b8 c1       	rjmp	.+880    	; 0x386 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	e7 c6       	rjmp	.+3534   	; 0xdfc <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e0 e7       	ldi	r30, 0x70	; 112
      48:	f9 e1       	ldi	r31, 0x19	; 25
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ab 3b       	cpi	r26, 0xBB	; 187
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	28 d2       	rcall	.+1104   	; 0x4b8 <main>
      68:	77 cb       	rjmp	.-2322   	; 0xfffff758 <__eeprom_end+0xff7ef758>

0000006a <__bad_interrupt>:
      6a:	36 c1       	rjmp	.+620    	; 0x2d8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <led_hmi_on>:
     1a2:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <current_pwr_state>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <led_hmi_on+0xe>
     1aa:	80 e1       	ldi	r24, 0x10	; 16
     1ac:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b0:	08 95       	ret

000001b2 <led_hmi_off>:
     1b2:	80 e1       	ldi	r24, 0x10	; 16
     1b4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1b8:	08 95       	ret

000001ba <toggle_hmi_led>:
     1ba:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <current_pwr_state>
     1be:	88 23       	and	r24, r24
     1c0:	21 f0       	breq	.+8      	; 0x1ca <toggle_hmi_led+0x10>
     1c2:	80 e1       	ldi	r24, 0x10	; 16
     1c4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     1c8:	08 95       	ret
     1ca:	80 e1       	ldi	r24, 0x10	; 16
     1cc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1d0:	08 95       	ret

000001d2 <dim_display>:
     1d2:	18 16       	cp	r1, r24
     1d4:	19 06       	cpc	r1, r25
     1d6:	44 f4       	brge	.+16     	; 0x1e8 <dim_display+0x16>
     1d8:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <current_pwr_state>
     1dc:	88 23       	and	r24, r24
     1de:	21 f0       	breq	.+8      	; 0x1e8 <dim_display+0x16>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1ee:	08 95       	ret

000001f0 <display_enable>:
     1f0:	e0 e0       	ldi	r30, 0x00	; 0
     1f2:	f4 e0       	ldi	r31, 0x04	; 4
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	85 83       	std	Z+5, r24	; 0x05
     1f8:	92 e4       	ldi	r25, 0x42	; 66
     1fa:	9a 95       	dec	r25
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <display_enable+0xa>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <display_enable+0x10>
     200:	86 83       	std	Z+6, r24	; 0x06
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	8a 95       	dec	r24
     206:	f1 f7       	brne	.-4      	; 0x204 <display_enable+0x14>
     208:	00 c0       	rjmp	.+0      	; 0x20a <display_enable+0x1a>
     20a:	08 95       	ret

0000020c <set_display_data_pins>:
     20c:	e0 e4       	ldi	r30, 0x40	; 64
     20e:	f4 e0       	ldi	r31, 0x04	; 4
     210:	94 81       	ldd	r25, Z+4	; 0x04
     212:	90 7f       	andi	r25, 0xF0	; 240
     214:	94 83       	std	Z+4, r25	; 0x04
     216:	94 81       	ldd	r25, Z+4	; 0x04
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	98 2b       	or	r25, r24
     21c:	94 83       	std	Z+4, r25	; 0x04
     21e:	08 95       	ret

00000220 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     226:	08 95       	ret

00000228 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     228:	80 e4       	ldi	r24, 0x40	; 64
     22a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     22e:	08 95       	ret

00000230 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     238:	81 83       	std	Z+1, r24	; 0x01
     23a:	08 95       	ret

0000023c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     242:	08 95       	ret

00000244 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     244:	e0 e2       	ldi	r30, 0x20	; 32
     246:	f4 e0       	ldi	r31, 0x04	; 4
     248:	85 89       	ldd	r24, Z+21	; 0x15
     24a:	89 60       	ori	r24, 0x09	; 9
     24c:	85 8b       	std	Z+21, r24	; 0x15
     24e:	08 95       	ret

00000250 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	8f 93       	push	r24
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     260:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     264:	82 ff       	sbrs	r24, 2
     266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_3+0x28>
		flag_button_0_pressed = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     26e:	e9 e0       	ldi	r30, 0x09	; 9
     270:	f4 e0       	ldi	r31, 0x04	; 4
     272:	80 81       	ld	r24, Z
     274:	84 70       	andi	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     278:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     27c:	83 ff       	sbrs	r24, 3
     27e:	08 c0       	rjmp	.+16     	; 0x290 <__vector_3+0x40>
		flag_button_1_pressed = true;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     286:	e9 e0       	ldi	r30, 0x09	; 9
     288:	f4 e0       	ldi	r31, 0x04	; 4
     28a:	80 81       	ld	r24, Z
     28c:	88 70       	andi	r24, 0x08	; 8
     28e:	80 83       	st	Z, r24
	}
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	8f 93       	push	r24
     2ac:	ef 93       	push	r30
     2ae:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     2b0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     2b4:	85 ff       	sbrs	r24, 5
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <__vector_4+0x28>
		flag_heartbeat = true;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     2be:	e9 e2       	ldi	r30, 0x29	; 41
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	80 81       	ld	r24, Z
     2c4:	80 72       	andi	r24, 0x20	; 32
     2c6:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	8f 91       	pop	r24
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_default>:

ISR(BADISR_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	1f 93       	push	r17
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
     304:	c4 e1       	ldi	r28, 0x14	; 20
     306:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     308:	68 94       	set
     30a:	ee 24       	eor	r14, r14
     30c:	e5 f8       	bld	r14, 5
     30e:	ff 24       	eor	r15, r15
     310:	f2 f8       	bld	r15, 2
     312:	10 e1       	ldi	r17, 0x10	; 16
ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
	{
		led_hmi_on();
     314:	46 df       	rcall	.-372    	; 0x1a2 <led_hmi_on>
     316:	8f e4       	ldi	r24, 0x4F	; 79
     318:	93 ec       	ldi	r25, 0xC3	; 195
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <__vector_default+0x42>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <__vector_default+0x48>
     320:	00 00       	nop
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     322:	f7 01       	movw	r30, r14
     324:	16 83       	std	Z+6, r17	; 0x06
     326:	8f e4       	ldi	r24, 0x4F	; 79
     328:	93 ec       	ldi	r25, 0xC3	; 195
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <__vector_default+0x52>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_default+0x58>
     330:	00 00       	nop
     332:	21 97       	sbiw	r28, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     334:	79 f7       	brne	.-34     	; 0x314 <__vector_default+0x3c>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	fa e0       	ldi	r31, 0x0A	; 10
     366:	8b e2       	ldi	r24, 0x2B	; 43
     368:	9a e0       	ldi	r25, 0x0A	; 10
     36a:	86 a3       	std	Z+38, r24	; 0x26
     36c:	97 a3       	std	Z+39, r25	; 0x27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	82 87       	std	Z+10, r24	; 0x0a
     372:	08 95       	ret

00000374 <init_heatbeat_monitor>:
     374:	67 df       	rcall	.-306    	; 0x244 <setup_interrupt_for_hb_edge_detection>
     376:	f5 df       	rcall	.-22     	; 0x362 <setup_interrupt_timeout_detection>
     378:	08 95       	ret

0000037a <heartbeat_monitor>:
     37a:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <flag_heartbeat>
     37e:	81 11       	cpse	r24, r1
     380:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_heartbeat>
     384:	08 95       	ret

00000386 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     390:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_bpi_heartbeat_ok>
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <mainloop_standby>:
	toggle_hmi_led();
	// send_sbc_heartbeat_count_to_bpi();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     39e:	90 91 18 3e 	lds	r25, 0x3E18	; 0x803e18 <flag_button_0_pressed>
     3a2:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_button_1_pressed>
     3a6:	81 11       	cpse	r24, r1
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <mainloop_standby+0x10>
     3aa:	99 23       	and	r25, r25
     3ac:	41 f0       	breq	.+16     	; 0x3be <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     3ae:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_0_pressed>
		flag_button_1_pressed = false;
     3b2:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <next_pwr_state>
		goto_pwr_state(next_pwr_state);
     3bc:	f9 d2       	rcall	.+1522   	; 0x9b0 <goto_pwr_state>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <mainloop_standby+0x26>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <mainloop_standby+0x30>
     3ce:	00 00       	nop
     3d0:	08 95       	ret

000003d2 <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
	if (flag_entering_mainloop_display_on) {
     3d2:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_entering_mainloop_display_on>
     3d6:	88 23       	and	r24, r24
     3d8:	b9 f0       	breq	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		flag_entering_mainloop_display_on = false;
     3da:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     3de:	83 e5       	ldi	r24, 0x53	; 83
     3e0:	94 e0       	ldi	r25, 0x04	; 4
     3e2:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     3e6:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     3ea:	8b e7       	ldi	r24, 0x7B	; 123
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <button0_action>
     3f2:	90 93 16 3e 	sts	0x3E16, r25	; 0x803e16 <button0_action+0x1>
		button1_action = show_menu_actions;
     3f6:	84 e6       	ldi	r24, 0x64	; 100
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <button1_action>
     3fe:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <button1_action+0x1>
		dim_display(1);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	e5 de       	rcall	.-566    	; 0x1d2 <dim_display>
	}
	show_menu();
     408:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     40c:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     410:	09 95       	icall
	sprintf(buffer, "flag0: %d, flag1: %d\n",flag_button_0_pressed,flag_button_1_pressed);
     412:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_0_pressed>
     416:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <flag_button_1_pressed>
     41a:	1f 92       	push	r1
     41c:	9f 93       	push	r25
     41e:	1f 92       	push	r1
     420:	8f 93       	push	r24
     422:	8e e5       	ldi	r24, 0x5E	; 94
     424:	97 e9       	ldi	r25, 0x97	; 151
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	82 e8       	ldi	r24, 0x82	; 130
     42c:	9e e3       	ldi	r25, 0x3E	; 62
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	76 d6       	rcall	.+3308   	; 0x1120 <sprintf>
	USART0_sendString(buffer);
     434:	82 e8       	ldi	r24, 0x82	; 130
     436:	9e e3       	ldi	r25, 0x3E	; 62
     438:	8e d3       	rcall	.+1820   	; 0xb56 <USART0_sendString>
     43a:	2f ef       	ldi	r18, 0xFF	; 255
     43c:	30 e7       	ldi	r19, 0x70	; 112
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	21 50       	subi	r18, 0x01	; 1
     442:	30 40       	sbci	r19, 0x00	; 0
     444:	80 40       	sbci	r24, 0x00	; 0
     446:	e1 f7       	brne	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     44a:	00 00       	nop
	_delay_ms(100);
	while(!flag_button_0_pressed & !flag_button_1_pressed) {
     44c:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <flag_button_1_pressed>
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	98 27       	eor	r25, r24
     454:	2d b7       	in	r18, 0x3d	; 61
     456:	3e b7       	in	r19, 0x3e	; 62
     458:	28 5f       	subi	r18, 0xF8	; 248
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	2d bf       	out	0x3d, r18	; 61
     45e:	3e bf       	out	0x3e, r19	; 62
     460:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_0_pressed>
     464:	89 17       	cp	r24, r25
     466:	e0 f3       	brcs	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		;
	}
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     468:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_0_pressed>
     46c:	88 23       	and	r24, r24
     46e:	39 f0       	breq	.+14     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		flag_button_0_pressed = false;
     470:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_0_pressed>
		button0_action();
     474:	e0 91 15 3e 	lds	r30, 0x3E15	; 0x803e15 <button0_action>
     478:	f0 91 16 3e 	lds	r31, 0x3E16	; 0x803e16 <button0_action+0x1>
     47c:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     47e:	7e de       	rcall	.-772    	; 0x17c <button_1_pressed>
     480:	89 2b       	or	r24, r25
     482:	39 f0       	breq	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		flag_button_1_pressed = false;
     484:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_button_1_pressed>
		button1_action();
     488:	e0 91 13 3e 	lds	r30, 0x3E13	; 0x803e13 <button1_action>
     48c:	f0 91 14 3e 	lds	r31, 0x3E14	; 0x803e14 <button1_action+0x1>
     490:	09 95       	icall
     492:	08 95       	ret

00000494 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     494:	3b de       	rcall	.-906    	; 0x10c <init_flags>
	init_pins();
     496:	4e de       	rcall	.-868    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     498:	6d df       	rcall	.-294    	; 0x374 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     49a:	7a de       	rcall	.-780    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     49c:	49 d3       	rcall	.+1682   	; 0xb30 <init_uart>
	init_display();
     49e:	29 d1       	rcall	.+594    	; 0x6f2 <init_display>
	adc_init();
     4a0:	f0 dd       	rcall	.-1056   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "next BU in 168h\n09.01.1990 12:57");
     4a2:	81 e2       	ldi	r24, 0x21	; 33
     4a4:	e4 e7       	ldi	r30, 0x74	; 116
     4a6:	f7 e9       	ldi	r31, 0x97	; 151
     4a8:	aa e1       	ldi	r26, 0x1A	; 26
     4aa:	be e3       	ldi	r27, 0x3E	; 62
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	8a 95       	dec	r24
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <init_sbu+0x18>
	sei();
     4b4:	78 94       	sei
     4b6:	08 95       	ret

000004b8 <main>:
}

int main(void)
{
	init_sbu();
     4b8:	ed df       	rcall	.-38     	; 0x494 <init_sbu>

	display_write_string("Standby Unit\nready!");
     4ba:	85 e9       	ldi	r24, 0x95	; 149
     4bc:	97 e9       	ldi	r25, 0x97	; 151
     4be:	c9 d1       	rcall	.+914    	; 0x852 <display_write_string>
	USART0_sendString("I:STARTED");
     4c0:	89 ea       	ldi	r24, 0xA9	; 169
     4c2:	97 e9       	ldi	r25, 0x97	; 151
     4c4:	48 d3       	rcall	.+1680   	; 0xb56 <USART0_sendString>
	dim_display(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	83 de       	rcall	.-762    	; 0x1d2 <dim_display>
	
	current_pwr_state = active;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4d2:	c1 e9       	ldi	r28, 0x91	; 145
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f9 ee       	ldi	r31, 0xE9	; 233
     4da:	cf 2e       	mov	r12, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	df 2e       	mov	r13, r31
     4e0:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4e2:	0f 2e       	mov	r0, r31
     4e4:	ff ec       	ldi	r31, 0xCF	; 207
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4ee:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4f0:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <current_pwr_state>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	39 f0       	breq	.+14     	; 0x506 <main+0x4e>
     4f8:	20 f0       	brcs	.+8      	; 0x502 <main+0x4a>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	29 f4       	brne	.+10     	; 0x508 <main+0x50>
			case active:
				mainloop = mainloop_active;
     4fe:	e8 01       	movw	r28, r16
     500:	03 c0       	rjmp	.+6      	; 0x508 <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     502:	e7 01       	movw	r28, r14
				break;
     504:	01 c0       	rjmp	.+2      	; 0x508 <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     506:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     508:	fe 01       	movw	r30, r28
     50a:	09 95       	icall
    }
     50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <main+0x38>

0000050e <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     50e:	e0 e5       	ldi	r30, 0x50	; 80
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	82 60       	ori	r24, 0x02	; 2
     516:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     518:	80 81       	ld	r24, Z
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	80 83       	st	Z, r24
	sleep_cpu();
     51e:	88 95       	sleep
     520:	08 95       	ret

00000522 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	55 de       	rcall	.-854    	; 0x1d2 <dim_display>
	heartbeat_monitor();
     528:	28 df       	rcall	.-432    	; 0x37a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     52a:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_bpi_heartbeat_ok>
     52e:	81 11       	cpse	r24, r1
     530:	01 c0       	rjmp	.+2      	; 0x534 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     532:	84 de       	rcall	.-760    	; 0x23c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     534:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_0_pressed>
     538:	88 23       	and	r24, r24
     53a:	19 f0       	breq	.+6      	; 0x542 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     53c:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_0_pressed>
		led_hmi_off();
     540:	38 de       	rcall	.-912    	; 0x1b2 <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     542:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_button_1_pressed>
     546:	88 23       	and	r24, r24
     548:	29 f0       	breq	.+10     	; 0x554 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     54a:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     54e:	83 eb       	ldi	r24, 0xB3	; 179
     550:	97 e9       	ldi	r25, 0x97	; 151
     552:	01 d3       	rcall	.+1538   	; 0xb56 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     554:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_usart_string_receive_complete>
     558:	88 23       	and	r24, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <mainloop_active+0x40>
		USART0_process_incoming_message();
     55c:	82 d3       	rcall	.+1796   	; 0xc62 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     55e:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     562:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_string_for_display_received>
     566:	88 23       	and	r24, r24
     568:	69 f0       	breq	.+26     	; 0x584 <mainloop_active+0x62>
		flag_string_for_display_received = false;
     56a:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_string_for_display_received>
		display_clear();
     56e:	84 d1       	rcall	.+776    	; 0x878 <display_clear>
		display_write_string(display_line1_content);
     570:	81 e5       	ldi	r24, 0x51	; 81
     572:	9e e3       	ldi	r25, 0x3E	; 62
     574:	6e d1       	rcall	.+732    	; 0x852 <display_write_string>
		display_next_line();
     576:	63 d1       	rcall	.+710    	; 0x83e <display_next_line>
		display_write_string(display_line2_content);
     578:	8b e3       	ldi	r24, 0x3B	; 59
     57a:	9e e3       	ldi	r25, 0x3E	; 62
     57c:	6a d1       	rcall	.+724    	; 0x852 <display_write_string>
		USART0_sendString_w_eol("New Display\n"); //<- line is being received, but no new content on display??
     57e:	8d eb       	ldi	r24, 0xBD	; 189
     580:	97 e9       	ldi	r25, 0x97	; 151
     582:	0a d3       	rcall	.+1556   	; 0xb98 <USART0_sendString_w_eol>
	}
	
	if (flag_pwr_state_change_request == true) {
     584:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_pwr_state_change_request>
     588:	88 23       	and	r24, r24
     58a:	49 f0       	breq	.+18     	; 0x59e <mainloop_active+0x7c>
		display_clear();
     58c:	75 d1       	rcall	.+746    	; 0x878 <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     58e:	8a ec       	ldi	r24, 0xCA	; 202
     590:	97 e9       	ldi	r25, 0x97	; 151
     592:	5f d1       	rcall	.+702    	; 0x852 <display_write_string>
		flag_pwr_state_change_request = false;
     594:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_pwr_state_change_request>
		goto_pwr_state(next_pwr_state);
     598:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <next_pwr_state>
     59c:	09 d2       	rcall	.+1042   	; 0x9b0 <goto_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     59e:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_human_readable_timestamp_next_bu_received>
     5a2:	88 23       	and	r24, r24
     5a4:	31 f0       	breq	.+12     	; 0x5b2 <mainloop_active+0x90>
		display_clear();
     5a6:	68 d1       	rcall	.+720    	; 0x878 <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     5a8:	8a e1       	ldi	r24, 0x1A	; 26
     5aa:	9e e3       	ldi	r25, 0x3E	; 62
     5ac:	52 d1       	rcall	.+676    	; 0x852 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     5ae:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_human_readable_timestamp_next_bu_received>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     5b2:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_received_seconds_to_next_bu>
     5b6:	88 23       	and	r24, r24
     5b8:	09 f1       	breq	.+66     	; 0x5fc <mainloop_active+0xda>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     5ba:	80 91 4f 3e 	lds	r24, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x3>
     5be:	8f 93       	push	r24
     5c0:	80 91 4e 3e 	lds	r24, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x2>
     5c4:	8f 93       	push	r24
     5c6:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <seconds_to_next_bu+0x1>
     5ca:	8f 93       	push	r24
     5cc:	80 91 4c 3e 	lds	r24, 0x3E4C	; 0x803e4c <seconds_to_next_bu>
     5d0:	8f 93       	push	r24
     5d2:	87 ee       	ldi	r24, 0xE7	; 231
     5d4:	97 e9       	ldi	r25, 0x97	; 151
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	82 e8       	ldi	r24, 0x82	; 130
     5dc:	9e e3       	ldi	r25, 0x3E	; 62
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	9e d5       	rcall	.+2876   	; 0x1120 <sprintf>
		USART0_sendString_w_eol(buffer);
     5e4:	82 e8       	ldi	r24, 0x82	; 130
     5e6:	9e e3       	ldi	r25, 0x3E	; 62
     5e8:	d7 d2       	rcall	.+1454   	; 0xb98 <USART0_sendString_w_eol>
		flag_received_seconds_to_next_bu = false;
     5ea:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5ee:	2f d2       	rcall	.+1118   	; 0xa4e <rtc_write_seconds_to_cmp>
		rtc_setup();
     5f0:	24 d2       	rcall	.+1096   	; 0xa3a <rtc_setup>
     5f2:	8d b7       	in	r24, 0x3d	; 61
     5f4:	9e b7       	in	r25, 0x3e	; 62
     5f6:	08 96       	adiw	r24, 0x08	; 8
     5f8:	8d bf       	out	0x3d, r24	; 61
     5fa:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     5fc:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_goto_sleep>
     600:	88 23       	and	r24, r24
     602:	79 f0       	breq	.+30     	; 0x622 <mainloop_active+0x100>
		flag_goto_sleep = false;
     604:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_goto_sleep>
		USART0_sendString_w_eol("going to sleep ...\n");
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	98 e9       	ldi	r25, 0x98	; 152
     60c:	c5 d2       	rcall	.+1418   	; 0xb98 <USART0_sendString_w_eol>
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	20 e7       	ldi	r18, 0x70	; 112
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	91 50       	subi	r25, 0x01	; 1
     616:	20 40       	sbci	r18, 0x00	; 0
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <mainloop_active+0xf2>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <mainloop_active+0xfc>
     61e:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     620:	76 df       	rcall	.-276    	; 0x50e <goto_sleep_standby>

	}
	
	if (flag_request_current_measurement == true) {
     622:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_request_current_measurement>
     626:	88 23       	and	r24, r24
     628:	d9 f0       	breq	.+54     	; 0x660 <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     62a:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     62e:	4e dd       	rcall	.-1380   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"Cur: %d", input_current);
     630:	9f 93       	push	r25
     632:	8f 93       	push	r24
     634:	88 e1       	ldi	r24, 0x18	; 24
     636:	98 e9       	ldi	r25, 0x98	; 152
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	82 e8       	ldi	r24, 0x82	; 130
     63e:	9e e3       	ldi	r25, 0x3E	; 62
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	6d d5       	rcall	.+2778   	; 0x1120 <sprintf>
		USART0_sendString_w_eol(buffer);
     646:	82 e8       	ldi	r24, 0x82	; 130
     648:	9e e3       	ldi	r25, 0x3E	; 62
     64a:	a6 d2       	rcall	.+1356   	; 0xb98 <USART0_sendString_w_eol>
		display_clear();
     64c:	15 d1       	rcall	.+554    	; 0x878 <display_clear>
		display_write_string(buffer);
     64e:	82 e8       	ldi	r24, 0x82	; 130
     650:	9e e3       	ldi	r25, 0x3E	; 62
     652:	ff d0       	rcall	.+510    	; 0x852 <display_write_string>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
	}
	
	if	(flag_request_temperature_measurement == true) {
     660:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_request_temperature_measurement>
     664:	88 23       	and	r24, r24
     666:	d9 f0       	breq	.+54     	; 0x69e <mainloop_active+0x17c>
		flag_request_temperature_measurement = false;
     668:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     66c:	3b dd       	rcall	.-1418   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TMP: %d", temperature);
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	98 e9       	ldi	r25, 0x98	; 152
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	82 e8       	ldi	r24, 0x82	; 130
     67c:	9e e3       	ldi	r25, 0x3E	; 62
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	4e d5       	rcall	.+2716   	; 0x1120 <sprintf>
		USART0_sendString_w_eol(buffer);
     684:	82 e8       	ldi	r24, 0x82	; 130
     686:	9e e3       	ldi	r25, 0x3E	; 62
     688:	87 d2       	rcall	.+1294   	; 0xb98 <USART0_sendString_w_eol>
		display_clear();
     68a:	f6 d0       	rcall	.+492    	; 0x878 <display_clear>
		display_write_string(buffer);
     68c:	82 e8       	ldi	r24, 0x82	; 130
     68e:	9e e3       	ldi	r25, 0x3E	; 62
     690:	e0 d0       	rcall	.+448    	; 0x852 <display_write_string>
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
	}
	
	if (flag_request_3v3_measurement == true) {
     69e:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_request_3v3_measurement>
     6a2:	88 23       	and	r24, r24
     6a4:	d9 f0       	breq	.+54     	; 0x6dc <mainloop_active+0x1ba>
		flag_request_3v3_measurement = false;
     6a6:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     6aa:	04 dd       	rcall	.-1528   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V3: %d", voltage_3v3);
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	88 e2       	ldi	r24, 0x28	; 40
     6b2:	98 e9       	ldi	r25, 0x98	; 152
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	82 e8       	ldi	r24, 0x82	; 130
     6ba:	9e e3       	ldi	r25, 0x3E	; 62
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	2f d5       	rcall	.+2654   	; 0x1120 <sprintf>
		USART0_sendString_w_eol(buffer);
     6c2:	82 e8       	ldi	r24, 0x82	; 130
     6c4:	9e e3       	ldi	r25, 0x3E	; 62
     6c6:	68 d2       	rcall	.+1232   	; 0xb98 <USART0_sendString_w_eol>
		display_clear();
     6c8:	d7 d0       	rcall	.+430    	; 0x878 <display_clear>
		display_write_string(buffer);
     6ca:	82 e8       	ldi	r24, 0x82	; 130
     6cc:	9e e3       	ldi	r25, 0x3E	; 62
     6ce:	c1 d0       	rcall	.+386    	; 0x852 <display_write_string>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	20 e7       	ldi	r18, 0x70	; 112
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	91 50       	subi	r25, 0x01	; 1
     6e4:	20 40       	sbci	r18, 0x00	; 0
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <mainloop_active+0x1c0>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <mainloop_active+0x1ca>
     6ec:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     6ee:	65 dd       	rcall	.-1334   	; 0x1ba <toggle_hmi_led>
     6f0:	08 95       	ret

000006f2 <init_display>:
     6f2:	2f e7       	ldi	r18, 0x7F	; 127
     6f4:	8a e1       	ldi	r24, 0x1A	; 26
     6f6:	96 e0       	ldi	r25, 0x06	; 6
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	90 40       	sbci	r25, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <init_display+0x6>
     700:	00 c0       	rjmp	.+0      	; 0x702 <init_display+0x10>
     702:	00 00       	nop
     704:	91 dd       	rcall	.-1246   	; 0x228 <display_clear_rs_pin>
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	81 dd       	rcall	.-1278   	; 0x20c <set_display_data_pins>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	71 dd       	rcall	.-1310   	; 0x1f0 <display_enable>
     70e:	87 e8       	ldi	r24, 0x87	; 135
     710:	93 e1       	ldi	r25, 0x13	; 19
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <init_display+0x20>
     716:	00 c0       	rjmp	.+0      	; 0x718 <init_display+0x26>
     718:	00 00       	nop
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	77 dd       	rcall	.-1298   	; 0x20c <set_display_data_pins>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	67 dd       	rcall	.-1330   	; 0x1f0 <display_enable>
     722:	87 e8       	ldi	r24, 0x87	; 135
     724:	93 e1       	ldi	r25, 0x13	; 19
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <init_display+0x34>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <init_display+0x3a>
     72c:	00 00       	nop
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	6d dd       	rcall	.-1318   	; 0x20c <set_display_data_pins>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	5d dd       	rcall	.-1350   	; 0x1f0 <display_enable>
     736:	87 e8       	ldi	r24, 0x87	; 135
     738:	93 e1       	ldi	r25, 0x13	; 19
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <init_display+0x48>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <init_display+0x4e>
     740:	00 00       	nop
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	63 dd       	rcall	.-1338   	; 0x20c <set_display_data_pins>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	53 dd       	rcall	.-1370   	; 0x1f0 <display_enable>
     74a:	87 e8       	ldi	r24, 0x87	; 135
     74c:	93 e1       	ldi	r25, 0x13	; 19
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <init_display+0x5c>
     752:	00 c0       	rjmp	.+0      	; 0x754 <init_display+0x62>
     754:	00 00       	nop
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	59 dd       	rcall	.-1358   	; 0x20c <set_display_data_pins>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	49 dd       	rcall	.-1390   	; 0x1f0 <display_enable>
     75e:	87 e8       	ldi	r24, 0x87	; 135
     760:	93 e1       	ldi	r25, 0x13	; 19
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <init_display+0x70>
     766:	00 c0       	rjmp	.+0      	; 0x768 <init_display+0x76>
     768:	00 00       	nop
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	4f dd       	rcall	.-1378   	; 0x20c <set_display_data_pins>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	3f dd       	rcall	.-1410   	; 0x1f0 <display_enable>
     772:	87 e8       	ldi	r24, 0x87	; 135
     774:	93 e1       	ldi	r25, 0x13	; 19
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <init_display+0x84>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <init_display+0x8a>
     77c:	00 00       	nop
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	45 dd       	rcall	.-1398   	; 0x20c <set_display_data_pins>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	35 dd       	rcall	.-1430   	; 0x1f0 <display_enable>
     786:	87 e8       	ldi	r24, 0x87	; 135
     788:	93 e1       	ldi	r25, 0x13	; 19
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <init_display+0x98>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <init_display+0x9e>
     790:	00 00       	nop
     792:	8c e0       	ldi	r24, 0x0C	; 12
     794:	3b dd       	rcall	.-1418   	; 0x20c <set_display_data_pins>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	2b dd       	rcall	.-1450   	; 0x1f0 <display_enable>
     79a:	87 e8       	ldi	r24, 0x87	; 135
     79c:	93 e1       	ldi	r25, 0x13	; 19
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <init_display+0xac>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <init_display+0xb2>
     7a4:	00 00       	nop
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	31 dd       	rcall	.-1438   	; 0x20c <set_display_data_pins>
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	21 dd       	rcall	.-1470   	; 0x1f0 <display_enable>
     7ae:	87 e8       	ldi	r24, 0x87	; 135
     7b0:	93 e1       	ldi	r25, 0x13	; 19
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <init_display+0xc0>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <init_display+0xc6>
     7b8:	00 00       	nop
     7ba:	86 e0       	ldi	r24, 0x06	; 6
     7bc:	27 dd       	rcall	.-1458   	; 0x20c <set_display_data_pins>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	17 dd       	rcall	.-1490   	; 0x1f0 <display_enable>
     7c2:	87 e8       	ldi	r24, 0x87	; 135
     7c4:	93 e1       	ldi	r25, 0x13	; 19
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <init_display+0xd4>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <init_display+0xda>
     7cc:	00 00       	nop
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	1d dd       	rcall	.-1478   	; 0x20c <set_display_data_pins>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0d dd       	rcall	.-1510   	; 0x1f0 <display_enable>
     7d6:	87 e8       	ldi	r24, 0x87	; 135
     7d8:	93 e1       	ldi	r25, 0x13	; 19
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <init_display+0xe8>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <init_display+0xee>
     7e0:	00 00       	nop
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	13 dd       	rcall	.-1498   	; 0x20c <set_display_data_pins>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	03 dd       	rcall	.-1530   	; 0x1f0 <display_enable>
     7ea:	87 e8       	ldi	r24, 0x87	; 135
     7ec:	93 e1       	ldi	r25, 0x13	; 19
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <init_display+0xfc>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <init_display+0x102>
     7f4:	00 00       	nop
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	09 dd       	rcall	.-1518   	; 0x20c <set_display_data_pins>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	f9 dc       	rcall	.-1550   	; 0x1f0 <display_enable>
     7fe:	87 e8       	ldi	r24, 0x87	; 135
     800:	93 e1       	ldi	r25, 0x13	; 19
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <init_display+0x110>
     806:	00 c0       	rjmp	.+0      	; 0x808 <init_display+0x116>
     808:	00 00       	nop
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	ff dc       	rcall	.-1538   	; 0x20c <set_display_data_pins>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	ef dc       	rcall	.-1570   	; 0x1f0 <display_enable>
     812:	87 e8       	ldi	r24, 0x87	; 135
     814:	93 e1       	ldi	r25, 0x13	; 19
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <init_display+0x124>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <init_display+0x12a>
     81c:	00 00       	nop
     81e:	08 95       	ret

00000820 <display_write_char>:
     820:	cf 93       	push	r28
     822:	c8 2f       	mov	r28, r24
     824:	fd dc       	rcall	.-1542   	; 0x220 <display_set_rs_pin>
     826:	8c 2f       	mov	r24, r28
     828:	82 95       	swap	r24
     82a:	8f 70       	andi	r24, 0x0F	; 15
     82c:	ef dc       	rcall	.-1570   	; 0x20c <set_display_data_pins>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	df dc       	rcall	.-1602   	; 0x1f0 <display_enable>
     832:	8c 2f       	mov	r24, r28
     834:	eb dc       	rcall	.-1578   	; 0x20c <set_display_data_pins>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	db dc       	rcall	.-1610   	; 0x1f0 <display_enable>
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <display_next_line>:
     83e:	f4 dc       	rcall	.-1560   	; 0x228 <display_clear_rs_pin>
     840:	8c e0       	ldi	r24, 0x0C	; 12
     842:	e4 dc       	rcall	.-1592   	; 0x20c <set_display_data_pins>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	d4 dc       	rcall	.-1624   	; 0x1f0 <display_enable>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	e0 dc       	rcall	.-1600   	; 0x20c <set_display_data_pins>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	d0 dc       	rcall	.-1632   	; 0x1f0 <display_enable>
     850:	08 95       	ret

00000852 <display_write_string>:
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ec 01       	movw	r28, r24
     858:	e3 dc       	rcall	.-1594   	; 0x220 <display_set_rs_pin>
     85a:	88 81       	ld	r24, Y
     85c:	88 23       	and	r24, r24
     85e:	49 f0       	breq	.+18     	; 0x872 <display_write_string+0x20>
     860:	21 96       	adiw	r28, 0x01	; 1
     862:	8a 30       	cpi	r24, 0x0A	; 10
     864:	11 f4       	brne	.+4      	; 0x86a <display_write_string+0x18>
     866:	eb df       	rcall	.-42     	; 0x83e <display_next_line>
     868:	01 c0       	rjmp	.+2      	; 0x86c <display_write_string+0x1a>
     86a:	da df       	rcall	.-76     	; 0x820 <display_write_char>
     86c:	89 91       	ld	r24, Y+
     86e:	81 11       	cpse	r24, r1
     870:	f8 cf       	rjmp	.-16     	; 0x862 <display_write_string+0x10>
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     878:	d7 dc       	rcall	.-1618   	; 0x228 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	c7 dc       	rcall	.-1650   	; 0x20c <set_display_data_pins>
	display_enable(1);
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	b7 dc       	rcall	.-1682   	; 0x1f0 <display_enable>
	set_display_data_pins(0x01);
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	c3 dc       	rcall	.-1658   	; 0x20c <set_display_data_pins>
	display_enable(1);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	b3 dc       	rcall	.-1690   	; 0x1f0 <display_enable>
     88a:	87 ea       	ldi	r24, 0xA7	; 167
     88c:	91 e6       	ldi	r25, 0x61	; 97
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <display_clear+0x16>
     892:	00 c0       	rjmp	.+0      	; 0x894 <display_clear+0x1c>
     894:	00 00       	nop
     896:	08 95       	ret

00000898 <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     898:	83 e5       	ldi	r24, 0x53	; 83
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8a0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     8a4:	08 95       	ret

000008a6 <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     8a6:	e8 df       	rcall	.-48     	; 0x878 <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     8a8:	80 e3       	ldi	r24, 0x30	; 48
     8aa:	98 e9       	ldi	r25, 0x98	; 152
     8ac:	d2 df       	rcall	.-92     	; 0x852 <display_write_string>
	button0_action = show_menu_timestamp;
     8ae:	8b e7       	ldi	r24, 0x7B	; 123
     8b0:	94 e0       	ldi	r25, 0x04	; 4
     8b2:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <button0_action>
     8b6:	90 93 16 3e 	sts	0x3E16, r25	; 0x803e16 <button0_action+0x1>
	button1_action = show_menu_actions;
     8ba:	84 e6       	ldi	r24, 0x64	; 100
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <button1_action>
     8c2:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <button1_action+0x1>
     8c6:	08 95       	ret

000008c8 <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     8c8:	84 e6       	ldi	r24, 0x64	; 100
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8d0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     8d4:	d1 df       	rcall	.-94     	; 0x878 <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     8d6:	82 e5       	ldi	r24, 0x52	; 82
     8d8:	98 e9       	ldi	r25, 0x98	; 152
     8da:	bb df       	rcall	.-138    	; 0x852 <display_write_string>
	button0_action = wake_bcu_and_do_backup_now;
     8dc:	80 e9       	ldi	r24, 0x90	; 144
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <button0_action>
     8e4:	90 93 16 3e 	sts	0x3E16, r25	; 0x803e16 <button0_action+0x1>
	button1_action = wake_bcu;
     8e8:	8c e9       	ldi	r24, 0x9C	; 156
     8ea:	94 e0       	ldi	r25, 0x04	; 4
     8ec:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <button1_action>
     8f0:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <button1_action+0x1>
     8f4:	08 95       	ret

000008f6 <show_menu_timestamp>:
}

void show_menu_timestamp() {
	show_menu = show_menu_timestamp;
     8f6:	8b e7       	ldi	r24, 0x7B	; 123
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8fe:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     902:	ba df       	rcall	.-140    	; 0x878 <display_clear>
	display_write_string(human_readable_timestamp_next_bu);
     904:	8a e1       	ldi	r24, 0x1A	; 26
     906:	9e e3       	ldi	r25, 0x3E	; 62
     908:	a4 df       	rcall	.-184    	; 0x852 <display_write_string>
	button0_action = back_to_main_menu;
     90a:	8c e4       	ldi	r24, 0x4C	; 76
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <button0_action>
     912:	90 93 16 3e 	sts	0x3E16, r25	; 0x803e16 <button0_action+0x1>
	button1_action = back_to_main_menu;
     916:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <button1_action>
     91a:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <button1_action+0x1>
     91e:	08 95       	ret

00000920 <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     920:	ab df       	rcall	.-170    	; 0x878 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     922:	84 e7       	ldi	r24, 0x74	; 116
     924:	98 e9       	ldi	r25, 0x98	; 152
     926:	95 df       	rcall	.-214    	; 0x852 <display_write_string>
	flag_schedule_backup_now = true;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_schedule_backup_now>
	next_pwr_state = active;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <next_pwr_state>
	goto_pwr_state(next_pwr_state);
     934:	3d d0       	rcall	.+122    	; 0x9b0 <goto_pwr_state>
     936:	08 95       	ret

00000938 <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     938:	9f df       	rcall	.-194    	; 0x878 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     93a:	84 e7       	ldi	r24, 0x74	; 116
     93c:	98 e9       	ldi	r25, 0x98	; 152
     93e:	89 df       	rcall	.-238    	; 0x852 <display_write_string>
	next_pwr_state = active;
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <next_pwr_state>
	goto_pwr_state(next_pwr_state);
     946:	34 d0       	rcall	.+104    	; 0x9b0 <goto_pwr_state>
     948:	08 95       	ret

0000094a <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     94a:	e0 e0       	ldi	r30, 0x00	; 0
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	80 61       	ori	r24, 0x10	; 16
     952:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     95a:	08 95       	ret

0000095c <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     95c:	e0 e0       	ldi	r30, 0x00	; 0
     95e:	f4 e0       	ldi	r31, 0x04	; 4
     960:	84 81       	ldd	r24, Z+4	; 0x04
     962:	8f 7e       	andi	r24, 0xEF	; 239
     964:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     966:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     96a:	08 95       	ret

0000096c <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     96c:	e0 e2       	ldi	r30, 0x20	; 32
     96e:	f4 e0       	ldi	r31, 0x04	; 4
     970:	84 81       	ldd	r24, Z+4	; 0x04
     972:	8d 7f       	andi	r24, 0xFD	; 253
     974:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     97c:	08 95       	ret

0000097e <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     97e:	e0 e2       	ldi	r30, 0x20	; 32
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	82 60       	ori	r24, 0x02	; 2
     986:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     988:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     98c:	08 95       	ret

0000098e <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     98e:	74 df       	rcall	.-280    	; 0x878 <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     990:	84 e9       	ldi	r24, 0x94	; 148
     992:	98 e9       	ldi	r25, 0x98	; 152
     994:	5e df       	rcall	.-324    	; 0x852 <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     996:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_bpi_heartbeat_ok>
     99a:	81 11       	cpse	r24, r1
     99c:	fe cf       	rjmp	.-4      	; 0x99a <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     99e:	6c df       	rcall	.-296    	; 0x878 <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     9a0:	8f ea       	ldi	r24, 0xAF	; 175
     9a2:	98 e9       	ldi	r25, 0x98	; 152
     9a4:	56 df       	rcall	.-340    	; 0x852 <display_write_string>
	while (vcc3v3_present() == true) {
     9a6:	aa db       	rcall	.-2220   	; 0xfc <vcc3v3_present>
     9a8:	81 11       	cpse	r24, r1
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 95       	ret

000009b0 <goto_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void goto_pwr_state(enum pwr_states pwr_state) {
     9b0:	cf 93       	push	r28
	switch(pwr_state) {
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	89 f0       	breq	.+34     	; 0x9d8 <goto_pwr_state+0x28>
     9b6:	18 f0       	brcs	.+6      	; 0x9be <goto_pwr_state+0xe>
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	e1 f0       	breq	.+56     	; 0x9f4 <goto_pwr_state+0x44>
     9bc:	31 c0       	rjmp	.+98     	; 0xa20 <goto_pwr_state+0x70>
		case standby:
			wait_until_bpi_ready_for_shutdown();
     9be:	e7 df       	rcall	.-50     	; 0x98e <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     9c0:	de df       	rcall	.-68     	; 0x97e <disable_bpi_sply>
			dim_display(0);
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	05 dc       	rcall	.-2038   	; 0x1d2 <dim_display>
			led_hmi_off();
     9c8:	f4 db       	rcall	.-2072   	; 0x1b2 <led_hmi_off>
			disable_5v0_smps();
     9ca:	c8 df       	rcall	.-112    	; 0x95c <disable_5v0_smps>
			flag_goto_sleep = true;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_goto_sleep>
			current_pwr_state = standby;
     9d2:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <current_pwr_state>
			break;
     9d6:	24 c0       	rjmp	.+72     	; 0xa20 <goto_pwr_state+0x70>
		
		case display_on:
			current_pwr_state = display_on;
     9d8:	c1 e0       	ldi	r28, 0x01	; 1
     9da:	c0 93 19 3e 	sts	0x3E19, r28	; 0x803e19 <current_pwr_state>
			set_interrupts_for_buttons();
     9de:	d8 db       	rcall	.-2128   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     9e0:	b4 df       	rcall	.-152    	; 0x94a <enable_5v0_smps>
     9e2:	86 e4       	ldi	r24, 0x46	; 70
     9e4:	90 e1       	ldi	r25, 0x10	; 16
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <goto_pwr_state+0x36>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <goto_pwr_state+0x3c>
			_delay_ms(5);
			init_display();
     9ec:	82 de       	rcall	.-764    	; 0x6f2 <init_display>
			flag_entering_mainloop_display_on = true;
     9ee:	c0 93 06 3e 	sts	0x3E06, r28	; 0x803e06 <flag_entering_mainloop_display_on>
			break;
     9f2:	16 c0       	rjmp	.+44     	; 0xa20 <goto_pwr_state+0x70>
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	e9 ec       	ldi	r30, 0xC9	; 201
     9f8:	f8 e9       	ldi	r31, 0x98	; 152
     9fa:	a1 e5       	ldi	r26, 0x51	; 81
     9fc:	be e3       	ldi	r27, 0x3E	; 62
     9fe:	01 90       	ld	r0, Z+
     a00:	0d 92       	st	X+, r0
     a02:	8a 95       	dec	r24
     a04:	e1 f7       	brne	.-8      	; 0x9fe <goto_pwr_state+0x4e>
			strcpy(display_line2_content,"Please wait ...");
     a06:	80 e1       	ldi	r24, 0x10	; 16
     a08:	e9 ed       	ldi	r30, 0xD9	; 217
     a0a:	f8 e9       	ldi	r31, 0x98	; 152
     a0c:	ab e3       	ldi	r26, 0x3B	; 59
     a0e:	be e3       	ldi	r27, 0x3E	; 62
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	8a 95       	dec	r24
     a16:	e1 f7       	brne	.-8      	; 0xa10 <goto_pwr_state+0x60>
			enable_bpi_sply();
     a18:	a9 df       	rcall	.-174    	; 0x96c <enable_bpi_sply>
			current_pwr_state = active;
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <current_pwr_state>
			break;
	}
}
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oszi, devided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a24:	e0 e4       	ldi	r30, 0x40	; 64
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	10 86       	std	Z+8, r1	; 0x08
     a2a:	11 86       	std	Z+9, r1	; 0x09
     a2c:	08 95       	ret

00000a2e <rtc_wait_for_all_status_bits_zero>:
     a2e:	e0 e4       	ldi	r30, 0x40	; 64
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	81 81       	ldd	r24, Z+1	; 0x01
     a34:	81 11       	cpse	r24, r1
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <rtc_wait_for_all_status_bits_zero+0x4>
     a38:	08 95       	ret

00000a3a <rtc_setup>:
}

void rtc_setup(void) {
	rtc_wait_for_all_status_bits_zero();
     a3a:	f9 df       	rcall	.-14     	; 0xa2e <rtc_wait_for_all_status_bits_zero>
void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	//RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm; // <- one counter increment represents 32 seconds
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV1024_gc | RTC_RTCEN_bm; // <- 1 second
     a3c:	e0 e4       	ldi	r30, 0x40	; 64
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	81 ed       	ldi	r24, 0xD1	; 209
     a42:	80 83       	st	Z, r24
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oszi, devided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	87 83       	std	Z+7, r24	; 0x07
     a4c:	08 95       	ret

00000a4e <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     a56:	c0 90 4c 3e 	lds	r12, 0x3E4C	; 0x803e4c <seconds_to_next_bu>
     a5a:	d0 90 4d 3e 	lds	r13, 0x3E4D	; 0x803e4d <seconds_to_next_bu+0x1>
     a5e:	e0 90 4e 3e 	lds	r14, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x2>
     a62:	f0 90 4f 3e 	lds	r15, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x3>
     a66:	ff 20       	and	r15, r15
     a68:	2c f4       	brge	.+10     	; 0xa74 <rtc_write_seconds_to_cmp+0x26>
     a6a:	8f e1       	ldi	r24, 0x1F	; 31
     a6c:	c8 0e       	add	r12, r24
     a6e:	d1 1c       	adc	r13, r1
     a70:	e1 1c       	adc	r14, r1
     a72:	f1 1c       	adc	r15, r1
     a74:	68 94       	set
     a76:	14 f8       	bld	r1, 4
     a78:	f5 94       	asr	r15
     a7a:	e7 94       	ror	r14
     a7c:	d7 94       	ror	r13
     a7e:	c7 94       	ror	r12
     a80:	16 94       	lsr	r1
     a82:	d1 f7       	brne	.-12     	; 0xa78 <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     a84:	ff 92       	push	r15
     a86:	ef 92       	push	r14
     a88:	df 92       	push	r13
     a8a:	cf 92       	push	r12
     a8c:	89 ee       	ldi	r24, 0xE9	; 233
     a8e:	98 e9       	ldi	r25, 0x98	; 152
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	82 e8       	ldi	r24, 0x82	; 130
     a96:	9e e3       	ldi	r25, 0x3E	; 62
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	41 d3       	rcall	.+1666   	; 0x1120 <sprintf>
	USART0_sendString_w_eol(buffer);
     a9e:	82 e8       	ldi	r24, 0x82	; 130
     aa0:	9e e3       	ldi	r25, 0x3E	; 62
     aa2:	7a d0       	rcall	.+244    	; 0xb98 <USART0_sendString_w_eol>
	rtc_reset_counter();
     aa4:	bf df       	rcall	.-130    	; 0xa24 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     aa6:	8c 2d       	mov	r24, r12
     aa8:	9d 2d       	mov	r25, r13
     aaa:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     aae:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     ab2:	8d b7       	in	r24, 0x3d	; 61
     ab4:	9e b7       	in	r25, 0x3e	; 62
     ab6:	08 96       	adiw	r24, 0x08	; 8
     ab8:	8d bf       	out	0x3d, r24	; 61
     aba:	9e bf       	out	0x3e, r25	; 62
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     ae8:	e0 e4       	ldi	r30, 0x40	; 64
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	82 60       	ori	r24, 0x02	; 2
     af0:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	99 e9       	ldi	r25, 0x99	; 153
     af6:	2f d0       	rcall	.+94     	; 0xb56 <USART0_sendString>
	flag_pwr_state_change_request = true;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_pwr_state_change_request>
	next_pwr_state = display_on;
     afe:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <next_pwr_state>
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     b24:	e0 e0       	ldi	r30, 0x00	; 0
     b26:	f8 e0       	ldi	r31, 0x08	; 8
     b28:	85 81       	ldd	r24, Z+5	; 0x05
     b2a:	80 68       	ori	r24, 0x80	; 128
     b2c:	85 83       	std	Z+5, r24	; 0x05
     b2e:	08 95       	ret

00000b30 <init_uart>:
     b30:	7f db       	rcall	.-2306   	; 0x230 <set_pb2_txd_and_pb3_rxd>
     b32:	e0 e0       	ldi	r30, 0x00	; 0
     b34:	f8 e0       	ldi	r31, 0x08	; 8
     b36:	8c e6       	ldi	r24, 0x6C	; 108
     b38:	95 e0       	ldi	r25, 0x05	; 5
     b3a:	80 87       	std	Z+8, r24	; 0x08
     b3c:	91 87       	std	Z+9, r25	; 0x09
     b3e:	80 ec       	ldi	r24, 0xC0	; 192
     b40:	86 83       	std	Z+6, r24	; 0x06
     b42:	f0 df       	rcall	.-32     	; 0xb24 <USART0_enable_rx_complete_interrupt>
     b44:	08 95       	ret

00000b46 <USART0_sendChar>:
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f8 e0       	ldi	r31, 0x08	; 8
     b4a:	94 81       	ldd	r25, Z+4	; 0x04
     b4c:	95 ff       	sbrs	r25, 5
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <USART0_sendChar+0x4>
     b50:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     b54:	08 95       	ret

00000b56 <USART0_sendString>:
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	8c 01       	movw	r16, r24
     b64:	7c 01       	movw	r14, r24
     b66:	c0 e0       	ldi	r28, 0x00	; 0
     b68:	d0 e0       	ldi	r29, 0x00	; 0
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <USART0_sendString+0x20>
     b6c:	f7 01       	movw	r30, r14
     b6e:	81 91       	ld	r24, Z+
     b70:	7f 01       	movw	r14, r30
     b72:	e9 df       	rcall	.-46     	; 0xb46 <USART0_sendChar>
     b74:	21 96       	adiw	r28, 0x01	; 1
     b76:	f8 01       	movw	r30, r16
     b78:	01 90       	ld	r0, Z+
     b7a:	00 20       	and	r0, r0
     b7c:	e9 f7       	brne	.-6      	; 0xb78 <USART0_sendString+0x22>
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	e0 1b       	sub	r30, r16
     b82:	f1 0b       	sbc	r31, r17
     b84:	ce 17       	cp	r28, r30
     b86:	df 07       	cpc	r29, r31
     b88:	88 f3       	brcs	.-30     	; 0xb6c <USART0_sendString+0x16>
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	08 95       	ret

00000b98 <USART0_sendString_w_eol>:
     b98:	de df       	rcall	.-68     	; 0xb56 <USART0_sendString>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	d4 df       	rcall	.-88     	; 0xb46 <USART0_sendChar>
     b9e:	08 95       	ret

00000ba0 <USART0_read>:
     ba0:	e0 e0       	ldi	r30, 0x00	; 0
     ba2:	f8 e0       	ldi	r31, 0x08	; 8
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	88 23       	and	r24, r24
     ba8:	ec f7       	brge	.-6      	; 0xba4 <USART0_read+0x4>
     baa:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     bae:	08 95       	ret

00000bb0 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	7c 01       	movw	r14, r24
     bc2:	6b 01       	movw	r12, r22
     bc4:	61 32       	cpi	r22, 0x21	; 33
     bc6:	71 05       	cpc	r23, r1
     bc8:	24 f0       	brlt	.+8      	; 0xbd2 <USART0_read_string+0x22>
     bca:	68 94       	set
     bcc:	cc 24       	eor	r12, r12
     bce:	c5 f8       	bld	r12, 5
     bd0:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     bd2:	dd 20       	and	r13, r13
     bd4:	c4 f0       	brlt	.+48     	; 0xc06 <USART0_read_string+0x56>
     bd6:	e7 01       	movw	r28, r14
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	7e 01       	movw	r14, r28
		i++;
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     be2:	de df       	rcall	.-68     	; 0xba0 <USART0_read>
     be4:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     be6:	8a 30       	cpi	r24, 0x0A	; 10
     be8:	21 f0       	breq	.+8      	; 0xbf2 <USART0_read_string+0x42>
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <USART0_read_string+0x42>
     bee:	8d 30       	cpi	r24, 0x0D	; 13
     bf0:	31 f4       	brne	.+12     	; 0xbfe <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     bf2:	f7 01       	movw	r30, r14
     bf4:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     bf6:	c0 16       	cp	r12, r16
     bf8:	d1 06       	cpc	r13, r17
     bfa:	3c f4       	brge	.+14     	; 0xc0a <USART0_read_string+0x5a>
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     bfe:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c00:	c0 16       	cp	r12, r16
     c02:	d1 06       	cpc	r13, r17
     c04:	5c f7       	brge	.-42     	; 0xbdc <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     c06:	f7 01       	movw	r30, r14
     c08:	10 82       	st	Z, r1
	}
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	08 95       	ret

00000c1c <convert_str_to_long>:
		USART0_sendString_w_eol("ACK:3V");
		flag_request_3v3_measurement = true;
	}
}

long convert_str_to_long(char *str) {
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <convert_str_to_long+0xa>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	08 2f       	mov	r16, r24
     c2c:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	8b e0       	ldi	r24, 0x0B	; 11
     c34:	99 e9       	ldi	r25, 0x99	; 153
     c36:	9f 93       	push	r25
     c38:	8f 93       	push	r24
     c3a:	5f d2       	rcall	.+1214   	; 0x10fa <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     c3c:	4a e0       	ldi	r20, 0x0A	; 10
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	be 01       	movw	r22, r28
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	80 2f       	mov	r24, r16
     c48:	91 2f       	mov	r25, r17
     c4a:	02 d1       	rcall	.+516    	; 0xe50 <strtol>
	return ret;
}
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     c6a:	6a e1       	ldi	r22, 0x1A	; 26
     c6c:	79 e9       	ldi	r23, 0x99	; 153
     c6e:	82 e6       	ldi	r24, 0x62	; 98
     c70:	9e e3       	ldi	r25, 0x3E	; 62
     c72:	0c d2       	rcall	.+1048   	; 0x108c <strcmp>
     c74:	89 2b       	or	r24, r25
     c76:	19 f4       	brne	.+6      	; 0xc7e <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     c78:	8f e1       	ldi	r24, 0x1F	; 31
     c7a:	99 e9       	ldi	r25, 0x99	; 153
     c7c:	8d df       	rcall	.-230    	; 0xb98 <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     c7e:	64 e2       	ldi	r22, 0x24	; 36
     c80:	79 e9       	ldi	r23, 0x99	; 153
     c82:	82 e6       	ldi	r24, 0x62	; 98
     c84:	9e e3       	ldi	r25, 0x3E	; 62
     c86:	fe d1       	rcall	.+1020   	; 0x1084 <strtok>
     c88:	d8 2f       	mov	r29, r24
     c8a:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     c8c:	6c e5       	ldi	r22, 0x5C	; 92
     c8e:	77 e9       	ldi	r23, 0x97	; 151
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	f7 d1       	rcall	.+1006   	; 0x1084 <strtok>
     c96:	08 2f       	mov	r16, r24
     c98:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	86 e2       	ldi	r24, 0x26	; 38
     ca4:	99 e9       	ldi	r25, 0x99	; 153
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	82 e8       	ldi	r24, 0x82	; 130
     cac:	9e e3       	ldi	r25, 0x3E	; 62
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	36 d2       	rcall	.+1132   	; 0x1120 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     cb4:	6a e3       	ldi	r22, 0x3A	; 58
     cb6:	79 e9       	ldi	r23, 0x99	; 153
     cb8:	8d 2f       	mov	r24, r29
     cba:	9c 2f       	mov	r25, r28
     cbc:	e7 d1       	rcall	.+974    	; 0x108c <strcmp>
     cbe:	2d b7       	in	r18, 0x3d	; 61
     cc0:	3e b7       	in	r19, 0x3e	; 62
     cc2:	28 5f       	subi	r18, 0xF8	; 248
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
     cc6:	2d bf       	out	0x3d, r18	; 61
     cc8:	3e bf       	out	0x3e, r19	; 62
     cca:	89 2b       	or	r24, r25
     ccc:	41 f4       	brne	.+16     	; 0xcde <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_eol("ACK_D1");
     cce:	86 e3       	ldi	r24, 0x36	; 54
     cd0:	99 e9       	ldi	r25, 0x99	; 153
     cd2:	62 df       	rcall	.-316    	; 0xb98 <USART0_sendString_w_eol>
		strcpy(display_line1_content, payload);
     cd4:	60 2f       	mov	r22, r16
     cd6:	71 2f       	mov	r23, r17
     cd8:	81 e5       	ldi	r24, 0x51	; 81
     cda:	9e e3       	ldi	r25, 0x3E	; 62
     cdc:	e0 d1       	rcall	.+960    	; 0x109e <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     cde:	61 e4       	ldi	r22, 0x41	; 65
     ce0:	79 e9       	ldi	r23, 0x99	; 153
     ce2:	8d 2f       	mov	r24, r29
     ce4:	9c 2f       	mov	r25, r28
     ce6:	d2 d1       	rcall	.+932    	; 0x108c <strcmp>
     ce8:	89 2b       	or	r24, r25
     cea:	59 f4       	brne	.+22     	; 0xd02 <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_eol("ACK_D2");
     cec:	8d e3       	ldi	r24, 0x3D	; 61
     cee:	99 e9       	ldi	r25, 0x99	; 153
     cf0:	53 df       	rcall	.-346    	; 0xb98 <USART0_sendString_w_eol>
		strcpy(display_line2_content, payload);
     cf2:	60 2f       	mov	r22, r16
     cf4:	71 2f       	mov	r23, r17
     cf6:	8b e3       	ldi	r24, 0x3B	; 59
     cf8:	9e e3       	ldi	r25, 0x3E	; 62
     cfa:	d1 d1       	rcall	.+930    	; 0x109e <strcpy>
		flag_string_for_display_received = true;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     d02:	64 e4       	ldi	r22, 0x44	; 68
     d04:	79 e9       	ldi	r23, 0x99	; 153
     d06:	8d 2f       	mov	r24, r29
     d08:	9c 2f       	mov	r25, r28
     d0a:	c0 d1       	rcall	.+896    	; 0x108c <strcmp>
     d0c:	89 2b       	or	r24, r25
     d0e:	29 f4       	brne	.+10     	; 0xd1a <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_pwr_state_change_request>
		next_pwr_state = standby;
     d16:	10 92 50 3e 	sts	0x3E50, r1	; 0x803e50 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     d1a:	67 e4       	ldi	r22, 0x47	; 71
     d1c:	79 e9       	ldi	r23, 0x99	; 153
     d1e:	8d 2f       	mov	r24, r29
     d20:	9c 2f       	mov	r25, r28
     d22:	b4 d1       	rcall	.+872    	; 0x108c <strcmp>
     d24:	89 2b       	or	r24, r25
     d26:	11 f5       	brne	.+68     	; 0xd6c <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     d28:	1f 93       	push	r17
     d2a:	0f 93       	push	r16
     d2c:	8a e4       	ldi	r24, 0x4A	; 74
     d2e:	99 e9       	ldi	r25, 0x99	; 153
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	82 e8       	ldi	r24, 0x82	; 130
     d36:	9e e3       	ldi	r25, 0x3E	; 62
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	f1 d1       	rcall	.+994    	; 0x1120 <sprintf>
		USART0_sendString_w_eol(buffer);
     d3e:	82 e8       	ldi	r24, 0x82	; 130
     d40:	9e e3       	ldi	r25, 0x3E	; 62
     d42:	2a df       	rcall	.-428    	; 0xb98 <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     d44:	80 2f       	mov	r24, r16
     d46:	91 2f       	mov	r25, r17
     d48:	69 df       	rcall	.-302    	; 0xc1c <convert_str_to_long>
     d4a:	60 93 4c 3e 	sts	0x3E4C, r22	; 0x803e4c <seconds_to_next_bu>
     d4e:	70 93 4d 3e 	sts	0x3E4D, r23	; 0x803e4d <seconds_to_next_bu+0x1>
     d52:	80 93 4e 3e 	sts	0x3E4E, r24	; 0x803e4e <seconds_to_next_bu+0x2>
     d56:	90 93 4f 3e 	sts	0x3E4F, r25	; 0x803e4f <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_received_seconds_to_next_bu>
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     d6c:	65 e5       	ldi	r22, 0x55	; 85
     d6e:	79 e9       	ldi	r23, 0x99	; 153
     d70:	8d 2f       	mov	r24, r29
     d72:	9c 2f       	mov	r25, r28
     d74:	8b d1       	rcall	.+790    	; 0x108c <strcmp>
     d76:	89 2b       	or	r24, r25
     d78:	59 f4       	brne	.+22     	; 0xd90 <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     d7a:	60 2f       	mov	r22, r16
     d7c:	71 2f       	mov	r23, r17
     d7e:	8a e1       	ldi	r24, 0x1A	; 26
     d80:	9e e3       	ldi	r25, 0x3E	; 62
     d82:	8d d1       	rcall	.+794    	; 0x109e <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     d84:	8a e0       	ldi	r24, 0x0A	; 10
     d86:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     d90:	68 e5       	ldi	r22, 0x58	; 88
     d92:	79 e9       	ldi	r23, 0x99	; 153
     d94:	8d 2f       	mov	r24, r29
     d96:	9c 2f       	mov	r25, r28
     d98:	79 d1       	rcall	.+754    	; 0x108c <strcmp>
     d9a:	89 2b       	or	r24, r25
     d9c:	19 f4       	brne	.+6      	; 0xda4 <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     da4:	6f e5       	ldi	r22, 0x5F	; 95
     da6:	79 e9       	ldi	r23, 0x99	; 153
     da8:	8d 2f       	mov	r24, r29
     daa:	9c 2f       	mov	r25, r28
     dac:	6f d1       	rcall	.+734    	; 0x108c <strcmp>
     dae:	89 2b       	or	r24, r25
     db0:	31 f4       	brne	.+12     	; 0xdbe <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_eol("ACK:CC");
     db2:	8b e5       	ldi	r24, 0x5B	; 91
     db4:	99 e9       	ldi	r25, 0x99	; 153
     db6:	f0 de       	rcall	.-544    	; 0xb98 <USART0_sendString_w_eol>
		flag_request_current_measurement = true;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     dbe:	66 e6       	ldi	r22, 0x66	; 102
     dc0:	79 e9       	ldi	r23, 0x99	; 153
     dc2:	8d 2f       	mov	r24, r29
     dc4:	9c 2f       	mov	r25, r28
     dc6:	62 d1       	rcall	.+708    	; 0x108c <strcmp>
     dc8:	89 2b       	or	r24, r25
     dca:	31 f4       	brne	.+12     	; 0xdd8 <USART0_process_incoming_message+0x176>
		USART0_sendString_w_eol("ACK:TP");
     dcc:	82 e6       	ldi	r24, 0x62	; 98
     dce:	99 e9       	ldi	r25, 0x99	; 153
     dd0:	e3 de       	rcall	.-570    	; 0xb98 <USART0_sendString_w_eol>
		flag_request_temperature_measurement = true;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     dd8:	6d e6       	ldi	r22, 0x6D	; 109
     dda:	79 e9       	ldi	r23, 0x99	; 153
     ddc:	8d 2f       	mov	r24, r29
     dde:	9c 2f       	mov	r25, r28
     de0:	55 d1       	rcall	.+682    	; 0x108c <strcmp>
     de2:	89 2b       	or	r24, r25
     de4:	31 f4       	brne	.+12     	; 0xdf2 <USART0_process_incoming_message+0x190>
		USART0_sendString_w_eol("ACK:3V");
     de6:	89 e6       	ldi	r24, 0x69	; 105
     de8:	99 e9       	ldi	r25, 0x99	; 153
     dea:	d6 de       	rcall	.-596    	; 0xb98 <USART0_sendString_w_eol>
		flag_request_3v3_measurement = true;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_request_3v3_measurement>
	}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     e1e:	60 e2       	ldi	r22, 0x20	; 32
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	82 e6       	ldi	r24, 0x62	; 98
     e24:	9e e3       	ldi	r25, 0x3E	; 62
     e26:	c4 de       	rcall	.-632    	; 0xbb0 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_usart_string_receive_complete>
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <strtol>:
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ed e2       	ldi	r30, 0x2D	; 45
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	43 c4       	rjmp	.+2182   	; 0x16e0 <__prologue_saves__+0x2>
     e5a:	5c 01       	movw	r10, r24
     e5c:	6b 01       	movw	r12, r22
     e5e:	7a 01       	movw	r14, r20
     e60:	61 15       	cp	r22, r1
     e62:	71 05       	cpc	r23, r1
     e64:	19 f0       	breq	.+6      	; 0xe6c <strtol+0x1c>
     e66:	fb 01       	movw	r30, r22
     e68:	80 83       	st	Z, r24
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	e1 14       	cp	r14, r1
     e6e:	f1 04       	cpc	r15, r1
     e70:	29 f0       	breq	.+10     	; 0xe7c <strtol+0x2c>
     e72:	c7 01       	movw	r24, r14
     e74:	02 97       	sbiw	r24, 0x02	; 2
     e76:	83 97       	sbiw	r24, 0x23	; 35
     e78:	08 f0       	brcs	.+2      	; 0xe7c <strtol+0x2c>
     e7a:	e2 c0       	rjmp	.+452    	; 0x1040 <strtol+0x1f0>
     e7c:	e5 01       	movw	r28, r10
     e7e:	21 96       	adiw	r28, 0x01	; 1
     e80:	f5 01       	movw	r30, r10
     e82:	10 81       	ld	r17, Z
     e84:	81 2f       	mov	r24, r17
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	f4 d0       	rcall	.+488    	; 0x1072 <isspace>
     e8a:	89 2b       	or	r24, r25
     e8c:	11 f0       	breq	.+4      	; 0xe92 <strtol+0x42>
     e8e:	5e 01       	movw	r10, r28
     e90:	f5 cf       	rjmp	.-22     	; 0xe7c <strtol+0x2c>
     e92:	1d 32       	cpi	r17, 0x2D	; 45
     e94:	29 f4       	brne	.+10     	; 0xea0 <strtol+0x50>
     e96:	21 96       	adiw	r28, 0x01	; 1
     e98:	f5 01       	movw	r30, r10
     e9a:	11 81       	ldd	r17, Z+1	; 0x01
     e9c:	01 e0       	ldi	r16, 0x01	; 1
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <strtol+0x5e>
     ea0:	1b 32       	cpi	r17, 0x2B	; 43
     ea2:	21 f4       	brne	.+8      	; 0xeac <strtol+0x5c>
     ea4:	e5 01       	movw	r28, r10
     ea6:	22 96       	adiw	r28, 0x02	; 2
     ea8:	f5 01       	movw	r30, r10
     eaa:	11 81       	ldd	r17, Z+1	; 0x01
     eac:	00 e0       	ldi	r16, 0x00	; 0
     eae:	e1 14       	cp	r14, r1
     eb0:	f1 04       	cpc	r15, r1
     eb2:	09 f1       	breq	.+66     	; 0xef6 <strtol+0xa6>
     eb4:	f0 e1       	ldi	r31, 0x10	; 16
     eb6:	ef 16       	cp	r14, r31
     eb8:	f1 04       	cpc	r15, r1
     eba:	29 f4       	brne	.+10     	; 0xec6 <strtol+0x76>
     ebc:	3e c0       	rjmp	.+124    	; 0xf3a <strtol+0xea>
     ebe:	10 e3       	ldi	r17, 0x30	; 48
     ec0:	e1 14       	cp	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	21 f1       	breq	.+72     	; 0xf0e <strtol+0xbe>
     ec6:	28 e0       	ldi	r18, 0x08	; 8
     ec8:	e2 16       	cp	r14, r18
     eca:	f1 04       	cpc	r15, r1
     ecc:	01 f1       	breq	.+64     	; 0xf0e <strtol+0xbe>
     ece:	54 f4       	brge	.+20     	; 0xee4 <strtol+0x94>
     ed0:	e2 e0       	ldi	r30, 0x02	; 2
     ed2:	ee 16       	cp	r14, r30
     ed4:	f1 04       	cpc	r15, r1
     ed6:	21 f5       	brne	.+72     	; 0xf20 <strtol+0xd0>
     ed8:	81 2c       	mov	r8, r1
     eda:	91 2c       	mov	r9, r1
     edc:	a1 2c       	mov	r10, r1
     ede:	b0 e4       	ldi	r27, 0x40	; 64
     ee0:	bb 2e       	mov	r11, r27
     ee2:	3d c0       	rjmp	.+122    	; 0xf5e <strtol+0x10e>
     ee4:	fa e0       	ldi	r31, 0x0A	; 10
     ee6:	ef 16       	cp	r14, r31
     ee8:	f1 04       	cpc	r15, r1
     eea:	39 f0       	breq	.+14     	; 0xefa <strtol+0xaa>
     eec:	20 e1       	ldi	r18, 0x10	; 16
     eee:	e2 16       	cp	r14, r18
     ef0:	f1 04       	cpc	r15, r1
     ef2:	b1 f4       	brne	.+44     	; 0xf20 <strtol+0xd0>
     ef4:	2f c0       	rjmp	.+94     	; 0xf54 <strtol+0x104>
     ef6:	10 33       	cpi	r17, 0x30	; 48
     ef8:	11 f1       	breq	.+68     	; 0xf3e <strtol+0xee>
     efa:	fa e0       	ldi	r31, 0x0A	; 10
     efc:	ef 2e       	mov	r14, r31
     efe:	f1 2c       	mov	r15, r1
     f00:	ac ec       	ldi	r26, 0xCC	; 204
     f02:	8a 2e       	mov	r8, r26
     f04:	98 2c       	mov	r9, r8
     f06:	a8 2c       	mov	r10, r8
     f08:	ac e0       	ldi	r26, 0x0C	; 12
     f0a:	ba 2e       	mov	r11, r26
     f0c:	28 c0       	rjmp	.+80     	; 0xf5e <strtol+0x10e>
     f0e:	78 e0       	ldi	r23, 0x08	; 8
     f10:	e7 2e       	mov	r14, r23
     f12:	f1 2c       	mov	r15, r1
     f14:	81 2c       	mov	r8, r1
     f16:	91 2c       	mov	r9, r1
     f18:	a1 2c       	mov	r10, r1
     f1a:	e0 e1       	ldi	r30, 0x10	; 16
     f1c:	be 2e       	mov	r11, r30
     f1e:	1f c0       	rjmp	.+62     	; 0xf5e <strtol+0x10e>
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e8       	ldi	r25, 0x80	; 128
     f28:	97 01       	movw	r18, r14
     f2a:	0f 2c       	mov	r0, r15
     f2c:	00 0c       	add	r0, r0
     f2e:	44 0b       	sbc	r20, r20
     f30:	55 0b       	sbc	r21, r21
     f32:	a9 d3       	rcall	.+1874   	; 0x1686 <__udivmodsi4>
     f34:	49 01       	movw	r8, r18
     f36:	5a 01       	movw	r10, r20
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <strtol+0x10e>
     f3a:	10 33       	cpi	r17, 0x30	; 48
     f3c:	59 f4       	brne	.+22     	; 0xf54 <strtol+0x104>
     f3e:	88 81       	ld	r24, Y
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	88 35       	cpi	r24, 0x58	; 88
     f44:	09 f0       	breq	.+2      	; 0xf48 <strtol+0xf8>
     f46:	bb cf       	rjmp	.-138    	; 0xebe <strtol+0x6e>
     f48:	19 81       	ldd	r17, Y+1	; 0x01
     f4a:	22 96       	adiw	r28, 0x02	; 2
     f4c:	02 60       	ori	r16, 0x02	; 2
     f4e:	80 e1       	ldi	r24, 0x10	; 16
     f50:	e8 2e       	mov	r14, r24
     f52:	f1 2c       	mov	r15, r1
     f54:	81 2c       	mov	r8, r1
     f56:	91 2c       	mov	r9, r1
     f58:	a1 2c       	mov	r10, r1
     f5a:	68 e0       	ldi	r22, 0x08	; 8
     f5c:	b6 2e       	mov	r11, r22
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	cb 01       	movw	r24, r22
     f66:	27 01       	movw	r4, r14
     f68:	0f 2c       	mov	r0, r15
     f6a:	00 0c       	add	r0, r0
     f6c:	66 08       	sbc	r6, r6
     f6e:	77 08       	sbc	r7, r7
     f70:	fe 01       	movw	r30, r28
     f72:	50 ed       	ldi	r21, 0xD0	; 208
     f74:	35 2e       	mov	r3, r21
     f76:	31 0e       	add	r3, r17
     f78:	29 e0       	ldi	r18, 0x09	; 9
     f7a:	23 15       	cp	r18, r3
     f7c:	70 f4       	brcc	.+28     	; 0xf9a <strtol+0x14a>
     f7e:	2f eb       	ldi	r18, 0xBF	; 191
     f80:	21 0f       	add	r18, r17
     f82:	2a 31       	cpi	r18, 0x1A	; 26
     f84:	18 f4       	brcc	.+6      	; 0xf8c <strtol+0x13c>
     f86:	39 ec       	ldi	r19, 0xC9	; 201
     f88:	33 2e       	mov	r3, r19
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <strtol+0x148>
     f8c:	2f e9       	ldi	r18, 0x9F	; 159
     f8e:	21 0f       	add	r18, r17
     f90:	2a 31       	cpi	r18, 0x1A	; 26
     f92:	10 f5       	brcc	.+68     	; 0xfd8 <strtol+0x188>
     f94:	29 ea       	ldi	r18, 0xA9	; 169
     f96:	32 2e       	mov	r3, r18
     f98:	31 0e       	add	r3, r17
     f9a:	23 2d       	mov	r18, r3
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	2e 15       	cp	r18, r14
     fa0:	3f 05       	cpc	r19, r15
     fa2:	d4 f4       	brge	.+52     	; 0xfd8 <strtol+0x188>
     fa4:	47 fd       	sbrc	r20, 7
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <strtol+0x182>
     fa8:	86 16       	cp	r8, r22
     faa:	97 06       	cpc	r9, r23
     fac:	a8 06       	cpc	r10, r24
     fae:	b9 06       	cpc	r11, r25
     fb0:	68 f0       	brcs	.+26     	; 0xfcc <strtol+0x17c>
     fb2:	a3 01       	movw	r20, r6
     fb4:	92 01       	movw	r18, r4
     fb6:	58 d3       	rcall	.+1712   	; 0x1668 <__mulsi3>
     fb8:	63 0d       	add	r22, r3
     fba:	71 1d       	adc	r23, r1
     fbc:	81 1d       	adc	r24, r1
     fbe:	91 1d       	adc	r25, r1
     fc0:	61 30       	cpi	r22, 0x01	; 1
     fc2:	71 05       	cpc	r23, r1
     fc4:	81 05       	cpc	r24, r1
     fc6:	20 e8       	ldi	r18, 0x80	; 128
     fc8:	92 07       	cpc	r25, r18
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <strtol+0x180>
     fcc:	4f ef       	ldi	r20, 0xFF	; 255
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <strtol+0x182>
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	21 96       	adiw	r28, 0x01	; 1
     fd4:	10 81       	ld	r17, Z
     fd6:	cc cf       	rjmp	.-104    	; 0xf70 <strtol+0x120>
     fd8:	20 2f       	mov	r18, r16
     fda:	21 70       	andi	r18, 0x01	; 1
     fdc:	c1 14       	cp	r12, r1
     fde:	d1 04       	cpc	r13, r1
     fe0:	71 f0       	breq	.+28     	; 0xffe <strtol+0x1ae>
     fe2:	44 23       	and	r20, r20
     fe4:	29 f0       	breq	.+10     	; 0xff0 <strtol+0x1a0>
     fe6:	21 97       	sbiw	r28, 0x01	; 1
     fe8:	f6 01       	movw	r30, r12
     fea:	c0 83       	st	Z, r28
     fec:	d1 83       	std	Z+1, r29	; 0x01
     fee:	07 c0       	rjmp	.+14     	; 0xffe <strtol+0x1ae>
     ff0:	01 ff       	sbrs	r16, 1
     ff2:	19 c0       	rjmp	.+50     	; 0x1026 <strtol+0x1d6>
     ff4:	22 97       	sbiw	r28, 0x02	; 2
     ff6:	f6 01       	movw	r30, r12
     ff8:	c0 83       	st	Z, r28
     ffa:	d1 83       	std	Z+1, r29	; 0x01
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <strtol+0x1d6>
     ffe:	47 ff       	sbrs	r20, 7
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <strtol+0x1d6>
    1002:	22 23       	and	r18, r18
    1004:	29 f0       	breq	.+10     	; 0x1010 <strtol+0x1c0>
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e8       	ldi	r25, 0x80	; 128
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <strtol+0x1c8>
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	7f ef       	ldi	r23, 0xFF	; 255
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f e7       	ldi	r25, 0x7F	; 127
    1018:	22 e2       	ldi	r18, 0x22	; 34
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	20 93 b3 3e 	sts	0x3EB3, r18	; 0x803eb3 <errno>
    1020:	30 93 b4 3e 	sts	0x3EB4, r19	; 0x803eb4 <errno+0x1>
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <strtol+0x1e8>
    1026:	22 23       	and	r18, r18
    1028:	81 f0       	breq	.+32     	; 0x104a <strtol+0x1fa>
    102a:	90 95       	com	r25
    102c:	80 95       	com	r24
    102e:	70 95       	com	r23
    1030:	61 95       	neg	r22
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	46 2f       	mov	r20, r22
    103a:	37 2f       	mov	r19, r23
    103c:	28 2f       	mov	r18, r24
    103e:	12 c0       	rjmp	.+36     	; 0x1064 <strtol+0x214>
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <strtol+0x214>
    104a:	97 ff       	sbrs	r25, 7
    104c:	f5 cf       	rjmp	.-22     	; 0x1038 <strtol+0x1e8>
    104e:	82 e2       	ldi	r24, 0x22	; 34
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 93 b3 3e 	sts	0x3EB3, r24	; 0x803eb3 <errno>
    1056:	90 93 b4 3e 	sts	0x3EB4, r25	; 0x803eb4 <errno+0x1>
    105a:	6f ef       	ldi	r22, 0xFF	; 255
    105c:	7f ef       	ldi	r23, 0xFF	; 255
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9f e7       	ldi	r25, 0x7F	; 127
    1062:	ea cf       	rjmp	.-44     	; 0x1038 <strtol+0x1e8>
    1064:	64 2f       	mov	r22, r20
    1066:	73 2f       	mov	r23, r19
    1068:	82 2f       	mov	r24, r18
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	e1 e1       	ldi	r30, 0x11	; 17
    1070:	50 c3       	rjmp	.+1696   	; 0x1712 <__epilogue_restores__+0x2>

00001072 <isspace>:
    1072:	91 11       	cpse	r25, r1
    1074:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__ctype_isfalse>
    1078:	80 32       	cpi	r24, 0x20	; 32
    107a:	19 f0       	breq	.+6      	; 0x1082 <isspace+0x10>
    107c:	89 50       	subi	r24, 0x09	; 9
    107e:	85 50       	subi	r24, 0x05	; 5
    1080:	c8 f7       	brcc	.-14     	; 0x1074 <isspace+0x2>
    1082:	08 95       	ret

00001084 <strtok>:
    1084:	44 e0       	ldi	r20, 0x04	; 4
    1086:	5e e3       	ldi	r21, 0x3E	; 62
    1088:	11 d0       	rcall	.+34     	; 0x10ac <strtok_r>
    108a:	08 95       	ret

0000108c <strcmp>:
    108c:	fb 01       	movw	r30, r22
    108e:	dc 01       	movw	r26, r24
    1090:	8d 91       	ld	r24, X+
    1092:	01 90       	ld	r0, Z+
    1094:	80 19       	sub	r24, r0
    1096:	01 10       	cpse	r0, r1
    1098:	d9 f3       	breq	.-10     	; 0x1090 <strcmp+0x4>
    109a:	99 0b       	sbc	r25, r25
    109c:	08 95       	ret

0000109e <strcpy>:
    109e:	fb 01       	movw	r30, r22
    10a0:	dc 01       	movw	r26, r24
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	00 20       	and	r0, r0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <strcpy+0x4>
    10aa:	08 95       	ret

000010ac <strtok_r>:
    10ac:	fa 01       	movw	r30, r20
    10ae:	a1 91       	ld	r26, Z+
    10b0:	b0 81       	ld	r27, Z
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	19 f4       	brne	.+6      	; 0x10bc <strtok_r+0x10>
    10b6:	10 97       	sbiw	r26, 0x00	; 0
    10b8:	e1 f0       	breq	.+56     	; 0x10f2 <strtok_r+0x46>
    10ba:	cd 01       	movw	r24, r26
    10bc:	dc 01       	movw	r26, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0d 90       	ld	r0, X+
    10c2:	00 20       	and	r0, r0
    10c4:	11 f4       	brne	.+4      	; 0x10ca <strtok_r+0x1e>
    10c6:	c0 01       	movw	r24, r0
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <strtok_r+0x44>
    10ca:	fb 01       	movw	r30, r22
    10cc:	21 91       	ld	r18, Z+
    10ce:	22 23       	and	r18, r18
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <strtok_r+0x2c>
    10d2:	20 15       	cp	r18, r0
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <strtok_r+0x20>
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <strtok_r+0x12>
    10d8:	fb 01       	movw	r30, r22
    10da:	21 91       	ld	r18, Z+
    10dc:	20 15       	cp	r18, r0
    10de:	19 f4       	brne	.+6      	; 0x10e6 <strtok_r+0x3a>
    10e0:	1e 92       	st	-X, r1
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <strtok_r+0x46>
    10e6:	22 23       	and	r18, r18
    10e8:	c1 f7       	brne	.-16     	; 0x10da <strtok_r+0x2e>
    10ea:	0d 90       	ld	r0, X+
    10ec:	00 20       	and	r0, r0
    10ee:	a1 f7       	brne	.-24     	; 0x10d8 <strtok_r+0x2c>
    10f0:	d0 01       	movw	r26, r0
    10f2:	fa 01       	movw	r30, r20
    10f4:	a1 93       	st	Z+, r26
    10f6:	b0 83       	st	Z, r27
    10f8:	08 95       	ret

000010fa <printf>:
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e2 e8       	ldi	r30, 0x82	; 130
    1100:	f8 e0       	ldi	r31, 0x08	; 8
    1102:	fd c2       	rjmp	.+1530   	; 0x16fe <__prologue_saves__+0x20>
    1104:	ae 01       	movw	r20, r28
    1106:	4b 5f       	subi	r20, 0xFB	; 251
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	fa 01       	movw	r30, r20
    110c:	61 91       	ld	r22, Z+
    110e:	71 91       	ld	r23, Z+
    1110:	af 01       	movw	r20, r30
    1112:	80 91 b7 3e 	lds	r24, 0x3EB7	; 0x803eb7 <__iob+0x2>
    1116:	90 91 b8 3e 	lds	r25, 0x3EB8	; 0x803eb8 <__iob+0x3>
    111a:	21 d0       	rcall	.+66     	; 0x115e <vfprintf>
    111c:	e2 e0       	ldi	r30, 0x02	; 2
    111e:	08 c3       	rjmp	.+1552   	; 0x1730 <__epilogue_restores__+0x20>

00001120 <sprintf>:
    1120:	ae e0       	ldi	r26, 0x0E	; 14
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e9       	ldi	r30, 0x95	; 149
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	e8 c2       	rjmp	.+1488   	; 0x16fa <__prologue_saves__+0x1c>
    112a:	0d 89       	ldd	r16, Y+21	; 0x15
    112c:	1e 89       	ldd	r17, Y+22	; 0x16
    112e:	86 e0       	ldi	r24, 0x06	; 6
    1130:	8c 83       	std	Y+4, r24	; 0x04
    1132:	09 83       	std	Y+1, r16	; 0x01
    1134:	1a 83       	std	Y+2, r17	; 0x02
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f e7       	ldi	r25, 0x7F	; 127
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	ae 01       	movw	r20, r28
    1140:	47 5e       	subi	r20, 0xE7	; 231
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	6f 89       	ldd	r22, Y+23	; 0x17
    1146:	78 8d       	ldd	r23, Y+24	; 0x18
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	08 d0       	rcall	.+16     	; 0x115e <vfprintf>
    114e:	ef 81       	ldd	r30, Y+7	; 0x07
    1150:	f8 85       	ldd	r31, Y+8	; 0x08
    1152:	e0 0f       	add	r30, r16
    1154:	f1 1f       	adc	r31, r17
    1156:	10 82       	st	Z, r1
    1158:	2e 96       	adiw	r28, 0x0e	; 14
    115a:	e4 e0       	ldi	r30, 0x04	; 4
    115c:	e7 c2       	rjmp	.+1486   	; 0x172c <__epilogue_restores__+0x1c>

0000115e <vfprintf>:
    115e:	ab e0       	ldi	r26, 0x0B	; 11
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 eb       	ldi	r30, 0xB4	; 180
    1164:	f8 e0       	ldi	r31, 0x08	; 8
    1166:	bb c2       	rjmp	.+1398   	; 0x16de <__prologue_saves__>
    1168:	6c 01       	movw	r12, r24
    116a:	7b 01       	movw	r14, r22
    116c:	8a 01       	movw	r16, r20
    116e:	fc 01       	movw	r30, r24
    1170:	16 82       	std	Z+6, r1	; 0x06
    1172:	17 82       	std	Z+7, r1	; 0x07
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	81 ff       	sbrs	r24, 1
    1178:	bf c1       	rjmp	.+894    	; 0x14f8 <vfprintf+0x39a>
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	3c 01       	movw	r6, r24
    1180:	f6 01       	movw	r30, r12
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	f7 01       	movw	r30, r14
    1186:	93 fd       	sbrc	r25, 3
    1188:	85 91       	lpm	r24, Z+
    118a:	93 ff       	sbrs	r25, 3
    118c:	81 91       	ld	r24, Z+
    118e:	7f 01       	movw	r14, r30
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <vfprintf+0x38>
    1194:	ad c1       	rjmp	.+858    	; 0x14f0 <vfprintf+0x392>
    1196:	85 32       	cpi	r24, 0x25	; 37
    1198:	39 f4       	brne	.+14     	; 0x11a8 <vfprintf+0x4a>
    119a:	93 fd       	sbrc	r25, 3
    119c:	85 91       	lpm	r24, Z+
    119e:	93 ff       	sbrs	r25, 3
    11a0:	81 91       	ld	r24, Z+
    11a2:	7f 01       	movw	r14, r30
    11a4:	85 32       	cpi	r24, 0x25	; 37
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <vfprintf+0x52>
    11a8:	b6 01       	movw	r22, r12
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	c3 d1       	rcall	.+902    	; 0x1534 <fputc>
    11ae:	e8 cf       	rjmp	.-48     	; 0x1180 <vfprintf+0x22>
    11b0:	91 2c       	mov	r9, r1
    11b2:	21 2c       	mov	r2, r1
    11b4:	31 2c       	mov	r3, r1
    11b6:	ff e1       	ldi	r31, 0x1F	; 31
    11b8:	f3 15       	cp	r31, r3
    11ba:	d8 f0       	brcs	.+54     	; 0x11f2 <vfprintf+0x94>
    11bc:	8b 32       	cpi	r24, 0x2B	; 43
    11be:	79 f0       	breq	.+30     	; 0x11de <vfprintf+0x80>
    11c0:	38 f4       	brcc	.+14     	; 0x11d0 <vfprintf+0x72>
    11c2:	80 32       	cpi	r24, 0x20	; 32
    11c4:	79 f0       	breq	.+30     	; 0x11e4 <vfprintf+0x86>
    11c6:	83 32       	cpi	r24, 0x23	; 35
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <vfprintf+0x94>
    11ca:	23 2d       	mov	r18, r3
    11cc:	20 61       	ori	r18, 0x10	; 16
    11ce:	1d c0       	rjmp	.+58     	; 0x120a <vfprintf+0xac>
    11d0:	8d 32       	cpi	r24, 0x2D	; 45
    11d2:	61 f0       	breq	.+24     	; 0x11ec <vfprintf+0x8e>
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	69 f4       	brne	.+26     	; 0x11f2 <vfprintf+0x94>
    11d8:	23 2d       	mov	r18, r3
    11da:	21 60       	ori	r18, 0x01	; 1
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <vfprintf+0xac>
    11de:	83 2d       	mov	r24, r3
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	38 2e       	mov	r3, r24
    11e4:	e3 2d       	mov	r30, r3
    11e6:	e4 60       	ori	r30, 0x04	; 4
    11e8:	3e 2e       	mov	r3, r30
    11ea:	2a c0       	rjmp	.+84     	; 0x1240 <vfprintf+0xe2>
    11ec:	f3 2d       	mov	r31, r3
    11ee:	f8 60       	ori	r31, 0x08	; 8
    11f0:	1d c0       	rjmp	.+58     	; 0x122c <vfprintf+0xce>
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	2d c0       	rjmp	.+90     	; 0x1250 <vfprintf+0xf2>
    11f6:	20 ed       	ldi	r18, 0xD0	; 208
    11f8:	28 0f       	add	r18, r24
    11fa:	2a 30       	cpi	r18, 0x0A	; 10
    11fc:	40 f0       	brcs	.+16     	; 0x120e <vfprintf+0xb0>
    11fe:	8e 32       	cpi	r24, 0x2E	; 46
    1200:	b9 f4       	brne	.+46     	; 0x1230 <vfprintf+0xd2>
    1202:	36 fc       	sbrc	r3, 6
    1204:	75 c1       	rjmp	.+746    	; 0x14f0 <vfprintf+0x392>
    1206:	23 2d       	mov	r18, r3
    1208:	20 64       	ori	r18, 0x40	; 64
    120a:	32 2e       	mov	r3, r18
    120c:	19 c0       	rjmp	.+50     	; 0x1240 <vfprintf+0xe2>
    120e:	36 fe       	sbrs	r3, 6
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0xc0>
    1212:	8a e0       	ldi	r24, 0x0A	; 10
    1214:	98 9e       	mul	r9, r24
    1216:	20 0d       	add	r18, r0
    1218:	11 24       	eor	r1, r1
    121a:	92 2e       	mov	r9, r18
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <vfprintf+0xe2>
    121e:	ea e0       	ldi	r30, 0x0A	; 10
    1220:	2e 9e       	mul	r2, r30
    1222:	20 0d       	add	r18, r0
    1224:	11 24       	eor	r1, r1
    1226:	22 2e       	mov	r2, r18
    1228:	f3 2d       	mov	r31, r3
    122a:	f0 62       	ori	r31, 0x20	; 32
    122c:	3f 2e       	mov	r3, r31
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0xe2>
    1230:	8c 36       	cpi	r24, 0x6C	; 108
    1232:	21 f4       	brne	.+8      	; 0x123c <vfprintf+0xde>
    1234:	83 2d       	mov	r24, r3
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	38 2e       	mov	r3, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0xe2>
    123c:	88 36       	cpi	r24, 0x68	; 104
    123e:	41 f4       	brne	.+16     	; 0x1250 <vfprintf+0xf2>
    1240:	f7 01       	movw	r30, r14
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	7f 01       	movw	r14, r30
    124c:	81 11       	cpse	r24, r1
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <vfprintf+0x58>
    1250:	98 2f       	mov	r25, r24
    1252:	9f 7d       	andi	r25, 0xDF	; 223
    1254:	95 54       	subi	r25, 0x45	; 69
    1256:	93 30       	cpi	r25, 0x03	; 3
    1258:	28 f4       	brcc	.+10     	; 0x1264 <vfprintf+0x106>
    125a:	0c 5f       	subi	r16, 0xFC	; 252
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	9f e3       	ldi	r25, 0x3F	; 63
    1260:	99 83       	std	Y+1, r25	; 0x01
    1262:	0d c0       	rjmp	.+26     	; 0x127e <vfprintf+0x120>
    1264:	83 36       	cpi	r24, 0x63	; 99
    1266:	31 f0       	breq	.+12     	; 0x1274 <vfprintf+0x116>
    1268:	83 37       	cpi	r24, 0x73	; 115
    126a:	71 f0       	breq	.+28     	; 0x1288 <vfprintf+0x12a>
    126c:	83 35       	cpi	r24, 0x53	; 83
    126e:	09 f0       	breq	.+2      	; 0x1272 <vfprintf+0x114>
    1270:	55 c0       	rjmp	.+170    	; 0x131c <vfprintf+0x1be>
    1272:	20 c0       	rjmp	.+64     	; 0x12b4 <vfprintf+0x156>
    1274:	f8 01       	movw	r30, r16
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	0e 5f       	subi	r16, 0xFE	; 254
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	88 24       	eor	r8, r8
    1280:	83 94       	inc	r8
    1282:	91 2c       	mov	r9, r1
    1284:	53 01       	movw	r10, r6
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <vfprintf+0x14e>
    1288:	28 01       	movw	r4, r16
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	4f 0e       	add	r4, r31
    128e:	51 1c       	adc	r5, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	36 fe       	sbrs	r3, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x142>
    129a:	69 2d       	mov	r22, r9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x146>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	3b d1       	rcall	.+630    	; 0x151e <strnlen>
    12a8:	4c 01       	movw	r8, r24
    12aa:	82 01       	movw	r16, r4
    12ac:	f3 2d       	mov	r31, r3
    12ae:	ff 77       	andi	r31, 0x7F	; 127
    12b0:	3f 2e       	mov	r3, r31
    12b2:	15 c0       	rjmp	.+42     	; 0x12de <vfprintf+0x180>
    12b4:	28 01       	movw	r4, r16
    12b6:	22 e0       	ldi	r18, 0x02	; 2
    12b8:	42 0e       	add	r4, r18
    12ba:	51 1c       	adc	r5, r1
    12bc:	f8 01       	movw	r30, r16
    12be:	a0 80       	ld	r10, Z
    12c0:	b1 80       	ldd	r11, Z+1	; 0x01
    12c2:	36 fe       	sbrs	r3, 6
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <vfprintf+0x16e>
    12c6:	69 2d       	mov	r22, r9
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x172>
    12cc:	6f ef       	ldi	r22, 0xFF	; 255
    12ce:	7f ef       	ldi	r23, 0xFF	; 255
    12d0:	c5 01       	movw	r24, r10
    12d2:	1a d1       	rcall	.+564    	; 0x1508 <strnlen_P>
    12d4:	4c 01       	movw	r8, r24
    12d6:	f3 2d       	mov	r31, r3
    12d8:	f0 68       	ori	r31, 0x80	; 128
    12da:	3f 2e       	mov	r3, r31
    12dc:	82 01       	movw	r16, r4
    12de:	33 fc       	sbrc	r3, 3
    12e0:	19 c0       	rjmp	.+50     	; 0x1314 <vfprintf+0x1b6>
    12e2:	82 2d       	mov	r24, r2
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 16       	cp	r8, r24
    12e8:	99 06       	cpc	r9, r25
    12ea:	a0 f4       	brcc	.+40     	; 0x1314 <vfprintf+0x1b6>
    12ec:	b6 01       	movw	r22, r12
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	20 d1       	rcall	.+576    	; 0x1534 <fputc>
    12f4:	2a 94       	dec	r2
    12f6:	f5 cf       	rjmp	.-22     	; 0x12e2 <vfprintf+0x184>
    12f8:	f5 01       	movw	r30, r10
    12fa:	37 fc       	sbrc	r3, 7
    12fc:	85 91       	lpm	r24, Z+
    12fe:	37 fe       	sbrs	r3, 7
    1300:	81 91       	ld	r24, Z+
    1302:	5f 01       	movw	r10, r30
    1304:	b6 01       	movw	r22, r12
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	15 d1       	rcall	.+554    	; 0x1534 <fputc>
    130a:	21 10       	cpse	r2, r1
    130c:	2a 94       	dec	r2
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	82 1a       	sub	r8, r18
    1312:	91 08       	sbc	r9, r1
    1314:	81 14       	cp	r8, r1
    1316:	91 04       	cpc	r9, r1
    1318:	79 f7       	brne	.-34     	; 0x12f8 <vfprintf+0x19a>
    131a:	e1 c0       	rjmp	.+450    	; 0x14de <vfprintf+0x380>
    131c:	84 36       	cpi	r24, 0x64	; 100
    131e:	11 f0       	breq	.+4      	; 0x1324 <vfprintf+0x1c6>
    1320:	89 36       	cpi	r24, 0x69	; 105
    1322:	39 f5       	brne	.+78     	; 0x1372 <vfprintf+0x214>
    1324:	f8 01       	movw	r30, r16
    1326:	37 fe       	sbrs	r3, 7
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x1da>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0c 5f       	subi	r16, 0xFC	; 252
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <vfprintf+0x1ea>
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	07 2e       	mov	r0, r23
    133e:	00 0c       	add	r0, r0
    1340:	88 0b       	sbc	r24, r24
    1342:	99 0b       	sbc	r25, r25
    1344:	0e 5f       	subi	r16, 0xFE	; 254
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	f3 2d       	mov	r31, r3
    134a:	ff 76       	andi	r31, 0x6F	; 111
    134c:	3f 2e       	mov	r3, r31
    134e:	97 ff       	sbrs	r25, 7
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x206>
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	f0 68       	ori	r31, 0x80	; 128
    1362:	3f 2e       	mov	r3, r31
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	a3 01       	movw	r20, r6
    136a:	20 d1       	rcall	.+576    	; 0x15ac <__ultoa_invert>
    136c:	88 2e       	mov	r8, r24
    136e:	86 18       	sub	r8, r6
    1370:	44 c0       	rjmp	.+136    	; 0x13fa <vfprintf+0x29c>
    1372:	85 37       	cpi	r24, 0x75	; 117
    1374:	31 f4       	brne	.+12     	; 0x1382 <vfprintf+0x224>
    1376:	23 2d       	mov	r18, r3
    1378:	2f 7e       	andi	r18, 0xEF	; 239
    137a:	b2 2e       	mov	r11, r18
    137c:	2a e0       	ldi	r18, 0x0A	; 10
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	25 c0       	rjmp	.+74     	; 0x13cc <vfprintf+0x26e>
    1382:	93 2d       	mov	r25, r3
    1384:	99 7f       	andi	r25, 0xF9	; 249
    1386:	b9 2e       	mov	r11, r25
    1388:	8f 36       	cpi	r24, 0x6F	; 111
    138a:	c1 f0       	breq	.+48     	; 0x13bc <vfprintf+0x25e>
    138c:	18 f4       	brcc	.+6      	; 0x1394 <vfprintf+0x236>
    138e:	88 35       	cpi	r24, 0x58	; 88
    1390:	79 f0       	breq	.+30     	; 0x13b0 <vfprintf+0x252>
    1392:	ae c0       	rjmp	.+348    	; 0x14f0 <vfprintf+0x392>
    1394:	80 37       	cpi	r24, 0x70	; 112
    1396:	19 f0       	breq	.+6      	; 0x139e <vfprintf+0x240>
    1398:	88 37       	cpi	r24, 0x78	; 120
    139a:	21 f0       	breq	.+8      	; 0x13a4 <vfprintf+0x246>
    139c:	a9 c0       	rjmp	.+338    	; 0x14f0 <vfprintf+0x392>
    139e:	e9 2f       	mov	r30, r25
    13a0:	e0 61       	ori	r30, 0x10	; 16
    13a2:	be 2e       	mov	r11, r30
    13a4:	b4 fe       	sbrs	r11, 4
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <vfprintf+0x264>
    13a8:	fb 2d       	mov	r31, r11
    13aa:	f4 60       	ori	r31, 0x04	; 4
    13ac:	bf 2e       	mov	r11, r31
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x264>
    13b0:	34 fe       	sbrs	r3, 4
    13b2:	0a c0       	rjmp	.+20     	; 0x13c8 <vfprintf+0x26a>
    13b4:	29 2f       	mov	r18, r25
    13b6:	26 60       	ori	r18, 0x06	; 6
    13b8:	b2 2e       	mov	r11, r18
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x26a>
    13bc:	28 e0       	ldi	r18, 0x08	; 8
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <vfprintf+0x26e>
    13c2:	20 e1       	ldi	r18, 0x10	; 16
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x26e>
    13c8:	20 e1       	ldi	r18, 0x10	; 16
    13ca:	32 e0       	ldi	r19, 0x02	; 2
    13cc:	f8 01       	movw	r30, r16
    13ce:	b7 fe       	sbrs	r11, 7
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <vfprintf+0x282>
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	0c 5f       	subi	r16, 0xFC	; 252
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x28e>
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 5f       	subi	r16, 0xFE	; 254
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	a3 01       	movw	r20, r6
    13ee:	de d0       	rcall	.+444    	; 0x15ac <__ultoa_invert>
    13f0:	88 2e       	mov	r8, r24
    13f2:	86 18       	sub	r8, r6
    13f4:	fb 2d       	mov	r31, r11
    13f6:	ff 77       	andi	r31, 0x7F	; 127
    13f8:	3f 2e       	mov	r3, r31
    13fa:	36 fe       	sbrs	r3, 6
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <vfprintf+0x2ba>
    13fe:	23 2d       	mov	r18, r3
    1400:	2e 7f       	andi	r18, 0xFE	; 254
    1402:	a2 2e       	mov	r10, r18
    1404:	89 14       	cp	r8, r9
    1406:	58 f4       	brcc	.+22     	; 0x141e <vfprintf+0x2c0>
    1408:	34 fe       	sbrs	r3, 4
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <vfprintf+0x2c4>
    140c:	32 fc       	sbrc	r3, 2
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <vfprintf+0x2c4>
    1410:	83 2d       	mov	r24, r3
    1412:	8e 7e       	andi	r24, 0xEE	; 238
    1414:	a8 2e       	mov	r10, r24
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <vfprintf+0x2c4>
    1418:	b8 2c       	mov	r11, r8
    141a:	a3 2c       	mov	r10, r3
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <vfprintf+0x2c6>
    141e:	b8 2c       	mov	r11, r8
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <vfprintf+0x2c6>
    1422:	b9 2c       	mov	r11, r9
    1424:	a4 fe       	sbrs	r10, 4
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <vfprintf+0x2e8>
    1428:	fe 01       	movw	r30, r28
    142a:	e8 0d       	add	r30, r8
    142c:	f1 1d       	adc	r31, r1
    142e:	80 81       	ld	r24, Z
    1430:	80 33       	cpi	r24, 0x30	; 48
    1432:	21 f4       	brne	.+8      	; 0x143c <vfprintf+0x2de>
    1434:	9a 2d       	mov	r25, r10
    1436:	99 7e       	andi	r25, 0xE9	; 233
    1438:	a9 2e       	mov	r10, r25
    143a:	09 c0       	rjmp	.+18     	; 0x144e <vfprintf+0x2f0>
    143c:	a2 fe       	sbrs	r10, 2
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x2ee>
    1440:	b3 94       	inc	r11
    1442:	b3 94       	inc	r11
    1444:	04 c0       	rjmp	.+8      	; 0x144e <vfprintf+0x2f0>
    1446:	8a 2d       	mov	r24, r10
    1448:	86 78       	andi	r24, 0x86	; 134
    144a:	09 f0       	breq	.+2      	; 0x144e <vfprintf+0x2f0>
    144c:	b3 94       	inc	r11
    144e:	a3 fc       	sbrc	r10, 3
    1450:	10 c0       	rjmp	.+32     	; 0x1472 <vfprintf+0x314>
    1452:	a0 fe       	sbrs	r10, 0
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x304>
    1456:	b2 14       	cp	r11, r2
    1458:	80 f4       	brcc	.+32     	; 0x147a <vfprintf+0x31c>
    145a:	28 0c       	add	r2, r8
    145c:	92 2c       	mov	r9, r2
    145e:	9b 18       	sub	r9, r11
    1460:	0d c0       	rjmp	.+26     	; 0x147c <vfprintf+0x31e>
    1462:	b2 14       	cp	r11, r2
    1464:	58 f4       	brcc	.+22     	; 0x147c <vfprintf+0x31e>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	63 d0       	rcall	.+198    	; 0x1534 <fputc>
    146e:	b3 94       	inc	r11
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <vfprintf+0x304>
    1472:	b2 14       	cp	r11, r2
    1474:	18 f4       	brcc	.+6      	; 0x147c <vfprintf+0x31e>
    1476:	2b 18       	sub	r2, r11
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x320>
    147a:	98 2c       	mov	r9, r8
    147c:	21 2c       	mov	r2, r1
    147e:	a4 fe       	sbrs	r10, 4
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <vfprintf+0x342>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e3       	ldi	r24, 0x30	; 48
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	55 d0       	rcall	.+170    	; 0x1534 <fputc>
    148a:	a2 fe       	sbrs	r10, 2
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <vfprintf+0x35c>
    148e:	a1 fc       	sbrc	r10, 1
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x33a>
    1492:	88 e7       	ldi	r24, 0x78	; 120
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x33e>
    1498:	88 e5       	ldi	r24, 0x58	; 88
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	b6 01       	movw	r22, r12
    149e:	0c c0       	rjmp	.+24     	; 0x14b8 <vfprintf+0x35a>
    14a0:	8a 2d       	mov	r24, r10
    14a2:	86 78       	andi	r24, 0x86	; 134
    14a4:	51 f0       	breq	.+20     	; 0x14ba <vfprintf+0x35c>
    14a6:	a1 fe       	sbrs	r10, 1
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x350>
    14aa:	8b e2       	ldi	r24, 0x2B	; 43
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x352>
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	a7 fc       	sbrc	r10, 7
    14b2:	8d e2       	ldi	r24, 0x2D	; 45
    14b4:	b6 01       	movw	r22, r12
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	3d d0       	rcall	.+122    	; 0x1534 <fputc>
    14ba:	89 14       	cp	r8, r9
    14bc:	30 f4       	brcc	.+12     	; 0x14ca <vfprintf+0x36c>
    14be:	b6 01       	movw	r22, r12
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	37 d0       	rcall	.+110    	; 0x1534 <fputc>
    14c6:	9a 94       	dec	r9
    14c8:	f8 cf       	rjmp	.-16     	; 0x14ba <vfprintf+0x35c>
    14ca:	8a 94       	dec	r8
    14cc:	f3 01       	movw	r30, r6
    14ce:	e8 0d       	add	r30, r8
    14d0:	f1 1d       	adc	r31, r1
    14d2:	80 81       	ld	r24, Z
    14d4:	b6 01       	movw	r22, r12
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	2d d0       	rcall	.+90     	; 0x1534 <fputc>
    14da:	81 10       	cpse	r8, r1
    14dc:	f6 cf       	rjmp	.-20     	; 0x14ca <vfprintf+0x36c>
    14de:	22 20       	and	r2, r2
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <vfprintf+0x386>
    14e2:	4e ce       	rjmp	.-868    	; 0x1180 <vfprintf+0x22>
    14e4:	b6 01       	movw	r22, r12
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	24 d0       	rcall	.+72     	; 0x1534 <fputc>
    14ec:	2a 94       	dec	r2
    14ee:	f7 cf       	rjmp	.-18     	; 0x14de <vfprintf+0x380>
    14f0:	f6 01       	movw	r30, r12
    14f2:	86 81       	ldd	r24, Z+6	; 0x06
    14f4:	97 81       	ldd	r25, Z+7	; 0x07
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <vfprintf+0x39e>
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	2b 96       	adiw	r28, 0x0b	; 11
    14fe:	e2 e1       	ldi	r30, 0x12	; 18
    1500:	07 c1       	rjmp	.+526    	; 0x1710 <__epilogue_restores__>

00001502 <__ctype_isfalse>:
    1502:	99 27       	eor	r25, r25
    1504:	88 27       	eor	r24, r24

00001506 <__ctype_istrue>:
    1506:	08 95       	ret

00001508 <strnlen_P>:
    1508:	fc 01       	movw	r30, r24
    150a:	05 90       	lpm	r0, Z+
    150c:	61 50       	subi	r22, 0x01	; 1
    150e:	70 40       	sbci	r23, 0x00	; 0
    1510:	01 10       	cpse	r0, r1
    1512:	d8 f7       	brcc	.-10     	; 0x150a <strnlen_P+0x2>
    1514:	80 95       	com	r24
    1516:	90 95       	com	r25
    1518:	8e 0f       	add	r24, r30
    151a:	9f 1f       	adc	r25, r31
    151c:	08 95       	ret

0000151e <strnlen>:
    151e:	fc 01       	movw	r30, r24
    1520:	61 50       	subi	r22, 0x01	; 1
    1522:	70 40       	sbci	r23, 0x00	; 0
    1524:	01 90       	ld	r0, Z+
    1526:	01 10       	cpse	r0, r1
    1528:	d8 f7       	brcc	.-10     	; 0x1520 <strnlen+0x2>
    152a:	80 95       	com	r24
    152c:	90 95       	com	r25
    152e:	8e 0f       	add	r24, r30
    1530:	9f 1f       	adc	r25, r31
    1532:	08 95       	ret

00001534 <fputc>:
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	fb 01       	movw	r30, r22
    153e:	23 81       	ldd	r18, Z+3	; 0x03
    1540:	21 fd       	sbrc	r18, 1
    1542:	03 c0       	rjmp	.+6      	; 0x154a <fputc+0x16>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	2c c0       	rjmp	.+88     	; 0x15a2 <fputc+0x6e>
    154a:	22 ff       	sbrs	r18, 2
    154c:	16 c0       	rjmp	.+44     	; 0x157a <fputc+0x46>
    154e:	46 81       	ldd	r20, Z+6	; 0x06
    1550:	57 81       	ldd	r21, Z+7	; 0x07
    1552:	24 81       	ldd	r18, Z+4	; 0x04
    1554:	35 81       	ldd	r19, Z+5	; 0x05
    1556:	42 17       	cp	r20, r18
    1558:	53 07       	cpc	r21, r19
    155a:	44 f4       	brge	.+16     	; 0x156c <fputc+0x38>
    155c:	a0 81       	ld	r26, Z
    155e:	b1 81       	ldd	r27, Z+1	; 0x01
    1560:	9d 01       	movw	r18, r26
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	20 83       	st	Z, r18
    1568:	31 83       	std	Z+1, r19	; 0x01
    156a:	8c 93       	st	X, r24
    156c:	26 81       	ldd	r18, Z+6	; 0x06
    156e:	37 81       	ldd	r19, Z+7	; 0x07
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	26 83       	std	Z+6, r18	; 0x06
    1576:	37 83       	std	Z+7, r19	; 0x07
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <fputc+0x6e>
    157a:	8b 01       	movw	r16, r22
    157c:	ec 01       	movw	r28, r24
    157e:	fb 01       	movw	r30, r22
    1580:	00 84       	ldd	r0, Z+8	; 0x08
    1582:	f1 85       	ldd	r31, Z+9	; 0x09
    1584:	e0 2d       	mov	r30, r0
    1586:	09 95       	icall
    1588:	89 2b       	or	r24, r25
    158a:	e1 f6       	brne	.-72     	; 0x1544 <fputc+0x10>
    158c:	d8 01       	movw	r26, r16
    158e:	16 96       	adiw	r26, 0x06	; 6
    1590:	8d 91       	ld	r24, X+
    1592:	9c 91       	ld	r25, X
    1594:	17 97       	sbiw	r26, 0x07	; 7
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	16 96       	adiw	r26, 0x06	; 6
    159a:	8d 93       	st	X+, r24
    159c:	9c 93       	st	X, r25
    159e:	17 97       	sbiw	r26, 0x07	; 7
    15a0:	ce 01       	movw	r24, r28
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <__ultoa_invert>:
    15ac:	fa 01       	movw	r30, r20
    15ae:	aa 27       	eor	r26, r26
    15b0:	28 30       	cpi	r18, 0x08	; 8
    15b2:	51 f1       	breq	.+84     	; 0x1608 <__ultoa_invert+0x5c>
    15b4:	20 31       	cpi	r18, 0x10	; 16
    15b6:	81 f1       	breq	.+96     	; 0x1618 <__ultoa_invert+0x6c>
    15b8:	e8 94       	clt
    15ba:	6f 93       	push	r22
    15bc:	6e 7f       	andi	r22, 0xFE	; 254
    15be:	6e 5f       	subi	r22, 0xFE	; 254
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	af 4f       	sbci	r26, 0xFF	; 255
    15c8:	b1 e0       	ldi	r27, 0x01	; 1
    15ca:	3e d0       	rcall	.+124    	; 0x1648 <__ultoa_invert+0x9c>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	3c d0       	rcall	.+120    	; 0x1648 <__ultoa_invert+0x9c>
    15d0:	67 0f       	add	r22, r23
    15d2:	78 1f       	adc	r23, r24
    15d4:	89 1f       	adc	r24, r25
    15d6:	9a 1f       	adc	r25, r26
    15d8:	a1 1d       	adc	r26, r1
    15da:	68 0f       	add	r22, r24
    15dc:	79 1f       	adc	r23, r25
    15de:	8a 1f       	adc	r24, r26
    15e0:	91 1d       	adc	r25, r1
    15e2:	a1 1d       	adc	r26, r1
    15e4:	6a 0f       	add	r22, r26
    15e6:	71 1d       	adc	r23, r1
    15e8:	81 1d       	adc	r24, r1
    15ea:	91 1d       	adc	r25, r1
    15ec:	a1 1d       	adc	r26, r1
    15ee:	20 d0       	rcall	.+64     	; 0x1630 <__ultoa_invert+0x84>
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <__ultoa_invert+0x48>
    15f2:	68 94       	set
    15f4:	3f 91       	pop	r19
    15f6:	2a e0       	ldi	r18, 0x0A	; 10
    15f8:	26 9f       	mul	r18, r22
    15fa:	11 24       	eor	r1, r1
    15fc:	30 19       	sub	r19, r0
    15fe:	30 5d       	subi	r19, 0xD0	; 208
    1600:	31 93       	st	Z+, r19
    1602:	de f6       	brtc	.-74     	; 0x15ba <__ultoa_invert+0xe>
    1604:	cf 01       	movw	r24, r30
    1606:	08 95       	ret
    1608:	46 2f       	mov	r20, r22
    160a:	47 70       	andi	r20, 0x07	; 7
    160c:	40 5d       	subi	r20, 0xD0	; 208
    160e:	41 93       	st	Z+, r20
    1610:	b3 e0       	ldi	r27, 0x03	; 3
    1612:	0f d0       	rcall	.+30     	; 0x1632 <__ultoa_invert+0x86>
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__ultoa_invert+0x5c>
    1616:	f6 cf       	rjmp	.-20     	; 0x1604 <__ultoa_invert+0x58>
    1618:	46 2f       	mov	r20, r22
    161a:	4f 70       	andi	r20, 0x0F	; 15
    161c:	40 5d       	subi	r20, 0xD0	; 208
    161e:	4a 33       	cpi	r20, 0x3A	; 58
    1620:	18 f0       	brcs	.+6      	; 0x1628 <__ultoa_invert+0x7c>
    1622:	49 5d       	subi	r20, 0xD9	; 217
    1624:	31 fd       	sbrc	r19, 1
    1626:	40 52       	subi	r20, 0x20	; 32
    1628:	41 93       	st	Z+, r20
    162a:	02 d0       	rcall	.+4      	; 0x1630 <__ultoa_invert+0x84>
    162c:	a9 f7       	brne	.-22     	; 0x1618 <__ultoa_invert+0x6c>
    162e:	ea cf       	rjmp	.-44     	; 0x1604 <__ultoa_invert+0x58>
    1630:	b4 e0       	ldi	r27, 0x04	; 4
    1632:	a6 95       	lsr	r26
    1634:	97 95       	ror	r25
    1636:	87 95       	ror	r24
    1638:	77 95       	ror	r23
    163a:	67 95       	ror	r22
    163c:	ba 95       	dec	r27
    163e:	c9 f7       	brne	.-14     	; 0x1632 <__ultoa_invert+0x86>
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 05       	cpc	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	08 95       	ret
    1648:	9b 01       	movw	r18, r22
    164a:	ac 01       	movw	r20, r24
    164c:	0a 2e       	mov	r0, r26
    164e:	06 94       	lsr	r0
    1650:	57 95       	ror	r21
    1652:	47 95       	ror	r20
    1654:	37 95       	ror	r19
    1656:	27 95       	ror	r18
    1658:	ba 95       	dec	r27
    165a:	c9 f7       	brne	.-14     	; 0x164e <__ultoa_invert+0xa2>
    165c:	62 0f       	add	r22, r18
    165e:	73 1f       	adc	r23, r19
    1660:	84 1f       	adc	r24, r20
    1662:	95 1f       	adc	r25, r21
    1664:	a0 1d       	adc	r26, r0
    1666:	08 95       	ret

00001668 <__mulsi3>:
    1668:	db 01       	movw	r26, r22
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	2d d0       	rcall	.+90     	; 0x16ca <__muluhisi3>
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	a2 9f       	mul	r26, r18
    1676:	80 0d       	add	r24, r0
    1678:	91 1d       	adc	r25, r1
    167a:	a3 9f       	mul	r26, r19
    167c:	90 0d       	add	r25, r0
    167e:	b2 9f       	mul	r27, r18
    1680:	90 0d       	add	r25, r0
    1682:	11 24       	eor	r1, r1
    1684:	08 95       	ret

00001686 <__udivmodsi4>:
    1686:	a1 e2       	ldi	r26, 0x21	; 33
    1688:	1a 2e       	mov	r1, r26
    168a:	aa 1b       	sub	r26, r26
    168c:	bb 1b       	sub	r27, r27
    168e:	fd 01       	movw	r30, r26
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <__udivmodsi4_ep>

00001692 <__udivmodsi4_loop>:
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	ee 1f       	adc	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	a2 17       	cp	r26, r18
    169c:	b3 07       	cpc	r27, r19
    169e:	e4 07       	cpc	r30, r20
    16a0:	f5 07       	cpc	r31, r21
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__udivmodsi4_ep>
    16a4:	a2 1b       	sub	r26, r18
    16a6:	b3 0b       	sbc	r27, r19
    16a8:	e4 0b       	sbc	r30, r20
    16aa:	f5 0b       	sbc	r31, r21

000016ac <__udivmodsi4_ep>:
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a 94       	dec	r1
    16b6:	69 f7       	brne	.-38     	; 0x1692 <__udivmodsi4_loop>
    16b8:	60 95       	com	r22
    16ba:	70 95       	com	r23
    16bc:	80 95       	com	r24
    16be:	90 95       	com	r25
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	bd 01       	movw	r22, r26
    16c6:	cf 01       	movw	r24, r30
    16c8:	08 95       	ret

000016ca <__muluhisi3>:
    16ca:	3a d0       	rcall	.+116    	; 0x1740 <__umulhisi3>
    16cc:	a5 9f       	mul	r26, r21
    16ce:	90 0d       	add	r25, r0
    16d0:	b4 9f       	mul	r27, r20
    16d2:	90 0d       	add	r25, r0
    16d4:	a4 9f       	mul	r26, r20
    16d6:	80 0d       	add	r24, r0
    16d8:	91 1d       	adc	r25, r1
    16da:	11 24       	eor	r1, r1
    16dc:	08 95       	ret

000016de <__prologue_saves__>:
    16de:	2f 92       	push	r2
    16e0:	3f 92       	push	r3
    16e2:	4f 92       	push	r4
    16e4:	5f 92       	push	r5
    16e6:	6f 92       	push	r6
    16e8:	7f 92       	push	r7
    16ea:	8f 92       	push	r8
    16ec:	9f 92       	push	r9
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	ca 1b       	sub	r28, r26
    1708:	db 0b       	sbc	r29, r27
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	09 94       	ijmp

00001710 <__epilogue_restores__>:
    1710:	2a 88       	ldd	r2, Y+18	; 0x12
    1712:	39 88       	ldd	r3, Y+17	; 0x11
    1714:	48 88       	ldd	r4, Y+16	; 0x10
    1716:	5f 84       	ldd	r5, Y+15	; 0x0f
    1718:	6e 84       	ldd	r6, Y+14	; 0x0e
    171a:	7d 84       	ldd	r7, Y+13	; 0x0d
    171c:	8c 84       	ldd	r8, Y+12	; 0x0c
    171e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1720:	aa 84       	ldd	r10, Y+10	; 0x0a
    1722:	b9 84       	ldd	r11, Y+9	; 0x09
    1724:	c8 84       	ldd	r12, Y+8	; 0x08
    1726:	df 80       	ldd	r13, Y+7	; 0x07
    1728:	ee 80       	ldd	r14, Y+6	; 0x06
    172a:	fd 80       	ldd	r15, Y+5	; 0x05
    172c:	0c 81       	ldd	r16, Y+4	; 0x04
    172e:	1b 81       	ldd	r17, Y+3	; 0x03
    1730:	aa 81       	ldd	r26, Y+2	; 0x02
    1732:	b9 81       	ldd	r27, Y+1	; 0x01
    1734:	ce 0f       	add	r28, r30
    1736:	d1 1d       	adc	r29, r1
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	ed 01       	movw	r28, r26
    173e:	08 95       	ret

00001740 <__umulhisi3>:
    1740:	a2 9f       	mul	r26, r18
    1742:	b0 01       	movw	r22, r0
    1744:	b3 9f       	mul	r27, r19
    1746:	c0 01       	movw	r24, r0
    1748:	a3 9f       	mul	r26, r19
    174a:	01 d0       	rcall	.+2      	; 0x174e <__umulhisi3+0xe>
    174c:	b2 9f       	mul	r27, r18
    174e:	70 0d       	add	r23, r0
    1750:	81 1d       	adc	r24, r1
    1752:	11 24       	eor	r1, r1
    1754:	91 1d       	adc	r25, r1
    1756:	08 95       	ret

00001758 <_exit>:
    1758:	f8 94       	cli

0000175a <__stop_program>:
    175a:	ff cf       	rjmp	.-2      	; 0x175a <__stop_program>
