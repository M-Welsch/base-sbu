
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001a37  00001aeb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022d  0000980a  0000180a  000018be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b8  00803e04  00803e04  00001aef  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001aef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007a64  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002816  00000000  00000000  000099d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000200c  00000000  00000000  0000c1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000990  00000000  00000000  0000e1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002343  00000000  00000000  0000eb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fc  00000000  00000000  00010ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  000124c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	24 c1       	rjmp	.+584    	; 0x250 <__vector_3>
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	85 c5       	rjmp	.+2826   	; 0xb18 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	b8 c1       	rjmp	.+880    	; 0x386 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	3e c7       	rjmp	.+3708   	; 0xeaa <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e7 e3       	ldi	r30, 0x37	; 55
      48:	fa e1       	ldi	r31, 0x1A	; 26
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 3b       	cpi	r26, 0xBC	; 188
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	12 d2       	rcall	.+1060   	; 0x48c <main>
      68:	ce cb       	rjmp	.-2148   	; 0xfffff806 <__eeprom_end+0xff7ef806>

0000006a <__bad_interrupt>:
      6a:	36 c1       	rjmp	.+620    	; 0x2d8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <led_hmi_on>:
     1a2:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <led_hmi_on+0xe>
     1aa:	80 e1       	ldi	r24, 0x10	; 16
     1ac:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b0:	08 95       	ret

000001b2 <led_hmi_off>:
     1b2:	80 e1       	ldi	r24, 0x10	; 16
     1b4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1b8:	08 95       	ret

000001ba <toggle_hmi_led>:
     1ba:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1be:	88 23       	and	r24, r24
     1c0:	21 f0       	breq	.+8      	; 0x1ca <toggle_hmi_led+0x10>
     1c2:	80 e1       	ldi	r24, 0x10	; 16
     1c4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     1c8:	08 95       	ret
     1ca:	80 e1       	ldi	r24, 0x10	; 16
     1cc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1d0:	08 95       	ret

000001d2 <dim_display>:
     1d2:	18 16       	cp	r1, r24
     1d4:	19 06       	cpc	r1, r25
     1d6:	44 f4       	brge	.+16     	; 0x1e8 <dim_display+0x16>
     1d8:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1dc:	88 23       	and	r24, r24
     1de:	21 f0       	breq	.+8      	; 0x1e8 <dim_display+0x16>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1ee:	08 95       	ret

000001f0 <display_enable>:
     1f0:	e0 e0       	ldi	r30, 0x00	; 0
     1f2:	f4 e0       	ldi	r31, 0x04	; 4
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	85 83       	std	Z+5, r24	; 0x05
     1f8:	92 e4       	ldi	r25, 0x42	; 66
     1fa:	9a 95       	dec	r25
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <display_enable+0xa>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <display_enable+0x10>
     200:	86 83       	std	Z+6, r24	; 0x06
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	8a 95       	dec	r24
     206:	f1 f7       	brne	.-4      	; 0x204 <display_enable+0x14>
     208:	00 c0       	rjmp	.+0      	; 0x20a <display_enable+0x1a>
     20a:	08 95       	ret

0000020c <set_display_data_pins>:
     20c:	e0 e4       	ldi	r30, 0x40	; 64
     20e:	f4 e0       	ldi	r31, 0x04	; 4
     210:	94 81       	ldd	r25, Z+4	; 0x04
     212:	90 7f       	andi	r25, 0xF0	; 240
     214:	94 83       	std	Z+4, r25	; 0x04
     216:	94 81       	ldd	r25, Z+4	; 0x04
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	98 2b       	or	r25, r24
     21c:	94 83       	std	Z+4, r25	; 0x04
     21e:	08 95       	ret

00000220 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     226:	08 95       	ret

00000228 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     228:	80 e4       	ldi	r24, 0x40	; 64
     22a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     22e:	08 95       	ret

00000230 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     238:	81 83       	std	Z+1, r24	; 0x01
     23a:	08 95       	ret

0000023c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     242:	08 95       	ret

00000244 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     244:	e0 e2       	ldi	r30, 0x20	; 32
     246:	f4 e0       	ldi	r31, 0x04	; 4
     248:	85 89       	ldd	r24, Z+21	; 0x15
     24a:	89 60       	ori	r24, 0x09	; 9
     24c:	85 8b       	std	Z+21, r24	; 0x15
     24e:	08 95       	ret

00000250 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	8f 93       	push	r24
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     260:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     264:	82 ff       	sbrs	r24, 2
     266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_3+0x28>
		flag_button_0_pressed = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     26e:	e9 e0       	ldi	r30, 0x09	; 9
     270:	f4 e0       	ldi	r31, 0x04	; 4
     272:	80 81       	ld	r24, Z
     274:	84 70       	andi	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     278:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     27c:	83 ff       	sbrs	r24, 3
     27e:	08 c0       	rjmp	.+16     	; 0x290 <__vector_3+0x40>
		flag_button_1_pressed = true;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     286:	e9 e0       	ldi	r30, 0x09	; 9
     288:	f4 e0       	ldi	r31, 0x04	; 4
     28a:	80 81       	ld	r24, Z
     28c:	88 70       	andi	r24, 0x08	; 8
     28e:	80 83       	st	Z, r24
	}
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	8f 93       	push	r24
     2ac:	ef 93       	push	r30
     2ae:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     2b0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     2b4:	85 ff       	sbrs	r24, 5
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <__vector_4+0x28>
		flag_heartbeat = true;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     2be:	e9 e2       	ldi	r30, 0x29	; 41
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	80 81       	ld	r24, Z
     2c4:	80 72       	andi	r24, 0x20	; 32
     2c6:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	8f 91       	pop	r24
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_default>:

ISR(BADISR_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	1f 93       	push	r17
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
     304:	c4 e1       	ldi	r28, 0x14	; 20
     306:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     308:	68 94       	set
     30a:	ee 24       	eor	r14, r14
     30c:	e5 f8       	bld	r14, 5
     30e:	ff 24       	eor	r15, r15
     310:	f2 f8       	bld	r15, 2
     312:	10 e1       	ldi	r17, 0x10	; 16
ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
	{
		led_hmi_on();
     314:	46 df       	rcall	.-372    	; 0x1a2 <led_hmi_on>
     316:	8f e4       	ldi	r24, 0x4F	; 79
     318:	93 ec       	ldi	r25, 0xC3	; 195
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <__vector_default+0x42>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <__vector_default+0x48>
     320:	00 00       	nop
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     322:	f7 01       	movw	r30, r14
     324:	16 83       	std	Z+6, r17	; 0x06
     326:	8f e4       	ldi	r24, 0x4F	; 79
     328:	93 ec       	ldi	r25, 0xC3	; 195
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <__vector_default+0x52>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_default+0x58>
     330:	00 00       	nop
     332:	21 97       	sbiw	r28, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     334:	79 f7       	brne	.-34     	; 0x314 <__vector_default+0x3c>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_newline_eol(buffer);
}
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	fa e0       	ldi	r31, 0x0A	; 10
     366:	8b e2       	ldi	r24, 0x2B	; 43
     368:	9a e0       	ldi	r25, 0x0A	; 10
     36a:	86 a3       	std	Z+38, r24	; 0x26
     36c:	97 a3       	std	Z+39, r25	; 0x27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	82 87       	std	Z+10, r24	; 0x0a
     372:	08 95       	ret

00000374 <init_heatbeat_monitor>:
     374:	67 df       	rcall	.-306    	; 0x244 <setup_interrupt_for_hb_edge_detection>
     376:	f5 df       	rcall	.-22     	; 0x362 <setup_interrupt_timeout_detection>
     378:	08 95       	ret

0000037a <heartbeat_monitor>:
     37a:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_heartbeat>
     37e:	81 11       	cpse	r24, r1
     380:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_heartbeat>
     384:	08 95       	ret

00000386 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     390:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_bpi_heartbeat_ok>
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     39e:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     3a2:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_button_1_pressed>
     3a6:	81 11       	cpse	r24, r1
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <mainloop_standby+0x10>
     3aa:	99 23       	and	r25, r25
     3ac:	41 f0       	breq	.+16     	; 0x3be <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     3ae:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		flag_button_1_pressed = false;
     3b2:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     3bc:	1c d3       	rcall	.+1592   	; 0x9f6 <transition_to_pwr_state>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <mainloop_standby+0x26>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <mainloop_standby+0x30>
     3ce:	00 00       	nop
     3d0:	08 95       	ret

000003d2 <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
     3d2:	cf 93       	push	r28
	if (flag_entering_mainloop_display_on) {
     3d4:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_entering_mainloop_display_on>
     3d8:	88 23       	and	r24, r24
     3da:	b9 f0       	breq	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		flag_entering_mainloop_display_on = false;
     3dc:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     3e0:	84 e4       	ldi	r24, 0x44	; 68
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     3e8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     3ec:	8a e9       	ldi	r24, 0x9A	; 154
     3ee:	94 e0       	ldi	r25, 0x04	; 4
     3f0:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     3f4:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
		button1_action = show_menu_actions;
     3f8:	85 e5       	ldi	r24, 0x55	; 85
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     400:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
		dim_display(1);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	e4 de       	rcall	.-568    	; 0x1d2 <dim_display>
	}
	show_menu();
     40a:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     40e:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     412:	09 95       	icall
     414:	2f ef       	ldi	r18, 0xFF	; 255
     416:	80 e7       	ldi	r24, 0x70	; 112
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	21 50       	subi	r18, 0x01	; 1
     41c:	80 40       	sbci	r24, 0x00	; 0
     41e:	90 40       	sbci	r25, 0x00	; 0
     420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     424:	00 00       	nop
	_delay_ms(100); //debouncing 
	while(!flag_button_0_pressed & !button_1_pressed()) {
     426:	c0 91 19 3e 	lds	r28, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     42a:	a8 de       	rcall	.-688    	; 0x17c <button_1_pressed>
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	89 2b       	or	r24, r25
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	c2 17       	cp	r28, r18
     436:	b8 f3       	brcs	.-18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		;
	}
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     438:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     43c:	88 23       	and	r24, r24
     43e:	39 f0       	breq	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		flag_button_0_pressed = false;
     440:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		button0_action();
     444:	e0 91 16 3e 	lds	r30, 0x3E16	; 0x803e16 <button0_action>
     448:	f0 91 17 3e 	lds	r31, 0x3E17	; 0x803e17 <button0_action+0x1>
     44c:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     44e:	96 de       	rcall	.-724    	; 0x17c <button_1_pressed>
     450:	89 2b       	or	r24, r25
     452:	39 f0       	breq	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		flag_button_1_pressed = false;
     454:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		button1_action();
     458:	e0 91 14 3e 	lds	r30, 0x3E14	; 0x803e14 <button1_action>
     45c:	f0 91 15 3e 	lds	r31, 0x3E15	; 0x803e15 <button1_action+0x1>
     460:	09 95       	icall
	}
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     466:	52 de       	rcall	.-860    	; 0x10c <init_flags>
	init_pins();
     468:	65 de       	rcall	.-822    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     46a:	84 df       	rcall	.-248    	; 0x374 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     46c:	91 de       	rcall	.-734    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     46e:	8a d3       	rcall	.+1812   	; 0xb84 <init_uart>
	init_display();
     470:	21 d1       	rcall	.+578    	; 0x6b4 <init_display>
	adc_init();
     472:	07 de       	rcall	.-1010   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     474:	81 e1       	ldi	r24, 0x11	; 17
     476:	ec e0       	ldi	r30, 0x0C	; 12
     478:	f8 e9       	ldi	r31, 0x98	; 152
     47a:	ab e1       	ldi	r26, 0x1B	; 27
     47c:	be e3       	ldi	r27, 0x3E	; 62
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	8a 95       	dec	r24
     484:	e1 f7       	brne	.-8      	; 0x47e <init_sbu+0x18>
	dimmer_init();
     486:	e9 d1       	rcall	.+978    	; 0x85a <dimmer_init>
	sei();
     488:	78 94       	sei
     48a:	08 95       	ret

0000048c <main>:
}

int main(void)
{
	init_sbu();
     48c:	ec df       	rcall	.-40     	; 0x466 <init_sbu>

	display_write_string("Standby Unit\nready!");
     48e:	8d e1       	ldi	r24, 0x1D	; 29
     490:	98 e9       	ldi	r25, 0x98	; 152
     492:	c0 d1       	rcall	.+896    	; 0x814 <display_write_string>
	USART0_sendString("I:STARTED");
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	98 e9       	ldi	r25, 0x98	; 152
     498:	88 d3       	rcall	.+1808   	; 0xbaa <USART0_sendString>
	dim_display(1);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	99 de       	rcall	.-718    	; 0x1d2 <dim_display>
	
	current_pwr_state = active;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4a6:	cb e7       	ldi	r28, 0x7B	; 123
     4a8:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4aa:	0f 2e       	mov	r0, r31
     4ac:	f9 ee       	ldi	r31, 0xE9	; 233
     4ae:	cf 2e       	mov	r12, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	df 2e       	mov	r13, r31
     4b4:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4b6:	0f 2e       	mov	r0, r31
     4b8:	ff ec       	ldi	r31, 0xCF	; 207
     4ba:	ef 2e       	mov	r14, r31
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4c2:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4c4:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	39 f0       	breq	.+14     	; 0x4da <main+0x4e>
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <main+0x4a>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	29 f4       	brne	.+10     	; 0x4dc <main+0x50>
			case active:
				mainloop = mainloop_active;
     4d2:	e8 01       	movw	r28, r16
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     4d6:	e7 01       	movw	r28, r14
				break;
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     4da:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     4dc:	fe 01       	movw	r30, r28
     4de:	09 95       	icall
    }
     4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <main+0x38>

000004e2 <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     4e2:	e0 e5       	ldi	r30, 0x50	; 80
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     4ec:	80 81       	ld	r24, Z
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	80 83       	st	Z, r24
	sleep_cpu();
     4f2:	88 95       	sleep
     4f4:	08 95       	ret

000004f6 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	6b de       	rcall	.-810    	; 0x1d2 <dim_display>
	heartbeat_monitor();
     4fc:	3e df       	rcall	.-388    	; 0x37a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     4fe:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_bpi_heartbeat_ok>
     502:	81 11       	cpse	r24, r1
     504:	01 c0       	rjmp	.+2      	; 0x508 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     506:	9a de       	rcall	.-716    	; 0x23c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     508:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     50c:	88 23       	and	r24, r24
     50e:	19 f0       	breq	.+6      	; 0x516 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     510:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		led_hmi_off();
     514:	4e de       	rcall	.-868    	; 0x1b2 <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     516:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_button_1_pressed>
     51a:	88 23       	and	r24, r24
     51c:	29 f0       	breq	.+10     	; 0x528 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     51e:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     522:	8b e3       	ldi	r24, 0x3B	; 59
     524:	98 e9       	ldi	r25, 0x98	; 152
     526:	41 d3       	rcall	.+1666   	; 0xbaa <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     528:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_usart_string_receive_complete>
     52c:	88 23       	and	r24, r24
     52e:	19 f0       	breq	.+6      	; 0x536 <mainloop_active+0x40>
		USART0_process_incoming_message();
     530:	c8 d3       	rcall	.+1936   	; 0xcc2 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     532:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     536:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_string_for_display_received>
     53a:	88 23       	and	r24, r24
     53c:	59 f0       	breq	.+22     	; 0x554 <mainloop_active+0x5e>
		flag_string_for_display_received = false;
     53e:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_string_for_display_received>
		display_clear();
     542:	7b d1       	rcall	.+758    	; 0x83a <display_clear>
		display_write_string(display_line1_content);
     544:	82 e5       	ldi	r24, 0x52	; 82
     546:	9e e3       	ldi	r25, 0x3E	; 62
     548:	65 d1       	rcall	.+714    	; 0x814 <display_write_string>
		display_next_line();
     54a:	5a d1       	rcall	.+692    	; 0x800 <display_next_line>
		display_write_string(display_line2_content);
     54c:	8c e3       	ldi	r24, 0x3C	; 60
     54e:	9e e3       	ldi	r25, 0x3E	; 62
     550:	61 d1       	rcall	.+706    	; 0x814 <display_write_string>
		USART0_send_ready();
     552:	52 d3       	rcall	.+1700   	; 0xbf8 <USART0_send_ready>
	}
	
	if (flag_pwr_state_change_request == true) {
     554:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_pwr_state_change_request>
     558:	88 23       	and	r24, r24
     55a:	49 f0       	breq	.+18     	; 0x56e <mainloop_active+0x78>
		display_clear();
     55c:	6e d1       	rcall	.+732    	; 0x83a <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     55e:	85 e4       	ldi	r24, 0x45	; 69
     560:	98 e9       	ldi	r25, 0x98	; 152
     562:	58 d1       	rcall	.+688    	; 0x814 <display_write_string>
		flag_pwr_state_change_request = false;
     564:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     568:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <next_pwr_state>
     56c:	44 d2       	rcall	.+1160   	; 0x9f6 <transition_to_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     56e:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <mainloop_active+0x8e>
		display_clear();
     576:	61 d1       	rcall	.+706    	; 0x83a <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     578:	8b e1       	ldi	r24, 0x1B	; 27
     57a:	9e e3       	ldi	r25, 0x3E	; 62
     57c:	4b d1       	rcall	.+662    	; 0x814 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     57e:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
		USART0_send_ready();
     582:	3a d3       	rcall	.+1652   	; 0xbf8 <USART0_send_ready>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     584:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_received_seconds_to_next_bu>
     588:	88 23       	and	r24, r24
     58a:	11 f1       	breq	.+68     	; 0x5d0 <mainloop_active+0xda>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     58c:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <seconds_to_next_bu+0x3>
     590:	8f 93       	push	r24
     592:	80 91 4f 3e 	lds	r24, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x2>
     596:	8f 93       	push	r24
     598:	80 91 4e 3e 	lds	r24, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x1>
     59c:	8f 93       	push	r24
     59e:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <seconds_to_next_bu>
     5a2:	8f 93       	push	r24
     5a4:	82 e6       	ldi	r24, 0x62	; 98
     5a6:	98 e9       	ldi	r25, 0x98	; 152
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	83 e8       	ldi	r24, 0x83	; 131
     5ae:	9e e3       	ldi	r25, 0x3E	; 62
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0c d6       	rcall	.+3096   	; 0x11ce <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     5b6:	83 e8       	ldi	r24, 0x83	; 131
     5b8:	9e e3       	ldi	r25, 0x3E	; 62
     5ba:	18 d3       	rcall	.+1584   	; 0xbec <USART0_sendString_w_newline_eol>
		flag_received_seconds_to_next_bu = false;
     5bc:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5c0:	6f d2       	rcall	.+1246   	; 0xaa0 <rtc_write_seconds_to_cmp>
		rtc_setup();
     5c2:	62 d2       	rcall	.+1220   	; 0xa88 <rtc_setup>
		USART0_send_ready();
     5c4:	19 d3       	rcall	.+1586   	; 0xbf8 <USART0_send_ready>
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	08 96       	adiw	r24, 0x08	; 8
     5cc:	8d bf       	out	0x3d, r24	; 61
     5ce:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     5d0:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_goto_sleep>
     5d4:	88 23       	and	r24, r24
     5d6:	79 f0       	breq	.+30     	; 0x5f6 <mainloop_active+0x100>
		flag_goto_sleep = false;
     5d8:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_goto_sleep>
		USART0_sendString_w_newline_eol("going to sleep ...\n");
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	98 e9       	ldi	r25, 0x98	; 152
     5e0:	05 d3       	rcall	.+1546   	; 0xbec <USART0_sendString_w_newline_eol>
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	20 e7       	ldi	r18, 0x70	; 112
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	91 50       	subi	r25, 0x01	; 1
     5ea:	20 40       	sbci	r18, 0x00	; 0
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <mainloop_active+0xf2>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <mainloop_active+0xfc>
     5f2:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     5f4:	76 df       	rcall	.-276    	; 0x4e2 <goto_sleep_standby>
	}
	
	if (flag_request_current_measurement == true) {
     5f6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_request_current_measurement>
     5fa:	88 23       	and	r24, r24
     5fc:	c1 f0       	breq	.+48     	; 0x62e <mainloop_active+0x138>
		flag_request_current_measurement = false;
     5fe:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     602:	64 dd       	rcall	.-1336   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"CC:%d", input_current);
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	83 e9       	ldi	r24, 0x93	; 147
     60a:	98 e9       	ldi	r25, 0x98	; 152
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	9e e3       	ldi	r25, 0x3E	; 62
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	da d5       	rcall	.+2996   	; 0x11ce <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     61a:	83 e8       	ldi	r24, 0x83	; 131
     61c:	9e e3       	ldi	r25, 0x3E	; 62
     61e:	e6 d2       	rcall	.+1484   	; 0xbec <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     620:	eb d2       	rcall	.+1494   	; 0xbf8 <USART0_send_ready>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if	(flag_request_temperature_measurement == true) {
     62e:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_request_temperature_measurement>
     632:	88 23       	and	r24, r24
     634:	c1 f0       	breq	.+48     	; 0x666 <mainloop_active+0x170>
		flag_request_temperature_measurement = false;
     636:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     63a:	54 dd       	rcall	.-1368   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TP:%d", temperature);
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	89 e9       	ldi	r24, 0x99	; 153
     642:	98 e9       	ldi	r25, 0x98	; 152
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	83 e8       	ldi	r24, 0x83	; 131
     64a:	9e e3       	ldi	r25, 0x3E	; 62
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	be d5       	rcall	.+2940   	; 0x11ce <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     652:	83 e8       	ldi	r24, 0x83	; 131
     654:	9e e3       	ldi	r25, 0x3E	; 62
     656:	ca d2       	rcall	.+1428   	; 0xbec <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     658:	cf d2       	rcall	.+1438   	; 0xbf8 <USART0_send_ready>
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_request_3v3_measurement == true) {
     666:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_request_3v3_measurement>
     66a:	88 23       	and	r24, r24
     66c:	c1 f0       	breq	.+48     	; 0x69e <mainloop_active+0x1a8>
		flag_request_3v3_measurement = false;
     66e:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     672:	20 dd       	rcall	.-1472   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V:%d", voltage_3v3);
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	8f e9       	ldi	r24, 0x9F	; 159
     67a:	98 e9       	ldi	r25, 0x98	; 152
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	83 e8       	ldi	r24, 0x83	; 131
     682:	9e e3       	ldi	r25, 0x3E	; 62
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	a2 d5       	rcall	.+2884   	; 0x11ce <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     68a:	83 e8       	ldi	r24, 0x83	; 131
     68c:	9e e3       	ldi	r25, 0x3E	; 62
     68e:	ae d2       	rcall	.+1372   	; 0xbec <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     690:	b3 d2       	rcall	.+1382   	; 0xbf8 <USART0_send_ready>
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	9f ef       	ldi	r25, 0xFF	; 255
     6a0:	20 e7       	ldi	r18, 0x70	; 112
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <mainloop_active+0x1ae>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <mainloop_active+0x1b8>
     6ae:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     6b0:	84 dd       	rcall	.-1272   	; 0x1ba <toggle_hmi_led>
     6b2:	08 95       	ret

000006b4 <init_display>:
     6b4:	2f e7       	ldi	r18, 0x7F	; 127
     6b6:	8a e1       	ldi	r24, 0x1A	; 26
     6b8:	96 e0       	ldi	r25, 0x06	; 6
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	90 40       	sbci	r25, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <init_display+0x6>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <init_display+0x10>
     6c4:	00 00       	nop
     6c6:	b0 dd       	rcall	.-1184   	; 0x228 <display_clear_rs_pin>
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	a0 dd       	rcall	.-1216   	; 0x20c <set_display_data_pins>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 dd       	rcall	.-1248   	; 0x1f0 <display_enable>
     6d0:	87 e8       	ldi	r24, 0x87	; 135
     6d2:	93 e1       	ldi	r25, 0x13	; 19
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <init_display+0x20>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <init_display+0x26>
     6da:	00 00       	nop
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	96 dd       	rcall	.-1236   	; 0x20c <set_display_data_pins>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	86 dd       	rcall	.-1268   	; 0x1f0 <display_enable>
     6e4:	87 e8       	ldi	r24, 0x87	; 135
     6e6:	93 e1       	ldi	r25, 0x13	; 19
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <init_display+0x34>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <init_display+0x3a>
     6ee:	00 00       	nop
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	8c dd       	rcall	.-1256   	; 0x20c <set_display_data_pins>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	7c dd       	rcall	.-1288   	; 0x1f0 <display_enable>
     6f8:	87 e8       	ldi	r24, 0x87	; 135
     6fa:	93 e1       	ldi	r25, 0x13	; 19
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <init_display+0x48>
     700:	00 c0       	rjmp	.+0      	; 0x702 <init_display+0x4e>
     702:	00 00       	nop
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	82 dd       	rcall	.-1276   	; 0x20c <set_display_data_pins>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	72 dd       	rcall	.-1308   	; 0x1f0 <display_enable>
     70c:	87 e8       	ldi	r24, 0x87	; 135
     70e:	93 e1       	ldi	r25, 0x13	; 19
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <init_display+0x5c>
     714:	00 c0       	rjmp	.+0      	; 0x716 <init_display+0x62>
     716:	00 00       	nop
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	78 dd       	rcall	.-1296   	; 0x20c <set_display_data_pins>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	68 dd       	rcall	.-1328   	; 0x1f0 <display_enable>
     720:	87 e8       	ldi	r24, 0x87	; 135
     722:	93 e1       	ldi	r25, 0x13	; 19
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <init_display+0x70>
     728:	00 c0       	rjmp	.+0      	; 0x72a <init_display+0x76>
     72a:	00 00       	nop
     72c:	88 e0       	ldi	r24, 0x08	; 8
     72e:	6e dd       	rcall	.-1316   	; 0x20c <set_display_data_pins>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	5e dd       	rcall	.-1348   	; 0x1f0 <display_enable>
     734:	87 e8       	ldi	r24, 0x87	; 135
     736:	93 e1       	ldi	r25, 0x13	; 19
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <init_display+0x84>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <init_display+0x8a>
     73e:	00 00       	nop
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	64 dd       	rcall	.-1336   	; 0x20c <set_display_data_pins>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	54 dd       	rcall	.-1368   	; 0x1f0 <display_enable>
     748:	87 e8       	ldi	r24, 0x87	; 135
     74a:	93 e1       	ldi	r25, 0x13	; 19
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <init_display+0x98>
     750:	00 c0       	rjmp	.+0      	; 0x752 <init_display+0x9e>
     752:	00 00       	nop
     754:	8c e0       	ldi	r24, 0x0C	; 12
     756:	5a dd       	rcall	.-1356   	; 0x20c <set_display_data_pins>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	4a dd       	rcall	.-1388   	; 0x1f0 <display_enable>
     75c:	87 e8       	ldi	r24, 0x87	; 135
     75e:	93 e1       	ldi	r25, 0x13	; 19
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <init_display+0xac>
     764:	00 c0       	rjmp	.+0      	; 0x766 <init_display+0xb2>
     766:	00 00       	nop
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	50 dd       	rcall	.-1376   	; 0x20c <set_display_data_pins>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	40 dd       	rcall	.-1408   	; 0x1f0 <display_enable>
     770:	87 e8       	ldi	r24, 0x87	; 135
     772:	93 e1       	ldi	r25, 0x13	; 19
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <init_display+0xc0>
     778:	00 c0       	rjmp	.+0      	; 0x77a <init_display+0xc6>
     77a:	00 00       	nop
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	46 dd       	rcall	.-1396   	; 0x20c <set_display_data_pins>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	36 dd       	rcall	.-1428   	; 0x1f0 <display_enable>
     784:	87 e8       	ldi	r24, 0x87	; 135
     786:	93 e1       	ldi	r25, 0x13	; 19
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <init_display+0xd4>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <init_display+0xda>
     78e:	00 00       	nop
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	3c dd       	rcall	.-1416   	; 0x20c <set_display_data_pins>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	2c dd       	rcall	.-1448   	; 0x1f0 <display_enable>
     798:	87 e8       	ldi	r24, 0x87	; 135
     79a:	93 e1       	ldi	r25, 0x13	; 19
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <init_display+0xe8>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <init_display+0xee>
     7a2:	00 00       	nop
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	32 dd       	rcall	.-1436   	; 0x20c <set_display_data_pins>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	22 dd       	rcall	.-1468   	; 0x1f0 <display_enable>
     7ac:	87 e8       	ldi	r24, 0x87	; 135
     7ae:	93 e1       	ldi	r25, 0x13	; 19
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <init_display+0xfc>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <init_display+0x102>
     7b6:	00 00       	nop
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	28 dd       	rcall	.-1456   	; 0x20c <set_display_data_pins>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	18 dd       	rcall	.-1488   	; 0x1f0 <display_enable>
     7c0:	87 e8       	ldi	r24, 0x87	; 135
     7c2:	93 e1       	ldi	r25, 0x13	; 19
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <init_display+0x110>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <init_display+0x116>
     7ca:	00 00       	nop
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	1e dd       	rcall	.-1476   	; 0x20c <set_display_data_pins>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e dd       	rcall	.-1508   	; 0x1f0 <display_enable>
     7d4:	87 e8       	ldi	r24, 0x87	; 135
     7d6:	93 e1       	ldi	r25, 0x13	; 19
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <init_display+0x124>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <init_display+0x12a>
     7de:	00 00       	nop
     7e0:	08 95       	ret

000007e2 <display_write_char>:
     7e2:	cf 93       	push	r28
     7e4:	c8 2f       	mov	r28, r24
     7e6:	1c dd       	rcall	.-1480   	; 0x220 <display_set_rs_pin>
     7e8:	8c 2f       	mov	r24, r28
     7ea:	82 95       	swap	r24
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	0e dd       	rcall	.-1508   	; 0x20c <set_display_data_pins>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	fe dc       	rcall	.-1540   	; 0x1f0 <display_enable>
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0a dd       	rcall	.-1516   	; 0x20c <set_display_data_pins>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	fa dc       	rcall	.-1548   	; 0x1f0 <display_enable>
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <display_next_line>:
     800:	13 dd       	rcall	.-1498   	; 0x228 <display_clear_rs_pin>
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	03 dd       	rcall	.-1530   	; 0x20c <set_display_data_pins>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	f3 dc       	rcall	.-1562   	; 0x1f0 <display_enable>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	ff dc       	rcall	.-1538   	; 0x20c <set_display_data_pins>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	ef dc       	rcall	.-1570   	; 0x1f0 <display_enable>
     812:	08 95       	ret

00000814 <display_write_string>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
     81a:	02 dd       	rcall	.-1532   	; 0x220 <display_set_rs_pin>
     81c:	88 81       	ld	r24, Y
     81e:	88 23       	and	r24, r24
     820:	49 f0       	breq	.+18     	; 0x834 <display_write_string+0x20>
     822:	21 96       	adiw	r28, 0x01	; 1
     824:	8a 30       	cpi	r24, 0x0A	; 10
     826:	11 f4       	brne	.+4      	; 0x82c <display_write_string+0x18>
     828:	eb df       	rcall	.-42     	; 0x800 <display_next_line>
     82a:	01 c0       	rjmp	.+2      	; 0x82e <display_write_string+0x1a>
     82c:	da df       	rcall	.-76     	; 0x7e2 <display_write_char>
     82e:	89 91       	ld	r24, Y+
     830:	81 11       	cpse	r24, r1
     832:	f8 cf       	rjmp	.-16     	; 0x824 <display_write_string+0x10>
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     83a:	f6 dc       	rcall	.-1556   	; 0x228 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	e6 dc       	rcall	.-1588   	; 0x20c <set_display_data_pins>
	display_enable(1);
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	d6 dc       	rcall	.-1620   	; 0x1f0 <display_enable>
	set_display_data_pins(0x01);
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	e2 dc       	rcall	.-1596   	; 0x20c <set_display_data_pins>
	display_enable(1);
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	d2 dc       	rcall	.-1628   	; 0x1f0 <display_enable>
     84c:	87 ea       	ldi	r24, 0xA7	; 167
     84e:	91 e6       	ldi	r25, 0x61	; 97
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <display_clear+0x16>
     854:	00 c0       	rjmp	.+0      	; 0x856 <display_clear+0x1c>
     856:	00 00       	nop
     858:	08 95       	ret

0000085a <dimmer_init>:
	/* WO0 (PB0) is used for the Display Backlight, WO1 (PB4) is used for the HMI LED. PB4 is not the default output pin for WO1 */
	
	
	// wgmode in ctrla selects waveform generation
	// 
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_CLKSEL_DIV4_gc; // prescaler is 4 from fclk_per
     85a:	e0 e0       	ldi	r30, 0x00	; 0
     85c:	fa e0       	ldi	r31, 0x0A	; 10
     85e:	80 81       	ld	r24, Z
     860:	84 60       	ori	r24, 0x04	; 4
     862:	80 83       	st	Z, r24
	TCA0.SINGLE.PERBUF = 0x01A0; // about 1kHz with prescaler = 4
     864:	80 ea       	ldi	r24, 0xA0	; 160
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	86 ab       	std	Z+54, r24	; 0x36
     86a:	97 ab       	std	Z+55, r25	; 0x37
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm); // count clock ticks instead of events
     86c:	81 85       	ldd	r24, Z+9	; 0x09
     86e:	8e 7f       	andi	r24, 0xFE	; 254
     870:	81 87       	std	Z+9, r24	; 0x09
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
     872:	81 81       	ldd	r24, Z+1	; 0x01
     874:	83 60       	ori	r24, 0x03	; 3
     876:	81 83       	std	Z+1, r24	; 0x01
     878:	08 95       	ret

0000087a <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     87a:	84 e4       	ldi	r24, 0x44	; 68
     87c:	94 e0       	ldi	r25, 0x04	; 4
     87e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     882:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     886:	08 95       	ret

00000888 <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     888:	d8 df       	rcall	.-80     	; 0x83a <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     88a:	85 ea       	ldi	r24, 0xA5	; 165
     88c:	98 e9       	ldi	r25, 0x98	; 152
     88e:	c2 df       	rcall	.-124    	; 0x814 <display_write_string>
	button0_action = show_menu_timestamp;
     890:	8a e9       	ldi	r24, 0x9A	; 154
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     898:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = show_menu_actions;
     89c:	85 e5       	ldi	r24, 0x55	; 85
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     8a4:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     8a8:	08 95       	ret

000008aa <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     8aa:	85 e5       	ldi	r24, 0x55	; 85
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8b2:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     8b6:	c1 df       	rcall	.-126    	; 0x83a <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     8b8:	87 ec       	ldi	r24, 0xC7	; 199
     8ba:	98 e9       	ldi	r25, 0x98	; 152
     8bc:	ab df       	rcall	.-170    	; 0x814 <display_write_string>
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
     8be:	8c e6       	ldi	r24, 0x6C	; 108
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     8c6:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = show_menu_sure_about_waking_bcu;
     8ca:	83 e8       	ldi	r24, 0x83	; 131
     8cc:	94 e0       	ldi	r25, 0x04	; 4
     8ce:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     8d2:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     8d6:	08 95       	ret

000008d8 <show_menu_sure_about_waking_bcu_and_backup>:
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}

void show_menu_sure_about_waking_bcu_and_backup() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     8d8:	8c e6       	ldi	r24, 0x6C	; 108
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8e0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     8e4:	aa df       	rcall	.-172    	; 0x83a <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     8e6:	89 ee       	ldi	r24, 0xE9	; 233
     8e8:	98 e9       	ldi	r25, 0x98	; 152
     8ea:	94 df       	rcall	.-216    	; 0x814 <display_write_string>
	button0_action = wake_bcu_and_do_backup_now;
     8ec:	83 eb       	ldi	r24, 0xB3	; 179
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     8f4:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = back_to_main_menu;
     8f8:	8d e3       	ldi	r24, 0x3D	; 61
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     900:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     904:	08 95       	ret

00000906 <show_menu_sure_about_waking_bcu>:
}

void show_menu_sure_about_waking_bcu() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     906:	8c e6       	ldi	r24, 0x6C	; 108
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     90e:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     912:	93 df       	rcall	.-218    	; 0x83a <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     914:	89 ee       	ldi	r24, 0xE9	; 233
     916:	98 e9       	ldi	r25, 0x98	; 152
     918:	7d df       	rcall	.-262    	; 0x814 <display_write_string>
	button0_action = wake_bcu;
     91a:	8f eb       	ldi	r24, 0xBF	; 191
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     922:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = back_to_main_menu;
     926:	8d e3       	ldi	r24, 0x3D	; 61
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     92e:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     932:	08 95       	ret

00000934 <show_menu_timestamp>:
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
	show_menu = show_menu_timestamp;
     934:	8a e9       	ldi	r24, 0x9A	; 154
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     93c:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     940:	7c df       	rcall	.-264    	; 0x83a <display_clear>
	display_write_string(""); //Todo: render ETA here!
     942:	84 e4       	ldi	r24, 0x44	; 68
     944:	98 e9       	ldi	r25, 0x98	; 152
     946:	66 df       	rcall	.-308    	; 0x814 <display_write_string>
	display_next_line();
     948:	5b df       	rcall	.-330    	; 0x800 <display_next_line>
	display_write_string(human_readable_timestamp_next_bu);
     94a:	8b e1       	ldi	r24, 0x1B	; 27
     94c:	9e e3       	ldi	r25, 0x3E	; 62
     94e:	62 df       	rcall	.-316    	; 0x814 <display_write_string>
	button0_action = back_to_main_menu;
     950:	8d e3       	ldi	r24, 0x3D	; 61
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     958:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = back_to_main_menu;
     95c:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     960:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     964:	08 95       	ret

00000966 <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     966:	69 df       	rcall	.-302    	; 0x83a <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     968:	8b e0       	ldi	r24, 0x0B	; 11
     96a:	99 e9       	ldi	r25, 0x99	; 153
     96c:	53 df       	rcall	.-346    	; 0x814 <display_write_string>
	flag_schedule_backup_now = true;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_schedule_backup_now>
	next_pwr_state = active;
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     97a:	3d d0       	rcall	.+122    	; 0x9f6 <transition_to_pwr_state>
     97c:	08 95       	ret

0000097e <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     97e:	5d df       	rcall	.-326    	; 0x83a <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     980:	8b e0       	ldi	r24, 0x0B	; 11
     982:	99 e9       	ldi	r25, 0x99	; 153
     984:	47 df       	rcall	.-370    	; 0x814 <display_write_string>
	next_pwr_state = active;
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     98c:	34 d0       	rcall	.+104    	; 0x9f6 <transition_to_pwr_state>
     98e:	08 95       	ret

00000990 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     990:	e0 e0       	ldi	r30, 0x00	; 0
     992:	f4 e0       	ldi	r31, 0x04	; 4
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	80 61       	ori	r24, 0x10	; 16
     998:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     9a0:	08 95       	ret

000009a2 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     9a2:	e0 e0       	ldi	r30, 0x00	; 0
     9a4:	f4 e0       	ldi	r31, 0x04	; 4
     9a6:	84 81       	ldd	r24, Z+4	; 0x04
     9a8:	8f 7e       	andi	r24, 0xEF	; 239
     9aa:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     9ac:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     9b0:	08 95       	ret

000009b2 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     9b2:	e0 e2       	ldi	r30, 0x20	; 32
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	84 81       	ldd	r24, Z+4	; 0x04
     9b8:	8d 7f       	andi	r24, 0xFD	; 253
     9ba:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     9c2:	08 95       	ret

000009c4 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     9c4:	e0 e2       	ldi	r30, 0x20	; 32
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	84 81       	ldd	r24, Z+4	; 0x04
     9ca:	82 60       	ori	r24, 0x02	; 2
     9cc:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     9ce:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     9d2:	08 95       	ret

000009d4 <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     9d4:	32 df       	rcall	.-412    	; 0x83a <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     9d6:	8b e2       	ldi	r24, 0x2B	; 43
     9d8:	99 e9       	ldi	r25, 0x99	; 153
     9da:	1c df       	rcall	.-456    	; 0x814 <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     9dc:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_bpi_heartbeat_ok>
     9e0:	81 11       	cpse	r24, r1
     9e2:	fe cf       	rjmp	.-4      	; 0x9e0 <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     9e4:	2a df       	rcall	.-428    	; 0x83a <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     9e6:	86 e4       	ldi	r24, 0x46	; 70
     9e8:	99 e9       	ldi	r25, 0x99	; 153
     9ea:	14 df       	rcall	.-472    	; 0x814 <display_write_string>
	while (vcc3v3_present() == true) {
     9ec:	87 db       	rcall	.-2290   	; 0xfc <vcc3v3_present>
     9ee:	81 11       	cpse	r24, r1
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret

000009f6 <transition_to_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void transition_to_pwr_state(enum pwr_states pwr_state) {
     9f6:	cf 93       	push	r28
	switch(pwr_state) {
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	89 f0       	breq	.+34     	; 0xa1e <transition_to_pwr_state+0x28>
     9fc:	18 f0       	brcs	.+6      	; 0xa04 <transition_to_pwr_state+0xe>
     9fe:	82 30       	cpi	r24, 0x02	; 2
     a00:	f9 f0       	breq	.+62     	; 0xa40 <transition_to_pwr_state+0x4a>
     a02:	35 c0       	rjmp	.+106    	; 0xa6e <transition_to_pwr_state+0x78>
		case standby:
			wait_until_bpi_ready_for_shutdown();
     a04:	e7 df       	rcall	.-50     	; 0x9d4 <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     a06:	de df       	rcall	.-68     	; 0x9c4 <disable_bpi_sply>
			dim_display(0);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	e2 db       	rcall	.-2108   	; 0x1d2 <dim_display>
			led_hmi_off();
     a0e:	d1 db       	rcall	.-2142   	; 0x1b2 <led_hmi_off>
			disable_5v0_smps();
     a10:	c8 df       	rcall	.-112    	; 0x9a2 <disable_5v0_smps>
			flag_goto_sleep = true;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_goto_sleep>
			current_pwr_state = standby;
     a18:	10 92 1a 3e 	sts	0x3E1A, r1	; 0x803e1a <current_pwr_state>
			break;
     a1c:	28 c0       	rjmp	.+80     	; 0xa6e <transition_to_pwr_state+0x78>
		
		case display_on:
			current_pwr_state = display_on;
     a1e:	c1 e0       	ldi	r28, 0x01	; 1
     a20:	c0 93 1a 3e 	sts	0x3E1A, r28	; 0x803e1a <current_pwr_state>
			set_interrupts_for_buttons();
     a24:	b5 db       	rcall	.-2198   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     a26:	b4 df       	rcall	.-152    	; 0x990 <enable_5v0_smps>
     a28:	86 e4       	ldi	r24, 0x46	; 70
     a2a:	90 e1       	ldi	r25, 0x10	; 16
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <transition_to_pwr_state+0x36>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <transition_to_pwr_state+0x3c>
			_delay_ms(5);
			init_display();
     a32:	40 de       	rcall	.-896    	; 0x6b4 <init_display>
			flag_entering_mainloop_display_on = true;
     a34:	c0 93 06 3e 	sts	0x3E06, r28	; 0x803e06 <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     a38:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_wakeup_by_rtc>
     a3c:	88 23       	and	r24, r24
     a3e:	b9 f0       	breq	.+46     	; 0xa6e <transition_to_pwr_state+0x78>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	e0 e6       	ldi	r30, 0x60	; 96
     a44:	f9 e9       	ldi	r31, 0x99	; 153
     a46:	a2 e5       	ldi	r26, 0x52	; 82
     a48:	be e3       	ldi	r27, 0x3E	; 62
     a4a:	01 90       	ld	r0, Z+
     a4c:	0d 92       	st	X+, r0
     a4e:	8a 95       	dec	r24
     a50:	e1 f7       	brne	.-8      	; 0xa4a <transition_to_pwr_state+0x54>
			strcpy(display_line2_content,"Please wait ...");
     a52:	80 e1       	ldi	r24, 0x10	; 16
     a54:	e0 e7       	ldi	r30, 0x70	; 112
     a56:	f9 e9       	ldi	r31, 0x99	; 153
     a58:	ac e3       	ldi	r26, 0x3C	; 60
     a5a:	be e3       	ldi	r27, 0x3E	; 62
     a5c:	01 90       	ld	r0, Z+
     a5e:	0d 92       	st	X+, r0
     a60:	8a 95       	dec	r24
     a62:	e1 f7       	brne	.-8      	; 0xa5c <transition_to_pwr_state+0x66>
			enable_5v0_smps();
     a64:	95 df       	rcall	.-214    	; 0x990 <enable_5v0_smps>
			enable_bpi_sply();
     a66:	a5 df       	rcall	.-182    	; 0x9b2 <enable_bpi_sply>
			current_pwr_state = active;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <current_pwr_state>
			break;
	}
}
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a72:	e0 e4       	ldi	r30, 0x40	; 64
     a74:	f1 e0       	ldi	r31, 0x01	; 1
     a76:	10 86       	std	Z+8, r1	; 0x08
     a78:	11 86       	std	Z+9, r1	; 0x09
     a7a:	08 95       	ret

00000a7c <rtc_wait_for_all_status_bits_zero>:
     a7c:	e0 e4       	ldi	r30, 0x40	; 64
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	81 81       	ldd	r24, Z+1	; 0x01
     a82:	81 11       	cpse	r24, r1
     a84:	fd cf       	rjmp	.-6      	; 0xa80 <rtc_wait_for_all_status_bits_zero+0x4>
     a86:	08 95       	ret

00000a88 <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     a88:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     a8c:	f7 df       	rcall	.-18     	; 0xa7c <rtc_wait_for_all_status_bits_zero>
void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	//RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc; // <- one counter increment represents 32 seconds
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV1024_gc | RTC_RTCEN_bm; // <- 1 second
     a8e:	e0 e4       	ldi	r30, 0x40	; 64
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	81 ed       	ldi	r24, 0xD1	; 209
     a94:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	87 83       	std	Z+7, r24	; 0x07
     a9e:	08 95       	ret

00000aa0 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     aa8:	c0 90 4d 3e 	lds	r12, 0x3E4D	; 0x803e4d <seconds_to_next_bu>
     aac:	d0 90 4e 3e 	lds	r13, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x1>
     ab0:	e0 90 4f 3e 	lds	r14, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x2>
     ab4:	f0 90 50 3e 	lds	r15, 0x3E50	; 0x803e50 <seconds_to_next_bu+0x3>
     ab8:	ff 20       	and	r15, r15
     aba:	2c f4       	brge	.+10     	; 0xac6 <rtc_write_seconds_to_cmp+0x26>
     abc:	8f e1       	ldi	r24, 0x1F	; 31
     abe:	c8 0e       	add	r12, r24
     ac0:	d1 1c       	adc	r13, r1
     ac2:	e1 1c       	adc	r14, r1
     ac4:	f1 1c       	adc	r15, r1
     ac6:	68 94       	set
     ac8:	14 f8       	bld	r1, 4
     aca:	f5 94       	asr	r15
     acc:	e7 94       	ror	r14
     ace:	d7 94       	ror	r13
     ad0:	c7 94       	ror	r12
     ad2:	16 94       	lsr	r1
     ad4:	d1 f7       	brne	.-12     	; 0xaca <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     ad6:	ff 92       	push	r15
     ad8:	ef 92       	push	r14
     ada:	df 92       	push	r13
     adc:	cf 92       	push	r12
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	99 e9       	ldi	r25, 0x99	; 153
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	83 e8       	ldi	r24, 0x83	; 131
     ae8:	9e e3       	ldi	r25, 0x3E	; 62
     aea:	9f 93       	push	r25
     aec:	8f 93       	push	r24
     aee:	6f d3       	rcall	.+1758   	; 0x11ce <sprintf>
	USART0_sendString_w_newline_eol(buffer);
     af0:	83 e8       	ldi	r24, 0x83	; 131
     af2:	9e e3       	ldi	r25, 0x3E	; 62
     af4:	7b d0       	rcall	.+246    	; 0xbec <USART0_sendString_w_newline_eol>
	rtc_reset_counter();
     af6:	bd df       	rcall	.-134    	; 0xa72 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     af8:	8c 2d       	mov	r24, r12
     afa:	9d 2d       	mov	r25, r13
     afc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b00:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     b04:	8d b7       	in	r24, 0x3d	; 61
     b06:	9e b7       	in	r25, 0x3e	; 62
     b08:	08 96       	adiw	r24, 0x08	; 8
     b0a:	8d bf       	out	0x3d, r24	; 61
     b0c:	9e bf       	out	0x3e, r25	; 62
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	08 95       	ret

00000b18 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     b3a:	e0 e4       	ldi	r30, 0x40	; 64
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	83 81       	ldd	r24, Z+3	; 0x03
     b40:	82 60       	ori	r24, 0x02	; 2
     b42:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     b44:	8d e9       	ldi	r24, 0x9D	; 157
     b46:	99 e9       	ldi	r25, 0x99	; 153
     b48:	30 d0       	rcall	.+96     	; 0xbaa <USART0_sendString>
	flag_wakeup_by_rtc = true;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     b50:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     b54:	50 df       	rcall	.-352    	; 0x9f6 <transition_to_pwr_state>
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f8 e0       	ldi	r31, 0x08	; 8
     b7c:	85 81       	ldd	r24, Z+5	; 0x05
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	85 83       	std	Z+5, r24	; 0x05
     b82:	08 95       	ret

00000b84 <init_uart>:
     b84:	55 db       	rcall	.-2390   	; 0x230 <set_pb2_txd_and_pb3_rxd>
     b86:	e0 e0       	ldi	r30, 0x00	; 0
     b88:	f8 e0       	ldi	r31, 0x08	; 8
     b8a:	8c e6       	ldi	r24, 0x6C	; 108
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	80 87       	std	Z+8, r24	; 0x08
     b90:	91 87       	std	Z+9, r25	; 0x09
     b92:	80 ec       	ldi	r24, 0xC0	; 192
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	f0 df       	rcall	.-32     	; 0xb78 <USART0_enable_rx_complete_interrupt>
     b98:	08 95       	ret

00000b9a <USART0_sendChar>:
     b9a:	e0 e0       	ldi	r30, 0x00	; 0
     b9c:	f8 e0       	ldi	r31, 0x08	; 8
     b9e:	94 81       	ldd	r25, Z+4	; 0x04
     ba0:	95 ff       	sbrs	r25, 5
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <USART0_sendChar+0x4>
     ba4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ba8:	08 95       	ret

00000baa <USART0_sendString>:
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	8c 01       	movw	r16, r24
     bb8:	7c 01       	movw	r14, r24
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <USART0_sendString+0x20>
     bc0:	f7 01       	movw	r30, r14
     bc2:	81 91       	ld	r24, Z+
     bc4:	7f 01       	movw	r14, r30
     bc6:	e9 df       	rcall	.-46     	; 0xb9a <USART0_sendChar>
     bc8:	21 96       	adiw	r28, 0x01	; 1
     bca:	f8 01       	movw	r30, r16
     bcc:	01 90       	ld	r0, Z+
     bce:	00 20       	and	r0, r0
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <USART0_sendString+0x22>
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	e0 1b       	sub	r30, r16
     bd6:	f1 0b       	sbc	r31, r17
     bd8:	ce 17       	cp	r28, r30
     bda:	df 07       	cpc	r29, r31
     bdc:	88 f3       	brcs	.-30     	; 0xbc0 <USART0_sendString+0x16>
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <USART0_sendString_w_newline_eol>:
     bec:	de df       	rcall	.-68     	; 0xbaa <USART0_sendString>
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	d4 df       	rcall	.-88     	; 0xb9a <USART0_sendChar>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	d2 df       	rcall	.-92     	; 0xb9a <USART0_sendChar>
     bf6:	08 95       	ret

00000bf8 <USART0_send_ready>:
     bf8:	82 ea       	ldi	r24, 0xA2	; 162
     bfa:	99 e9       	ldi	r25, 0x99	; 153
     bfc:	f7 df       	rcall	.-18     	; 0xbec <USART0_sendString_w_newline_eol>
     bfe:	08 95       	ret

00000c00 <USART0_read>:
     c00:	e0 e0       	ldi	r30, 0x00	; 0
     c02:	f8 e0       	ldi	r31, 0x08	; 8
     c04:	84 81       	ldd	r24, Z+4	; 0x04
     c06:	88 23       	and	r24, r24
     c08:	ec f7       	brge	.-6      	; 0xc04 <USART0_read+0x4>
     c0a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     c0e:	08 95       	ret

00000c10 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	7c 01       	movw	r14, r24
     c22:	6b 01       	movw	r12, r22
     c24:	61 32       	cpi	r22, 0x21	; 33
     c26:	71 05       	cpc	r23, r1
     c28:	24 f0       	brlt	.+8      	; 0xc32 <USART0_read_string+0x22>
     c2a:	68 94       	set
     c2c:	cc 24       	eor	r12, r12
     c2e:	c5 f8       	bld	r12, 5
     c30:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c32:	dd 20       	and	r13, r13
     c34:	c4 f0       	brlt	.+48     	; 0xc66 <USART0_read_string+0x56>
     c36:	e7 01       	movw	r28, r14
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	7e 01       	movw	r14, r28
		i++;
     c3e:	0f 5f       	subi	r16, 0xFF	; 255
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     c42:	de df       	rcall	.-68     	; 0xc00 <USART0_read>
     c44:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     c46:	8a 30       	cpi	r24, 0x0A	; 10
     c48:	21 f0       	breq	.+8      	; 0xc52 <USART0_read_string+0x42>
     c4a:	88 23       	and	r24, r24
     c4c:	11 f0       	breq	.+4      	; 0xc52 <USART0_read_string+0x42>
     c4e:	8d 30       	cpi	r24, 0x0D	; 13
     c50:	31 f4       	brne	.+12     	; 0xc5e <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     c52:	f7 01       	movw	r30, r14
     c54:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     c56:	c0 16       	cp	r12, r16
     c58:	d1 06       	cpc	r13, r17
     c5a:	3c f4       	brge	.+14     	; 0xc6a <USART0_read_string+0x5a>
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     c5e:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c60:	c0 16       	cp	r12, r16
     c62:	d1 06       	cpc	r13, r17
     c64:	5c f7       	brge	.-42     	; 0xc3c <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     c66:	f7 01       	movw	r30, r14
     c68:	10 82       	st	Z, r1
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	08 95       	ret

00000c7c <convert_str_to_long>:
	if(strcmp(message_code, "DL") == 0) {
		USART0_sendString_w_newline_eol("ACK:DL");
	}
}

long convert_str_to_long(char *str) {
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 d0       	rcall	.+0      	; 0xc86 <convert_str_to_long+0xa>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	08 2f       	mov	r16, r24
     c8c:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	88 ea       	ldi	r24, 0xA8	; 168
     c94:	99 e9       	ldi	r25, 0x99	; 153
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	86 d2       	rcall	.+1292   	; 0x11a8 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     c9c:	4a e0       	ldi	r20, 0x0A	; 10
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	be 01       	movw	r22, r28
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	80 2f       	mov	r24, r16
     ca8:	91 2f       	mov	r25, r17
     caa:	29 d1       	rcall	.+594    	; 0xefe <strtol>
	return ret;
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     cca:	67 eb       	ldi	r22, 0xB7	; 183
     ccc:	79 e9       	ldi	r23, 0x99	; 153
     cce:	83 e6       	ldi	r24, 0x63	; 99
     cd0:	9e e3       	ldi	r25, 0x3E	; 62
     cd2:	33 d2       	rcall	.+1126   	; 0x113a <strcmp>
     cd4:	89 2b       	or	r24, r25
     cd6:	19 f4       	brne	.+6      	; 0xcde <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_newline_eol("Echo");
     cd8:	8c eb       	ldi	r24, 0xBC	; 188
     cda:	99 e9       	ldi	r25, 0x99	; 153
     cdc:	87 df       	rcall	.-242    	; 0xbec <USART0_sendString_w_newline_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     cde:	61 ec       	ldi	r22, 0xC1	; 193
     ce0:	79 e9       	ldi	r23, 0x99	; 153
     ce2:	83 e6       	ldi	r24, 0x63	; 99
     ce4:	9e e3       	ldi	r25, 0x3E	; 62
     ce6:	25 d2       	rcall	.+1098   	; 0x1132 <strtok>
     ce8:	d8 2f       	mov	r29, r24
     cea:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     cec:	6a e0       	ldi	r22, 0x0A	; 10
     cee:	78 e9       	ldi	r23, 0x98	; 152
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	1e d2       	rcall	.+1084   	; 0x1132 <strtok>
     cf6:	08 2f       	mov	r16, r24
     cf8:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	83 ec       	ldi	r24, 0xC3	; 195
     d04:	99 e9       	ldi	r25, 0x99	; 153
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	83 e8       	ldi	r24, 0x83	; 131
     d0c:	9e e3       	ldi	r25, 0x3E	; 62
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	5d d2       	rcall	.+1210   	; 0x11ce <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     d14:	67 ed       	ldi	r22, 0xD7	; 215
     d16:	79 e9       	ldi	r23, 0x99	; 153
     d18:	8d 2f       	mov	r24, r29
     d1a:	9c 2f       	mov	r25, r28
     d1c:	0e d2       	rcall	.+1052   	; 0x113a <strcmp>
     d1e:	2d b7       	in	r18, 0x3d	; 61
     d20:	3e b7       	in	r19, 0x3e	; 62
     d22:	28 5f       	subi	r18, 0xF8	; 248
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	2d bf       	out	0x3d, r18	; 61
     d28:	3e bf       	out	0x3e, r19	; 62
     d2a:	89 2b       	or	r24, r25
     d2c:	41 f4       	brne	.+16     	; 0xd3e <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_newline_eol("ACK:D1");
     d2e:	83 ed       	ldi	r24, 0xD3	; 211
     d30:	99 e9       	ldi	r25, 0x99	; 153
     d32:	5c df       	rcall	.-328    	; 0xbec <USART0_sendString_w_newline_eol>
		strcpy(display_line1_content, payload);
     d34:	60 2f       	mov	r22, r16
     d36:	71 2f       	mov	r23, r17
     d38:	82 e5       	ldi	r24, 0x52	; 82
     d3a:	9e e3       	ldi	r25, 0x3E	; 62
     d3c:	07 d2       	rcall	.+1038   	; 0x114c <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     d3e:	6e ed       	ldi	r22, 0xDE	; 222
     d40:	79 e9       	ldi	r23, 0x99	; 153
     d42:	8d 2f       	mov	r24, r29
     d44:	9c 2f       	mov	r25, r28
     d46:	f9 d1       	rcall	.+1010   	; 0x113a <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	59 f4       	brne	.+22     	; 0xd62 <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_newline_eol("ACK:D2");
     d4c:	8a ed       	ldi	r24, 0xDA	; 218
     d4e:	99 e9       	ldi	r25, 0x99	; 153
     d50:	4d df       	rcall	.-358    	; 0xbec <USART0_sendString_w_newline_eol>
		strcpy(display_line2_content, payload);
     d52:	60 2f       	mov	r22, r16
     d54:	71 2f       	mov	r23, r17
     d56:	8c e3       	ldi	r24, 0x3C	; 60
     d58:	9e e3       	ldi	r25, 0x3E	; 62
     d5a:	f8 d1       	rcall	.+1008   	; 0x114c <strcpy>
		flag_string_for_display_received = true;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     d62:	61 ee       	ldi	r22, 0xE1	; 225
     d64:	79 e9       	ldi	r23, 0x99	; 153
     d66:	8d 2f       	mov	r24, r29
     d68:	9c 2f       	mov	r25, r28
     d6a:	e7 d1       	rcall	.+974    	; 0x113a <strcmp>
     d6c:	89 2b       	or	r24, r25
     d6e:	29 f4       	brne	.+10     	; 0xd7a <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_pwr_state_change_request>
		next_pwr_state = standby;
     d76:	10 92 51 3e 	sts	0x3E51, r1	; 0x803e51 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     d7a:	64 ee       	ldi	r22, 0xE4	; 228
     d7c:	79 e9       	ldi	r23, 0x99	; 153
     d7e:	8d 2f       	mov	r24, r29
     d80:	9c 2f       	mov	r25, r28
     d82:	db d1       	rcall	.+950    	; 0x113a <strcmp>
     d84:	89 2b       	or	r24, r25
     d86:	11 f5       	brne	.+68     	; 0xdcc <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     d88:	1f 93       	push	r17
     d8a:	0f 93       	push	r16
     d8c:	87 ee       	ldi	r24, 0xE7	; 231
     d8e:	99 e9       	ldi	r25, 0x99	; 153
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	83 e8       	ldi	r24, 0x83	; 131
     d96:	9e e3       	ldi	r25, 0x3E	; 62
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	18 d2       	rcall	.+1072   	; 0x11ce <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     d9e:	83 e8       	ldi	r24, 0x83	; 131
     da0:	9e e3       	ldi	r25, 0x3E	; 62
     da2:	24 df       	rcall	.-440    	; 0xbec <USART0_sendString_w_newline_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     da4:	80 2f       	mov	r24, r16
     da6:	91 2f       	mov	r25, r17
     da8:	69 df       	rcall	.-302    	; 0xc7c <convert_str_to_long>
     daa:	60 93 4d 3e 	sts	0x3E4D, r22	; 0x803e4d <seconds_to_next_bu>
     dae:	70 93 4e 3e 	sts	0x3E4E, r23	; 0x803e4e <seconds_to_next_bu+0x1>
     db2:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <seconds_to_next_bu+0x2>
     db6:	90 93 50 3e 	sts	0x3E50, r25	; 0x803e50 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_received_seconds_to_next_bu>
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     dcc:	62 ef       	ldi	r22, 0xF2	; 242
     dce:	79 e9       	ldi	r23, 0x99	; 153
     dd0:	8d 2f       	mov	r24, r29
     dd2:	9c 2f       	mov	r25, r28
     dd4:	b2 d1       	rcall	.+868    	; 0x113a <strcmp>
     dd6:	89 2b       	or	r24, r25
     dd8:	59 f4       	brne	.+22     	; 0xdf0 <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     dda:	60 2f       	mov	r22, r16
     ddc:	71 2f       	mov	r23, r17
     dde:	8b e1       	ldi	r24, 0x1B	; 27
     de0:	9e e3       	ldi	r25, 0x3E	; 62
     de2:	b4 d1       	rcall	.+872    	; 0x114c <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	80 93 2b 3e 	sts	0x3E2B, r24	; 0x803e2b <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     df0:	65 ef       	ldi	r22, 0xF5	; 245
     df2:	79 e9       	ldi	r23, 0x99	; 153
     df4:	8d 2f       	mov	r24, r29
     df6:	9c 2f       	mov	r25, r28
     df8:	a0 d1       	rcall	.+832    	; 0x113a <strcmp>
     dfa:	89 2b       	or	r24, r25
     dfc:	19 f4       	brne	.+6      	; 0xe04 <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     e04:	6c ef       	ldi	r22, 0xFC	; 252
     e06:	79 e9       	ldi	r23, 0x99	; 153
     e08:	8d 2f       	mov	r24, r29
     e0a:	9c 2f       	mov	r25, r28
     e0c:	96 d1       	rcall	.+812    	; 0x113a <strcmp>
     e0e:	89 2b       	or	r24, r25
     e10:	31 f4       	brne	.+12     	; 0xe1e <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_newline_eol("ACK:CC");
     e12:	88 ef       	ldi	r24, 0xF8	; 248
     e14:	99 e9       	ldi	r25, 0x99	; 153
     e16:	ea de       	rcall	.-556    	; 0xbec <USART0_sendString_w_newline_eol>
		flag_request_current_measurement = true;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     e1e:	63 e0       	ldi	r22, 0x03	; 3
     e20:	7a e9       	ldi	r23, 0x9A	; 154
     e22:	8d 2f       	mov	r24, r29
     e24:	9c 2f       	mov	r25, r28
     e26:	89 d1       	rcall	.+786    	; 0x113a <strcmp>
     e28:	89 2b       	or	r24, r25
     e2a:	31 f4       	brne	.+12     	; 0xe38 <USART0_process_incoming_message+0x176>
		USART0_sendString_w_newline_eol("ACK:TP");
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	99 e9       	ldi	r25, 0x99	; 153
     e30:	dd de       	rcall	.-582    	; 0xbec <USART0_sendString_w_newline_eol>
		flag_request_temperature_measurement = true;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     e38:	6a e0       	ldi	r22, 0x0A	; 10
     e3a:	7a e9       	ldi	r23, 0x9A	; 154
     e3c:	8d 2f       	mov	r24, r29
     e3e:	9c 2f       	mov	r25, r28
     e40:	7c d1       	rcall	.+760    	; 0x113a <strcmp>
     e42:	89 2b       	or	r24, r25
     e44:	31 f4       	brne	.+12     	; 0xe52 <USART0_process_incoming_message+0x190>
		USART0_sendString_w_newline_eol("ACK:3V");
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	9a e9       	ldi	r25, 0x9A	; 154
     e4a:	d0 de       	rcall	.-608    	; 0xbec <USART0_sendString_w_newline_eol>
		flag_request_3v3_measurement = true;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
     e52:	6d e0       	ldi	r22, 0x0D	; 13
     e54:	7a e9       	ldi	r23, 0x9A	; 154
     e56:	8d 2f       	mov	r24, r29
     e58:	9c 2f       	mov	r25, r28
     e5a:	6f d1       	rcall	.+734    	; 0x113a <strcmp>
     e5c:	89 2b       	or	r24, r25
     e5e:	61 f4       	brne	.+24     	; 0xe78 <USART0_process_incoming_message+0x1b6>
		USART0_sendString_w_newline_eol("ACK:ON\n");
     e60:	80 e1       	ldi	r24, 0x10	; 16
     e62:	9a e9       	ldi	r25, 0x9A	; 154
     e64:	c3 de       	rcall	.-634    	; 0xbec <USART0_sendString_w_newline_eol>
		if(flag_schedule_backup_now) {
     e66:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_schedule_backup_now>
     e6a:	88 23       	and	r24, r24
     e6c:	29 f0       	breq	.+10     	; 0xe78 <USART0_process_incoming_message+0x1b6>
			flag_schedule_backup_now = false;
     e6e:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_schedule_backup_now>
			USART0_sendString_w_newline_eol("User Backup\n");
     e72:	88 e1       	ldi	r24, 0x18	; 24
     e74:	9a e9       	ldi	r25, 0x9A	; 154
     e76:	ba de       	rcall	.-652    	; 0xbec <USART0_sendString_w_newline_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
     e78:	65 e2       	ldi	r22, 0x25	; 37
     e7a:	7a e9       	ldi	r23, 0x9A	; 154
     e7c:	8d 2f       	mov	r24, r29
     e7e:	9c 2f       	mov	r25, r28
     e80:	5c d1       	rcall	.+696    	; 0x113a <strcmp>
     e82:	89 2b       	or	r24, r25
     e84:	19 f4       	brne	.+6      	; 0xe8c <USART0_process_incoming_message+0x1ca>
		USART0_sendString_w_newline_eol("ACK:DB\n");
     e86:	88 e2       	ldi	r24, 0x28	; 40
     e88:	9a e9       	ldi	r25, 0x9A	; 154
     e8a:	b0 de       	rcall	.-672    	; 0xbec <USART0_sendString_w_newline_eol>
		//dim display
	}
	
	if(strcmp(message_code, "DL") == 0) {
     e8c:	64 e3       	ldi	r22, 0x34	; 52
     e8e:	7a e9       	ldi	r23, 0x9A	; 154
     e90:	8d 2f       	mov	r24, r29
     e92:	9c 2f       	mov	r25, r28
     e94:	52 d1       	rcall	.+676    	; 0x113a <strcmp>
     e96:	89 2b       	or	r24, r25
     e98:	19 f4       	brne	.+6      	; 0xea0 <USART0_process_incoming_message+0x1de>
		USART0_sendString_w_newline_eol("ACK:DL");
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	9a e9       	ldi	r25, 0x9A	; 154
     e9e:	a6 de       	rcall	.-692    	; 0xbec <USART0_sendString_w_newline_eol>
	}
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2f 93       	push	r18
     eb6:	3f 93       	push	r19
     eb8:	4f 93       	push	r20
     eba:	5f 93       	push	r21
     ebc:	6f 93       	push	r22
     ebe:	7f 93       	push	r23
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     ecc:	60 e2       	ldi	r22, 0x20	; 32
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	83 e6       	ldi	r24, 0x63	; 99
     ed2:	9e e3       	ldi	r25, 0x3E	; 62
     ed4:	9d de       	rcall	.-710    	; 0xc10 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_usart_string_receive_complete>
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <strtol>:
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e4 e8       	ldi	r30, 0x84	; 132
     f04:	f7 e0       	ldi	r31, 0x07	; 7
     f06:	43 c4       	rjmp	.+2182   	; 0x178e <__prologue_saves__+0x2>
     f08:	5c 01       	movw	r10, r24
     f0a:	6b 01       	movw	r12, r22
     f0c:	7a 01       	movw	r14, r20
     f0e:	61 15       	cp	r22, r1
     f10:	71 05       	cpc	r23, r1
     f12:	19 f0       	breq	.+6      	; 0xf1a <strtol+0x1c>
     f14:	fb 01       	movw	r30, r22
     f16:	80 83       	st	Z, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	e1 14       	cp	r14, r1
     f1c:	f1 04       	cpc	r15, r1
     f1e:	29 f0       	breq	.+10     	; 0xf2a <strtol+0x2c>
     f20:	c7 01       	movw	r24, r14
     f22:	02 97       	sbiw	r24, 0x02	; 2
     f24:	83 97       	sbiw	r24, 0x23	; 35
     f26:	08 f0       	brcs	.+2      	; 0xf2a <strtol+0x2c>
     f28:	e2 c0       	rjmp	.+452    	; 0x10ee <strtol+0x1f0>
     f2a:	e5 01       	movw	r28, r10
     f2c:	21 96       	adiw	r28, 0x01	; 1
     f2e:	f5 01       	movw	r30, r10
     f30:	10 81       	ld	r17, Z
     f32:	81 2f       	mov	r24, r17
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	f4 d0       	rcall	.+488    	; 0x1120 <isspace>
     f38:	89 2b       	or	r24, r25
     f3a:	11 f0       	breq	.+4      	; 0xf40 <strtol+0x42>
     f3c:	5e 01       	movw	r10, r28
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <strtol+0x2c>
     f40:	1d 32       	cpi	r17, 0x2D	; 45
     f42:	29 f4       	brne	.+10     	; 0xf4e <strtol+0x50>
     f44:	21 96       	adiw	r28, 0x01	; 1
     f46:	f5 01       	movw	r30, r10
     f48:	11 81       	ldd	r17, Z+1	; 0x01
     f4a:	01 e0       	ldi	r16, 0x01	; 1
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <strtol+0x5e>
     f4e:	1b 32       	cpi	r17, 0x2B	; 43
     f50:	21 f4       	brne	.+8      	; 0xf5a <strtol+0x5c>
     f52:	e5 01       	movw	r28, r10
     f54:	22 96       	adiw	r28, 0x02	; 2
     f56:	f5 01       	movw	r30, r10
     f58:	11 81       	ldd	r17, Z+1	; 0x01
     f5a:	00 e0       	ldi	r16, 0x00	; 0
     f5c:	e1 14       	cp	r14, r1
     f5e:	f1 04       	cpc	r15, r1
     f60:	09 f1       	breq	.+66     	; 0xfa4 <strtol+0xa6>
     f62:	f0 e1       	ldi	r31, 0x10	; 16
     f64:	ef 16       	cp	r14, r31
     f66:	f1 04       	cpc	r15, r1
     f68:	29 f4       	brne	.+10     	; 0xf74 <strtol+0x76>
     f6a:	3e c0       	rjmp	.+124    	; 0xfe8 <strtol+0xea>
     f6c:	10 e3       	ldi	r17, 0x30	; 48
     f6e:	e1 14       	cp	r14, r1
     f70:	f1 04       	cpc	r15, r1
     f72:	21 f1       	breq	.+72     	; 0xfbc <strtol+0xbe>
     f74:	28 e0       	ldi	r18, 0x08	; 8
     f76:	e2 16       	cp	r14, r18
     f78:	f1 04       	cpc	r15, r1
     f7a:	01 f1       	breq	.+64     	; 0xfbc <strtol+0xbe>
     f7c:	54 f4       	brge	.+20     	; 0xf92 <strtol+0x94>
     f7e:	e2 e0       	ldi	r30, 0x02	; 2
     f80:	ee 16       	cp	r14, r30
     f82:	f1 04       	cpc	r15, r1
     f84:	21 f5       	brne	.+72     	; 0xfce <strtol+0xd0>
     f86:	81 2c       	mov	r8, r1
     f88:	91 2c       	mov	r9, r1
     f8a:	a1 2c       	mov	r10, r1
     f8c:	b0 e4       	ldi	r27, 0x40	; 64
     f8e:	bb 2e       	mov	r11, r27
     f90:	3d c0       	rjmp	.+122    	; 0x100c <strtol+0x10e>
     f92:	fa e0       	ldi	r31, 0x0A	; 10
     f94:	ef 16       	cp	r14, r31
     f96:	f1 04       	cpc	r15, r1
     f98:	39 f0       	breq	.+14     	; 0xfa8 <strtol+0xaa>
     f9a:	20 e1       	ldi	r18, 0x10	; 16
     f9c:	e2 16       	cp	r14, r18
     f9e:	f1 04       	cpc	r15, r1
     fa0:	b1 f4       	brne	.+44     	; 0xfce <strtol+0xd0>
     fa2:	2f c0       	rjmp	.+94     	; 0x1002 <strtol+0x104>
     fa4:	10 33       	cpi	r17, 0x30	; 48
     fa6:	11 f1       	breq	.+68     	; 0xfec <strtol+0xee>
     fa8:	fa e0       	ldi	r31, 0x0A	; 10
     faa:	ef 2e       	mov	r14, r31
     fac:	f1 2c       	mov	r15, r1
     fae:	ac ec       	ldi	r26, 0xCC	; 204
     fb0:	8a 2e       	mov	r8, r26
     fb2:	98 2c       	mov	r9, r8
     fb4:	a8 2c       	mov	r10, r8
     fb6:	ac e0       	ldi	r26, 0x0C	; 12
     fb8:	ba 2e       	mov	r11, r26
     fba:	28 c0       	rjmp	.+80     	; 0x100c <strtol+0x10e>
     fbc:	78 e0       	ldi	r23, 0x08	; 8
     fbe:	e7 2e       	mov	r14, r23
     fc0:	f1 2c       	mov	r15, r1
     fc2:	81 2c       	mov	r8, r1
     fc4:	91 2c       	mov	r9, r1
     fc6:	a1 2c       	mov	r10, r1
     fc8:	e0 e1       	ldi	r30, 0x10	; 16
     fca:	be 2e       	mov	r11, r30
     fcc:	1f c0       	rjmp	.+62     	; 0x100c <strtol+0x10e>
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e8       	ldi	r25, 0x80	; 128
     fd6:	97 01       	movw	r18, r14
     fd8:	0f 2c       	mov	r0, r15
     fda:	00 0c       	add	r0, r0
     fdc:	44 0b       	sbc	r20, r20
     fde:	55 0b       	sbc	r21, r21
     fe0:	a9 d3       	rcall	.+1874   	; 0x1734 <__udivmodsi4>
     fe2:	49 01       	movw	r8, r18
     fe4:	5a 01       	movw	r10, r20
     fe6:	12 c0       	rjmp	.+36     	; 0x100c <strtol+0x10e>
     fe8:	10 33       	cpi	r17, 0x30	; 48
     fea:	59 f4       	brne	.+22     	; 0x1002 <strtol+0x104>
     fec:	88 81       	ld	r24, Y
     fee:	8f 7d       	andi	r24, 0xDF	; 223
     ff0:	88 35       	cpi	r24, 0x58	; 88
     ff2:	09 f0       	breq	.+2      	; 0xff6 <strtol+0xf8>
     ff4:	bb cf       	rjmp	.-138    	; 0xf6c <strtol+0x6e>
     ff6:	19 81       	ldd	r17, Y+1	; 0x01
     ff8:	22 96       	adiw	r28, 0x02	; 2
     ffa:	02 60       	ori	r16, 0x02	; 2
     ffc:	80 e1       	ldi	r24, 0x10	; 16
     ffe:	e8 2e       	mov	r14, r24
    1000:	f1 2c       	mov	r15, r1
    1002:	81 2c       	mov	r8, r1
    1004:	91 2c       	mov	r9, r1
    1006:	a1 2c       	mov	r10, r1
    1008:	68 e0       	ldi	r22, 0x08	; 8
    100a:	b6 2e       	mov	r11, r22
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	cb 01       	movw	r24, r22
    1014:	27 01       	movw	r4, r14
    1016:	0f 2c       	mov	r0, r15
    1018:	00 0c       	add	r0, r0
    101a:	66 08       	sbc	r6, r6
    101c:	77 08       	sbc	r7, r7
    101e:	fe 01       	movw	r30, r28
    1020:	50 ed       	ldi	r21, 0xD0	; 208
    1022:	35 2e       	mov	r3, r21
    1024:	31 0e       	add	r3, r17
    1026:	29 e0       	ldi	r18, 0x09	; 9
    1028:	23 15       	cp	r18, r3
    102a:	70 f4       	brcc	.+28     	; 0x1048 <strtol+0x14a>
    102c:	2f eb       	ldi	r18, 0xBF	; 191
    102e:	21 0f       	add	r18, r17
    1030:	2a 31       	cpi	r18, 0x1A	; 26
    1032:	18 f4       	brcc	.+6      	; 0x103a <strtol+0x13c>
    1034:	39 ec       	ldi	r19, 0xC9	; 201
    1036:	33 2e       	mov	r3, r19
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <strtol+0x148>
    103a:	2f e9       	ldi	r18, 0x9F	; 159
    103c:	21 0f       	add	r18, r17
    103e:	2a 31       	cpi	r18, 0x1A	; 26
    1040:	10 f5       	brcc	.+68     	; 0x1086 <strtol+0x188>
    1042:	29 ea       	ldi	r18, 0xA9	; 169
    1044:	32 2e       	mov	r3, r18
    1046:	31 0e       	add	r3, r17
    1048:	23 2d       	mov	r18, r3
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	2e 15       	cp	r18, r14
    104e:	3f 05       	cpc	r19, r15
    1050:	d4 f4       	brge	.+52     	; 0x1086 <strtol+0x188>
    1052:	47 fd       	sbrc	r20, 7
    1054:	15 c0       	rjmp	.+42     	; 0x1080 <strtol+0x182>
    1056:	86 16       	cp	r8, r22
    1058:	97 06       	cpc	r9, r23
    105a:	a8 06       	cpc	r10, r24
    105c:	b9 06       	cpc	r11, r25
    105e:	68 f0       	brcs	.+26     	; 0x107a <strtol+0x17c>
    1060:	a3 01       	movw	r20, r6
    1062:	92 01       	movw	r18, r4
    1064:	58 d3       	rcall	.+1712   	; 0x1716 <__mulsi3>
    1066:	63 0d       	add	r22, r3
    1068:	71 1d       	adc	r23, r1
    106a:	81 1d       	adc	r24, r1
    106c:	91 1d       	adc	r25, r1
    106e:	61 30       	cpi	r22, 0x01	; 1
    1070:	71 05       	cpc	r23, r1
    1072:	81 05       	cpc	r24, r1
    1074:	20 e8       	ldi	r18, 0x80	; 128
    1076:	92 07       	cpc	r25, r18
    1078:	10 f0       	brcs	.+4      	; 0x107e <strtol+0x180>
    107a:	4f ef       	ldi	r20, 0xFF	; 255
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <strtol+0x182>
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	21 96       	adiw	r28, 0x01	; 1
    1082:	10 81       	ld	r17, Z
    1084:	cc cf       	rjmp	.-104    	; 0x101e <strtol+0x120>
    1086:	20 2f       	mov	r18, r16
    1088:	21 70       	andi	r18, 0x01	; 1
    108a:	c1 14       	cp	r12, r1
    108c:	d1 04       	cpc	r13, r1
    108e:	71 f0       	breq	.+28     	; 0x10ac <strtol+0x1ae>
    1090:	44 23       	and	r20, r20
    1092:	29 f0       	breq	.+10     	; 0x109e <strtol+0x1a0>
    1094:	21 97       	sbiw	r28, 0x01	; 1
    1096:	f6 01       	movw	r30, r12
    1098:	c0 83       	st	Z, r28
    109a:	d1 83       	std	Z+1, r29	; 0x01
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <strtol+0x1ae>
    109e:	01 ff       	sbrs	r16, 1
    10a0:	19 c0       	rjmp	.+50     	; 0x10d4 <strtol+0x1d6>
    10a2:	22 97       	sbiw	r28, 0x02	; 2
    10a4:	f6 01       	movw	r30, r12
    10a6:	c0 83       	st	Z, r28
    10a8:	d1 83       	std	Z+1, r29	; 0x01
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <strtol+0x1d6>
    10ac:	47 ff       	sbrs	r20, 7
    10ae:	12 c0       	rjmp	.+36     	; 0x10d4 <strtol+0x1d6>
    10b0:	22 23       	and	r18, r18
    10b2:	29 f0       	breq	.+10     	; 0x10be <strtol+0x1c0>
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e8       	ldi	r25, 0x80	; 128
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <strtol+0x1c8>
    10be:	6f ef       	ldi	r22, 0xFF	; 255
    10c0:	7f ef       	ldi	r23, 0xFF	; 255
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f e7       	ldi	r25, 0x7F	; 127
    10c6:	22 e2       	ldi	r18, 0x22	; 34
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	20 93 b4 3e 	sts	0x3EB4, r18	; 0x803eb4 <errno>
    10ce:	30 93 b5 3e 	sts	0x3EB5, r19	; 0x803eb5 <errno+0x1>
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <strtol+0x1e8>
    10d4:	22 23       	and	r18, r18
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <strtol+0x1fa>
    10d8:	90 95       	com	r25
    10da:	80 95       	com	r24
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	46 2f       	mov	r20, r22
    10e8:	37 2f       	mov	r19, r23
    10ea:	28 2f       	mov	r18, r24
    10ec:	12 c0       	rjmp	.+36     	; 0x1112 <strtol+0x214>
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <strtol+0x214>
    10f8:	97 ff       	sbrs	r25, 7
    10fa:	f5 cf       	rjmp	.-22     	; 0x10e6 <strtol+0x1e8>
    10fc:	82 e2       	ldi	r24, 0x22	; 34
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <errno>
    1104:	90 93 b5 3e 	sts	0x3EB5, r25	; 0x803eb5 <errno+0x1>
    1108:	6f ef       	ldi	r22, 0xFF	; 255
    110a:	7f ef       	ldi	r23, 0xFF	; 255
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	9f e7       	ldi	r25, 0x7F	; 127
    1110:	ea cf       	rjmp	.-44     	; 0x10e6 <strtol+0x1e8>
    1112:	64 2f       	mov	r22, r20
    1114:	73 2f       	mov	r23, r19
    1116:	82 2f       	mov	r24, r18
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	e1 e1       	ldi	r30, 0x11	; 17
    111e:	50 c3       	rjmp	.+1696   	; 0x17c0 <__epilogue_restores__+0x2>

00001120 <isspace>:
    1120:	91 11       	cpse	r25, r1
    1122:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__ctype_isfalse>
    1126:	80 32       	cpi	r24, 0x20	; 32
    1128:	19 f0       	breq	.+6      	; 0x1130 <isspace+0x10>
    112a:	89 50       	subi	r24, 0x09	; 9
    112c:	85 50       	subi	r24, 0x05	; 5
    112e:	c8 f7       	brcc	.-14     	; 0x1122 <isspace+0x2>
    1130:	08 95       	ret

00001132 <strtok>:
    1132:	44 e0       	ldi	r20, 0x04	; 4
    1134:	5e e3       	ldi	r21, 0x3E	; 62
    1136:	11 d0       	rcall	.+34     	; 0x115a <strtok_r>
    1138:	08 95       	ret

0000113a <strcmp>:
    113a:	fb 01       	movw	r30, r22
    113c:	dc 01       	movw	r26, r24
    113e:	8d 91       	ld	r24, X+
    1140:	01 90       	ld	r0, Z+
    1142:	80 19       	sub	r24, r0
    1144:	01 10       	cpse	r0, r1
    1146:	d9 f3       	breq	.-10     	; 0x113e <strcmp+0x4>
    1148:	99 0b       	sbc	r25, r25
    114a:	08 95       	ret

0000114c <strcpy>:
    114c:	fb 01       	movw	r30, r22
    114e:	dc 01       	movw	r26, r24
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	00 20       	and	r0, r0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <strcpy+0x4>
    1158:	08 95       	ret

0000115a <strtok_r>:
    115a:	fa 01       	movw	r30, r20
    115c:	a1 91       	ld	r26, Z+
    115e:	b0 81       	ld	r27, Z
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	19 f4       	brne	.+6      	; 0x116a <strtok_r+0x10>
    1164:	10 97       	sbiw	r26, 0x00	; 0
    1166:	e1 f0       	breq	.+56     	; 0x11a0 <strtok_r+0x46>
    1168:	cd 01       	movw	r24, r26
    116a:	dc 01       	movw	r26, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0d 90       	ld	r0, X+
    1170:	00 20       	and	r0, r0
    1172:	11 f4       	brne	.+4      	; 0x1178 <strtok_r+0x1e>
    1174:	c0 01       	movw	r24, r0
    1176:	13 c0       	rjmp	.+38     	; 0x119e <strtok_r+0x44>
    1178:	fb 01       	movw	r30, r22
    117a:	21 91       	ld	r18, Z+
    117c:	22 23       	and	r18, r18
    117e:	19 f0       	breq	.+6      	; 0x1186 <strtok_r+0x2c>
    1180:	20 15       	cp	r18, r0
    1182:	d9 f7       	brne	.-10     	; 0x117a <strtok_r+0x20>
    1184:	f3 cf       	rjmp	.-26     	; 0x116c <strtok_r+0x12>
    1186:	fb 01       	movw	r30, r22
    1188:	21 91       	ld	r18, Z+
    118a:	20 15       	cp	r18, r0
    118c:	19 f4       	brne	.+6      	; 0x1194 <strtok_r+0x3a>
    118e:	1e 92       	st	-X, r1
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <strtok_r+0x46>
    1194:	22 23       	and	r18, r18
    1196:	c1 f7       	brne	.-16     	; 0x1188 <strtok_r+0x2e>
    1198:	0d 90       	ld	r0, X+
    119a:	00 20       	and	r0, r0
    119c:	a1 f7       	brne	.-24     	; 0x1186 <strtok_r+0x2c>
    119e:	d0 01       	movw	r26, r0
    11a0:	fa 01       	movw	r30, r20
    11a2:	a1 93       	st	Z+, r26
    11a4:	b0 83       	st	Z, r27
    11a6:	08 95       	ret

000011a8 <printf>:
    11a8:	a0 e0       	ldi	r26, 0x00	; 0
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 ed       	ldi	r30, 0xD9	; 217
    11ae:	f8 e0       	ldi	r31, 0x08	; 8
    11b0:	fd c2       	rjmp	.+1530   	; 0x17ac <__prologue_saves__+0x20>
    11b2:	ae 01       	movw	r20, r28
    11b4:	4b 5f       	subi	r20, 0xFB	; 251
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	fa 01       	movw	r30, r20
    11ba:	61 91       	ld	r22, Z+
    11bc:	71 91       	ld	r23, Z+
    11be:	af 01       	movw	r20, r30
    11c0:	80 91 b8 3e 	lds	r24, 0x3EB8	; 0x803eb8 <__iob+0x2>
    11c4:	90 91 b9 3e 	lds	r25, 0x3EB9	; 0x803eb9 <__iob+0x3>
    11c8:	21 d0       	rcall	.+66     	; 0x120c <vfprintf>
    11ca:	e2 e0       	ldi	r30, 0x02	; 2
    11cc:	08 c3       	rjmp	.+1552   	; 0x17de <__epilogue_restores__+0x20>

000011ce <sprintf>:
    11ce:	ae e0       	ldi	r26, 0x0E	; 14
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ec ee       	ldi	r30, 0xEC	; 236
    11d4:	f8 e0       	ldi	r31, 0x08	; 8
    11d6:	e8 c2       	rjmp	.+1488   	; 0x17a8 <__prologue_saves__+0x1c>
    11d8:	0d 89       	ldd	r16, Y+21	; 0x15
    11da:	1e 89       	ldd	r17, Y+22	; 0x16
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	8c 83       	std	Y+4, r24	; 0x04
    11e0:	09 83       	std	Y+1, r16	; 0x01
    11e2:	1a 83       	std	Y+2, r17	; 0x02
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	9f e7       	ldi	r25, 0x7F	; 127
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	ae 01       	movw	r20, r28
    11ee:	47 5e       	subi	r20, 0xE7	; 231
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	6f 89       	ldd	r22, Y+23	; 0x17
    11f4:	78 8d       	ldd	r23, Y+24	; 0x18
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	08 d0       	rcall	.+16     	; 0x120c <vfprintf>
    11fc:	ef 81       	ldd	r30, Y+7	; 0x07
    11fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1200:	e0 0f       	add	r30, r16
    1202:	f1 1f       	adc	r31, r17
    1204:	10 82       	st	Z, r1
    1206:	2e 96       	adiw	r28, 0x0e	; 14
    1208:	e4 e0       	ldi	r30, 0x04	; 4
    120a:	e7 c2       	rjmp	.+1486   	; 0x17da <__epilogue_restores__+0x1c>

0000120c <vfprintf>:
    120c:	ab e0       	ldi	r26, 0x0B	; 11
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e0       	ldi	r30, 0x0B	; 11
    1212:	f9 e0       	ldi	r31, 0x09	; 9
    1214:	bb c2       	rjmp	.+1398   	; 0x178c <__prologue_saves__>
    1216:	6c 01       	movw	r12, r24
    1218:	7b 01       	movw	r14, r22
    121a:	8a 01       	movw	r16, r20
    121c:	fc 01       	movw	r30, r24
    121e:	16 82       	std	Z+6, r1	; 0x06
    1220:	17 82       	std	Z+7, r1	; 0x07
    1222:	83 81       	ldd	r24, Z+3	; 0x03
    1224:	81 ff       	sbrs	r24, 1
    1226:	bf c1       	rjmp	.+894    	; 0x15a6 <vfprintf+0x39a>
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	3c 01       	movw	r6, r24
    122e:	f6 01       	movw	r30, r12
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	f7 01       	movw	r30, r14
    1234:	93 fd       	sbrc	r25, 3
    1236:	85 91       	lpm	r24, Z+
    1238:	93 ff       	sbrs	r25, 3
    123a:	81 91       	ld	r24, Z+
    123c:	7f 01       	movw	r14, r30
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <vfprintf+0x38>
    1242:	ad c1       	rjmp	.+858    	; 0x159e <vfprintf+0x392>
    1244:	85 32       	cpi	r24, 0x25	; 37
    1246:	39 f4       	brne	.+14     	; 0x1256 <vfprintf+0x4a>
    1248:	93 fd       	sbrc	r25, 3
    124a:	85 91       	lpm	r24, Z+
    124c:	93 ff       	sbrs	r25, 3
    124e:	81 91       	ld	r24, Z+
    1250:	7f 01       	movw	r14, r30
    1252:	85 32       	cpi	r24, 0x25	; 37
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0x52>
    1256:	b6 01       	movw	r22, r12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	c3 d1       	rcall	.+902    	; 0x15e2 <fputc>
    125c:	e8 cf       	rjmp	.-48     	; 0x122e <vfprintf+0x22>
    125e:	91 2c       	mov	r9, r1
    1260:	21 2c       	mov	r2, r1
    1262:	31 2c       	mov	r3, r1
    1264:	ff e1       	ldi	r31, 0x1F	; 31
    1266:	f3 15       	cp	r31, r3
    1268:	d8 f0       	brcs	.+54     	; 0x12a0 <vfprintf+0x94>
    126a:	8b 32       	cpi	r24, 0x2B	; 43
    126c:	79 f0       	breq	.+30     	; 0x128c <vfprintf+0x80>
    126e:	38 f4       	brcc	.+14     	; 0x127e <vfprintf+0x72>
    1270:	80 32       	cpi	r24, 0x20	; 32
    1272:	79 f0       	breq	.+30     	; 0x1292 <vfprintf+0x86>
    1274:	83 32       	cpi	r24, 0x23	; 35
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <vfprintf+0x94>
    1278:	23 2d       	mov	r18, r3
    127a:	20 61       	ori	r18, 0x10	; 16
    127c:	1d c0       	rjmp	.+58     	; 0x12b8 <vfprintf+0xac>
    127e:	8d 32       	cpi	r24, 0x2D	; 45
    1280:	61 f0       	breq	.+24     	; 0x129a <vfprintf+0x8e>
    1282:	80 33       	cpi	r24, 0x30	; 48
    1284:	69 f4       	brne	.+26     	; 0x12a0 <vfprintf+0x94>
    1286:	23 2d       	mov	r18, r3
    1288:	21 60       	ori	r18, 0x01	; 1
    128a:	16 c0       	rjmp	.+44     	; 0x12b8 <vfprintf+0xac>
    128c:	83 2d       	mov	r24, r3
    128e:	82 60       	ori	r24, 0x02	; 2
    1290:	38 2e       	mov	r3, r24
    1292:	e3 2d       	mov	r30, r3
    1294:	e4 60       	ori	r30, 0x04	; 4
    1296:	3e 2e       	mov	r3, r30
    1298:	2a c0       	rjmp	.+84     	; 0x12ee <vfprintf+0xe2>
    129a:	f3 2d       	mov	r31, r3
    129c:	f8 60       	ori	r31, 0x08	; 8
    129e:	1d c0       	rjmp	.+58     	; 0x12da <vfprintf+0xce>
    12a0:	37 fc       	sbrc	r3, 7
    12a2:	2d c0       	rjmp	.+90     	; 0x12fe <vfprintf+0xf2>
    12a4:	20 ed       	ldi	r18, 0xD0	; 208
    12a6:	28 0f       	add	r18, r24
    12a8:	2a 30       	cpi	r18, 0x0A	; 10
    12aa:	40 f0       	brcs	.+16     	; 0x12bc <vfprintf+0xb0>
    12ac:	8e 32       	cpi	r24, 0x2E	; 46
    12ae:	b9 f4       	brne	.+46     	; 0x12de <vfprintf+0xd2>
    12b0:	36 fc       	sbrc	r3, 6
    12b2:	75 c1       	rjmp	.+746    	; 0x159e <vfprintf+0x392>
    12b4:	23 2d       	mov	r18, r3
    12b6:	20 64       	ori	r18, 0x40	; 64
    12b8:	32 2e       	mov	r3, r18
    12ba:	19 c0       	rjmp	.+50     	; 0x12ee <vfprintf+0xe2>
    12bc:	36 fe       	sbrs	r3, 6
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0xc0>
    12c0:	8a e0       	ldi	r24, 0x0A	; 10
    12c2:	98 9e       	mul	r9, r24
    12c4:	20 0d       	add	r18, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	92 2e       	mov	r9, r18
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <vfprintf+0xe2>
    12cc:	ea e0       	ldi	r30, 0x0A	; 10
    12ce:	2e 9e       	mul	r2, r30
    12d0:	20 0d       	add	r18, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	22 2e       	mov	r2, r18
    12d6:	f3 2d       	mov	r31, r3
    12d8:	f0 62       	ori	r31, 0x20	; 32
    12da:	3f 2e       	mov	r3, r31
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <vfprintf+0xe2>
    12de:	8c 36       	cpi	r24, 0x6C	; 108
    12e0:	21 f4       	brne	.+8      	; 0x12ea <vfprintf+0xde>
    12e2:	83 2d       	mov	r24, r3
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	38 2e       	mov	r3, r24
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <vfprintf+0xe2>
    12ea:	88 36       	cpi	r24, 0x68	; 104
    12ec:	41 f4       	brne	.+16     	; 0x12fe <vfprintf+0xf2>
    12ee:	f7 01       	movw	r30, r14
    12f0:	93 fd       	sbrc	r25, 3
    12f2:	85 91       	lpm	r24, Z+
    12f4:	93 ff       	sbrs	r25, 3
    12f6:	81 91       	ld	r24, Z+
    12f8:	7f 01       	movw	r14, r30
    12fa:	81 11       	cpse	r24, r1
    12fc:	b3 cf       	rjmp	.-154    	; 0x1264 <vfprintf+0x58>
    12fe:	98 2f       	mov	r25, r24
    1300:	9f 7d       	andi	r25, 0xDF	; 223
    1302:	95 54       	subi	r25, 0x45	; 69
    1304:	93 30       	cpi	r25, 0x03	; 3
    1306:	28 f4       	brcc	.+10     	; 0x1312 <vfprintf+0x106>
    1308:	0c 5f       	subi	r16, 0xFC	; 252
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	9f e3       	ldi	r25, 0x3F	; 63
    130e:	99 83       	std	Y+1, r25	; 0x01
    1310:	0d c0       	rjmp	.+26     	; 0x132c <vfprintf+0x120>
    1312:	83 36       	cpi	r24, 0x63	; 99
    1314:	31 f0       	breq	.+12     	; 0x1322 <vfprintf+0x116>
    1316:	83 37       	cpi	r24, 0x73	; 115
    1318:	71 f0       	breq	.+28     	; 0x1336 <vfprintf+0x12a>
    131a:	83 35       	cpi	r24, 0x53	; 83
    131c:	09 f0       	breq	.+2      	; 0x1320 <vfprintf+0x114>
    131e:	55 c0       	rjmp	.+170    	; 0x13ca <vfprintf+0x1be>
    1320:	20 c0       	rjmp	.+64     	; 0x1362 <vfprintf+0x156>
    1322:	f8 01       	movw	r30, r16
    1324:	80 81       	ld	r24, Z
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	0e 5f       	subi	r16, 0xFE	; 254
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	88 24       	eor	r8, r8
    132e:	83 94       	inc	r8
    1330:	91 2c       	mov	r9, r1
    1332:	53 01       	movw	r10, r6
    1334:	12 c0       	rjmp	.+36     	; 0x135a <vfprintf+0x14e>
    1336:	28 01       	movw	r4, r16
    1338:	f2 e0       	ldi	r31, 0x02	; 2
    133a:	4f 0e       	add	r4, r31
    133c:	51 1c       	adc	r5, r1
    133e:	f8 01       	movw	r30, r16
    1340:	a0 80       	ld	r10, Z
    1342:	b1 80       	ldd	r11, Z+1	; 0x01
    1344:	36 fe       	sbrs	r3, 6
    1346:	03 c0       	rjmp	.+6      	; 0x134e <vfprintf+0x142>
    1348:	69 2d       	mov	r22, r9
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0x146>
    134e:	6f ef       	ldi	r22, 0xFF	; 255
    1350:	7f ef       	ldi	r23, 0xFF	; 255
    1352:	c5 01       	movw	r24, r10
    1354:	3b d1       	rcall	.+630    	; 0x15cc <strnlen>
    1356:	4c 01       	movw	r8, r24
    1358:	82 01       	movw	r16, r4
    135a:	f3 2d       	mov	r31, r3
    135c:	ff 77       	andi	r31, 0x7F	; 127
    135e:	3f 2e       	mov	r3, r31
    1360:	15 c0       	rjmp	.+42     	; 0x138c <vfprintf+0x180>
    1362:	28 01       	movw	r4, r16
    1364:	22 e0       	ldi	r18, 0x02	; 2
    1366:	42 0e       	add	r4, r18
    1368:	51 1c       	adc	r5, r1
    136a:	f8 01       	movw	r30, r16
    136c:	a0 80       	ld	r10, Z
    136e:	b1 80       	ldd	r11, Z+1	; 0x01
    1370:	36 fe       	sbrs	r3, 6
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x16e>
    1374:	69 2d       	mov	r22, r9
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x172>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	c5 01       	movw	r24, r10
    1380:	1a d1       	rcall	.+564    	; 0x15b6 <strnlen_P>
    1382:	4c 01       	movw	r8, r24
    1384:	f3 2d       	mov	r31, r3
    1386:	f0 68       	ori	r31, 0x80	; 128
    1388:	3f 2e       	mov	r3, r31
    138a:	82 01       	movw	r16, r4
    138c:	33 fc       	sbrc	r3, 3
    138e:	19 c0       	rjmp	.+50     	; 0x13c2 <vfprintf+0x1b6>
    1390:	82 2d       	mov	r24, r2
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	88 16       	cp	r8, r24
    1396:	99 06       	cpc	r9, r25
    1398:	a0 f4       	brcc	.+40     	; 0x13c2 <vfprintf+0x1b6>
    139a:	b6 01       	movw	r22, r12
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	20 d1       	rcall	.+576    	; 0x15e2 <fputc>
    13a2:	2a 94       	dec	r2
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <vfprintf+0x184>
    13a6:	f5 01       	movw	r30, r10
    13a8:	37 fc       	sbrc	r3, 7
    13aa:	85 91       	lpm	r24, Z+
    13ac:	37 fe       	sbrs	r3, 7
    13ae:	81 91       	ld	r24, Z+
    13b0:	5f 01       	movw	r10, r30
    13b2:	b6 01       	movw	r22, r12
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	15 d1       	rcall	.+554    	; 0x15e2 <fputc>
    13b8:	21 10       	cpse	r2, r1
    13ba:	2a 94       	dec	r2
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	82 1a       	sub	r8, r18
    13c0:	91 08       	sbc	r9, r1
    13c2:	81 14       	cp	r8, r1
    13c4:	91 04       	cpc	r9, r1
    13c6:	79 f7       	brne	.-34     	; 0x13a6 <vfprintf+0x19a>
    13c8:	e1 c0       	rjmp	.+450    	; 0x158c <vfprintf+0x380>
    13ca:	84 36       	cpi	r24, 0x64	; 100
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <vfprintf+0x1c6>
    13ce:	89 36       	cpi	r24, 0x69	; 105
    13d0:	39 f5       	brne	.+78     	; 0x1420 <vfprintf+0x214>
    13d2:	f8 01       	movw	r30, r16
    13d4:	37 fe       	sbrs	r3, 7
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <vfprintf+0x1da>
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	0c 5f       	subi	r16, 0xFC	; 252
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <vfprintf+0x1ea>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	07 2e       	mov	r0, r23
    13ec:	00 0c       	add	r0, r0
    13ee:	88 0b       	sbc	r24, r24
    13f0:	99 0b       	sbc	r25, r25
    13f2:	0e 5f       	subi	r16, 0xFE	; 254
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	f3 2d       	mov	r31, r3
    13f8:	ff 76       	andi	r31, 0x6F	; 111
    13fa:	3f 2e       	mov	r3, r31
    13fc:	97 ff       	sbrs	r25, 7
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <vfprintf+0x206>
    1400:	90 95       	com	r25
    1402:	80 95       	com	r24
    1404:	70 95       	com	r23
    1406:	61 95       	neg	r22
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	f0 68       	ori	r31, 0x80	; 128
    1410:	3f 2e       	mov	r3, r31
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a3 01       	movw	r20, r6
    1418:	20 d1       	rcall	.+576    	; 0x165a <__ultoa_invert>
    141a:	88 2e       	mov	r8, r24
    141c:	86 18       	sub	r8, r6
    141e:	44 c0       	rjmp	.+136    	; 0x14a8 <vfprintf+0x29c>
    1420:	85 37       	cpi	r24, 0x75	; 117
    1422:	31 f4       	brne	.+12     	; 0x1430 <vfprintf+0x224>
    1424:	23 2d       	mov	r18, r3
    1426:	2f 7e       	andi	r18, 0xEF	; 239
    1428:	b2 2e       	mov	r11, r18
    142a:	2a e0       	ldi	r18, 0x0A	; 10
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	25 c0       	rjmp	.+74     	; 0x147a <vfprintf+0x26e>
    1430:	93 2d       	mov	r25, r3
    1432:	99 7f       	andi	r25, 0xF9	; 249
    1434:	b9 2e       	mov	r11, r25
    1436:	8f 36       	cpi	r24, 0x6F	; 111
    1438:	c1 f0       	breq	.+48     	; 0x146a <vfprintf+0x25e>
    143a:	18 f4       	brcc	.+6      	; 0x1442 <vfprintf+0x236>
    143c:	88 35       	cpi	r24, 0x58	; 88
    143e:	79 f0       	breq	.+30     	; 0x145e <vfprintf+0x252>
    1440:	ae c0       	rjmp	.+348    	; 0x159e <vfprintf+0x392>
    1442:	80 37       	cpi	r24, 0x70	; 112
    1444:	19 f0       	breq	.+6      	; 0x144c <vfprintf+0x240>
    1446:	88 37       	cpi	r24, 0x78	; 120
    1448:	21 f0       	breq	.+8      	; 0x1452 <vfprintf+0x246>
    144a:	a9 c0       	rjmp	.+338    	; 0x159e <vfprintf+0x392>
    144c:	e9 2f       	mov	r30, r25
    144e:	e0 61       	ori	r30, 0x10	; 16
    1450:	be 2e       	mov	r11, r30
    1452:	b4 fe       	sbrs	r11, 4
    1454:	0d c0       	rjmp	.+26     	; 0x1470 <vfprintf+0x264>
    1456:	fb 2d       	mov	r31, r11
    1458:	f4 60       	ori	r31, 0x04	; 4
    145a:	bf 2e       	mov	r11, r31
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <vfprintf+0x264>
    145e:	34 fe       	sbrs	r3, 4
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <vfprintf+0x26a>
    1462:	29 2f       	mov	r18, r25
    1464:	26 60       	ori	r18, 0x06	; 6
    1466:	b2 2e       	mov	r11, r18
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <vfprintf+0x26a>
    146a:	28 e0       	ldi	r18, 0x08	; 8
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	05 c0       	rjmp	.+10     	; 0x147a <vfprintf+0x26e>
    1470:	20 e1       	ldi	r18, 0x10	; 16
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x26e>
    1476:	20 e1       	ldi	r18, 0x10	; 16
    1478:	32 e0       	ldi	r19, 0x02	; 2
    147a:	f8 01       	movw	r30, r16
    147c:	b7 fe       	sbrs	r11, 7
    147e:	07 c0       	rjmp	.+14     	; 0x148e <vfprintf+0x282>
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	0c 5f       	subi	r16, 0xFC	; 252
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x28e>
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 5f       	subi	r16, 0xFE	; 254
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	a3 01       	movw	r20, r6
    149c:	de d0       	rcall	.+444    	; 0x165a <__ultoa_invert>
    149e:	88 2e       	mov	r8, r24
    14a0:	86 18       	sub	r8, r6
    14a2:	fb 2d       	mov	r31, r11
    14a4:	ff 77       	andi	r31, 0x7F	; 127
    14a6:	3f 2e       	mov	r3, r31
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <vfprintf+0x2ba>
    14ac:	23 2d       	mov	r18, r3
    14ae:	2e 7f       	andi	r18, 0xFE	; 254
    14b0:	a2 2e       	mov	r10, r18
    14b2:	89 14       	cp	r8, r9
    14b4:	58 f4       	brcc	.+22     	; 0x14cc <vfprintf+0x2c0>
    14b6:	34 fe       	sbrs	r3, 4
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <vfprintf+0x2c4>
    14ba:	32 fc       	sbrc	r3, 2
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <vfprintf+0x2c4>
    14be:	83 2d       	mov	r24, r3
    14c0:	8e 7e       	andi	r24, 0xEE	; 238
    14c2:	a8 2e       	mov	r10, r24
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <vfprintf+0x2c4>
    14c6:	b8 2c       	mov	r11, r8
    14c8:	a3 2c       	mov	r10, r3
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <vfprintf+0x2c6>
    14cc:	b8 2c       	mov	r11, r8
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <vfprintf+0x2c6>
    14d0:	b9 2c       	mov	r11, r9
    14d2:	a4 fe       	sbrs	r10, 4
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <vfprintf+0x2e8>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e8 0d       	add	r30, r8
    14da:	f1 1d       	adc	r31, r1
    14dc:	80 81       	ld	r24, Z
    14de:	80 33       	cpi	r24, 0x30	; 48
    14e0:	21 f4       	brne	.+8      	; 0x14ea <vfprintf+0x2de>
    14e2:	9a 2d       	mov	r25, r10
    14e4:	99 7e       	andi	r25, 0xE9	; 233
    14e6:	a9 2e       	mov	r10, r25
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <vfprintf+0x2f0>
    14ea:	a2 fe       	sbrs	r10, 2
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0x2ee>
    14ee:	b3 94       	inc	r11
    14f0:	b3 94       	inc	r11
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <vfprintf+0x2f0>
    14f4:	8a 2d       	mov	r24, r10
    14f6:	86 78       	andi	r24, 0x86	; 134
    14f8:	09 f0       	breq	.+2      	; 0x14fc <vfprintf+0x2f0>
    14fa:	b3 94       	inc	r11
    14fc:	a3 fc       	sbrc	r10, 3
    14fe:	10 c0       	rjmp	.+32     	; 0x1520 <vfprintf+0x314>
    1500:	a0 fe       	sbrs	r10, 0
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0x304>
    1504:	b2 14       	cp	r11, r2
    1506:	80 f4       	brcc	.+32     	; 0x1528 <vfprintf+0x31c>
    1508:	28 0c       	add	r2, r8
    150a:	92 2c       	mov	r9, r2
    150c:	9b 18       	sub	r9, r11
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x31e>
    1510:	b2 14       	cp	r11, r2
    1512:	58 f4       	brcc	.+22     	; 0x152a <vfprintf+0x31e>
    1514:	b6 01       	movw	r22, r12
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	63 d0       	rcall	.+198    	; 0x15e2 <fputc>
    151c:	b3 94       	inc	r11
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <vfprintf+0x304>
    1520:	b2 14       	cp	r11, r2
    1522:	18 f4       	brcc	.+6      	; 0x152a <vfprintf+0x31e>
    1524:	2b 18       	sub	r2, r11
    1526:	02 c0       	rjmp	.+4      	; 0x152c <vfprintf+0x320>
    1528:	98 2c       	mov	r9, r8
    152a:	21 2c       	mov	r2, r1
    152c:	a4 fe       	sbrs	r10, 4
    152e:	0f c0       	rjmp	.+30     	; 0x154e <vfprintf+0x342>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	55 d0       	rcall	.+170    	; 0x15e2 <fputc>
    1538:	a2 fe       	sbrs	r10, 2
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <vfprintf+0x35c>
    153c:	a1 fc       	sbrc	r10, 1
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <vfprintf+0x33a>
    1540:	88 e7       	ldi	r24, 0x78	; 120
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x33e>
    1546:	88 e5       	ldi	r24, 0x58	; 88
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	b6 01       	movw	r22, r12
    154c:	0c c0       	rjmp	.+24     	; 0x1566 <vfprintf+0x35a>
    154e:	8a 2d       	mov	r24, r10
    1550:	86 78       	andi	r24, 0x86	; 134
    1552:	51 f0       	breq	.+20     	; 0x1568 <vfprintf+0x35c>
    1554:	a1 fe       	sbrs	r10, 1
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x350>
    1558:	8b e2       	ldi	r24, 0x2B	; 43
    155a:	01 c0       	rjmp	.+2      	; 0x155e <vfprintf+0x352>
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	a7 fc       	sbrc	r10, 7
    1560:	8d e2       	ldi	r24, 0x2D	; 45
    1562:	b6 01       	movw	r22, r12
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	3d d0       	rcall	.+122    	; 0x15e2 <fputc>
    1568:	89 14       	cp	r8, r9
    156a:	30 f4       	brcc	.+12     	; 0x1578 <vfprintf+0x36c>
    156c:	b6 01       	movw	r22, r12
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	37 d0       	rcall	.+110    	; 0x15e2 <fputc>
    1574:	9a 94       	dec	r9
    1576:	f8 cf       	rjmp	.-16     	; 0x1568 <vfprintf+0x35c>
    1578:	8a 94       	dec	r8
    157a:	f3 01       	movw	r30, r6
    157c:	e8 0d       	add	r30, r8
    157e:	f1 1d       	adc	r31, r1
    1580:	80 81       	ld	r24, Z
    1582:	b6 01       	movw	r22, r12
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	2d d0       	rcall	.+90     	; 0x15e2 <fputc>
    1588:	81 10       	cpse	r8, r1
    158a:	f6 cf       	rjmp	.-20     	; 0x1578 <vfprintf+0x36c>
    158c:	22 20       	and	r2, r2
    158e:	09 f4       	brne	.+2      	; 0x1592 <vfprintf+0x386>
    1590:	4e ce       	rjmp	.-868    	; 0x122e <vfprintf+0x22>
    1592:	b6 01       	movw	r22, r12
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	24 d0       	rcall	.+72     	; 0x15e2 <fputc>
    159a:	2a 94       	dec	r2
    159c:	f7 cf       	rjmp	.-18     	; 0x158c <vfprintf+0x380>
    159e:	f6 01       	movw	r30, r12
    15a0:	86 81       	ldd	r24, Z+6	; 0x06
    15a2:	97 81       	ldd	r25, Z+7	; 0x07
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x39e>
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	9f ef       	ldi	r25, 0xFF	; 255
    15aa:	2b 96       	adiw	r28, 0x0b	; 11
    15ac:	e2 e1       	ldi	r30, 0x12	; 18
    15ae:	07 c1       	rjmp	.+526    	; 0x17be <__epilogue_restores__>

000015b0 <__ctype_isfalse>:
    15b0:	99 27       	eor	r25, r25
    15b2:	88 27       	eor	r24, r24

000015b4 <__ctype_istrue>:
    15b4:	08 95       	ret

000015b6 <strnlen_P>:
    15b6:	fc 01       	movw	r30, r24
    15b8:	05 90       	lpm	r0, Z+
    15ba:	61 50       	subi	r22, 0x01	; 1
    15bc:	70 40       	sbci	r23, 0x00	; 0
    15be:	01 10       	cpse	r0, r1
    15c0:	d8 f7       	brcc	.-10     	; 0x15b8 <strnlen_P+0x2>
    15c2:	80 95       	com	r24
    15c4:	90 95       	com	r25
    15c6:	8e 0f       	add	r24, r30
    15c8:	9f 1f       	adc	r25, r31
    15ca:	08 95       	ret

000015cc <strnlen>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	61 50       	subi	r22, 0x01	; 1
    15d0:	70 40       	sbci	r23, 0x00	; 0
    15d2:	01 90       	ld	r0, Z+
    15d4:	01 10       	cpse	r0, r1
    15d6:	d8 f7       	brcc	.-10     	; 0x15ce <strnlen+0x2>
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	8e 0f       	add	r24, r30
    15de:	9f 1f       	adc	r25, r31
    15e0:	08 95       	ret

000015e2 <fputc>:
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	fb 01       	movw	r30, r22
    15ec:	23 81       	ldd	r18, Z+3	; 0x03
    15ee:	21 fd       	sbrc	r18, 1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <fputc+0x16>
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	9f ef       	ldi	r25, 0xFF	; 255
    15f6:	2c c0       	rjmp	.+88     	; 0x1650 <fputc+0x6e>
    15f8:	22 ff       	sbrs	r18, 2
    15fa:	16 c0       	rjmp	.+44     	; 0x1628 <fputc+0x46>
    15fc:	46 81       	ldd	r20, Z+6	; 0x06
    15fe:	57 81       	ldd	r21, Z+7	; 0x07
    1600:	24 81       	ldd	r18, Z+4	; 0x04
    1602:	35 81       	ldd	r19, Z+5	; 0x05
    1604:	42 17       	cp	r20, r18
    1606:	53 07       	cpc	r21, r19
    1608:	44 f4       	brge	.+16     	; 0x161a <fputc+0x38>
    160a:	a0 81       	ld	r26, Z
    160c:	b1 81       	ldd	r27, Z+1	; 0x01
    160e:	9d 01       	movw	r18, r26
    1610:	2f 5f       	subi	r18, 0xFF	; 255
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	20 83       	st	Z, r18
    1616:	31 83       	std	Z+1, r19	; 0x01
    1618:	8c 93       	st	X, r24
    161a:	26 81       	ldd	r18, Z+6	; 0x06
    161c:	37 81       	ldd	r19, Z+7	; 0x07
    161e:	2f 5f       	subi	r18, 0xFF	; 255
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	26 83       	std	Z+6, r18	; 0x06
    1624:	37 83       	std	Z+7, r19	; 0x07
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <fputc+0x6e>
    1628:	8b 01       	movw	r16, r22
    162a:	ec 01       	movw	r28, r24
    162c:	fb 01       	movw	r30, r22
    162e:	00 84       	ldd	r0, Z+8	; 0x08
    1630:	f1 85       	ldd	r31, Z+9	; 0x09
    1632:	e0 2d       	mov	r30, r0
    1634:	09 95       	icall
    1636:	89 2b       	or	r24, r25
    1638:	e1 f6       	brne	.-72     	; 0x15f2 <fputc+0x10>
    163a:	d8 01       	movw	r26, r16
    163c:	16 96       	adiw	r26, 0x06	; 6
    163e:	8d 91       	ld	r24, X+
    1640:	9c 91       	ld	r25, X
    1642:	17 97       	sbiw	r26, 0x07	; 7
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	16 96       	adiw	r26, 0x06	; 6
    1648:	8d 93       	st	X+, r24
    164a:	9c 93       	st	X, r25
    164c:	17 97       	sbiw	r26, 0x07	; 7
    164e:	ce 01       	movw	r24, r28
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	08 95       	ret

0000165a <__ultoa_invert>:
    165a:	fa 01       	movw	r30, r20
    165c:	aa 27       	eor	r26, r26
    165e:	28 30       	cpi	r18, 0x08	; 8
    1660:	51 f1       	breq	.+84     	; 0x16b6 <__ultoa_invert+0x5c>
    1662:	20 31       	cpi	r18, 0x10	; 16
    1664:	81 f1       	breq	.+96     	; 0x16c6 <__ultoa_invert+0x6c>
    1666:	e8 94       	clt
    1668:	6f 93       	push	r22
    166a:	6e 7f       	andi	r22, 0xFE	; 254
    166c:	6e 5f       	subi	r22, 0xFE	; 254
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	8f 4f       	sbci	r24, 0xFF	; 255
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	af 4f       	sbci	r26, 0xFF	; 255
    1676:	b1 e0       	ldi	r27, 0x01	; 1
    1678:	3e d0       	rcall	.+124    	; 0x16f6 <__ultoa_invert+0x9c>
    167a:	b4 e0       	ldi	r27, 0x04	; 4
    167c:	3c d0       	rcall	.+120    	; 0x16f6 <__ultoa_invert+0x9c>
    167e:	67 0f       	add	r22, r23
    1680:	78 1f       	adc	r23, r24
    1682:	89 1f       	adc	r24, r25
    1684:	9a 1f       	adc	r25, r26
    1686:	a1 1d       	adc	r26, r1
    1688:	68 0f       	add	r22, r24
    168a:	79 1f       	adc	r23, r25
    168c:	8a 1f       	adc	r24, r26
    168e:	91 1d       	adc	r25, r1
    1690:	a1 1d       	adc	r26, r1
    1692:	6a 0f       	add	r22, r26
    1694:	71 1d       	adc	r23, r1
    1696:	81 1d       	adc	r24, r1
    1698:	91 1d       	adc	r25, r1
    169a:	a1 1d       	adc	r26, r1
    169c:	20 d0       	rcall	.+64     	; 0x16de <__ultoa_invert+0x84>
    169e:	09 f4       	brne	.+2      	; 0x16a2 <__ultoa_invert+0x48>
    16a0:	68 94       	set
    16a2:	3f 91       	pop	r19
    16a4:	2a e0       	ldi	r18, 0x0A	; 10
    16a6:	26 9f       	mul	r18, r22
    16a8:	11 24       	eor	r1, r1
    16aa:	30 19       	sub	r19, r0
    16ac:	30 5d       	subi	r19, 0xD0	; 208
    16ae:	31 93       	st	Z+, r19
    16b0:	de f6       	brtc	.-74     	; 0x1668 <__ultoa_invert+0xe>
    16b2:	cf 01       	movw	r24, r30
    16b4:	08 95       	ret
    16b6:	46 2f       	mov	r20, r22
    16b8:	47 70       	andi	r20, 0x07	; 7
    16ba:	40 5d       	subi	r20, 0xD0	; 208
    16bc:	41 93       	st	Z+, r20
    16be:	b3 e0       	ldi	r27, 0x03	; 3
    16c0:	0f d0       	rcall	.+30     	; 0x16e0 <__ultoa_invert+0x86>
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__ultoa_invert+0x5c>
    16c4:	f6 cf       	rjmp	.-20     	; 0x16b2 <__ultoa_invert+0x58>
    16c6:	46 2f       	mov	r20, r22
    16c8:	4f 70       	andi	r20, 0x0F	; 15
    16ca:	40 5d       	subi	r20, 0xD0	; 208
    16cc:	4a 33       	cpi	r20, 0x3A	; 58
    16ce:	18 f0       	brcs	.+6      	; 0x16d6 <__ultoa_invert+0x7c>
    16d0:	49 5d       	subi	r20, 0xD9	; 217
    16d2:	31 fd       	sbrc	r19, 1
    16d4:	40 52       	subi	r20, 0x20	; 32
    16d6:	41 93       	st	Z+, r20
    16d8:	02 d0       	rcall	.+4      	; 0x16de <__ultoa_invert+0x84>
    16da:	a9 f7       	brne	.-22     	; 0x16c6 <__ultoa_invert+0x6c>
    16dc:	ea cf       	rjmp	.-44     	; 0x16b2 <__ultoa_invert+0x58>
    16de:	b4 e0       	ldi	r27, 0x04	; 4
    16e0:	a6 95       	lsr	r26
    16e2:	97 95       	ror	r25
    16e4:	87 95       	ror	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	ba 95       	dec	r27
    16ec:	c9 f7       	brne	.-14     	; 0x16e0 <__ultoa_invert+0x86>
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	61 05       	cpc	r22, r1
    16f2:	71 05       	cpc	r23, r1
    16f4:	08 95       	ret
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	0a 2e       	mov	r0, r26
    16fc:	06 94       	lsr	r0
    16fe:	57 95       	ror	r21
    1700:	47 95       	ror	r20
    1702:	37 95       	ror	r19
    1704:	27 95       	ror	r18
    1706:	ba 95       	dec	r27
    1708:	c9 f7       	brne	.-14     	; 0x16fc <__ultoa_invert+0xa2>
    170a:	62 0f       	add	r22, r18
    170c:	73 1f       	adc	r23, r19
    170e:	84 1f       	adc	r24, r20
    1710:	95 1f       	adc	r25, r21
    1712:	a0 1d       	adc	r26, r0
    1714:	08 95       	ret

00001716 <__mulsi3>:
    1716:	db 01       	movw	r26, r22
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	2d d0       	rcall	.+90     	; 0x1778 <__muluhisi3>
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	a2 9f       	mul	r26, r18
    1724:	80 0d       	add	r24, r0
    1726:	91 1d       	adc	r25, r1
    1728:	a3 9f       	mul	r26, r19
    172a:	90 0d       	add	r25, r0
    172c:	b2 9f       	mul	r27, r18
    172e:	90 0d       	add	r25, r0
    1730:	11 24       	eor	r1, r1
    1732:	08 95       	ret

00001734 <__udivmodsi4>:
    1734:	a1 e2       	ldi	r26, 0x21	; 33
    1736:	1a 2e       	mov	r1, r26
    1738:	aa 1b       	sub	r26, r26
    173a:	bb 1b       	sub	r27, r27
    173c:	fd 01       	movw	r30, r26
    173e:	0d c0       	rjmp	.+26     	; 0x175a <__udivmodsi4_ep>

00001740 <__udivmodsi4_loop>:
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	ee 1f       	adc	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	a2 17       	cp	r26, r18
    174a:	b3 07       	cpc	r27, r19
    174c:	e4 07       	cpc	r30, r20
    174e:	f5 07       	cpc	r31, r21
    1750:	20 f0       	brcs	.+8      	; 0x175a <__udivmodsi4_ep>
    1752:	a2 1b       	sub	r26, r18
    1754:	b3 0b       	sbc	r27, r19
    1756:	e4 0b       	sbc	r30, r20
    1758:	f5 0b       	sbc	r31, r21

0000175a <__udivmodsi4_ep>:
    175a:	66 1f       	adc	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	1a 94       	dec	r1
    1764:	69 f7       	brne	.-38     	; 0x1740 <__udivmodsi4_loop>
    1766:	60 95       	com	r22
    1768:	70 95       	com	r23
    176a:	80 95       	com	r24
    176c:	90 95       	com	r25
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	bd 01       	movw	r22, r26
    1774:	cf 01       	movw	r24, r30
    1776:	08 95       	ret

00001778 <__muluhisi3>:
    1778:	3a d0       	rcall	.+116    	; 0x17ee <__umulhisi3>
    177a:	a5 9f       	mul	r26, r21
    177c:	90 0d       	add	r25, r0
    177e:	b4 9f       	mul	r27, r20
    1780:	90 0d       	add	r25, r0
    1782:	a4 9f       	mul	r26, r20
    1784:	80 0d       	add	r24, r0
    1786:	91 1d       	adc	r25, r1
    1788:	11 24       	eor	r1, r1
    178a:	08 95       	ret

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	09 94       	ijmp

000017be <__epilogue_restores__>:
    17be:	2a 88       	ldd	r2, Y+18	; 0x12
    17c0:	39 88       	ldd	r3, Y+17	; 0x11
    17c2:	48 88       	ldd	r4, Y+16	; 0x10
    17c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    17c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    17cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d0:	b9 84       	ldd	r11, Y+9	; 0x09
    17d2:	c8 84       	ldd	r12, Y+8	; 0x08
    17d4:	df 80       	ldd	r13, Y+7	; 0x07
    17d6:	ee 80       	ldd	r14, Y+6	; 0x06
    17d8:	fd 80       	ldd	r15, Y+5	; 0x05
    17da:	0c 81       	ldd	r16, Y+4	; 0x04
    17dc:	1b 81       	ldd	r17, Y+3	; 0x03
    17de:	aa 81       	ldd	r26, Y+2	; 0x02
    17e0:	b9 81       	ldd	r27, Y+1	; 0x01
    17e2:	ce 0f       	add	r28, r30
    17e4:	d1 1d       	adc	r29, r1
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	ed 01       	movw	r28, r26
    17ec:	08 95       	ret

000017ee <__umulhisi3>:
    17ee:	a2 9f       	mul	r26, r18
    17f0:	b0 01       	movw	r22, r0
    17f2:	b3 9f       	mul	r27, r19
    17f4:	c0 01       	movw	r24, r0
    17f6:	a3 9f       	mul	r26, r19
    17f8:	01 d0       	rcall	.+2      	; 0x17fc <__umulhisi3+0xe>
    17fa:	b2 9f       	mul	r27, r18
    17fc:	70 0d       	add	r23, r0
    17fe:	81 1d       	adc	r24, r1
    1800:	11 24       	eor	r1, r1
    1802:	91 1d       	adc	r25, r1
    1804:	08 95       	ret

00001806 <_exit>:
    1806:	f8 94       	cli

00001808 <__stop_program>:
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <__stop_program>
