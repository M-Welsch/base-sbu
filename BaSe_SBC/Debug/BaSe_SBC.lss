
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  000018d9  0000198d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fb  000096de  000016de  00001792  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b6  00803e04  00803e04  00001991  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000066e1  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002625  00000000  00000000  000084ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e68  00000000  00000000  0000aad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000090c  00000000  00000000  0000c93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021b9  00000000  00000000  0000d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015d1  00000000  00000000  0000f401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  000109d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	1a c1       	rjmp	.+564    	; 0x23c <__vector_3>
       8:	41 c1       	rjmp	.+642    	; 0x28c <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	1d c5       	rjmp	.+2618   	; 0xa48 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	ae c1       	rjmp	.+860    	; 0x372 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	a8 c6       	rjmp	.+3408   	; 0xd7e <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e9 ed       	ldi	r30, 0xD9	; 217
      48:	f8 e1       	ldi	r31, 0x18	; 24
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	aa 3b       	cpi	r26, 0xBA	; 186
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	2c d2       	rcall	.+1112   	; 0x4c0 <main>
      68:	38 cb       	rjmp	.-2448   	; 0xfffff6da <__eeprom_end+0xff7ef6da>

0000006a <__bad_interrupt>:
      6a:	2c c1       	rjmp	.+600    	; 0x2c4 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <set_interrupts_for_buttons>:
     17c:	e0 e0       	ldi	r30, 0x00	; 0
     17e:	f4 e0       	ldi	r31, 0x04	; 4
     180:	82 89       	ldd	r24, Z+18	; 0x12
     182:	83 60       	ori	r24, 0x03	; 3
     184:	82 8b       	std	Z+18, r24	; 0x12
     186:	83 89       	ldd	r24, Z+19	; 0x13
     188:	83 60       	ori	r24, 0x03	; 3
     18a:	83 8b       	std	Z+19, r24	; 0x13
     18c:	08 95       	ret

0000018e <led_hmi_on>:
     18e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <current_pwr_state>
     192:	88 23       	and	r24, r24
     194:	19 f0       	breq	.+6      	; 0x19c <led_hmi_on+0xe>
     196:	80 e1       	ldi	r24, 0x10	; 16
     198:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     19c:	08 95       	ret

0000019e <led_hmi_off>:
     19e:	80 e1       	ldi	r24, 0x10	; 16
     1a0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1a4:	08 95       	ret

000001a6 <toggle_hmi_led>:
     1a6:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <current_pwr_state>
     1aa:	88 23       	and	r24, r24
     1ac:	21 f0       	breq	.+8      	; 0x1b6 <toggle_hmi_led+0x10>
     1ae:	80 e1       	ldi	r24, 0x10	; 16
     1b0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     1b4:	08 95       	ret
     1b6:	80 e1       	ldi	r24, 0x10	; 16
     1b8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1bc:	08 95       	ret

000001be <dim_display>:
     1be:	18 16       	cp	r1, r24
     1c0:	19 06       	cpc	r1, r25
     1c2:	44 f4       	brge	.+16     	; 0x1d4 <dim_display+0x16>
     1c4:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <current_pwr_state>
     1c8:	88 23       	and	r24, r24
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <dim_display+0x16>
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1d2:	08 95       	ret
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1da:	08 95       	ret

000001dc <display_enable>:
     1dc:	e0 e0       	ldi	r30, 0x00	; 0
     1de:	f4 e0       	ldi	r31, 0x04	; 4
     1e0:	80 e8       	ldi	r24, 0x80	; 128
     1e2:	85 83       	std	Z+5, r24	; 0x05
     1e4:	92 e4       	ldi	r25, 0x42	; 66
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <display_enable+0xa>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <display_enable+0x10>
     1ec:	86 83       	std	Z+6, r24	; 0x06
     1ee:	82 e4       	ldi	r24, 0x42	; 66
     1f0:	8a 95       	dec	r24
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <display_enable+0x14>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <display_enable+0x1a>
     1f6:	08 95       	ret

000001f8 <set_display_data_pins>:
     1f8:	e0 e4       	ldi	r30, 0x40	; 64
     1fa:	f4 e0       	ldi	r31, 0x04	; 4
     1fc:	94 81       	ldd	r25, Z+4	; 0x04
     1fe:	90 7f       	andi	r25, 0xF0	; 240
     200:	94 83       	std	Z+4, r25	; 0x04
     202:	94 81       	ldd	r25, Z+4	; 0x04
     204:	8f 70       	andi	r24, 0x0F	; 15
     206:	98 2b       	or	r25, r24
     208:	94 83       	std	Z+4, r25	; 0x04
     20a:	08 95       	ret

0000020c <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     20c:	80 e4       	ldi	r24, 0x40	; 64
     20e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     212:	08 95       	ret

00000214 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     214:	80 e4       	ldi	r24, 0x40	; 64
     216:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     21a:	08 95       	ret

0000021c <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     21c:	e0 e2       	ldi	r30, 0x20	; 32
     21e:	f4 e0       	ldi	r31, 0x04	; 4
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     224:	81 83       	std	Z+1, r24	; 0x01
     226:	08 95       	ret

00000228 <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     22e:	08 95       	ret

00000230 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	85 89       	ldd	r24, Z+21	; 0x15
     236:	89 60       	ori	r24, 0x09	; 9
     238:	85 8b       	std	Z+21, r24	; 0x15
     23a:	08 95       	ret

0000023c <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	8f 93       	push	r24
     248:	ef 93       	push	r30
     24a:	ff 93       	push	r31
	if(PORTA_INTFLAGS & button_0) {
     24c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     250:	82 ff       	sbrs	r24, 2
     252:	08 c0       	rjmp	.+16     	; 0x264 <__vector_3+0x28>
		flag_button_0_pressed = true;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     25a:	e9 e0       	ldi	r30, 0x09	; 9
     25c:	f4 e0       	ldi	r31, 0x04	; 4
     25e:	80 81       	ld	r24, Z
     260:	84 70       	andi	r24, 0x04	; 4
     262:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     264:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     268:	83 ff       	sbrs	r24, 3
     26a:	08 c0       	rjmp	.+16     	; 0x27c <__vector_3+0x40>
		flag_button_1_pressed = true;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     272:	e9 e0       	ldi	r30, 0x09	; 9
     274:	f4 e0       	ldi	r31, 0x04	; 4
     276:	80 81       	ld	r24, Z
     278:	88 70       	andi	r24, 0x08	; 8
     27a:	80 83       	st	Z, r24
	}
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	8f 91       	pop	r24
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_4>:

ISR(PORTB_PORT_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	8f 93       	push	r24
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     29c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <__vector_4+0x28>
		flag_heartbeat = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     2aa:	e9 e2       	ldi	r30, 0x29	; 41
     2ac:	f4 e0       	ldi	r31, 0x04	; 4
     2ae:	80 81       	ld	r24, Z
     2b0:	80 72       	andi	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     2b4:	ff 91       	pop	r31
     2b6:	ef 91       	pop	r30
     2b8:	8f 91       	pop	r24
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <__vector_default>:

ISR(BADISR_vect)
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	1f 93       	push	r17
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	4f 93       	push	r20
     2da:	5f 93       	push	r21
     2dc:	6f 93       	push	r22
     2de:	7f 93       	push	r23
     2e0:	8f 93       	push	r24
     2e2:	9f 93       	push	r25
     2e4:	af 93       	push	r26
     2e6:	bf 93       	push	r27
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
     2f0:	c4 e1       	ldi	r28, 0x14	; 20
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     2f4:	68 94       	set
     2f6:	ee 24       	eor	r14, r14
     2f8:	e5 f8       	bld	r14, 5
     2fa:	ff 24       	eor	r15, r15
     2fc:	f2 f8       	bld	r15, 2
     2fe:	10 e1       	ldi	r17, 0x10	; 16
ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
	{
		led_hmi_on();
     300:	46 df       	rcall	.-372    	; 0x18e <led_hmi_on>
     302:	8f e4       	ldi	r24, 0x4F	; 79
     304:	93 ec       	ldi	r25, 0xC3	; 195
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <__vector_default+0x42>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_default+0x48>
     30c:	00 00       	nop
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     30e:	f7 01       	movw	r30, r14
     310:	16 83       	std	Z+6, r17	; 0x06
     312:	8f e4       	ldi	r24, 0x4F	; 79
     314:	93 ec       	ldi	r25, 0xC3	; 195
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <__vector_default+0x52>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <__vector_default+0x58>
     31c:	00 00       	nop
     31e:	21 97       	sbiw	r28, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     320:	79 f7       	brne	.-34     	; 0x300 <__vector_default+0x3c>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     322:	ff 91       	pop	r31
     324:	ef 91       	pop	r30
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	bf 91       	pop	r27
     32c:	af 91       	pop	r26
     32e:	9f 91       	pop	r25
     330:	8f 91       	pop	r24
     332:	7f 91       	pop	r23
     334:	6f 91       	pop	r22
     336:	5f 91       	pop	r21
     338:	4f 91       	pop	r20
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	1f 91       	pop	r17
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     34e:	e0 e0       	ldi	r30, 0x00	; 0
     350:	fa e0       	ldi	r31, 0x0A	; 10
     352:	8b e2       	ldi	r24, 0x2B	; 43
     354:	9a e0       	ldi	r25, 0x0A	; 10
     356:	86 a3       	std	Z+38, r24	; 0x26
     358:	97 a3       	std	Z+39, r25	; 0x27
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	82 87       	std	Z+10, r24	; 0x0a
     35e:	08 95       	ret

00000360 <init_heatbeat_monitor>:
     360:	67 df       	rcall	.-306    	; 0x230 <setup_interrupt_for_hb_edge_detection>
     362:	f5 df       	rcall	.-22     	; 0x34e <setup_interrupt_timeout_detection>
     364:	08 95       	ret

00000366 <heartbeat_monitor>:
     366:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_heartbeat>
     36a:	81 11       	cpse	r24, r1
     36c:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_heartbeat>
     370:	08 95       	ret

00000372 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     37c:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_bpi_heartbeat_ok>
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     38a:	8c ec       	ldi	r24, 0xCC	; 204
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     392:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     396:	08 95       	ret

00000398 <show_main_menu>:
}

/* Menus */

void show_main_menu() {
	display_clear();
     398:	9c d2       	rcall	.+1336   	; 0x8d2 <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     39a:	80 ee       	ldi	r24, 0xE0	; 224
     39c:	96 e9       	ldi	r25, 0x96	; 150
     39e:	86 d2       	rcall	.+1292   	; 0x8ac <display_write_string>
	button0_action = show_menu_timestamp;
     3a0:	84 ef       	ldi	r24, 0xF4	; 244
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button0_action>
     3a8:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button0_action+0x1>
	button1_action = show_menu_actions;	
     3ac:	8d ed       	ldi	r24, 0xDD	; 221
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <button1_action>
     3b4:	90 93 13 3e 	sts	0x3E13, r25	; 0x803e13 <button1_action+0x1>
     3b8:	08 95       	ret

000003ba <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     3ba:	8d ed       	ldi	r24, 0xDD	; 221
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     3c2:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     3c6:	85 d2       	rcall	.+1290   	; 0x8d2 <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	97 e9       	ldi	r25, 0x97	; 151
     3cc:	6f d2       	rcall	.+1246   	; 0x8ac <display_write_string>
	button0_action = wake_bcu_and_do_backup_now;
     3ce:	89 e0       	ldi	r24, 0x09	; 9
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button0_action>
     3d6:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button0_action+0x1>
	button1_action = wake_bcu;	
     3da:	87 e1       	ldi	r24, 0x17	; 23
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <button1_action>
     3e2:	90 93 13 3e 	sts	0x3E13, r25	; 0x803e13 <button1_action+0x1>
     3e6:	08 95       	ret

000003e8 <show_menu_timestamp>:
}

void show_menu_timestamp() {
	show_menu = show_menu_timestamp;
     3e8:	84 ef       	ldi	r24, 0xF4	; 244
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     3f0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     3f4:	6e d2       	rcall	.+1244   	; 0x8d2 <display_clear>
	display_write_string(human_readable_timestamp_next_bu);
     3f6:	89 e1       	ldi	r24, 0x19	; 25
     3f8:	9e e3       	ldi	r25, 0x3E	; 62
     3fa:	58 d2       	rcall	.+1200   	; 0x8ac <display_write_string>
	button0_action = back_to_main_menu;
     3fc:	85 ec       	ldi	r24, 0xC5	; 197
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button0_action>
     404:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button0_action+0x1>
	button1_action = back_to_main_menu;
     408:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <button1_action>
     40c:	90 93 13 3e 	sts	0x3E13, r25	; 0x803e13 <button1_action+0x1>
     410:	08 95       	ret

00000412 <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     412:	5f d2       	rcall	.+1214   	; 0x8d2 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     414:	84 e2       	ldi	r24, 0x24	; 36
     416:	97 e9       	ldi	r25, 0x97	; 151
     418:	49 d2       	rcall	.+1170   	; 0x8ac <display_write_string>
	flag_schedule_backup_now = true;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_schedule_backup_now>
	flag_pwr_state_change_request = true;
     420:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_pwr_state_change_request>
	next_pwr_state = active;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <next_pwr_state>
	goto_pwr_state(next_pwr_state);
     42a:	96 d2       	rcall	.+1324   	; 0x958 <goto_pwr_state>
     42c:	08 95       	ret

0000042e <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     42e:	51 d2       	rcall	.+1186   	; 0x8d2 <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     430:	84 e2       	ldi	r24, 0x24	; 36
     432:	97 e9       	ldi	r25, 0x97	; 151
     434:	3b d2       	rcall	.+1142   	; 0x8ac <display_write_string>
	flag_pwr_state_change_request = true;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_pwr_state_change_request>
	next_pwr_state = active;
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <next_pwr_state>
	goto_pwr_state(next_pwr_state);	
     442:	8a d2       	rcall	.+1300   	; 0x958 <goto_pwr_state>
     444:	08 95       	ret

00000446 <mainloop_standby>:
	toggle_hmi_led();
	// send_sbc_heartbeat_count_to_bpi();
}

void mainloop_standby() {
	if (flag_button_0_pressed == true) {
     446:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <flag_button_0_pressed>
     44a:	88 23       	and	r24, r24
     44c:	51 f0       	breq	.+20     	; 0x462 <mainloop_standby+0x1c>
		flag_button_0_pressed = false;
     44e:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_button_0_pressed>
		flag_pwr_state_change_request = true;
     452:	81 e0       	ldi	r24, 0x01	; 1
		next_pwr_state = display_on;
     454:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <next_pwr_state>
	}
	
	if (flag_button_1_pressed == true) {
     458:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_button_1_pressed>
     45c:	81 11       	cpse	r24, r1
     45e:	05 c0       	rjmp	.+10     	; 0x46a <mainloop_standby+0x24>
     460:	0e c0       	rjmp	.+28     	; 0x47e <mainloop_standby+0x38>
     462:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_button_1_pressed>
     466:	88 23       	and	r24, r24
     468:	31 f0       	breq	.+12     	; 0x476 <mainloop_standby+0x30>
		flag_button_1_pressed = false;
     46a:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_button_1_pressed>
		flag_pwr_state_change_request = true;
		next_pwr_state = display_on;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <next_pwr_state>
     474:	04 c0       	rjmp	.+8      	; 0x47e <mainloop_standby+0x38>
	}
	
	if (flag_pwr_state_change_request == true) {
     476:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_pwr_state_change_request>
     47a:	88 23       	and	r24, r24
     47c:	29 f0       	breq	.+10     	; 0x488 <mainloop_standby+0x42>
		flag_pwr_state_change_request = false;
     47e:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_pwr_state_change_request>
		goto_pwr_state(next_pwr_state);
     482:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <next_pwr_state>
     486:	68 d2       	rcall	.+1232   	; 0x958 <goto_pwr_state>
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	80 e7       	ldi	r24, 0x70	; 112
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	80 40       	sbci	r24, 0x00	; 0
     492:	90 40       	sbci	r25, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <mainloop_standby+0x48>
     496:	00 c0       	rjmp	.+0      	; 0x498 <mainloop_standby+0x52>
     498:	00 00       	nop
     49a:	08 95       	ret

0000049c <init_sbu>:
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void init_sbu()
{
	init_flags();
     49c:	37 de       	rcall	.-914    	; 0x10c <init_flags>
	init_pins();
     49e:	4a de       	rcall	.-876    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     4a0:	5f df       	rcall	.-322    	; 0x360 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     4a2:	6c de       	rcall	.-808    	; 0x17c <set_interrupts_for_buttons>
	init_uart();
     4a4:	06 d3       	rcall	.+1548   	; 0xab2 <init_uart>
	init_display();
     4a6:	52 d1       	rcall	.+676    	; 0x74c <init_display>
	adc_init();
     4a8:	ec dd       	rcall	.-1064   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "next BU in 168h\n09.01.1990 12:57");
     4aa:	81 e2       	ldi	r24, 0x21	; 33
     4ac:	e4 e4       	ldi	r30, 0x44	; 68
     4ae:	f7 e9       	ldi	r31, 0x97	; 151
     4b0:	a9 e1       	ldi	r26, 0x19	; 25
     4b2:	be e3       	ldi	r27, 0x3E	; 62
     4b4:	01 90       	ld	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	8a 95       	dec	r24
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <init_sbu+0x18>
	sei();
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <main>:
}

int main(void)
{
	init_sbu();
     4c0:	ed df       	rcall	.-38     	; 0x49c <init_sbu>

	display_write_string("Standby Unit\nready!");
     4c2:	85 e6       	ldi	r24, 0x65	; 101
     4c4:	97 e9       	ldi	r25, 0x97	; 151
     4c6:	f2 d1       	rcall	.+996    	; 0x8ac <display_write_string>
	USART0_sendString("I:STARTED");
     4c8:	89 e7       	ldi	r24, 0x79	; 121
     4ca:	97 e9       	ldi	r25, 0x97	; 151
     4cc:	05 d3       	rcall	.+1546   	; 0xad8 <USART0_sendString>
	dim_display(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	75 de       	rcall	.-790    	; 0x1be <dim_display>
	
	current_pwr_state = active;
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4da:	c5 e9       	ldi	r28, 0x95	; 149
     4dc:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4de:	0f 2e       	mov	r0, r31
     4e0:	f6 e8       	ldi	r31, 0x86	; 134
     4e2:	cf 2e       	mov	r12, r31
     4e4:	f3 e0       	ldi	r31, 0x03	; 3
     4e6:	df 2e       	mov	r13, r31
     4e8:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4ea:	0f 2e       	mov	r0, r31
     4ec:	f3 e2       	ldi	r31, 0x23	; 35
     4ee:	ef 2e       	mov	r14, r31
     4f0:	f2 e0       	ldi	r31, 0x02	; 2
     4f2:	ff 2e       	mov	r15, r31
     4f4:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4f6:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4f8:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <current_pwr_state>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	39 f0       	breq	.+14     	; 0x50e <main+0x4e>
     500:	20 f0       	brcs	.+8      	; 0x50a <main+0x4a>
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	29 f4       	brne	.+10     	; 0x510 <main+0x50>
			case active:
				mainloop = mainloop_active;
     506:	e8 01       	movw	r28, r16
     508:	03 c0       	rjmp	.+6      	; 0x510 <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     50a:	e7 01       	movw	r28, r14
				break;
     50c:	01 c0       	rjmp	.+2      	; 0x510 <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     50e:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     510:	fe 01       	movw	r30, r28
     512:	09 95       	icall
    }
     514:	f1 cf       	rjmp	.-30     	; 0x4f8 <main+0x38>

00000516 <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     516:	e0 e5       	ldi	r30, 0x50	; 80
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     520:	80 81       	ld	r24, Z
     522:	81 60       	ori	r24, 0x01	; 1
     524:	80 83       	st	Z, r24
	sleep_cpu();
     526:	88 95       	sleep
     528:	08 95       	ret

0000052a <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	47 de       	rcall	.-882    	; 0x1be <dim_display>
	heartbeat_monitor();
     530:	1a df       	rcall	.-460    	; 0x366 <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     532:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_bpi_heartbeat_ok>
     536:	81 11       	cpse	r24, r1
     538:	01 c0       	rjmp	.+2      	; 0x53c <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     53a:	76 de       	rcall	.-788    	; 0x228 <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     53c:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <flag_button_0_pressed>
     540:	88 23       	and	r24, r24
     542:	19 f0       	breq	.+6      	; 0x54a <mainloop_active+0x20>
		led_hmi_off();
     544:	2c de       	rcall	.-936    	; 0x19e <led_hmi_off>
		flag_button_0_pressed = false;
     546:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_button_0_pressed>
	}
	
	if (flag_button_1_pressed == true) {
     54a:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_button_1_pressed>
     54e:	88 23       	and	r24, r24
     550:	29 f0       	breq	.+10     	; 0x55c <mainloop_active+0x32>
		flag_button_1_pressed = false;
     552:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     556:	83 e8       	ldi	r24, 0x83	; 131
     558:	97 e9       	ldi	r25, 0x97	; 151
     55a:	be d2       	rcall	.+1404   	; 0xad8 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     55c:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_usart_string_receive_complete>
     560:	88 23       	and	r24, r24
     562:	19 f0       	breq	.+6      	; 0x56a <mainloop_active+0x40>
		USART0_process_incoming_message();
     564:	3f d3       	rcall	.+1662   	; 0xbe4 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     566:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     56a:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_string_for_display_received>
     56e:	88 23       	and	r24, r24
     570:	69 f0       	breq	.+26     	; 0x58c <mainloop_active+0x62>
		flag_string_for_display_received = false;
     572:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_string_for_display_received>
		display_clear();
     576:	ad d1       	rcall	.+858    	; 0x8d2 <display_clear>
		display_write_string(display_line1_content_from_bcu);
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	9e e3       	ldi	r25, 0x3E	; 62
     57c:	97 d1       	rcall	.+814    	; 0x8ac <display_write_string>
		display_next_line();
     57e:	8c d1       	rcall	.+792    	; 0x898 <display_next_line>
		display_write_string(display_line2_content_from_bcu);
     580:	8f e3       	ldi	r24, 0x3F	; 63
     582:	9e e3       	ldi	r25, 0x3E	; 62
     584:	93 d1       	rcall	.+806    	; 0x8ac <display_write_string>
		USART0_sendString_w_eol("New Display\n"); //<- line is being received, but no new content on display??
     586:	8d e8       	ldi	r24, 0x8D	; 141
     588:	97 e9       	ldi	r25, 0x97	; 151
     58a:	c7 d2       	rcall	.+1422   	; 0xb1a <USART0_sendString_w_eol>
	}
	
	if (flag_pwr_state_change_request == true) {
     58c:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_pwr_state_change_request>
     590:	88 23       	and	r24, r24
     592:	49 f0       	breq	.+18     	; 0x5a6 <mainloop_active+0x7c>
		display_clear();
     594:	9e d1       	rcall	.+828    	; 0x8d2 <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     596:	8a e9       	ldi	r24, 0x9A	; 154
     598:	97 e9       	ldi	r25, 0x97	; 151
     59a:	88 d1       	rcall	.+784    	; 0x8ac <display_write_string>
		flag_pwr_state_change_request = false;
     59c:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_pwr_state_change_request>
		goto_pwr_state(next_pwr_state);
     5a0:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <next_pwr_state>
     5a4:	d9 d1       	rcall	.+946    	; 0x958 <goto_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     5a6:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_human_readable_timestamp_next_bu_received>
     5aa:	88 23       	and	r24, r24
     5ac:	31 f0       	breq	.+12     	; 0x5ba <mainloop_active+0x90>
		display_clear();
     5ae:	91 d1       	rcall	.+802    	; 0x8d2 <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     5b0:	89 e1       	ldi	r24, 0x19	; 25
     5b2:	9e e3       	ldi	r25, 0x3E	; 62
     5b4:	7b d1       	rcall	.+758    	; 0x8ac <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     5b6:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_human_readable_timestamp_next_bu_received>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     5ba:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_received_seconds_to_next_bu>
     5be:	88 23       	and	r24, r24
     5c0:	09 f1       	breq	.+66     	; 0x604 <mainloop_active+0xda>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     5c2:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <seconds_to_next_bu+0x3>
     5c6:	8f 93       	push	r24
     5c8:	80 91 3c 3e 	lds	r24, 0x3E3C	; 0x803e3c <seconds_to_next_bu+0x2>
     5cc:	8f 93       	push	r24
     5ce:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <seconds_to_next_bu+0x1>
     5d2:	8f 93       	push	r24
     5d4:	80 91 3a 3e 	lds	r24, 0x3E3A	; 0x803e3a <seconds_to_next_bu>
     5d8:	8f 93       	push	r24
     5da:	87 eb       	ldi	r24, 0xB7	; 183
     5dc:	97 e9       	ldi	r25, 0x97	; 151
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	80 e7       	ldi	r24, 0x70	; 112
     5e4:	9e e3       	ldi	r25, 0x3E	; 62
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	5b d5       	rcall	.+2742   	; 0x10a2 <sprintf>
		USART0_sendString_w_eol(buffer);
     5ec:	80 e7       	ldi	r24, 0x70	; 112
     5ee:	9e e3       	ldi	r25, 0x3E	; 62
     5f0:	94 d2       	rcall	.+1320   	; 0xb1a <USART0_sendString_w_eol>
		flag_received_seconds_to_next_bu = false;
     5f2:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5f6:	ec d1       	rcall	.+984    	; 0x9d0 <rtc_write_seconds_to_cmp>
		rtc_setup();
     5f8:	e1 d1       	rcall	.+962    	; 0x9bc <rtc_setup>
     5fa:	8d b7       	in	r24, 0x3d	; 61
     5fc:	9e b7       	in	r25, 0x3e	; 62
     5fe:	08 96       	adiw	r24, 0x08	; 8
     600:	8d bf       	out	0x3d, r24	; 61
     602:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     604:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_goto_sleep>
     608:	88 23       	and	r24, r24
     60a:	79 f0       	breq	.+30     	; 0x62a <mainloop_active+0x100>
		flag_goto_sleep = false;
     60c:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_goto_sleep>
		USART0_sendString_w_eol("going to sleep ...\n");
     610:	84 ed       	ldi	r24, 0xD4	; 212
     612:	97 e9       	ldi	r25, 0x97	; 151
     614:	82 d2       	rcall	.+1284   	; 0xb1a <USART0_sendString_w_eol>
     616:	9f ef       	ldi	r25, 0xFF	; 255
     618:	20 e7       	ldi	r18, 0x70	; 112
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	91 50       	subi	r25, 0x01	; 1
     61e:	20 40       	sbci	r18, 0x00	; 0
     620:	80 40       	sbci	r24, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <mainloop_active+0xf2>
     624:	00 c0       	rjmp	.+0      	; 0x626 <mainloop_active+0xfc>
     626:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     628:	76 df       	rcall	.-276    	; 0x516 <goto_sleep_standby>

	}
	
	if (flag_request_current_measurement == true) {
     62a:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_request_current_measurement>
     62e:	88 23       	and	r24, r24
     630:	d9 f0       	breq	.+54     	; 0x668 <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     632:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     636:	4a dd       	rcall	.-1388   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"Cur: %d", input_current);
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	88 ee       	ldi	r24, 0xE8	; 232
     63e:	97 e9       	ldi	r25, 0x97	; 151
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	80 e7       	ldi	r24, 0x70	; 112
     646:	9e e3       	ldi	r25, 0x3E	; 62
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	2a d5       	rcall	.+2644   	; 0x10a2 <sprintf>
		USART0_sendString_w_eol(buffer);
     64e:	80 e7       	ldi	r24, 0x70	; 112
     650:	9e e3       	ldi	r25, 0x3E	; 62
     652:	63 d2       	rcall	.+1222   	; 0xb1a <USART0_sendString_w_eol>
		display_clear();
     654:	3e d1       	rcall	.+636    	; 0x8d2 <display_clear>
		display_write_string(buffer);
     656:	80 e7       	ldi	r24, 0x70	; 112
     658:	9e e3       	ldi	r25, 0x3E	; 62
     65a:	28 d1       	rcall	.+592    	; 0x8ac <display_write_string>
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
	}
	
	if	(flag_request_temperature_measurement == true) {
     668:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_request_temperature_measurement>
     66c:	88 23       	and	r24, r24
     66e:	d9 f0       	breq	.+54     	; 0x6a6 <mainloop_active+0x17c>
		flag_request_temperature_measurement = false;
     670:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     674:	37 dd       	rcall	.-1426   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TMP: %d", temperature);
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	80 ef       	ldi	r24, 0xF0	; 240
     67c:	97 e9       	ldi	r25, 0x97	; 151
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	80 e7       	ldi	r24, 0x70	; 112
     684:	9e e3       	ldi	r25, 0x3E	; 62
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0b d5       	rcall	.+2582   	; 0x10a2 <sprintf>
		USART0_sendString_w_eol(buffer);
     68c:	80 e7       	ldi	r24, 0x70	; 112
     68e:	9e e3       	ldi	r25, 0x3E	; 62
     690:	44 d2       	rcall	.+1160   	; 0xb1a <USART0_sendString_w_eol>
		display_clear();
     692:	1f d1       	rcall	.+574    	; 0x8d2 <display_clear>
		display_write_string(buffer);
     694:	80 e7       	ldi	r24, 0x70	; 112
     696:	9e e3       	ldi	r25, 0x3E	; 62
     698:	09 d1       	rcall	.+530    	; 0x8ac <display_write_string>
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
	}
	
	if (flag_request_3v3_measurement == true) {
     6a6:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_request_3v3_measurement>
     6aa:	88 23       	and	r24, r24
     6ac:	d9 f0       	breq	.+54     	; 0x6e4 <mainloop_active+0x1ba>
		flag_request_3v3_measurement = false;
     6ae:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     6b2:	00 dd       	rcall	.-1536   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V3: %d", voltage_3v3);
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	88 ef       	ldi	r24, 0xF8	; 248
     6ba:	97 e9       	ldi	r25, 0x97	; 151
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	80 e7       	ldi	r24, 0x70	; 112
     6c2:	9e e3       	ldi	r25, 0x3E	; 62
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	ec d4       	rcall	.+2520   	; 0x10a2 <sprintf>
		USART0_sendString_w_eol(buffer);
     6ca:	80 e7       	ldi	r24, 0x70	; 112
     6cc:	9e e3       	ldi	r25, 0x3E	; 62
     6ce:	25 d2       	rcall	.+1098   	; 0xb1a <USART0_sendString_w_eol>
		display_clear();
     6d0:	00 d1       	rcall	.+512    	; 0x8d2 <display_clear>
		display_write_string(buffer);
     6d2:	80 e7       	ldi	r24, 0x70	; 112
     6d4:	9e e3       	ldi	r25, 0x3E	; 62
     6d6:	ea d0       	rcall	.+468    	; 0x8ac <display_write_string>
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	20 e7       	ldi	r18, 0x70	; 112
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	91 50       	subi	r25, 0x01	; 1
     6ec:	20 40       	sbci	r18, 0x00	; 0
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <mainloop_active+0x1c0>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <mainloop_active+0x1ca>
     6f4:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     6f6:	57 dd       	rcall	.-1362   	; 0x1a6 <toggle_hmi_led>
     6f8:	08 95       	ret

000006fa <goto_sleep_idle>:
	sleep_cpu();
}

void goto_sleep_idle()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_IDLE_gc;
     6fa:	e0 e5       	ldi	r30, 0x50	; 80
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     702:	80 81       	ld	r24, Z
     704:	81 60       	ori	r24, 0x01	; 1
     706:	80 83       	st	Z, r24
	sleep_cpu();
     708:	88 95       	sleep
     70a:	08 95       	ret

0000070c <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
	dim_display(1);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	56 dd       	rcall	.-1364   	; 0x1be <dim_display>
	show_menu();
     712:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     716:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     71a:	09 95       	icall
	goto_sleep_idle();
     71c:	ee df       	rcall	.-36     	; 0x6fa <goto_sleep_idle>
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     71e:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <flag_button_0_pressed>
     722:	88 23       	and	r24, r24
     724:	39 f0       	breq	.+14     	; 0x734 <mainloop_display_on+0x28>
		flag_button_0_pressed = false;
     726:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_button_0_pressed>
		button0_action();
     72a:	e0 91 14 3e 	lds	r30, 0x3E14	; 0x803e14 <button0_action>
     72e:	f0 91 15 3e 	lds	r31, 0x3E15	; 0x803e15 <button0_action+0x1>
     732:	09 95       	icall
	}
	
	if (flag_button_1_pressed) {
     734:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_button_1_pressed>
     738:	88 23       	and	r24, r24
     73a:	39 f0       	breq	.+14     	; 0x74a <mainloop_display_on+0x3e>
		flag_button_1_pressed = false;
     73c:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_button_1_pressed>
		button1_action();
     740:	e0 91 12 3e 	lds	r30, 0x3E12	; 0x803e12 <button1_action>
     744:	f0 91 13 3e 	lds	r31, 0x3E13	; 0x803e13 <button1_action+0x1>
     748:	09 95       	icall
     74a:	08 95       	ret

0000074c <init_display>:
     74c:	2f e7       	ldi	r18, 0x7F	; 127
     74e:	8a e1       	ldi	r24, 0x1A	; 26
     750:	96 e0       	ldi	r25, 0x06	; 6
     752:	21 50       	subi	r18, 0x01	; 1
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	90 40       	sbci	r25, 0x00	; 0
     758:	e1 f7       	brne	.-8      	; 0x752 <init_display+0x6>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <init_display+0x10>
     75c:	00 00       	nop
     75e:	5a dd       	rcall	.-1356   	; 0x214 <display_clear_rs_pin>
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	4a dd       	rcall	.-1388   	; 0x1f8 <set_display_data_pins>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	3a dd       	rcall	.-1420   	; 0x1dc <display_enable>
     768:	87 e8       	ldi	r24, 0x87	; 135
     76a:	93 e1       	ldi	r25, 0x13	; 19
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <init_display+0x20>
     770:	00 c0       	rjmp	.+0      	; 0x772 <init_display+0x26>
     772:	00 00       	nop
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	40 dd       	rcall	.-1408   	; 0x1f8 <set_display_data_pins>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	30 dd       	rcall	.-1440   	; 0x1dc <display_enable>
     77c:	87 e8       	ldi	r24, 0x87	; 135
     77e:	93 e1       	ldi	r25, 0x13	; 19
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <init_display+0x34>
     784:	00 c0       	rjmp	.+0      	; 0x786 <init_display+0x3a>
     786:	00 00       	nop
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	36 dd       	rcall	.-1428   	; 0x1f8 <set_display_data_pins>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	26 dd       	rcall	.-1460   	; 0x1dc <display_enable>
     790:	87 e8       	ldi	r24, 0x87	; 135
     792:	93 e1       	ldi	r25, 0x13	; 19
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <init_display+0x48>
     798:	00 c0       	rjmp	.+0      	; 0x79a <init_display+0x4e>
     79a:	00 00       	nop
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	2c dd       	rcall	.-1448   	; 0x1f8 <set_display_data_pins>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	1c dd       	rcall	.-1480   	; 0x1dc <display_enable>
     7a4:	87 e8       	ldi	r24, 0x87	; 135
     7a6:	93 e1       	ldi	r25, 0x13	; 19
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <init_display+0x5c>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <init_display+0x62>
     7ae:	00 00       	nop
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	22 dd       	rcall	.-1468   	; 0x1f8 <set_display_data_pins>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	12 dd       	rcall	.-1500   	; 0x1dc <display_enable>
     7b8:	87 e8       	ldi	r24, 0x87	; 135
     7ba:	93 e1       	ldi	r25, 0x13	; 19
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <init_display+0x70>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <init_display+0x76>
     7c2:	00 00       	nop
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	18 dd       	rcall	.-1488   	; 0x1f8 <set_display_data_pins>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	08 dd       	rcall	.-1520   	; 0x1dc <display_enable>
     7cc:	87 e8       	ldi	r24, 0x87	; 135
     7ce:	93 e1       	ldi	r25, 0x13	; 19
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <init_display+0x84>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <init_display+0x8a>
     7d6:	00 00       	nop
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e dd       	rcall	.-1508   	; 0x1f8 <set_display_data_pins>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	fe dc       	rcall	.-1540   	; 0x1dc <display_enable>
     7e0:	87 e8       	ldi	r24, 0x87	; 135
     7e2:	93 e1       	ldi	r25, 0x13	; 19
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <init_display+0x98>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <init_display+0x9e>
     7ea:	00 00       	nop
     7ec:	8c e0       	ldi	r24, 0x0C	; 12
     7ee:	04 dd       	rcall	.-1528   	; 0x1f8 <set_display_data_pins>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	f4 dc       	rcall	.-1560   	; 0x1dc <display_enable>
     7f4:	87 e8       	ldi	r24, 0x87	; 135
     7f6:	93 e1       	ldi	r25, 0x13	; 19
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <init_display+0xac>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <init_display+0xb2>
     7fe:	00 00       	nop
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	fa dc       	rcall	.-1548   	; 0x1f8 <set_display_data_pins>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	ea dc       	rcall	.-1580   	; 0x1dc <display_enable>
     808:	87 e8       	ldi	r24, 0x87	; 135
     80a:	93 e1       	ldi	r25, 0x13	; 19
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <init_display+0xc0>
     810:	00 c0       	rjmp	.+0      	; 0x812 <init_display+0xc6>
     812:	00 00       	nop
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	f0 dc       	rcall	.-1568   	; 0x1f8 <set_display_data_pins>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	e0 dc       	rcall	.-1600   	; 0x1dc <display_enable>
     81c:	87 e8       	ldi	r24, 0x87	; 135
     81e:	93 e1       	ldi	r25, 0x13	; 19
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <init_display+0xd4>
     824:	00 c0       	rjmp	.+0      	; 0x826 <init_display+0xda>
     826:	00 00       	nop
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	e6 dc       	rcall	.-1588   	; 0x1f8 <set_display_data_pins>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	d6 dc       	rcall	.-1620   	; 0x1dc <display_enable>
     830:	87 e8       	ldi	r24, 0x87	; 135
     832:	93 e1       	ldi	r25, 0x13	; 19
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <init_display+0xe8>
     838:	00 c0       	rjmp	.+0      	; 0x83a <init_display+0xee>
     83a:	00 00       	nop
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	dc dc       	rcall	.-1608   	; 0x1f8 <set_display_data_pins>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	cc dc       	rcall	.-1640   	; 0x1dc <display_enable>
     844:	87 e8       	ldi	r24, 0x87	; 135
     846:	93 e1       	ldi	r25, 0x13	; 19
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <init_display+0xfc>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <init_display+0x102>
     84e:	00 00       	nop
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	d2 dc       	rcall	.-1628   	; 0x1f8 <set_display_data_pins>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	c2 dc       	rcall	.-1660   	; 0x1dc <display_enable>
     858:	87 e8       	ldi	r24, 0x87	; 135
     85a:	93 e1       	ldi	r25, 0x13	; 19
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <init_display+0x110>
     860:	00 c0       	rjmp	.+0      	; 0x862 <init_display+0x116>
     862:	00 00       	nop
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	c8 dc       	rcall	.-1648   	; 0x1f8 <set_display_data_pins>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	b8 dc       	rcall	.-1680   	; 0x1dc <display_enable>
     86c:	87 e8       	ldi	r24, 0x87	; 135
     86e:	93 e1       	ldi	r25, 0x13	; 19
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <init_display+0x124>
     874:	00 c0       	rjmp	.+0      	; 0x876 <init_display+0x12a>
     876:	00 00       	nop
     878:	08 95       	ret

0000087a <display_write_char>:
     87a:	cf 93       	push	r28
     87c:	c8 2f       	mov	r28, r24
     87e:	c6 dc       	rcall	.-1652   	; 0x20c <display_set_rs_pin>
     880:	8c 2f       	mov	r24, r28
     882:	82 95       	swap	r24
     884:	8f 70       	andi	r24, 0x0F	; 15
     886:	b8 dc       	rcall	.-1680   	; 0x1f8 <set_display_data_pins>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	a8 dc       	rcall	.-1712   	; 0x1dc <display_enable>
     88c:	8c 2f       	mov	r24, r28
     88e:	b4 dc       	rcall	.-1688   	; 0x1f8 <set_display_data_pins>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	a4 dc       	rcall	.-1720   	; 0x1dc <display_enable>
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <display_next_line>:
     898:	bd dc       	rcall	.-1670   	; 0x214 <display_clear_rs_pin>
     89a:	8c e0       	ldi	r24, 0x0C	; 12
     89c:	ad dc       	rcall	.-1702   	; 0x1f8 <set_display_data_pins>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	9d dc       	rcall	.-1734   	; 0x1dc <display_enable>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	a9 dc       	rcall	.-1710   	; 0x1f8 <set_display_data_pins>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	99 dc       	rcall	.-1742   	; 0x1dc <display_enable>
     8aa:	08 95       	ret

000008ac <display_write_string>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	ac dc       	rcall	.-1704   	; 0x20c <display_set_rs_pin>
     8b4:	88 81       	ld	r24, Y
     8b6:	88 23       	and	r24, r24
     8b8:	49 f0       	breq	.+18     	; 0x8cc <display_write_string+0x20>
     8ba:	21 96       	adiw	r28, 0x01	; 1
     8bc:	8a 30       	cpi	r24, 0x0A	; 10
     8be:	11 f4       	brne	.+4      	; 0x8c4 <display_write_string+0x18>
     8c0:	eb df       	rcall	.-42     	; 0x898 <display_next_line>
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <display_write_string+0x1a>
     8c4:	da df       	rcall	.-76     	; 0x87a <display_write_char>
     8c6:	89 91       	ld	r24, Y+
     8c8:	81 11       	cpse	r24, r1
     8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <display_write_string+0x10>
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     8d2:	a0 dc       	rcall	.-1728   	; 0x214 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 dc       	rcall	.-1760   	; 0x1f8 <set_display_data_pins>
	display_enable(1);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 dc       	rcall	.-1792   	; 0x1dc <display_enable>
	set_display_data_pins(0x01);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	8c dc       	rcall	.-1768   	; 0x1f8 <set_display_data_pins>
	display_enable(1);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	7c dc       	rcall	.-1800   	; 0x1dc <display_enable>
     8e4:	87 ea       	ldi	r24, 0xA7	; 167
     8e6:	91 e6       	ldi	r25, 0x61	; 97
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <display_clear+0x16>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <display_clear+0x1c>
     8ee:	00 00       	nop
     8f0:	08 95       	ret

000008f2 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     8f2:	e0 e0       	ldi	r30, 0x00	; 0
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	84 81       	ldd	r24, Z+4	; 0x04
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     902:	08 95       	ret

00000904 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f4 e0       	ldi	r31, 0x04	; 4
     908:	84 81       	ldd	r24, Z+4	; 0x04
     90a:	8f 7e       	andi	r24, 0xEF	; 239
     90c:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     90e:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     912:	08 95       	ret

00000914 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     914:	e0 e2       	ldi	r30, 0x20	; 32
     916:	f4 e0       	ldi	r31, 0x04	; 4
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	8d 7f       	andi	r24, 0xFD	; 253
     91c:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     924:	08 95       	ret

00000926 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     926:	e0 e2       	ldi	r30, 0x20	; 32
     928:	f4 e0       	ldi	r31, 0x04	; 4
     92a:	84 81       	ldd	r24, Z+4	; 0x04
     92c:	82 60       	ori	r24, 0x02	; 2
     92e:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     930:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     934:	08 95       	ret

00000936 <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     936:	cd df       	rcall	.-102    	; 0x8d2 <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	98 e9       	ldi	r25, 0x98	; 152
     93c:	b7 df       	rcall	.-146    	; 0x8ac <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     93e:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_bpi_heartbeat_ok>
     942:	81 11       	cpse	r24, r1
     944:	fe cf       	rjmp	.-4      	; 0x942 <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     946:	c5 df       	rcall	.-118    	; 0x8d2 <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     948:	8b e1       	ldi	r24, 0x1B	; 27
     94a:	98 e9       	ldi	r25, 0x98	; 152
     94c:	af df       	rcall	.-162    	; 0x8ac <display_write_string>
	while (vcc3v3_present() == true) {
     94e:	d6 db       	rcall	.-2132   	; 0xfc <vcc3v3_present>
     950:	81 11       	cpse	r24, r1
     952:	fd cf       	rjmp	.-6      	; 0x94e <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret

00000958 <goto_pwr_state>:
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void goto_pwr_state(enum pwr_states pwr_state) {
	switch(pwr_state) {
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	89 f0       	breq	.+34     	; 0x97e <goto_pwr_state+0x26>
     95c:	18 f0       	brcs	.+6      	; 0x964 <goto_pwr_state+0xc>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	d1 f0       	breq	.+52     	; 0x996 <goto_pwr_state+0x3e>
     962:	08 95       	ret
		case standby:
			wait_until_bpi_ready_for_shutdown();
     964:	e8 df       	rcall	.-48     	; 0x936 <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     966:	df df       	rcall	.-66     	; 0x926 <disable_bpi_sply>
			dim_display(0);
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	28 dc       	rcall	.-1968   	; 0x1be <dim_display>
			led_hmi_off();
     96e:	17 dc       	rcall	.-2002   	; 0x19e <led_hmi_off>
			disable_5v0_smps();
     970:	c9 df       	rcall	.-110    	; 0x904 <disable_5v0_smps>
			flag_goto_sleep = true;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_goto_sleep>
			current_pwr_state = standby;
     978:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <current_pwr_state>
			break;
     97c:	08 95       	ret
		
		case display_on:
			current_pwr_state = display_on;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <current_pwr_state>
			set_interrupts_for_buttons();
     984:	fb db       	rcall	.-2058   	; 0x17c <set_interrupts_for_buttons>
			enable_5v0_smps();
     986:	b5 df       	rcall	.-150    	; 0x8f2 <enable_5v0_smps>
     988:	86 e4       	ldi	r24, 0x46	; 70
     98a:	90 e1       	ldi	r25, 0x10	; 16
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <goto_pwr_state+0x34>
     990:	00 c0       	rjmp	.+0      	; 0x992 <goto_pwr_state+0x3a>
			_delay_ms(5);
			init_display();
     992:	dc de       	rcall	.-584    	; 0x74c <init_display>
			break;
     994:	08 95       	ret
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			display_write_string("Hello Folks!\nStarting BCU ..");
     996:	85 e3       	ldi	r24, 0x35	; 53
     998:	98 e9       	ldi	r25, 0x98	; 152
     99a:	88 df       	rcall	.-240    	; 0x8ac <display_write_string>
			enable_bpi_sply();
     99c:	bb df       	rcall	.-138    	; 0x914 <enable_bpi_sply>
			current_pwr_state = active;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <current_pwr_state>
     9a4:	08 95       	ret

000009a6 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oszi, devided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     9a6:	e0 e4       	ldi	r30, 0x40	; 64
     9a8:	f1 e0       	ldi	r31, 0x01	; 1
     9aa:	10 86       	std	Z+8, r1	; 0x08
     9ac:	11 86       	std	Z+9, r1	; 0x09
     9ae:	08 95       	ret

000009b0 <rtc_wait_for_all_status_bits_zero>:
     9b0:	e0 e4       	ldi	r30, 0x40	; 64
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	81 81       	ldd	r24, Z+1	; 0x01
     9b6:	81 11       	cpse	r24, r1
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <rtc_wait_for_all_status_bits_zero+0x4>
     9ba:	08 95       	ret

000009bc <rtc_setup>:
}

void rtc_setup(void) {
	rtc_wait_for_all_status_bits_zero();
     9bc:	f9 df       	rcall	.-14     	; 0x9b0 <rtc_wait_for_all_status_bits_zero>
void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	//RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm; // <- one counter increment represents 32 seconds
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV1024_gc | RTC_RTCEN_bm; // <- 1 second
     9be:	e0 e4       	ldi	r30, 0x40	; 64
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	81 ed       	ldi	r24, 0xD1	; 209
     9c4:	80 83       	st	Z, r24
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oszi, devided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	87 83       	std	Z+7, r24	; 0x07
     9ce:	08 95       	ret

000009d0 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     9d8:	c0 90 3a 3e 	lds	r12, 0x3E3A	; 0x803e3a <seconds_to_next_bu>
     9dc:	d0 90 3b 3e 	lds	r13, 0x3E3B	; 0x803e3b <seconds_to_next_bu+0x1>
     9e0:	e0 90 3c 3e 	lds	r14, 0x3E3C	; 0x803e3c <seconds_to_next_bu+0x2>
     9e4:	f0 90 3d 3e 	lds	r15, 0x3E3D	; 0x803e3d <seconds_to_next_bu+0x3>
     9e8:	ff 20       	and	r15, r15
     9ea:	2c f4       	brge	.+10     	; 0x9f6 <rtc_write_seconds_to_cmp+0x26>
     9ec:	8f e1       	ldi	r24, 0x1F	; 31
     9ee:	c8 0e       	add	r12, r24
     9f0:	d1 1c       	adc	r13, r1
     9f2:	e1 1c       	adc	r14, r1
     9f4:	f1 1c       	adc	r15, r1
     9f6:	68 94       	set
     9f8:	14 f8       	bld	r1, 4
     9fa:	f5 94       	asr	r15
     9fc:	e7 94       	ror	r14
     9fe:	d7 94       	ror	r13
     a00:	c7 94       	ror	r12
     a02:	16 94       	lsr	r1
     a04:	d1 f7       	brne	.-12     	; 0x9fa <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     a06:	ff 92       	push	r15
     a08:	ef 92       	push	r14
     a0a:	df 92       	push	r13
     a0c:	cf 92       	push	r12
     a0e:	82 e5       	ldi	r24, 0x52	; 82
     a10:	98 e9       	ldi	r25, 0x98	; 152
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	80 e7       	ldi	r24, 0x70	; 112
     a18:	9e e3       	ldi	r25, 0x3E	; 62
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	41 d3       	rcall	.+1666   	; 0x10a2 <sprintf>
	USART0_sendString_w_eol(buffer);
     a20:	80 e7       	ldi	r24, 0x70	; 112
     a22:	9e e3       	ldi	r25, 0x3E	; 62
     a24:	7a d0       	rcall	.+244    	; 0xb1a <USART0_sendString_w_eol>
	rtc_reset_counter();
     a26:	bf df       	rcall	.-130    	; 0x9a6 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     a28:	8c 2d       	mov	r24, r12
     a2a:	9d 2d       	mov	r25, r13
     a2c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a30:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     a34:	8d b7       	in	r24, 0x3d	; 61
     a36:	9e b7       	in	r25, 0x3e	; 62
     a38:	08 96       	adiw	r24, 0x08	; 8
     a3a:	8d bf       	out	0x3d, r24	; 61
     a3c:	9e bf       	out	0x3e, r25	; 62
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	08 95       	ret

00000a48 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     a6a:	e0 e4       	ldi	r30, 0x40	; 64
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	83 81       	ldd	r24, Z+3	; 0x03
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     a74:	8f e6       	ldi	r24, 0x6F	; 111
     a76:	98 e9       	ldi	r25, 0x98	; 152
     a78:	2f d0       	rcall	.+94     	; 0xad8 <USART0_sendString>
	flag_pwr_state_change_request = true;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_pwr_state_change_request>
	next_pwr_state = display_on;
     a80:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <next_pwr_state>
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     aa6:	e0 e0       	ldi	r30, 0x00	; 0
     aa8:	f8 e0       	ldi	r31, 0x08	; 8
     aaa:	85 81       	ldd	r24, Z+5	; 0x05
     aac:	80 68       	ori	r24, 0x80	; 128
     aae:	85 83       	std	Z+5, r24	; 0x05
     ab0:	08 95       	ret

00000ab2 <init_uart>:
     ab2:	b4 db       	rcall	.-2200   	; 0x21c <set_pb2_txd_and_pb3_rxd>
     ab4:	e0 e0       	ldi	r30, 0x00	; 0
     ab6:	f8 e0       	ldi	r31, 0x08	; 8
     ab8:	8c e6       	ldi	r24, 0x6C	; 108
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	80 87       	std	Z+8, r24	; 0x08
     abe:	91 87       	std	Z+9, r25	; 0x09
     ac0:	80 ec       	ldi	r24, 0xC0	; 192
     ac2:	86 83       	std	Z+6, r24	; 0x06
     ac4:	f0 df       	rcall	.-32     	; 0xaa6 <USART0_enable_rx_complete_interrupt>
     ac6:	08 95       	ret

00000ac8 <USART0_sendChar>:
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f8 e0       	ldi	r31, 0x08	; 8
     acc:	94 81       	ldd	r25, Z+4	; 0x04
     ace:	95 ff       	sbrs	r25, 5
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <USART0_sendChar+0x4>
     ad2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ad6:	08 95       	ret

00000ad8 <USART0_sendString>:
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	8c 01       	movw	r16, r24
     ae6:	7c 01       	movw	r14, r24
     ae8:	c0 e0       	ldi	r28, 0x00	; 0
     aea:	d0 e0       	ldi	r29, 0x00	; 0
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <USART0_sendString+0x20>
     aee:	f7 01       	movw	r30, r14
     af0:	81 91       	ld	r24, Z+
     af2:	7f 01       	movw	r14, r30
     af4:	e9 df       	rcall	.-46     	; 0xac8 <USART0_sendChar>
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	f8 01       	movw	r30, r16
     afa:	01 90       	ld	r0, Z+
     afc:	00 20       	and	r0, r0
     afe:	e9 f7       	brne	.-6      	; 0xafa <USART0_sendString+0x22>
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	e0 1b       	sub	r30, r16
     b04:	f1 0b       	sbc	r31, r17
     b06:	ce 17       	cp	r28, r30
     b08:	df 07       	cpc	r29, r31
     b0a:	88 f3       	brcs	.-30     	; 0xaee <USART0_sendString+0x16>
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	08 95       	ret

00000b1a <USART0_sendString_w_eol>:
     b1a:	de df       	rcall	.-68     	; 0xad8 <USART0_sendString>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	d4 df       	rcall	.-88     	; 0xac8 <USART0_sendChar>
     b20:	08 95       	ret

00000b22 <USART0_read>:
     b22:	e0 e0       	ldi	r30, 0x00	; 0
     b24:	f8 e0       	ldi	r31, 0x08	; 8
     b26:	84 81       	ldd	r24, Z+4	; 0x04
     b28:	88 23       	and	r24, r24
     b2a:	ec f7       	brge	.-6      	; 0xb26 <USART0_read+0x4>
     b2c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b30:	08 95       	ret

00000b32 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	7c 01       	movw	r14, r24
     b44:	6b 01       	movw	r12, r22
     b46:	61 32       	cpi	r22, 0x21	; 33
     b48:	71 05       	cpc	r23, r1
     b4a:	24 f0       	brlt	.+8      	; 0xb54 <USART0_read_string+0x22>
     b4c:	68 94       	set
     b4e:	cc 24       	eor	r12, r12
     b50:	c5 f8       	bld	r12, 5
     b52:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     b54:	dd 20       	and	r13, r13
     b56:	c4 f0       	brlt	.+48     	; 0xb88 <USART0_read_string+0x56>
     b58:	e7 01       	movw	r28, r14
     b5a:	00 e0       	ldi	r16, 0x00	; 0
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	7e 01       	movw	r14, r28
		i++;
     b60:	0f 5f       	subi	r16, 0xFF	; 255
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     b64:	de df       	rcall	.-68     	; 0xb22 <USART0_read>
     b66:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	21 f0       	breq	.+8      	; 0xb74 <USART0_read_string+0x42>
     b6c:	88 23       	and	r24, r24
     b6e:	11 f0       	breq	.+4      	; 0xb74 <USART0_read_string+0x42>
     b70:	8d 30       	cpi	r24, 0x0D	; 13
     b72:	31 f4       	brne	.+12     	; 0xb80 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     b74:	f7 01       	movw	r30, r14
     b76:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     b78:	c0 16       	cp	r12, r16
     b7a:	d1 06       	cpc	r13, r17
     b7c:	3c f4       	brge	.+14     	; 0xb8c <USART0_read_string+0x5a>
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     b80:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     b82:	c0 16       	cp	r12, r16
     b84:	d1 06       	cpc	r13, r17
     b86:	5c f7       	brge	.-42     	; 0xb5e <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     b88:	f7 01       	movw	r30, r14
     b8a:	10 82       	st	Z, r1
	}
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	08 95       	ret

00000b9e <convert_str_to_long>:
		USART0_sendString_w_eol("ACK:3V");
		flag_request_3v3_measurement = true;
	}
}

long convert_str_to_long(char *str) {
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <convert_str_to_long+0xa>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	08 2f       	mov	r16, r24
     bae:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	84 e7       	ldi	r24, 0x74	; 116
     bb6:	98 e9       	ldi	r25, 0x98	; 152
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	5f d2       	rcall	.+1214   	; 0x107c <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     bbe:	4a e0       	ldi	r20, 0x0A	; 10
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	be 01       	movw	r22, r28
     bc4:	6f 5f       	subi	r22, 0xFF	; 255
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	80 2f       	mov	r24, r16
     bca:	91 2f       	mov	r25, r17
     bcc:	02 d1       	rcall	.+516    	; 0xdd2 <strtol>
	return ret;
}
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     bec:	63 e8       	ldi	r22, 0x83	; 131
     bee:	78 e9       	ldi	r23, 0x98	; 152
     bf0:	80 e5       	ldi	r24, 0x50	; 80
     bf2:	9e e3       	ldi	r25, 0x3E	; 62
     bf4:	0c d2       	rcall	.+1048   	; 0x100e <strcmp>
     bf6:	89 2b       	or	r24, r25
     bf8:	19 f4       	brne	.+6      	; 0xc00 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     bfa:	88 e8       	ldi	r24, 0x88	; 136
     bfc:	98 e9       	ldi	r25, 0x98	; 152
     bfe:	8d df       	rcall	.-230    	; 0xb1a <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     c00:	6d e8       	ldi	r22, 0x8D	; 141
     c02:	78 e9       	ldi	r23, 0x98	; 152
     c04:	80 e5       	ldi	r24, 0x50	; 80
     c06:	9e e3       	ldi	r25, 0x3E	; 62
     c08:	fe d1       	rcall	.+1020   	; 0x1006 <strtok>
     c0a:	d8 2f       	mov	r29, r24
     c0c:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     c0e:	6e ed       	ldi	r22, 0xDE	; 222
     c10:	76 e9       	ldi	r23, 0x96	; 150
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	f7 d1       	rcall	.+1006   	; 0x1006 <strtok>
     c18:	08 2f       	mov	r16, r24
     c1a:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	8f e8       	ldi	r24, 0x8F	; 143
     c26:	98 e9       	ldi	r25, 0x98	; 152
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	80 e7       	ldi	r24, 0x70	; 112
     c2e:	9e e3       	ldi	r25, 0x3E	; 62
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	36 d2       	rcall	.+1132   	; 0x10a2 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     c36:	63 ea       	ldi	r22, 0xA3	; 163
     c38:	78 e9       	ldi	r23, 0x98	; 152
     c3a:	8d 2f       	mov	r24, r29
     c3c:	9c 2f       	mov	r25, r28
     c3e:	e7 d1       	rcall	.+974    	; 0x100e <strcmp>
     c40:	2d b7       	in	r18, 0x3d	; 61
     c42:	3e b7       	in	r19, 0x3e	; 62
     c44:	28 5f       	subi	r18, 0xF8	; 248
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	2d bf       	out	0x3d, r18	; 61
     c4a:	3e bf       	out	0x3e, r19	; 62
     c4c:	89 2b       	or	r24, r25
     c4e:	41 f4       	brne	.+16     	; 0xc60 <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_eol("ACK_D1");
     c50:	8f e9       	ldi	r24, 0x9F	; 159
     c52:	98 e9       	ldi	r25, 0x98	; 152
     c54:	62 df       	rcall	.-316    	; 0xb1a <USART0_sendString_w_eol>
		strcpy(display_line1_content_from_bcu, payload);
     c56:	60 2f       	mov	r22, r16
     c58:	71 2f       	mov	r23, r17
     c5a:	80 ea       	ldi	r24, 0xA0	; 160
     c5c:	9e e3       	ldi	r25, 0x3E	; 62
     c5e:	e0 d1       	rcall	.+960    	; 0x1020 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     c60:	6a ea       	ldi	r22, 0xAA	; 170
     c62:	78 e9       	ldi	r23, 0x98	; 152
     c64:	8d 2f       	mov	r24, r29
     c66:	9c 2f       	mov	r25, r28
     c68:	d2 d1       	rcall	.+932    	; 0x100e <strcmp>
     c6a:	89 2b       	or	r24, r25
     c6c:	59 f4       	brne	.+22     	; 0xc84 <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_eol("ACK_D2");
     c6e:	86 ea       	ldi	r24, 0xA6	; 166
     c70:	98 e9       	ldi	r25, 0x98	; 152
     c72:	53 df       	rcall	.-346    	; 0xb1a <USART0_sendString_w_eol>
		strcpy(display_line2_content_from_bcu, payload);
     c74:	60 2f       	mov	r22, r16
     c76:	71 2f       	mov	r23, r17
     c78:	8f e3       	ldi	r24, 0x3F	; 63
     c7a:	9e e3       	ldi	r25, 0x3E	; 62
     c7c:	d1 d1       	rcall	.+930    	; 0x1020 <strcpy>
		flag_string_for_display_received = true;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     c84:	6d ea       	ldi	r22, 0xAD	; 173
     c86:	78 e9       	ldi	r23, 0x98	; 152
     c88:	8d 2f       	mov	r24, r29
     c8a:	9c 2f       	mov	r25, r28
     c8c:	c0 d1       	rcall	.+896    	; 0x100e <strcmp>
     c8e:	89 2b       	or	r24, r25
     c90:	29 f4       	brne	.+10     	; 0xc9c <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_pwr_state_change_request>
		next_pwr_state = standby;
     c98:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     c9c:	60 eb       	ldi	r22, 0xB0	; 176
     c9e:	78 e9       	ldi	r23, 0x98	; 152
     ca0:	8d 2f       	mov	r24, r29
     ca2:	9c 2f       	mov	r25, r28
     ca4:	b4 d1       	rcall	.+872    	; 0x100e <strcmp>
     ca6:	89 2b       	or	r24, r25
     ca8:	11 f5       	brne	.+68     	; 0xcee <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     caa:	1f 93       	push	r17
     cac:	0f 93       	push	r16
     cae:	83 eb       	ldi	r24, 0xB3	; 179
     cb0:	98 e9       	ldi	r25, 0x98	; 152
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	80 e7       	ldi	r24, 0x70	; 112
     cb8:	9e e3       	ldi	r25, 0x3E	; 62
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	f1 d1       	rcall	.+994    	; 0x10a2 <sprintf>
		USART0_sendString_w_eol(buffer);
     cc0:	80 e7       	ldi	r24, 0x70	; 112
     cc2:	9e e3       	ldi	r25, 0x3E	; 62
     cc4:	2a df       	rcall	.-428    	; 0xb1a <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     cc6:	80 2f       	mov	r24, r16
     cc8:	91 2f       	mov	r25, r17
     cca:	69 df       	rcall	.-302    	; 0xb9e <convert_str_to_long>
     ccc:	60 93 3a 3e 	sts	0x3E3A, r22	; 0x803e3a <seconds_to_next_bu>
     cd0:	70 93 3b 3e 	sts	0x3E3B, r23	; 0x803e3b <seconds_to_next_bu+0x1>
     cd4:	80 93 3c 3e 	sts	0x3E3C, r24	; 0x803e3c <seconds_to_next_bu+0x2>
     cd8:	90 93 3d 3e 	sts	0x3E3D, r25	; 0x803e3d <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_received_seconds_to_next_bu>
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     cee:	6e eb       	ldi	r22, 0xBE	; 190
     cf0:	78 e9       	ldi	r23, 0x98	; 152
     cf2:	8d 2f       	mov	r24, r29
     cf4:	9c 2f       	mov	r25, r28
     cf6:	8b d1       	rcall	.+790    	; 0x100e <strcmp>
     cf8:	89 2b       	or	r24, r25
     cfa:	59 f4       	brne	.+22     	; 0xd12 <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     cfc:	60 2f       	mov	r22, r16
     cfe:	71 2f       	mov	r23, r17
     d00:	89 e1       	ldi	r24, 0x19	; 25
     d02:	9e e3       	ldi	r25, 0x3E	; 62
     d04:	8d d1       	rcall	.+794    	; 0x1020 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     d06:	8a e0       	ldi	r24, 0x0A	; 10
     d08:	80 93 29 3e 	sts	0x3E29, r24	; 0x803e29 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     d12:	61 ec       	ldi	r22, 0xC1	; 193
     d14:	78 e9       	ldi	r23, 0x98	; 152
     d16:	8d 2f       	mov	r24, r29
     d18:	9c 2f       	mov	r25, r28
     d1a:	79 d1       	rcall	.+754    	; 0x100e <strcmp>
     d1c:	89 2b       	or	r24, r25
     d1e:	19 f4       	brne	.+6      	; 0xd26 <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     d26:	68 ec       	ldi	r22, 0xC8	; 200
     d28:	78 e9       	ldi	r23, 0x98	; 152
     d2a:	8d 2f       	mov	r24, r29
     d2c:	9c 2f       	mov	r25, r28
     d2e:	6f d1       	rcall	.+734    	; 0x100e <strcmp>
     d30:	89 2b       	or	r24, r25
     d32:	31 f4       	brne	.+12     	; 0xd40 <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_eol("ACK:CC");
     d34:	84 ec       	ldi	r24, 0xC4	; 196
     d36:	98 e9       	ldi	r25, 0x98	; 152
     d38:	f0 de       	rcall	.-544    	; 0xb1a <USART0_sendString_w_eol>
		flag_request_current_measurement = true;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     d40:	6f ec       	ldi	r22, 0xCF	; 207
     d42:	78 e9       	ldi	r23, 0x98	; 152
     d44:	8d 2f       	mov	r24, r29
     d46:	9c 2f       	mov	r25, r28
     d48:	62 d1       	rcall	.+708    	; 0x100e <strcmp>
     d4a:	89 2b       	or	r24, r25
     d4c:	31 f4       	brne	.+12     	; 0xd5a <USART0_process_incoming_message+0x176>
		USART0_sendString_w_eol("ACK:TP");
     d4e:	8b ec       	ldi	r24, 0xCB	; 203
     d50:	98 e9       	ldi	r25, 0x98	; 152
     d52:	e3 de       	rcall	.-570    	; 0xb1a <USART0_sendString_w_eol>
		flag_request_temperature_measurement = true;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     d5a:	66 ed       	ldi	r22, 0xD6	; 214
     d5c:	78 e9       	ldi	r23, 0x98	; 152
     d5e:	8d 2f       	mov	r24, r29
     d60:	9c 2f       	mov	r25, r28
     d62:	55 d1       	rcall	.+682    	; 0x100e <strcmp>
     d64:	89 2b       	or	r24, r25
     d66:	31 f4       	brne	.+12     	; 0xd74 <USART0_process_incoming_message+0x190>
		USART0_sendString_w_eol("ACK:3V");
     d68:	82 ed       	ldi	r24, 0xD2	; 210
     d6a:	98 e9       	ldi	r25, 0x98	; 152
     d6c:	d6 de       	rcall	.-596    	; 0xb1a <USART0_sendString_w_eol>
		flag_request_3v3_measurement = true;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_request_3v3_measurement>
	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     da0:	60 e2       	ldi	r22, 0x20	; 32
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e5       	ldi	r24, 0x50	; 80
     da6:	9e e3       	ldi	r25, 0x3E	; 62
     da8:	c4 de       	rcall	.-632    	; 0xb32 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_usart_string_receive_complete>
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <strtol>:
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee ee       	ldi	r30, 0xEE	; 238
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	43 c4       	rjmp	.+2182   	; 0x1662 <__prologue_saves__+0x2>
     ddc:	5c 01       	movw	r10, r24
     dde:	6b 01       	movw	r12, r22
     de0:	7a 01       	movw	r14, r20
     de2:	61 15       	cp	r22, r1
     de4:	71 05       	cpc	r23, r1
     de6:	19 f0       	breq	.+6      	; 0xdee <strtol+0x1c>
     de8:	fb 01       	movw	r30, r22
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	e1 14       	cp	r14, r1
     df0:	f1 04       	cpc	r15, r1
     df2:	29 f0       	breq	.+10     	; 0xdfe <strtol+0x2c>
     df4:	c7 01       	movw	r24, r14
     df6:	02 97       	sbiw	r24, 0x02	; 2
     df8:	83 97       	sbiw	r24, 0x23	; 35
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <strtol+0x2c>
     dfc:	e2 c0       	rjmp	.+452    	; 0xfc2 <strtol+0x1f0>
     dfe:	e5 01       	movw	r28, r10
     e00:	21 96       	adiw	r28, 0x01	; 1
     e02:	f5 01       	movw	r30, r10
     e04:	10 81       	ld	r17, Z
     e06:	81 2f       	mov	r24, r17
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	f4 d0       	rcall	.+488    	; 0xff4 <isspace>
     e0c:	89 2b       	or	r24, r25
     e0e:	11 f0       	breq	.+4      	; 0xe14 <strtol+0x42>
     e10:	5e 01       	movw	r10, r28
     e12:	f5 cf       	rjmp	.-22     	; 0xdfe <strtol+0x2c>
     e14:	1d 32       	cpi	r17, 0x2D	; 45
     e16:	29 f4       	brne	.+10     	; 0xe22 <strtol+0x50>
     e18:	21 96       	adiw	r28, 0x01	; 1
     e1a:	f5 01       	movw	r30, r10
     e1c:	11 81       	ldd	r17, Z+1	; 0x01
     e1e:	01 e0       	ldi	r16, 0x01	; 1
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <strtol+0x5e>
     e22:	1b 32       	cpi	r17, 0x2B	; 43
     e24:	21 f4       	brne	.+8      	; 0xe2e <strtol+0x5c>
     e26:	e5 01       	movw	r28, r10
     e28:	22 96       	adiw	r28, 0x02	; 2
     e2a:	f5 01       	movw	r30, r10
     e2c:	11 81       	ldd	r17, Z+1	; 0x01
     e2e:	00 e0       	ldi	r16, 0x00	; 0
     e30:	e1 14       	cp	r14, r1
     e32:	f1 04       	cpc	r15, r1
     e34:	09 f1       	breq	.+66     	; 0xe78 <strtol+0xa6>
     e36:	f0 e1       	ldi	r31, 0x10	; 16
     e38:	ef 16       	cp	r14, r31
     e3a:	f1 04       	cpc	r15, r1
     e3c:	29 f4       	brne	.+10     	; 0xe48 <strtol+0x76>
     e3e:	3e c0       	rjmp	.+124    	; 0xebc <strtol+0xea>
     e40:	10 e3       	ldi	r17, 0x30	; 48
     e42:	e1 14       	cp	r14, r1
     e44:	f1 04       	cpc	r15, r1
     e46:	21 f1       	breq	.+72     	; 0xe90 <strtol+0xbe>
     e48:	28 e0       	ldi	r18, 0x08	; 8
     e4a:	e2 16       	cp	r14, r18
     e4c:	f1 04       	cpc	r15, r1
     e4e:	01 f1       	breq	.+64     	; 0xe90 <strtol+0xbe>
     e50:	54 f4       	brge	.+20     	; 0xe66 <strtol+0x94>
     e52:	e2 e0       	ldi	r30, 0x02	; 2
     e54:	ee 16       	cp	r14, r30
     e56:	f1 04       	cpc	r15, r1
     e58:	21 f5       	brne	.+72     	; 0xea2 <strtol+0xd0>
     e5a:	81 2c       	mov	r8, r1
     e5c:	91 2c       	mov	r9, r1
     e5e:	a1 2c       	mov	r10, r1
     e60:	b0 e4       	ldi	r27, 0x40	; 64
     e62:	bb 2e       	mov	r11, r27
     e64:	3d c0       	rjmp	.+122    	; 0xee0 <strtol+0x10e>
     e66:	fa e0       	ldi	r31, 0x0A	; 10
     e68:	ef 16       	cp	r14, r31
     e6a:	f1 04       	cpc	r15, r1
     e6c:	39 f0       	breq	.+14     	; 0xe7c <strtol+0xaa>
     e6e:	20 e1       	ldi	r18, 0x10	; 16
     e70:	e2 16       	cp	r14, r18
     e72:	f1 04       	cpc	r15, r1
     e74:	b1 f4       	brne	.+44     	; 0xea2 <strtol+0xd0>
     e76:	2f c0       	rjmp	.+94     	; 0xed6 <strtol+0x104>
     e78:	10 33       	cpi	r17, 0x30	; 48
     e7a:	11 f1       	breq	.+68     	; 0xec0 <strtol+0xee>
     e7c:	fa e0       	ldi	r31, 0x0A	; 10
     e7e:	ef 2e       	mov	r14, r31
     e80:	f1 2c       	mov	r15, r1
     e82:	ac ec       	ldi	r26, 0xCC	; 204
     e84:	8a 2e       	mov	r8, r26
     e86:	98 2c       	mov	r9, r8
     e88:	a8 2c       	mov	r10, r8
     e8a:	ac e0       	ldi	r26, 0x0C	; 12
     e8c:	ba 2e       	mov	r11, r26
     e8e:	28 c0       	rjmp	.+80     	; 0xee0 <strtol+0x10e>
     e90:	78 e0       	ldi	r23, 0x08	; 8
     e92:	e7 2e       	mov	r14, r23
     e94:	f1 2c       	mov	r15, r1
     e96:	81 2c       	mov	r8, r1
     e98:	91 2c       	mov	r9, r1
     e9a:	a1 2c       	mov	r10, r1
     e9c:	e0 e1       	ldi	r30, 0x10	; 16
     e9e:	be 2e       	mov	r11, r30
     ea0:	1f c0       	rjmp	.+62     	; 0xee0 <strtol+0x10e>
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e8       	ldi	r25, 0x80	; 128
     eaa:	97 01       	movw	r18, r14
     eac:	0f 2c       	mov	r0, r15
     eae:	00 0c       	add	r0, r0
     eb0:	44 0b       	sbc	r20, r20
     eb2:	55 0b       	sbc	r21, r21
     eb4:	a9 d3       	rcall	.+1874   	; 0x1608 <__udivmodsi4>
     eb6:	49 01       	movw	r8, r18
     eb8:	5a 01       	movw	r10, r20
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <strtol+0x10e>
     ebc:	10 33       	cpi	r17, 0x30	; 48
     ebe:	59 f4       	brne	.+22     	; 0xed6 <strtol+0x104>
     ec0:	88 81       	ld	r24, Y
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	88 35       	cpi	r24, 0x58	; 88
     ec6:	09 f0       	breq	.+2      	; 0xeca <strtol+0xf8>
     ec8:	bb cf       	rjmp	.-138    	; 0xe40 <strtol+0x6e>
     eca:	19 81       	ldd	r17, Y+1	; 0x01
     ecc:	22 96       	adiw	r28, 0x02	; 2
     ece:	02 60       	ori	r16, 0x02	; 2
     ed0:	80 e1       	ldi	r24, 0x10	; 16
     ed2:	e8 2e       	mov	r14, r24
     ed4:	f1 2c       	mov	r15, r1
     ed6:	81 2c       	mov	r8, r1
     ed8:	91 2c       	mov	r9, r1
     eda:	a1 2c       	mov	r10, r1
     edc:	68 e0       	ldi	r22, 0x08	; 8
     ede:	b6 2e       	mov	r11, r22
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	cb 01       	movw	r24, r22
     ee8:	27 01       	movw	r4, r14
     eea:	0f 2c       	mov	r0, r15
     eec:	00 0c       	add	r0, r0
     eee:	66 08       	sbc	r6, r6
     ef0:	77 08       	sbc	r7, r7
     ef2:	fe 01       	movw	r30, r28
     ef4:	50 ed       	ldi	r21, 0xD0	; 208
     ef6:	35 2e       	mov	r3, r21
     ef8:	31 0e       	add	r3, r17
     efa:	29 e0       	ldi	r18, 0x09	; 9
     efc:	23 15       	cp	r18, r3
     efe:	70 f4       	brcc	.+28     	; 0xf1c <strtol+0x14a>
     f00:	2f eb       	ldi	r18, 0xBF	; 191
     f02:	21 0f       	add	r18, r17
     f04:	2a 31       	cpi	r18, 0x1A	; 26
     f06:	18 f4       	brcc	.+6      	; 0xf0e <strtol+0x13c>
     f08:	39 ec       	ldi	r19, 0xC9	; 201
     f0a:	33 2e       	mov	r3, r19
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <strtol+0x148>
     f0e:	2f e9       	ldi	r18, 0x9F	; 159
     f10:	21 0f       	add	r18, r17
     f12:	2a 31       	cpi	r18, 0x1A	; 26
     f14:	10 f5       	brcc	.+68     	; 0xf5a <strtol+0x188>
     f16:	29 ea       	ldi	r18, 0xA9	; 169
     f18:	32 2e       	mov	r3, r18
     f1a:	31 0e       	add	r3, r17
     f1c:	23 2d       	mov	r18, r3
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	2e 15       	cp	r18, r14
     f22:	3f 05       	cpc	r19, r15
     f24:	d4 f4       	brge	.+52     	; 0xf5a <strtol+0x188>
     f26:	47 fd       	sbrc	r20, 7
     f28:	15 c0       	rjmp	.+42     	; 0xf54 <strtol+0x182>
     f2a:	86 16       	cp	r8, r22
     f2c:	97 06       	cpc	r9, r23
     f2e:	a8 06       	cpc	r10, r24
     f30:	b9 06       	cpc	r11, r25
     f32:	68 f0       	brcs	.+26     	; 0xf4e <strtol+0x17c>
     f34:	a3 01       	movw	r20, r6
     f36:	92 01       	movw	r18, r4
     f38:	58 d3       	rcall	.+1712   	; 0x15ea <__mulsi3>
     f3a:	63 0d       	add	r22, r3
     f3c:	71 1d       	adc	r23, r1
     f3e:	81 1d       	adc	r24, r1
     f40:	91 1d       	adc	r25, r1
     f42:	61 30       	cpi	r22, 0x01	; 1
     f44:	71 05       	cpc	r23, r1
     f46:	81 05       	cpc	r24, r1
     f48:	20 e8       	ldi	r18, 0x80	; 128
     f4a:	92 07       	cpc	r25, r18
     f4c:	10 f0       	brcs	.+4      	; 0xf52 <strtol+0x180>
     f4e:	4f ef       	ldi	r20, 0xFF	; 255
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <strtol+0x182>
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	21 96       	adiw	r28, 0x01	; 1
     f56:	10 81       	ld	r17, Z
     f58:	cc cf       	rjmp	.-104    	; 0xef2 <strtol+0x120>
     f5a:	20 2f       	mov	r18, r16
     f5c:	21 70       	andi	r18, 0x01	; 1
     f5e:	c1 14       	cp	r12, r1
     f60:	d1 04       	cpc	r13, r1
     f62:	71 f0       	breq	.+28     	; 0xf80 <strtol+0x1ae>
     f64:	44 23       	and	r20, r20
     f66:	29 f0       	breq	.+10     	; 0xf72 <strtol+0x1a0>
     f68:	21 97       	sbiw	r28, 0x01	; 1
     f6a:	f6 01       	movw	r30, r12
     f6c:	c0 83       	st	Z, r28
     f6e:	d1 83       	std	Z+1, r29	; 0x01
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <strtol+0x1ae>
     f72:	01 ff       	sbrs	r16, 1
     f74:	19 c0       	rjmp	.+50     	; 0xfa8 <strtol+0x1d6>
     f76:	22 97       	sbiw	r28, 0x02	; 2
     f78:	f6 01       	movw	r30, r12
     f7a:	c0 83       	st	Z, r28
     f7c:	d1 83       	std	Z+1, r29	; 0x01
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <strtol+0x1d6>
     f80:	47 ff       	sbrs	r20, 7
     f82:	12 c0       	rjmp	.+36     	; 0xfa8 <strtol+0x1d6>
     f84:	22 23       	and	r18, r18
     f86:	29 f0       	breq	.+10     	; 0xf92 <strtol+0x1c0>
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e8       	ldi	r25, 0x80	; 128
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <strtol+0x1c8>
     f92:	6f ef       	ldi	r22, 0xFF	; 255
     f94:	7f ef       	ldi	r23, 0xFF	; 255
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f e7       	ldi	r25, 0x7F	; 127
     f9a:	22 e2       	ldi	r18, 0x22	; 34
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	20 93 b2 3e 	sts	0x3EB2, r18	; 0x803eb2 <errno>
     fa2:	30 93 b3 3e 	sts	0x3EB3, r19	; 0x803eb3 <errno+0x1>
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <strtol+0x1e8>
     fa8:	22 23       	and	r18, r18
     faa:	81 f0       	breq	.+32     	; 0xfcc <strtol+0x1fa>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	46 2f       	mov	r20, r22
     fbc:	37 2f       	mov	r19, r23
     fbe:	28 2f       	mov	r18, r24
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <strtol+0x214>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <strtol+0x214>
     fcc:	97 ff       	sbrs	r25, 7
     fce:	f5 cf       	rjmp	.-22     	; 0xfba <strtol+0x1e8>
     fd0:	82 e2       	ldi	r24, 0x22	; 34
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <errno>
     fd8:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <errno+0x1>
     fdc:	6f ef       	ldi	r22, 0xFF	; 255
     fde:	7f ef       	ldi	r23, 0xFF	; 255
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	9f e7       	ldi	r25, 0x7F	; 127
     fe4:	ea cf       	rjmp	.-44     	; 0xfba <strtol+0x1e8>
     fe6:	64 2f       	mov	r22, r20
     fe8:	73 2f       	mov	r23, r19
     fea:	82 2f       	mov	r24, r18
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	e1 e1       	ldi	r30, 0x11	; 17
     ff2:	50 c3       	rjmp	.+1696   	; 0x1694 <__epilogue_restores__+0x2>

00000ff4 <isspace>:
     ff4:	91 11       	cpse	r25, r1
     ff6:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__ctype_isfalse>
     ffa:	80 32       	cpi	r24, 0x20	; 32
     ffc:	19 f0       	breq	.+6      	; 0x1004 <isspace+0x10>
     ffe:	89 50       	subi	r24, 0x09	; 9
    1000:	85 50       	subi	r24, 0x05	; 5
    1002:	c8 f7       	brcc	.-14     	; 0xff6 <isspace+0x2>
    1004:	08 95       	ret

00001006 <strtok>:
    1006:	44 e0       	ldi	r20, 0x04	; 4
    1008:	5e e3       	ldi	r21, 0x3E	; 62
    100a:	11 d0       	rcall	.+34     	; 0x102e <strtok_r>
    100c:	08 95       	ret

0000100e <strcmp>:
    100e:	fb 01       	movw	r30, r22
    1010:	dc 01       	movw	r26, r24
    1012:	8d 91       	ld	r24, X+
    1014:	01 90       	ld	r0, Z+
    1016:	80 19       	sub	r24, r0
    1018:	01 10       	cpse	r0, r1
    101a:	d9 f3       	breq	.-10     	; 0x1012 <strcmp+0x4>
    101c:	99 0b       	sbc	r25, r25
    101e:	08 95       	ret

00001020 <strcpy>:
    1020:	fb 01       	movw	r30, r22
    1022:	dc 01       	movw	r26, r24
    1024:	01 90       	ld	r0, Z+
    1026:	0d 92       	st	X+, r0
    1028:	00 20       	and	r0, r0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <strcpy+0x4>
    102c:	08 95       	ret

0000102e <strtok_r>:
    102e:	fa 01       	movw	r30, r20
    1030:	a1 91       	ld	r26, Z+
    1032:	b0 81       	ld	r27, Z
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	19 f4       	brne	.+6      	; 0x103e <strtok_r+0x10>
    1038:	10 97       	sbiw	r26, 0x00	; 0
    103a:	e1 f0       	breq	.+56     	; 0x1074 <strtok_r+0x46>
    103c:	cd 01       	movw	r24, r26
    103e:	dc 01       	movw	r26, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0d 90       	ld	r0, X+
    1044:	00 20       	and	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <strtok_r+0x1e>
    1048:	c0 01       	movw	r24, r0
    104a:	13 c0       	rjmp	.+38     	; 0x1072 <strtok_r+0x44>
    104c:	fb 01       	movw	r30, r22
    104e:	21 91       	ld	r18, Z+
    1050:	22 23       	and	r18, r18
    1052:	19 f0       	breq	.+6      	; 0x105a <strtok_r+0x2c>
    1054:	20 15       	cp	r18, r0
    1056:	d9 f7       	brne	.-10     	; 0x104e <strtok_r+0x20>
    1058:	f3 cf       	rjmp	.-26     	; 0x1040 <strtok_r+0x12>
    105a:	fb 01       	movw	r30, r22
    105c:	21 91       	ld	r18, Z+
    105e:	20 15       	cp	r18, r0
    1060:	19 f4       	brne	.+6      	; 0x1068 <strtok_r+0x3a>
    1062:	1e 92       	st	-X, r1
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <strtok_r+0x46>
    1068:	22 23       	and	r18, r18
    106a:	c1 f7       	brne	.-16     	; 0x105c <strtok_r+0x2e>
    106c:	0d 90       	ld	r0, X+
    106e:	00 20       	and	r0, r0
    1070:	a1 f7       	brne	.-24     	; 0x105a <strtok_r+0x2c>
    1072:	d0 01       	movw	r26, r0
    1074:	fa 01       	movw	r30, r20
    1076:	a1 93       	st	Z+, r26
    1078:	b0 83       	st	Z, r27
    107a:	08 95       	ret

0000107c <printf>:
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e3 e4       	ldi	r30, 0x43	; 67
    1082:	f8 e0       	ldi	r31, 0x08	; 8
    1084:	fd c2       	rjmp	.+1530   	; 0x1680 <__prologue_saves__+0x20>
    1086:	ae 01       	movw	r20, r28
    1088:	4b 5f       	subi	r20, 0xFB	; 251
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	fa 01       	movw	r30, r20
    108e:	61 91       	ld	r22, Z+
    1090:	71 91       	ld	r23, Z+
    1092:	af 01       	movw	r20, r30
    1094:	80 91 b6 3e 	lds	r24, 0x3EB6	; 0x803eb6 <__iob+0x2>
    1098:	90 91 b7 3e 	lds	r25, 0x3EB7	; 0x803eb7 <__iob+0x3>
    109c:	21 d0       	rcall	.+66     	; 0x10e0 <vfprintf>
    109e:	e2 e0       	ldi	r30, 0x02	; 2
    10a0:	08 c3       	rjmp	.+1552   	; 0x16b2 <__epilogue_restores__+0x20>

000010a2 <sprintf>:
    10a2:	ae e0       	ldi	r26, 0x0E	; 14
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e6 e5       	ldi	r30, 0x56	; 86
    10a8:	f8 e0       	ldi	r31, 0x08	; 8
    10aa:	e8 c2       	rjmp	.+1488   	; 0x167c <__prologue_saves__+0x1c>
    10ac:	0d 89       	ldd	r16, Y+21	; 0x15
    10ae:	1e 89       	ldd	r17, Y+22	; 0x16
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	8c 83       	std	Y+4, r24	; 0x04
    10b4:	09 83       	std	Y+1, r16	; 0x01
    10b6:	1a 83       	std	Y+2, r17	; 0x02
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f e7       	ldi	r25, 0x7F	; 127
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	ae 01       	movw	r20, r28
    10c2:	47 5e       	subi	r20, 0xE7	; 231
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	6f 89       	ldd	r22, Y+23	; 0x17
    10c8:	78 8d       	ldd	r23, Y+24	; 0x18
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	08 d0       	rcall	.+16     	; 0x10e0 <vfprintf>
    10d0:	ef 81       	ldd	r30, Y+7	; 0x07
    10d2:	f8 85       	ldd	r31, Y+8	; 0x08
    10d4:	e0 0f       	add	r30, r16
    10d6:	f1 1f       	adc	r31, r17
    10d8:	10 82       	st	Z, r1
    10da:	2e 96       	adiw	r28, 0x0e	; 14
    10dc:	e4 e0       	ldi	r30, 0x04	; 4
    10de:	e7 c2       	rjmp	.+1486   	; 0x16ae <__epilogue_restores__+0x1c>

000010e0 <vfprintf>:
    10e0:	ab e0       	ldi	r26, 0x0B	; 11
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e7       	ldi	r30, 0x75	; 117
    10e6:	f8 e0       	ldi	r31, 0x08	; 8
    10e8:	bb c2       	rjmp	.+1398   	; 0x1660 <__prologue_saves__>
    10ea:	6c 01       	movw	r12, r24
    10ec:	7b 01       	movw	r14, r22
    10ee:	8a 01       	movw	r16, r20
    10f0:	fc 01       	movw	r30, r24
    10f2:	16 82       	std	Z+6, r1	; 0x06
    10f4:	17 82       	std	Z+7, r1	; 0x07
    10f6:	83 81       	ldd	r24, Z+3	; 0x03
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	bf c1       	rjmp	.+894    	; 0x147a <vfprintf+0x39a>
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	3c 01       	movw	r6, r24
    1102:	f6 01       	movw	r30, r12
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	f7 01       	movw	r30, r14
    1108:	93 fd       	sbrc	r25, 3
    110a:	85 91       	lpm	r24, Z+
    110c:	93 ff       	sbrs	r25, 3
    110e:	81 91       	ld	r24, Z+
    1110:	7f 01       	movw	r14, r30
    1112:	88 23       	and	r24, r24
    1114:	09 f4       	brne	.+2      	; 0x1118 <vfprintf+0x38>
    1116:	ad c1       	rjmp	.+858    	; 0x1472 <vfprintf+0x392>
    1118:	85 32       	cpi	r24, 0x25	; 37
    111a:	39 f4       	brne	.+14     	; 0x112a <vfprintf+0x4a>
    111c:	93 fd       	sbrc	r25, 3
    111e:	85 91       	lpm	r24, Z+
    1120:	93 ff       	sbrs	r25, 3
    1122:	81 91       	ld	r24, Z+
    1124:	7f 01       	movw	r14, r30
    1126:	85 32       	cpi	r24, 0x25	; 37
    1128:	21 f4       	brne	.+8      	; 0x1132 <vfprintf+0x52>
    112a:	b6 01       	movw	r22, r12
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	c3 d1       	rcall	.+902    	; 0x14b6 <fputc>
    1130:	e8 cf       	rjmp	.-48     	; 0x1102 <vfprintf+0x22>
    1132:	91 2c       	mov	r9, r1
    1134:	21 2c       	mov	r2, r1
    1136:	31 2c       	mov	r3, r1
    1138:	ff e1       	ldi	r31, 0x1F	; 31
    113a:	f3 15       	cp	r31, r3
    113c:	d8 f0       	brcs	.+54     	; 0x1174 <vfprintf+0x94>
    113e:	8b 32       	cpi	r24, 0x2B	; 43
    1140:	79 f0       	breq	.+30     	; 0x1160 <vfprintf+0x80>
    1142:	38 f4       	brcc	.+14     	; 0x1152 <vfprintf+0x72>
    1144:	80 32       	cpi	r24, 0x20	; 32
    1146:	79 f0       	breq	.+30     	; 0x1166 <vfprintf+0x86>
    1148:	83 32       	cpi	r24, 0x23	; 35
    114a:	a1 f4       	brne	.+40     	; 0x1174 <vfprintf+0x94>
    114c:	23 2d       	mov	r18, r3
    114e:	20 61       	ori	r18, 0x10	; 16
    1150:	1d c0       	rjmp	.+58     	; 0x118c <vfprintf+0xac>
    1152:	8d 32       	cpi	r24, 0x2D	; 45
    1154:	61 f0       	breq	.+24     	; 0x116e <vfprintf+0x8e>
    1156:	80 33       	cpi	r24, 0x30	; 48
    1158:	69 f4       	brne	.+26     	; 0x1174 <vfprintf+0x94>
    115a:	23 2d       	mov	r18, r3
    115c:	21 60       	ori	r18, 0x01	; 1
    115e:	16 c0       	rjmp	.+44     	; 0x118c <vfprintf+0xac>
    1160:	83 2d       	mov	r24, r3
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	38 2e       	mov	r3, r24
    1166:	e3 2d       	mov	r30, r3
    1168:	e4 60       	ori	r30, 0x04	; 4
    116a:	3e 2e       	mov	r3, r30
    116c:	2a c0       	rjmp	.+84     	; 0x11c2 <vfprintf+0xe2>
    116e:	f3 2d       	mov	r31, r3
    1170:	f8 60       	ori	r31, 0x08	; 8
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <vfprintf+0xce>
    1174:	37 fc       	sbrc	r3, 7
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <vfprintf+0xf2>
    1178:	20 ed       	ldi	r18, 0xD0	; 208
    117a:	28 0f       	add	r18, r24
    117c:	2a 30       	cpi	r18, 0x0A	; 10
    117e:	40 f0       	brcs	.+16     	; 0x1190 <vfprintf+0xb0>
    1180:	8e 32       	cpi	r24, 0x2E	; 46
    1182:	b9 f4       	brne	.+46     	; 0x11b2 <vfprintf+0xd2>
    1184:	36 fc       	sbrc	r3, 6
    1186:	75 c1       	rjmp	.+746    	; 0x1472 <vfprintf+0x392>
    1188:	23 2d       	mov	r18, r3
    118a:	20 64       	ori	r18, 0x40	; 64
    118c:	32 2e       	mov	r3, r18
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <vfprintf+0xe2>
    1190:	36 fe       	sbrs	r3, 6
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0xc0>
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	98 9e       	mul	r9, r24
    1198:	20 0d       	add	r18, r0
    119a:	11 24       	eor	r1, r1
    119c:	92 2e       	mov	r9, r18
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <vfprintf+0xe2>
    11a0:	ea e0       	ldi	r30, 0x0A	; 10
    11a2:	2e 9e       	mul	r2, r30
    11a4:	20 0d       	add	r18, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	22 2e       	mov	r2, r18
    11aa:	f3 2d       	mov	r31, r3
    11ac:	f0 62       	ori	r31, 0x20	; 32
    11ae:	3f 2e       	mov	r3, r31
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <vfprintf+0xe2>
    11b2:	8c 36       	cpi	r24, 0x6C	; 108
    11b4:	21 f4       	brne	.+8      	; 0x11be <vfprintf+0xde>
    11b6:	83 2d       	mov	r24, r3
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	38 2e       	mov	r3, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0xe2>
    11be:	88 36       	cpi	r24, 0x68	; 104
    11c0:	41 f4       	brne	.+16     	; 0x11d2 <vfprintf+0xf2>
    11c2:	f7 01       	movw	r30, r14
    11c4:	93 fd       	sbrc	r25, 3
    11c6:	85 91       	lpm	r24, Z+
    11c8:	93 ff       	sbrs	r25, 3
    11ca:	81 91       	ld	r24, Z+
    11cc:	7f 01       	movw	r14, r30
    11ce:	81 11       	cpse	r24, r1
    11d0:	b3 cf       	rjmp	.-154    	; 0x1138 <vfprintf+0x58>
    11d2:	98 2f       	mov	r25, r24
    11d4:	9f 7d       	andi	r25, 0xDF	; 223
    11d6:	95 54       	subi	r25, 0x45	; 69
    11d8:	93 30       	cpi	r25, 0x03	; 3
    11da:	28 f4       	brcc	.+10     	; 0x11e6 <vfprintf+0x106>
    11dc:	0c 5f       	subi	r16, 0xFC	; 252
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	9f e3       	ldi	r25, 0x3F	; 63
    11e2:	99 83       	std	Y+1, r25	; 0x01
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <vfprintf+0x120>
    11e6:	83 36       	cpi	r24, 0x63	; 99
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <vfprintf+0x116>
    11ea:	83 37       	cpi	r24, 0x73	; 115
    11ec:	71 f0       	breq	.+28     	; 0x120a <vfprintf+0x12a>
    11ee:	83 35       	cpi	r24, 0x53	; 83
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <vfprintf+0x114>
    11f2:	55 c0       	rjmp	.+170    	; 0x129e <vfprintf+0x1be>
    11f4:	20 c0       	rjmp	.+64     	; 0x1236 <vfprintf+0x156>
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	0e 5f       	subi	r16, 0xFE	; 254
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	88 24       	eor	r8, r8
    1202:	83 94       	inc	r8
    1204:	91 2c       	mov	r9, r1
    1206:	53 01       	movw	r10, r6
    1208:	12 c0       	rjmp	.+36     	; 0x122e <vfprintf+0x14e>
    120a:	28 01       	movw	r4, r16
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	4f 0e       	add	r4, r31
    1210:	51 1c       	adc	r5, r1
    1212:	f8 01       	movw	r30, r16
    1214:	a0 80       	ld	r10, Z
    1216:	b1 80       	ldd	r11, Z+1	; 0x01
    1218:	36 fe       	sbrs	r3, 6
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <vfprintf+0x142>
    121c:	69 2d       	mov	r22, r9
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x146>
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	7f ef       	ldi	r23, 0xFF	; 255
    1226:	c5 01       	movw	r24, r10
    1228:	3b d1       	rcall	.+630    	; 0x14a0 <strnlen>
    122a:	4c 01       	movw	r8, r24
    122c:	82 01       	movw	r16, r4
    122e:	f3 2d       	mov	r31, r3
    1230:	ff 77       	andi	r31, 0x7F	; 127
    1232:	3f 2e       	mov	r3, r31
    1234:	15 c0       	rjmp	.+42     	; 0x1260 <vfprintf+0x180>
    1236:	28 01       	movw	r4, r16
    1238:	22 e0       	ldi	r18, 0x02	; 2
    123a:	42 0e       	add	r4, r18
    123c:	51 1c       	adc	r5, r1
    123e:	f8 01       	movw	r30, r16
    1240:	a0 80       	ld	r10, Z
    1242:	b1 80       	ldd	r11, Z+1	; 0x01
    1244:	36 fe       	sbrs	r3, 6
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x16e>
    1248:	69 2d       	mov	r22, r9
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x172>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	c5 01       	movw	r24, r10
    1254:	1a d1       	rcall	.+564    	; 0x148a <strnlen_P>
    1256:	4c 01       	movw	r8, r24
    1258:	f3 2d       	mov	r31, r3
    125a:	f0 68       	ori	r31, 0x80	; 128
    125c:	3f 2e       	mov	r3, r31
    125e:	82 01       	movw	r16, r4
    1260:	33 fc       	sbrc	r3, 3
    1262:	19 c0       	rjmp	.+50     	; 0x1296 <vfprintf+0x1b6>
    1264:	82 2d       	mov	r24, r2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	88 16       	cp	r8, r24
    126a:	99 06       	cpc	r9, r25
    126c:	a0 f4       	brcc	.+40     	; 0x1296 <vfprintf+0x1b6>
    126e:	b6 01       	movw	r22, r12
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	20 d1       	rcall	.+576    	; 0x14b6 <fputc>
    1276:	2a 94       	dec	r2
    1278:	f5 cf       	rjmp	.-22     	; 0x1264 <vfprintf+0x184>
    127a:	f5 01       	movw	r30, r10
    127c:	37 fc       	sbrc	r3, 7
    127e:	85 91       	lpm	r24, Z+
    1280:	37 fe       	sbrs	r3, 7
    1282:	81 91       	ld	r24, Z+
    1284:	5f 01       	movw	r10, r30
    1286:	b6 01       	movw	r22, r12
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	15 d1       	rcall	.+554    	; 0x14b6 <fputc>
    128c:	21 10       	cpse	r2, r1
    128e:	2a 94       	dec	r2
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	82 1a       	sub	r8, r18
    1294:	91 08       	sbc	r9, r1
    1296:	81 14       	cp	r8, r1
    1298:	91 04       	cpc	r9, r1
    129a:	79 f7       	brne	.-34     	; 0x127a <vfprintf+0x19a>
    129c:	e1 c0       	rjmp	.+450    	; 0x1460 <vfprintf+0x380>
    129e:	84 36       	cpi	r24, 0x64	; 100
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <vfprintf+0x1c6>
    12a2:	89 36       	cpi	r24, 0x69	; 105
    12a4:	39 f5       	brne	.+78     	; 0x12f4 <vfprintf+0x214>
    12a6:	f8 01       	movw	r30, r16
    12a8:	37 fe       	sbrs	r3, 7
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <vfprintf+0x1da>
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	0c 5f       	subi	r16, 0xFC	; 252
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <vfprintf+0x1ea>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	07 2e       	mov	r0, r23
    12c0:	00 0c       	add	r0, r0
    12c2:	88 0b       	sbc	r24, r24
    12c4:	99 0b       	sbc	r25, r25
    12c6:	0e 5f       	subi	r16, 0xFE	; 254
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	f3 2d       	mov	r31, r3
    12cc:	ff 76       	andi	r31, 0x6F	; 111
    12ce:	3f 2e       	mov	r3, r31
    12d0:	97 ff       	sbrs	r25, 7
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <vfprintf+0x206>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	f0 68       	ori	r31, 0x80	; 128
    12e4:	3f 2e       	mov	r3, r31
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	a3 01       	movw	r20, r6
    12ec:	20 d1       	rcall	.+576    	; 0x152e <__ultoa_invert>
    12ee:	88 2e       	mov	r8, r24
    12f0:	86 18       	sub	r8, r6
    12f2:	44 c0       	rjmp	.+136    	; 0x137c <vfprintf+0x29c>
    12f4:	85 37       	cpi	r24, 0x75	; 117
    12f6:	31 f4       	brne	.+12     	; 0x1304 <vfprintf+0x224>
    12f8:	23 2d       	mov	r18, r3
    12fa:	2f 7e       	andi	r18, 0xEF	; 239
    12fc:	b2 2e       	mov	r11, r18
    12fe:	2a e0       	ldi	r18, 0x0A	; 10
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	25 c0       	rjmp	.+74     	; 0x134e <vfprintf+0x26e>
    1304:	93 2d       	mov	r25, r3
    1306:	99 7f       	andi	r25, 0xF9	; 249
    1308:	b9 2e       	mov	r11, r25
    130a:	8f 36       	cpi	r24, 0x6F	; 111
    130c:	c1 f0       	breq	.+48     	; 0x133e <vfprintf+0x25e>
    130e:	18 f4       	brcc	.+6      	; 0x1316 <vfprintf+0x236>
    1310:	88 35       	cpi	r24, 0x58	; 88
    1312:	79 f0       	breq	.+30     	; 0x1332 <vfprintf+0x252>
    1314:	ae c0       	rjmp	.+348    	; 0x1472 <vfprintf+0x392>
    1316:	80 37       	cpi	r24, 0x70	; 112
    1318:	19 f0       	breq	.+6      	; 0x1320 <vfprintf+0x240>
    131a:	88 37       	cpi	r24, 0x78	; 120
    131c:	21 f0       	breq	.+8      	; 0x1326 <vfprintf+0x246>
    131e:	a9 c0       	rjmp	.+338    	; 0x1472 <vfprintf+0x392>
    1320:	e9 2f       	mov	r30, r25
    1322:	e0 61       	ori	r30, 0x10	; 16
    1324:	be 2e       	mov	r11, r30
    1326:	b4 fe       	sbrs	r11, 4
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <vfprintf+0x264>
    132a:	fb 2d       	mov	r31, r11
    132c:	f4 60       	ori	r31, 0x04	; 4
    132e:	bf 2e       	mov	r11, r31
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <vfprintf+0x264>
    1332:	34 fe       	sbrs	r3, 4
    1334:	0a c0       	rjmp	.+20     	; 0x134a <vfprintf+0x26a>
    1336:	29 2f       	mov	r18, r25
    1338:	26 60       	ori	r18, 0x06	; 6
    133a:	b2 2e       	mov	r11, r18
    133c:	06 c0       	rjmp	.+12     	; 0x134a <vfprintf+0x26a>
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	05 c0       	rjmp	.+10     	; 0x134e <vfprintf+0x26e>
    1344:	20 e1       	ldi	r18, 0x10	; 16
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <vfprintf+0x26e>
    134a:	20 e1       	ldi	r18, 0x10	; 16
    134c:	32 e0       	ldi	r19, 0x02	; 2
    134e:	f8 01       	movw	r30, r16
    1350:	b7 fe       	sbrs	r11, 7
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <vfprintf+0x282>
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	0c 5f       	subi	r16, 0xFC	; 252
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x28e>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	a3 01       	movw	r20, r6
    1370:	de d0       	rcall	.+444    	; 0x152e <__ultoa_invert>
    1372:	88 2e       	mov	r8, r24
    1374:	86 18       	sub	r8, r6
    1376:	fb 2d       	mov	r31, r11
    1378:	ff 77       	andi	r31, 0x7F	; 127
    137a:	3f 2e       	mov	r3, r31
    137c:	36 fe       	sbrs	r3, 6
    137e:	0d c0       	rjmp	.+26     	; 0x139a <vfprintf+0x2ba>
    1380:	23 2d       	mov	r18, r3
    1382:	2e 7f       	andi	r18, 0xFE	; 254
    1384:	a2 2e       	mov	r10, r18
    1386:	89 14       	cp	r8, r9
    1388:	58 f4       	brcc	.+22     	; 0x13a0 <vfprintf+0x2c0>
    138a:	34 fe       	sbrs	r3, 4
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <vfprintf+0x2c4>
    138e:	32 fc       	sbrc	r3, 2
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <vfprintf+0x2c4>
    1392:	83 2d       	mov	r24, r3
    1394:	8e 7e       	andi	r24, 0xEE	; 238
    1396:	a8 2e       	mov	r10, r24
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <vfprintf+0x2c4>
    139a:	b8 2c       	mov	r11, r8
    139c:	a3 2c       	mov	r10, r3
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <vfprintf+0x2c6>
    13a0:	b8 2c       	mov	r11, r8
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <vfprintf+0x2c6>
    13a4:	b9 2c       	mov	r11, r9
    13a6:	a4 fe       	sbrs	r10, 4
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <vfprintf+0x2e8>
    13aa:	fe 01       	movw	r30, r28
    13ac:	e8 0d       	add	r30, r8
    13ae:	f1 1d       	adc	r31, r1
    13b0:	80 81       	ld	r24, Z
    13b2:	80 33       	cpi	r24, 0x30	; 48
    13b4:	21 f4       	brne	.+8      	; 0x13be <vfprintf+0x2de>
    13b6:	9a 2d       	mov	r25, r10
    13b8:	99 7e       	andi	r25, 0xE9	; 233
    13ba:	a9 2e       	mov	r10, r25
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <vfprintf+0x2f0>
    13be:	a2 fe       	sbrs	r10, 2
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <vfprintf+0x2ee>
    13c2:	b3 94       	inc	r11
    13c4:	b3 94       	inc	r11
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <vfprintf+0x2f0>
    13c8:	8a 2d       	mov	r24, r10
    13ca:	86 78       	andi	r24, 0x86	; 134
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x2f0>
    13ce:	b3 94       	inc	r11
    13d0:	a3 fc       	sbrc	r10, 3
    13d2:	10 c0       	rjmp	.+32     	; 0x13f4 <vfprintf+0x314>
    13d4:	a0 fe       	sbrs	r10, 0
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <vfprintf+0x304>
    13d8:	b2 14       	cp	r11, r2
    13da:	80 f4       	brcc	.+32     	; 0x13fc <vfprintf+0x31c>
    13dc:	28 0c       	add	r2, r8
    13de:	92 2c       	mov	r9, r2
    13e0:	9b 18       	sub	r9, r11
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <vfprintf+0x31e>
    13e4:	b2 14       	cp	r11, r2
    13e6:	58 f4       	brcc	.+22     	; 0x13fe <vfprintf+0x31e>
    13e8:	b6 01       	movw	r22, r12
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	63 d0       	rcall	.+198    	; 0x14b6 <fputc>
    13f0:	b3 94       	inc	r11
    13f2:	f8 cf       	rjmp	.-16     	; 0x13e4 <vfprintf+0x304>
    13f4:	b2 14       	cp	r11, r2
    13f6:	18 f4       	brcc	.+6      	; 0x13fe <vfprintf+0x31e>
    13f8:	2b 18       	sub	r2, r11
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <vfprintf+0x320>
    13fc:	98 2c       	mov	r9, r8
    13fe:	21 2c       	mov	r2, r1
    1400:	a4 fe       	sbrs	r10, 4
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <vfprintf+0x342>
    1404:	b6 01       	movw	r22, r12
    1406:	80 e3       	ldi	r24, 0x30	; 48
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	55 d0       	rcall	.+170    	; 0x14b6 <fputc>
    140c:	a2 fe       	sbrs	r10, 2
    140e:	16 c0       	rjmp	.+44     	; 0x143c <vfprintf+0x35c>
    1410:	a1 fc       	sbrc	r10, 1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <vfprintf+0x33a>
    1414:	88 e7       	ldi	r24, 0x78	; 120
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x33e>
    141a:	88 e5       	ldi	r24, 0x58	; 88
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	b6 01       	movw	r22, r12
    1420:	0c c0       	rjmp	.+24     	; 0x143a <vfprintf+0x35a>
    1422:	8a 2d       	mov	r24, r10
    1424:	86 78       	andi	r24, 0x86	; 134
    1426:	51 f0       	breq	.+20     	; 0x143c <vfprintf+0x35c>
    1428:	a1 fe       	sbrs	r10, 1
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x350>
    142c:	8b e2       	ldi	r24, 0x2B	; 43
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <vfprintf+0x352>
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	a7 fc       	sbrc	r10, 7
    1434:	8d e2       	ldi	r24, 0x2D	; 45
    1436:	b6 01       	movw	r22, r12
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	3d d0       	rcall	.+122    	; 0x14b6 <fputc>
    143c:	89 14       	cp	r8, r9
    143e:	30 f4       	brcc	.+12     	; 0x144c <vfprintf+0x36c>
    1440:	b6 01       	movw	r22, r12
    1442:	80 e3       	ldi	r24, 0x30	; 48
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	37 d0       	rcall	.+110    	; 0x14b6 <fputc>
    1448:	9a 94       	dec	r9
    144a:	f8 cf       	rjmp	.-16     	; 0x143c <vfprintf+0x35c>
    144c:	8a 94       	dec	r8
    144e:	f3 01       	movw	r30, r6
    1450:	e8 0d       	add	r30, r8
    1452:	f1 1d       	adc	r31, r1
    1454:	80 81       	ld	r24, Z
    1456:	b6 01       	movw	r22, r12
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	2d d0       	rcall	.+90     	; 0x14b6 <fputc>
    145c:	81 10       	cpse	r8, r1
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <vfprintf+0x36c>
    1460:	22 20       	and	r2, r2
    1462:	09 f4       	brne	.+2      	; 0x1466 <vfprintf+0x386>
    1464:	4e ce       	rjmp	.-868    	; 0x1102 <vfprintf+0x22>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	24 d0       	rcall	.+72     	; 0x14b6 <fputc>
    146e:	2a 94       	dec	r2
    1470:	f7 cf       	rjmp	.-18     	; 0x1460 <vfprintf+0x380>
    1472:	f6 01       	movw	r30, r12
    1474:	86 81       	ldd	r24, Z+6	; 0x06
    1476:	97 81       	ldd	r25, Z+7	; 0x07
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x39e>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	2b 96       	adiw	r28, 0x0b	; 11
    1480:	e2 e1       	ldi	r30, 0x12	; 18
    1482:	07 c1       	rjmp	.+526    	; 0x1692 <__epilogue_restores__>

00001484 <__ctype_isfalse>:
    1484:	99 27       	eor	r25, r25
    1486:	88 27       	eor	r24, r24

00001488 <__ctype_istrue>:
    1488:	08 95       	ret

0000148a <strnlen_P>:
    148a:	fc 01       	movw	r30, r24
    148c:	05 90       	lpm	r0, Z+
    148e:	61 50       	subi	r22, 0x01	; 1
    1490:	70 40       	sbci	r23, 0x00	; 0
    1492:	01 10       	cpse	r0, r1
    1494:	d8 f7       	brcc	.-10     	; 0x148c <strnlen_P+0x2>
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	8e 0f       	add	r24, r30
    149c:	9f 1f       	adc	r25, r31
    149e:	08 95       	ret

000014a0 <strnlen>:
    14a0:	fc 01       	movw	r30, r24
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	01 90       	ld	r0, Z+
    14a8:	01 10       	cpse	r0, r1
    14aa:	d8 f7       	brcc	.-10     	; 0x14a2 <strnlen+0x2>
    14ac:	80 95       	com	r24
    14ae:	90 95       	com	r25
    14b0:	8e 0f       	add	r24, r30
    14b2:	9f 1f       	adc	r25, r31
    14b4:	08 95       	ret

000014b6 <fputc>:
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	fb 01       	movw	r30, r22
    14c0:	23 81       	ldd	r18, Z+3	; 0x03
    14c2:	21 fd       	sbrc	r18, 1
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <fputc+0x16>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <fputc+0x6e>
    14cc:	22 ff       	sbrs	r18, 2
    14ce:	16 c0       	rjmp	.+44     	; 0x14fc <fputc+0x46>
    14d0:	46 81       	ldd	r20, Z+6	; 0x06
    14d2:	57 81       	ldd	r21, Z+7	; 0x07
    14d4:	24 81       	ldd	r18, Z+4	; 0x04
    14d6:	35 81       	ldd	r19, Z+5	; 0x05
    14d8:	42 17       	cp	r20, r18
    14da:	53 07       	cpc	r21, r19
    14dc:	44 f4       	brge	.+16     	; 0x14ee <fputc+0x38>
    14de:	a0 81       	ld	r26, Z
    14e0:	b1 81       	ldd	r27, Z+1	; 0x01
    14e2:	9d 01       	movw	r18, r26
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	20 83       	st	Z, r18
    14ea:	31 83       	std	Z+1, r19	; 0x01
    14ec:	8c 93       	st	X, r24
    14ee:	26 81       	ldd	r18, Z+6	; 0x06
    14f0:	37 81       	ldd	r19, Z+7	; 0x07
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	26 83       	std	Z+6, r18	; 0x06
    14f8:	37 83       	std	Z+7, r19	; 0x07
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <fputc+0x6e>
    14fc:	8b 01       	movw	r16, r22
    14fe:	ec 01       	movw	r28, r24
    1500:	fb 01       	movw	r30, r22
    1502:	00 84       	ldd	r0, Z+8	; 0x08
    1504:	f1 85       	ldd	r31, Z+9	; 0x09
    1506:	e0 2d       	mov	r30, r0
    1508:	09 95       	icall
    150a:	89 2b       	or	r24, r25
    150c:	e1 f6       	brne	.-72     	; 0x14c6 <fputc+0x10>
    150e:	d8 01       	movw	r26, r16
    1510:	16 96       	adiw	r26, 0x06	; 6
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	17 97       	sbiw	r26, 0x07	; 7
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	16 96       	adiw	r26, 0x06	; 6
    151c:	8d 93       	st	X+, r24
    151e:	9c 93       	st	X, r25
    1520:	17 97       	sbiw	r26, 0x07	; 7
    1522:	ce 01       	movw	r24, r28
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <__ultoa_invert>:
    152e:	fa 01       	movw	r30, r20
    1530:	aa 27       	eor	r26, r26
    1532:	28 30       	cpi	r18, 0x08	; 8
    1534:	51 f1       	breq	.+84     	; 0x158a <__ultoa_invert+0x5c>
    1536:	20 31       	cpi	r18, 0x10	; 16
    1538:	81 f1       	breq	.+96     	; 0x159a <__ultoa_invert+0x6c>
    153a:	e8 94       	clt
    153c:	6f 93       	push	r22
    153e:	6e 7f       	andi	r22, 0xFE	; 254
    1540:	6e 5f       	subi	r22, 0xFE	; 254
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	af 4f       	sbci	r26, 0xFF	; 255
    154a:	b1 e0       	ldi	r27, 0x01	; 1
    154c:	3e d0       	rcall	.+124    	; 0x15ca <__ultoa_invert+0x9c>
    154e:	b4 e0       	ldi	r27, 0x04	; 4
    1550:	3c d0       	rcall	.+120    	; 0x15ca <__ultoa_invert+0x9c>
    1552:	67 0f       	add	r22, r23
    1554:	78 1f       	adc	r23, r24
    1556:	89 1f       	adc	r24, r25
    1558:	9a 1f       	adc	r25, r26
    155a:	a1 1d       	adc	r26, r1
    155c:	68 0f       	add	r22, r24
    155e:	79 1f       	adc	r23, r25
    1560:	8a 1f       	adc	r24, r26
    1562:	91 1d       	adc	r25, r1
    1564:	a1 1d       	adc	r26, r1
    1566:	6a 0f       	add	r22, r26
    1568:	71 1d       	adc	r23, r1
    156a:	81 1d       	adc	r24, r1
    156c:	91 1d       	adc	r25, r1
    156e:	a1 1d       	adc	r26, r1
    1570:	20 d0       	rcall	.+64     	; 0x15b2 <__ultoa_invert+0x84>
    1572:	09 f4       	brne	.+2      	; 0x1576 <__ultoa_invert+0x48>
    1574:	68 94       	set
    1576:	3f 91       	pop	r19
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	26 9f       	mul	r18, r22
    157c:	11 24       	eor	r1, r1
    157e:	30 19       	sub	r19, r0
    1580:	30 5d       	subi	r19, 0xD0	; 208
    1582:	31 93       	st	Z+, r19
    1584:	de f6       	brtc	.-74     	; 0x153c <__ultoa_invert+0xe>
    1586:	cf 01       	movw	r24, r30
    1588:	08 95       	ret
    158a:	46 2f       	mov	r20, r22
    158c:	47 70       	andi	r20, 0x07	; 7
    158e:	40 5d       	subi	r20, 0xD0	; 208
    1590:	41 93       	st	Z+, r20
    1592:	b3 e0       	ldi	r27, 0x03	; 3
    1594:	0f d0       	rcall	.+30     	; 0x15b4 <__ultoa_invert+0x86>
    1596:	c9 f7       	brne	.-14     	; 0x158a <__ultoa_invert+0x5c>
    1598:	f6 cf       	rjmp	.-20     	; 0x1586 <__ultoa_invert+0x58>
    159a:	46 2f       	mov	r20, r22
    159c:	4f 70       	andi	r20, 0x0F	; 15
    159e:	40 5d       	subi	r20, 0xD0	; 208
    15a0:	4a 33       	cpi	r20, 0x3A	; 58
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <__ultoa_invert+0x7c>
    15a4:	49 5d       	subi	r20, 0xD9	; 217
    15a6:	31 fd       	sbrc	r19, 1
    15a8:	40 52       	subi	r20, 0x20	; 32
    15aa:	41 93       	st	Z+, r20
    15ac:	02 d0       	rcall	.+4      	; 0x15b2 <__ultoa_invert+0x84>
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ultoa_invert+0x6c>
    15b0:	ea cf       	rjmp	.-44     	; 0x1586 <__ultoa_invert+0x58>
    15b2:	b4 e0       	ldi	r27, 0x04	; 4
    15b4:	a6 95       	lsr	r26
    15b6:	97 95       	ror	r25
    15b8:	87 95       	ror	r24
    15ba:	77 95       	ror	r23
    15bc:	67 95       	ror	r22
    15be:	ba 95       	dec	r27
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__ultoa_invert+0x86>
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 05       	cpc	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	08 95       	ret
    15ca:	9b 01       	movw	r18, r22
    15cc:	ac 01       	movw	r20, r24
    15ce:	0a 2e       	mov	r0, r26
    15d0:	06 94       	lsr	r0
    15d2:	57 95       	ror	r21
    15d4:	47 95       	ror	r20
    15d6:	37 95       	ror	r19
    15d8:	27 95       	ror	r18
    15da:	ba 95       	dec	r27
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__ultoa_invert+0xa2>
    15de:	62 0f       	add	r22, r18
    15e0:	73 1f       	adc	r23, r19
    15e2:	84 1f       	adc	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	a0 1d       	adc	r26, r0
    15e8:	08 95       	ret

000015ea <__mulsi3>:
    15ea:	db 01       	movw	r26, r22
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	2d d0       	rcall	.+90     	; 0x164c <__muluhisi3>
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	a2 9f       	mul	r26, r18
    15f8:	80 0d       	add	r24, r0
    15fa:	91 1d       	adc	r25, r1
    15fc:	a3 9f       	mul	r26, r19
    15fe:	90 0d       	add	r25, r0
    1600:	b2 9f       	mul	r27, r18
    1602:	90 0d       	add	r25, r0
    1604:	11 24       	eor	r1, r1
    1606:	08 95       	ret

00001608 <__udivmodsi4>:
    1608:	a1 e2       	ldi	r26, 0x21	; 33
    160a:	1a 2e       	mov	r1, r26
    160c:	aa 1b       	sub	r26, r26
    160e:	bb 1b       	sub	r27, r27
    1610:	fd 01       	movw	r30, r26
    1612:	0d c0       	rjmp	.+26     	; 0x162e <__udivmodsi4_ep>

00001614 <__udivmodsi4_loop>:
    1614:	aa 1f       	adc	r26, r26
    1616:	bb 1f       	adc	r27, r27
    1618:	ee 1f       	adc	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	a2 17       	cp	r26, r18
    161e:	b3 07       	cpc	r27, r19
    1620:	e4 07       	cpc	r30, r20
    1622:	f5 07       	cpc	r31, r21
    1624:	20 f0       	brcs	.+8      	; 0x162e <__udivmodsi4_ep>
    1626:	a2 1b       	sub	r26, r18
    1628:	b3 0b       	sbc	r27, r19
    162a:	e4 0b       	sbc	r30, r20
    162c:	f5 0b       	sbc	r31, r21

0000162e <__udivmodsi4_ep>:
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	1a 94       	dec	r1
    1638:	69 f7       	brne	.-38     	; 0x1614 <__udivmodsi4_loop>
    163a:	60 95       	com	r22
    163c:	70 95       	com	r23
    163e:	80 95       	com	r24
    1640:	90 95       	com	r25
    1642:	9b 01       	movw	r18, r22
    1644:	ac 01       	movw	r20, r24
    1646:	bd 01       	movw	r22, r26
    1648:	cf 01       	movw	r24, r30
    164a:	08 95       	ret

0000164c <__muluhisi3>:
    164c:	3a d0       	rcall	.+116    	; 0x16c2 <__umulhisi3>
    164e:	a5 9f       	mul	r26, r21
    1650:	90 0d       	add	r25, r0
    1652:	b4 9f       	mul	r27, r20
    1654:	90 0d       	add	r25, r0
    1656:	a4 9f       	mul	r26, r20
    1658:	80 0d       	add	r24, r0
    165a:	91 1d       	adc	r25, r1
    165c:	11 24       	eor	r1, r1
    165e:	08 95       	ret

00001660 <__prologue_saves__>:
    1660:	2f 92       	push	r2
    1662:	3f 92       	push	r3
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	ca 1b       	sub	r28, r26
    168a:	db 0b       	sbc	r29, r27
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	09 94       	ijmp

00001692 <__epilogue_restores__>:
    1692:	2a 88       	ldd	r2, Y+18	; 0x12
    1694:	39 88       	ldd	r3, Y+17	; 0x11
    1696:	48 88       	ldd	r4, Y+16	; 0x10
    1698:	5f 84       	ldd	r5, Y+15	; 0x0f
    169a:	6e 84       	ldd	r6, Y+14	; 0x0e
    169c:	7d 84       	ldd	r7, Y+13	; 0x0d
    169e:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a4:	b9 84       	ldd	r11, Y+9	; 0x09
    16a6:	c8 84       	ldd	r12, Y+8	; 0x08
    16a8:	df 80       	ldd	r13, Y+7	; 0x07
    16aa:	ee 80       	ldd	r14, Y+6	; 0x06
    16ac:	fd 80       	ldd	r15, Y+5	; 0x05
    16ae:	0c 81       	ldd	r16, Y+4	; 0x04
    16b0:	1b 81       	ldd	r17, Y+3	; 0x03
    16b2:	aa 81       	ldd	r26, Y+2	; 0x02
    16b4:	b9 81       	ldd	r27, Y+1	; 0x01
    16b6:	ce 0f       	add	r28, r30
    16b8:	d1 1d       	adc	r29, r1
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	ed 01       	movw	r28, r26
    16c0:	08 95       	ret

000016c2 <__umulhisi3>:
    16c2:	a2 9f       	mul	r26, r18
    16c4:	b0 01       	movw	r22, r0
    16c6:	b3 9f       	mul	r27, r19
    16c8:	c0 01       	movw	r24, r0
    16ca:	a3 9f       	mul	r26, r19
    16cc:	01 d0       	rcall	.+2      	; 0x16d0 <__umulhisi3+0xe>
    16ce:	b2 9f       	mul	r27, r18
    16d0:	70 0d       	add	r23, r0
    16d2:	81 1d       	adc	r24, r1
    16d4:	11 24       	eor	r1, r1
    16d6:	91 1d       	adc	r25, r1
    16d8:	08 95       	ret

000016da <_exit>:
    16da:	f8 94       	cli

000016dc <__stop_program>:
    16dc:	ff cf       	rjmp	.-2      	; 0x16dc <__stop_program>
