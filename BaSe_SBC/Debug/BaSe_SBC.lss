
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001e4e  00001f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b96  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  00009b96  00001b96  00001c4a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000fb  00803e04  00803e04  00001f06  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000400  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008489  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002900  00000000  00000000  0000a829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022ae  00000000  00000000  0000d129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a30  00000000  00000000  0000f3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000245e  00000000  00000000  0000fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a7a  00000000  00000000  00012266  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  00013ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	0c c1       	rjmp	.+536    	; 0x220 <__vector_3>
       8:	33 c1       	rjmp	.+614    	; 0x270 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	20 c7       	rjmp	.+3648   	; 0xe4e <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	80 c1       	rjmp	.+768    	; 0x316 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	f1 c8       	rjmp	.-3614   	; 0xfffff210 <__eeprom_end+0xff7ef210>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	ee e4       	ldi	r30, 0x4E	; 78
      48:	fe e1       	ldi	r31, 0x1E	; 30
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	af 3f       	cpi	r26, 0xFF	; 255
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	28 d2       	rcall	.+1104   	; 0x4b8 <main>
      68:	94 cd       	rjmp	.-1240   	; 0xfffffb92 <__eeprom_end+0xff7efb92>

0000006a <__bad_interrupt>:
      6a:	1e c1       	rjmp	.+572    	; 0x2a8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <dim_display>:
     1a2:	18 16       	cp	r1, r24
     1a4:	19 06       	cpc	r1, r25
     1a6:	44 f4       	brge	.+16     	; 0x1b8 <dim_display+0x16>
     1a8:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     1ac:	88 23       	and	r24, r24
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <dim_display+0x16>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b6:	08 95       	ret
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1be:	08 95       	ret

000001c0 <display_enable>:
     1c0:	e0 e0       	ldi	r30, 0x00	; 0
     1c2:	f4 e0       	ldi	r31, 0x04	; 4
     1c4:	80 e8       	ldi	r24, 0x80	; 128
     1c6:	85 83       	std	Z+5, r24	; 0x05
     1c8:	92 e4       	ldi	r25, 0x42	; 66
     1ca:	9a 95       	dec	r25
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <display_enable+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <display_enable+0x10>
     1d0:	86 83       	std	Z+6, r24	; 0x06
     1d2:	82 e4       	ldi	r24, 0x42	; 66
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <display_enable+0x14>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <display_enable+0x1a>
     1da:	08 95       	ret

000001dc <set_display_data_pins>:
     1dc:	e0 e4       	ldi	r30, 0x40	; 64
     1de:	f4 e0       	ldi	r31, 0x04	; 4
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	90 7f       	andi	r25, 0xF0	; 240
     1e4:	94 83       	std	Z+4, r25	; 0x04
     1e6:	94 81       	ldd	r25, Z+4	; 0x04
     1e8:	8f 70       	andi	r24, 0x0F	; 15
     1ea:	98 2b       	or	r25, r24
     1ec:	94 83       	std	Z+4, r25	; 0x04
     1ee:	08 95       	ret

000001f0 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     1f0:	80 e4       	ldi	r24, 0x40	; 64
     1f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     1f6:	08 95       	ret

000001f8 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1f8:	80 e4       	ldi	r24, 0x40	; 64
     1fa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1fe:	08 95       	ret

00000200 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     200:	e0 e2       	ldi	r30, 0x20	; 32
     202:	f4 e0       	ldi	r31, 0x04	; 4
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     208:	81 83       	std	Z+1, r24	; 0x01
     20a:	08 95       	ret

0000020c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     20c:	84 e0       	ldi	r24, 0x04	; 4
     20e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     212:	08 95       	ret

00000214 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     214:	e0 e2       	ldi	r30, 0x20	; 32
     216:	f4 e0       	ldi	r31, 0x04	; 4
     218:	85 89       	ldd	r24, Z+21	; 0x15
     21a:	89 60       	ori	r24, 0x09	; 9
     21c:	85 8b       	std	Z+21, r24	; 0x15
     21e:	08 95       	ret

00000220 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	8f 93       	push	r24
     22c:	ef 93       	push	r30
     22e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     230:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     234:	82 ff       	sbrs	r24, 2
     236:	08 c0       	rjmp	.+16     	; 0x248 <__vector_3+0x28>
		flag_button_0_pressed = true;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 5e 3e 	sts	0x3E5E, r24	; 0x803e5e <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     23e:	e9 e0       	ldi	r30, 0x09	; 9
     240:	f4 e0       	ldi	r31, 0x04	; 4
     242:	80 81       	ld	r24, Z
     244:	84 70       	andi	r24, 0x04	; 4
     246:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     248:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     24c:	83 ff       	sbrs	r24, 3
     24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_3+0x40>
		flag_button_1_pressed = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     256:	e9 e0       	ldi	r30, 0x09	; 9
     258:	f4 e0       	ldi	r31, 0x04	; 4
     25a:	80 81       	ld	r24, Z
     25c:	88 70       	andi	r24, 0x08	; 8
     25e:	80 83       	st	Z, r24
	}
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	8f 91       	pop	r24
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	8f 93       	push	r24
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     280:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     284:	85 ff       	sbrs	r24, 5
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_4+0x28>
		flag_heartbeat = true;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     28e:	e9 e2       	ldi	r30, 0x29	; 41
     290:	f4 e0       	ldi	r31, 0x04	; 4
     292:	80 81       	ld	r24, Z
     294:	80 72       	andi	r24, 0x20	; 32
     296:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	8f 91       	pop	r24
     29e:	0f 90       	pop	r0
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	0f 90       	pop	r0
     2a4:	1f 90       	pop	r1
     2a6:	18 95       	reti

000002a8 <__vector_default>:

ISR(BADISR_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	/* This routine is called if a non defined interrupt-vector is requested */
	USART0_sendString_w_newline_eol("bad ISR");
     2ca:	88 e9       	ldi	r24, 0x98	; 152
     2cc:	9b e9       	ldi	r25, 0x9B	; 155
     2ce:	29 d6       	rcall	.+3154   	; 0xf22 <USART0_sendString_w_newline_eol>
     2d0:	ff 91       	pop	r31
     2d2:	ef 91       	pop	r30
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_newline_eol(buffer);
}
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	fa e0       	ldi	r31, 0x0A	; 10
     2f6:	8b e2       	ldi	r24, 0x2B	; 43
     2f8:	9a e0       	ldi	r25, 0x0A	; 10
     2fa:	86 a3       	std	Z+38, r24	; 0x26
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	82 87       	std	Z+10, r24	; 0x0a
     302:	08 95       	ret

00000304 <init_heatbeat_monitor>:
     304:	87 df       	rcall	.-242    	; 0x214 <setup_interrupt_for_hb_edge_detection>
     306:	f5 df       	rcall	.-22     	; 0x2f2 <setup_interrupt_timeout_detection>
     308:	08 95       	ret

0000030a <heartbeat_monitor>:
     30a:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <flag_heartbeat>
     30e:	81 11       	cpse	r24, r1
     310:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <flag_heartbeat>
     314:	08 95       	ret

00000316 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     320:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_bpi_heartbeat_ok>
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     32e:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     332:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_button_1_pressed>
     336:	81 11       	cpse	r24, r1
     338:	02 c0       	rjmp	.+4      	; 0x33e <mainloop_standby+0x10>
     33a:	99 23       	and	r25, r25
     33c:	41 f0       	breq	.+16     	; 0x34e <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     33e:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		flag_button_1_pressed = false;
     342:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 c8 3e 	sts	0x3EC8, r24	; 0x803ec8 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     34c:	e5 d4       	rcall	.+2506   	; 0xd18 <transition_to_pwr_state>
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	80 e7       	ldi	r24, 0x70	; 112
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <mainloop_standby+0x26>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <mainloop_standby+0x30>
     35e:	00 00       	nop
     360:	08 95       	ret

00000362 <mainloop_display_on>:
void reset_idle_timer() {
	/* if timer matches, it brings the sbu back to standby. This function resetts the timer */
	;
}

void mainloop_display_on() {
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
	if (flag_entering_mainloop_display_on) {
     36c:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_entering_mainloop_display_on>
     370:	88 23       	and	r24, r24
     372:	b9 f0       	breq	.+46     	; 0x3a2 <mainloop_display_on+0x40>
		flag_entering_mainloop_display_on = false;
     374:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     378:	84 eb       	ldi	r24, 0xB4	; 180
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     380:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     38c:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
		button1_action = show_menu_actions;
     390:	85 ec       	ldi	r24, 0xC5	; 197
     392:	94 e0       	ldi	r25, 0x04	; 4
     394:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     398:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
		dim_display(1);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	00 df       	rcall	.-512    	; 0x1a2 <dim_display>
	}
	reset_idle_timer();
	show_menu();
     3a2:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     3a6:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     3aa:	09 95       	icall
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	80 e7       	ldi	r24, 0x70	; 112
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <mainloop_display_on+0x50>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <mainloop_display_on+0x5a>
     3bc:	00 00       	nop
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
     3be:	10 92 c9 3e 	sts	0x3EC9, r1	; 0x803ec9 <menu_show_counter>
     3c2:	10 92 ca 3e 	sts	0x3ECA, r1	; 0x803eca <menu_show_counter+0x1>
	while(!flag_button_0_pressed & !button_1_pressed()) {
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3c6:	00 ea       	ldi	r16, 0xA0	; 160
     3c8:	1b e9       	ldi	r17, 0x9B	; 155
     3ca:	c2 e6       	ldi	r28, 0x62	; 98
     3cc:	de e3       	ldi	r29, 0x3E	; 62
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     3ce:	2d c0       	rjmp	.+90     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3d0:	8f e1       	ldi	r24, 0x1F	; 31
     3d2:	9e e4       	ldi	r25, 0x4E	; 78
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <mainloop_display_on+0x72>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <mainloop_display_on+0x78>
     3da:	00 00       	nop
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3dc:	80 91 ca 3e 	lds	r24, 0x3ECA	; 0x803eca <menu_show_counter+0x1>
     3e0:	8f 93       	push	r24
     3e2:	80 91 c9 3e 	lds	r24, 0x3EC9	; 0x803ec9 <menu_show_counter>
     3e6:	8f 93       	push	r24
     3e8:	1f 93       	push	r17
     3ea:	0f 93       	push	r16
     3ec:	df 93       	push	r29
     3ee:	cf 93       	push	r28
     3f0:	d6 d8       	rcall	.-3668   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
		USART0_sendString(buffer);
     3f2:	ce 01       	movw	r24, r28
     3f4:	75 d5       	rcall	.+2794   	; 0xee0 <USART0_sendString>
		menu_show_counter++;
     3f6:	80 91 c9 3e 	lds	r24, 0x3EC9	; 0x803ec9 <menu_show_counter>
     3fa:	90 91 ca 3e 	lds	r25, 0x3ECA	; 0x803eca <menu_show_counter+0x1>
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	80 93 c9 3e 	sts	0x3EC9, r24	; 0x803ec9 <menu_show_counter>
     404:	90 93 ca 3e 	sts	0x3ECA, r25	; 0x803eca <menu_show_counter+0x1>
		if (flag_wakeup_by_rtc) {
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <flag_wakeup_by_rtc>
     418:	21 11       	cpse	r18, r1
     41a:	10 c0       	rjmp	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			break;
		}
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
     41c:	8d 32       	cpi	r24, 0x2D	; 45
     41e:	91 40       	sbci	r25, 0x01	; 1
     420:	20 f0       	brcs	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			flag_goto_sleep = true;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
			break;
     428:	09 c0       	rjmp	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     42a:	f0 90 5e 3e 	lds	r15, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     42e:	a6 de       	rcall	.-692    	; 0x17c <button_1_pressed>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	89 2b       	or	r24, r25
     434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	f2 16       	cp	r15, r18
     43a:	50 f2       	brcs	.-108    	; 0x3d0 <mainloop_display_on+0x6e>
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
			flag_goto_sleep = true;
			break;
		}
	}
	USART0_sendString("out of loop");
     43c:	82 eb       	ldi	r24, 0xB2	; 178
     43e:	9b e9       	ldi	r25, 0x9B	; 155
     440:	4f d5       	rcall	.+2718   	; 0xee0 <USART0_sendString>
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     442:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     446:	88 23       	and	r24, r24
     448:	39 f0       	breq	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		flag_button_0_pressed = false;
     44a:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		button0_action();
     44e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <button0_action>
     452:	f0 91 1a 3e 	lds	r31, 0x3E1A	; 0x803e1a <button0_action+0x1>
     456:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     458:	91 de       	rcall	.-734    	; 0x17c <button_1_pressed>
     45a:	89 2b       	or	r24, r25
     45c:	39 f0       	breq	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		flag_button_1_pressed = false;
     45e:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		button1_action();
     462:	e0 91 17 3e 	lds	r30, 0x3E17	; 0x803e17 <button1_action>
     466:	f0 91 18 3e 	lds	r31, 0x3E18	; 0x803e18 <button1_action+0x1>
     46a:	09 95       	icall
	}
	
	if (flag_goto_sleep) {
     46c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_goto_sleep>
     470:	88 23       	and	r24, r24
     472:	49 f0       	breq	.+18     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		USART0_sendString("going to sleep ...\n");
     474:	8e eb       	ldi	r24, 0xBE	; 190
     476:	9b e9       	ldi	r25, 0x9B	; 155
     478:	33 d5       	rcall	.+2662   	; 0xee0 <USART0_sendString>
		flag_goto_sleep = false;
     47a:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_goto_sleep>
		next_pwr_state = standby;
     47e:	10 92 c8 3e 	sts	0x3EC8, r1	; 0x803ec8 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	49 d4       	rcall	.+2194   	; 0xd18 <transition_to_pwr_state>
	}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	08 95       	ret

00000492 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     492:	3c de       	rcall	.-904    	; 0x10c <init_flags>
	init_pins();
     494:	4f de       	rcall	.-866    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     496:	36 df       	rcall	.-404    	; 0x304 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     498:	7b de       	rcall	.-778    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     49a:	0f d5       	rcall	.+2590   	; 0xeba <init_uart>
	init_display();
     49c:	35 d1       	rcall	.+618    	; 0x708 <init_display>
	adc_init();
     49e:	f1 dd       	rcall	.-1054   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     4a0:	81 e1       	ldi	r24, 0x11	; 17
     4a2:	e2 ed       	ldi	r30, 0xD2	; 210
     4a4:	fb e9       	ldi	r31, 0x9B	; 155
     4a6:	a2 e9       	ldi	r26, 0x92	; 146
     4a8:	be e3       	ldi	r27, 0x3E	; 62
     4aa:	01 90       	ld	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	8a 95       	dec	r24
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <init_sbu+0x18>
	dimmer_init();
     4b2:	fd d1       	rcall	.+1018   	; 0x8ae <dimmer_init>
	sei();
     4b4:	78 94       	sei
     4b6:	08 95       	ret

000004b8 <main>:
}

int main(void)
{
	init_sbu();
     4b8:	ec df       	rcall	.-40     	; 0x492 <init_sbu>

	display_write_string("Standby Unit\nready!");
     4ba:	83 ee       	ldi	r24, 0xE3	; 227
     4bc:	9b e9       	ldi	r25, 0x9B	; 155
     4be:	d4 d1       	rcall	.+936    	; 0x868 <display_write_string>
	USART0_sendString("I:STARTED");
     4c0:	87 ef       	ldi	r24, 0xF7	; 247
     4c2:	9b e9       	ldi	r25, 0x9B	; 155
     4c4:	0d d5       	rcall	.+2586   	; 0xee0 <USART0_sendString>
	dim_display(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	6b de       	rcall	.-810    	; 0x1a2 <dim_display>
	
	current_pwr_state = active;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4d2:	c1 e9       	ldi	r28, 0x91	; 145
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f1 eb       	ldi	r31, 0xB1	; 177
     4da:	cf 2e       	mov	r12, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	df 2e       	mov	r13, r31
     4e0:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f7 e9       	ldi	r31, 0x97	; 151
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4ee:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4f0:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	39 f0       	breq	.+14     	; 0x506 <main+0x4e>
     4f8:	20 f0       	brcs	.+8      	; 0x502 <main+0x4a>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	29 f4       	brne	.+10     	; 0x508 <main+0x50>
			case active:
				mainloop = mainloop_active;
     4fe:	e8 01       	movw	r28, r16
     500:	03 c0       	rjmp	.+6      	; 0x508 <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     502:	e7 01       	movw	r28, r14
				break;
     504:	01 c0       	rjmp	.+2      	; 0x508 <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     506:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     508:	fe 01       	movw	r30, r28
     50a:	09 95       	icall
    }
     50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <main+0x38>

0000050e <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     50e:	e0 e5       	ldi	r30, 0x50	; 80
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	82 60       	ori	r24, 0x02	; 2
     516:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     518:	80 81       	ld	r24, Z
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	80 83       	st	Z, r24
	sleep_cpu();
     51e:	88 95       	sleep
     520:	08 95       	ret

00000522 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	3d de       	rcall	.-902    	; 0x1a2 <dim_display>
	heartbeat_monitor();
     528:	f0 de       	rcall	.-544    	; 0x30a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     52a:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <flag_bpi_heartbeat_ok>
     52e:	81 11       	cpse	r24, r1
     530:	01 c0       	rjmp	.+2      	; 0x534 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     532:	6c de       	rcall	.-808    	; 0x20c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     534:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     538:	88 23       	and	r24, r24
     53a:	19 f0       	breq	.+6      	; 0x542 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     53c:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		led_hmi_off();
     540:	fa d1       	rcall	.+1012   	; 0x936 <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     542:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_button_1_pressed>
     546:	88 23       	and	r24, r24
     548:	29 f0       	breq	.+10     	; 0x554 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     54a:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	9c e9       	ldi	r25, 0x9C	; 156
     552:	c6 d4       	rcall	.+2444   	; 0xee0 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     554:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <flag_usart_string_receive_complete>
     558:	88 23       	and	r24, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <mainloop_active+0x40>
		USART0_process_incoming_message();
     55c:	3a d5       	rcall	.+2676   	; 0xfd2 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     55e:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     562:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_string_for_display_received>
     566:	88 23       	and	r24, r24
     568:	59 f0       	breq	.+22     	; 0x580 <mainloop_active+0x5e>
		flag_string_for_display_received = false;
     56a:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_string_for_display_received>
		display_clear();
     56e:	8f d1       	rcall	.+798    	; 0x88e <display_clear>
		display_write_string(display_line1_content);
     570:	8b ec       	ldi	r24, 0xCB	; 203
     572:	9e e3       	ldi	r25, 0x3E	; 62
     574:	79 d1       	rcall	.+754    	; 0x868 <display_write_string>
		display_next_line();
     576:	6e d1       	rcall	.+732    	; 0x854 <display_next_line>
		display_write_string(display_line2_content);
     578:	83 eb       	ldi	r24, 0xB3	; 179
     57a:	9e e3       	ldi	r25, 0x3E	; 62
     57c:	75 d1       	rcall	.+746    	; 0x868 <display_write_string>
		USART0_send_ready();
     57e:	d7 d4       	rcall	.+2478   	; 0xf2e <USART0_send_ready>
	}
	
	if (flag_pwr_state_change_request == true) {
     580:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_pwr_state_change_request>
     584:	88 23       	and	r24, r24
     586:	61 f0       	breq	.+24     	; 0x5a0 <mainloop_active+0x7e>
		display_clear();
     588:	82 d1       	rcall	.+772    	; 0x88e <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     58a:	8b e0       	ldi	r24, 0x0B	; 11
     58c:	9c e9       	ldi	r25, 0x9C	; 156
     58e:	6c d1       	rcall	.+728    	; 0x868 <display_write_string>
		flag_pwr_state_change_request = false;
     590:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     594:	80 91 c8 3e 	lds	r24, 0x3EC8	; 0x803ec8 <next_pwr_state>
     598:	bf d3       	rcall	.+1918   	; 0xd18 <transition_to_pwr_state>
		flag_goto_sleep = true;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     5a0:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
     5a4:	88 23       	and	r24, r24
     5a6:	39 f0       	breq	.+14     	; 0x5b6 <mainloop_active+0x94>
		display_clear();
     5a8:	72 d1       	rcall	.+740    	; 0x88e <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     5aa:	82 e9       	ldi	r24, 0x92	; 146
     5ac:	9e e3       	ldi	r25, 0x3E	; 62
     5ae:	5c d1       	rcall	.+696    	; 0x868 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     5b0:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
		USART0_send_ready();
     5b4:	bc d4       	rcall	.+2424   	; 0xf2e <USART0_send_ready>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     5b6:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_received_seconds_to_next_bu>
     5ba:	88 23       	and	r24, r24
     5bc:	11 f1       	breq	.+68     	; 0x602 <mainloop_active+0xe0>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     5be:	80 91 c7 3e 	lds	r24, 0x3EC7	; 0x803ec7 <seconds_to_next_bu+0x3>
     5c2:	8f 93       	push	r24
     5c4:	80 91 c6 3e 	lds	r24, 0x3EC6	; 0x803ec6 <seconds_to_next_bu+0x2>
     5c8:	8f 93       	push	r24
     5ca:	80 91 c5 3e 	lds	r24, 0x3EC5	; 0x803ec5 <seconds_to_next_bu+0x1>
     5ce:	8f 93       	push	r24
     5d0:	80 91 c4 3e 	lds	r24, 0x3EC4	; 0x803ec4 <seconds_to_next_bu>
     5d4:	8f 93       	push	r24
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	9c e9       	ldi	r25, 0x9C	; 156
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	82 e6       	ldi	r24, 0x62	; 98
     5e0:	9e e3       	ldi	r25, 0x3E	; 62
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	db d7       	rcall	.+4022   	; 0x159e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     5e8:	82 e6       	ldi	r24, 0x62	; 98
     5ea:	9e e3       	ldi	r25, 0x3E	; 62
     5ec:	9a d4       	rcall	.+2356   	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_received_seconds_to_next_bu = false;
     5ee:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5f2:	ea d3       	rcall	.+2004   	; 0xdc8 <rtc_write_seconds_to_cmp>
		rtc_setup();
     5f4:	dd d3       	rcall	.+1978   	; 0xdb0 <rtc_setup>
		USART0_send_ready();
     5f6:	9b d4       	rcall	.+2358   	; 0xf2e <USART0_send_ready>
     5f8:	8d b7       	in	r24, 0x3d	; 61
     5fa:	9e b7       	in	r25, 0x3e	; 62
     5fc:	08 96       	adiw	r24, 0x08	; 8
     5fe:	8d bf       	out	0x3d, r24	; 61
     600:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     602:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_goto_sleep>
     606:	88 23       	and	r24, r24
     608:	79 f0       	breq	.+30     	; 0x628 <mainloop_active+0x106>
		flag_goto_sleep = false;
     60a:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_goto_sleep>
		USART0_sendString_w_newline_eol("going to sleep ...\n");
     60e:	8e eb       	ldi	r24, 0xBE	; 190
     610:	9b e9       	ldi	r25, 0x9B	; 155
     612:	87 d4       	rcall	.+2318   	; 0xf22 <USART0_sendString_w_newline_eol>
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	20 e7       	ldi	r18, 0x70	; 112
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	91 50       	subi	r25, 0x01	; 1
     61c:	20 40       	sbci	r18, 0x00	; 0
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <mainloop_active+0xf8>
     622:	00 c0       	rjmp	.+0      	; 0x624 <mainloop_active+0x102>
     624:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     626:	73 df       	rcall	.-282    	; 0x50e <goto_sleep_standby>
	}
	
	if (flag_request_current_measurement == true) {
     628:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_request_current_measurement>
     62c:	88 23       	and	r24, r24
     62e:	c1 f0       	breq	.+48     	; 0x660 <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     630:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     634:	4b dd       	rcall	.-1386   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"CC:%d", input_current);
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	85 e4       	ldi	r24, 0x45	; 69
     63c:	9c e9       	ldi	r25, 0x9C	; 156
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	82 e6       	ldi	r24, 0x62	; 98
     644:	9e e3       	ldi	r25, 0x3E	; 62
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	a9 d7       	rcall	.+3922   	; 0x159e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     64c:	82 e6       	ldi	r24, 0x62	; 98
     64e:	9e e3       	ldi	r25, 0x3E	; 62
     650:	68 d4       	rcall	.+2256   	; 0xf22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     652:	6d d4       	rcall	.+2266   	; 0xf2e <USART0_send_ready>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if	(flag_request_temperature_measurement == true) {
     660:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_request_temperature_measurement>
     664:	88 23       	and	r24, r24
     666:	c1 f0       	breq	.+48     	; 0x698 <mainloop_active+0x176>
		flag_request_temperature_measurement = false;
     668:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     66c:	3b dd       	rcall	.-1418   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TP:%d", temperature);
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	8b e4       	ldi	r24, 0x4B	; 75
     674:	9c e9       	ldi	r25, 0x9C	; 156
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	82 e6       	ldi	r24, 0x62	; 98
     67c:	9e e3       	ldi	r25, 0x3E	; 62
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	8d d7       	rcall	.+3866   	; 0x159e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     684:	82 e6       	ldi	r24, 0x62	; 98
     686:	9e e3       	ldi	r25, 0x3E	; 62
     688:	4c d4       	rcall	.+2200   	; 0xf22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     68a:	51 d4       	rcall	.+2210   	; 0xf2e <USART0_send_ready>
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_request_3v3_measurement == true) {
     698:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_request_3v3_measurement>
     69c:	88 23       	and	r24, r24
     69e:	c1 f0       	breq	.+48     	; 0x6d0 <mainloop_active+0x1ae>
		flag_request_3v3_measurement = false;
     6a0:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     6a4:	07 dd       	rcall	.-1522   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V:%d", voltage_3v3);
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	81 e5       	ldi	r24, 0x51	; 81
     6ac:	9c e9       	ldi	r25, 0x9C	; 156
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	82 e6       	ldi	r24, 0x62	; 98
     6b4:	9e e3       	ldi	r25, 0x3E	; 62
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	71 d7       	rcall	.+3810   	; 0x159e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     6bc:	82 e6       	ldi	r24, 0x62	; 98
     6be:	9e e3       	ldi	r25, 0x3E	; 62
     6c0:	30 d4       	rcall	.+2144   	; 0xf22 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     6c2:	35 d4       	rcall	.+2154   	; 0xf2e <USART0_send_ready>
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_dim_display) {
     6d0:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_dim_display>
     6d4:	81 11       	cpse	r24, r1
		//set_dimming_value_display_bl(dimming_value_display);		
		//display_clear();
		//sprintf(buffer,"%u", dimming_value_display);
		//display_write_string(buffer);
		//Todo: update_default_display_dimming_value_in_eeprom();
		flag_dim_display = false;
     6d6:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_dim_display>
		//USART0_send_ready();
	}
	
	if (flag_dim_hmi_led) {
     6da:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_dim_hmi_led>
     6de:	88 23       	and	r24, r24
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <mainloop_active+0x1d0>
		flag_dim_hmi_led = false;
     6e2:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_dim_hmi_led>
		set_hmi_led_dimming_value(dimming_value_hmi_led);
     6e6:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <dimming_value_hmi_led>
     6ea:	90 91 5c 3e 	lds	r25, 0x3E5C	; 0x803e5c <dimming_value_hmi_led+0x1>
     6ee:	15 d1       	rcall	.+554    	; 0x91a <set_hmi_led_dimming_value>
		USART0_send_ready();
     6f0:	1e d4       	rcall	.+2108   	; 0xf2e <USART0_send_ready>
     6f2:	9f ef       	ldi	r25, 0xFF	; 255
     6f4:	20 e7       	ldi	r18, 0x70	; 112
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	91 50       	subi	r25, 0x01	; 1
     6fa:	20 40       	sbci	r18, 0x00	; 0
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <mainloop_active+0x1d6>
     700:	00 c0       	rjmp	.+0      	; 0x702 <mainloop_active+0x1e0>
     702:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     704:	1d d1       	rcall	.+570    	; 0x940 <toggle_hmi_led>
     706:	08 95       	ret

00000708 <init_display>:
void set_dimming_value_display_bl(uint16_t dimming_value) {
	TCA0.SINGLE.CMP0 = dimming_value;
}

void set_dimming_value_led(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     708:	2f e7       	ldi	r18, 0x7F	; 127
     70a:	8a e1       	ldi	r24, 0x1A	; 26
     70c:	96 e0       	ldi	r25, 0x06	; 6
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <init_display+0x6>
     716:	00 c0       	rjmp	.+0      	; 0x718 <init_display+0x10>
     718:	00 00       	nop
     71a:	6e dd       	rcall	.-1316   	; 0x1f8 <display_clear_rs_pin>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	5e dd       	rcall	.-1348   	; 0x1dc <set_display_data_pins>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	4e dd       	rcall	.-1380   	; 0x1c0 <display_enable>
     724:	87 e8       	ldi	r24, 0x87	; 135
     726:	93 e1       	ldi	r25, 0x13	; 19
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <init_display+0x20>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <init_display+0x26>
     72e:	00 00       	nop
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	54 dd       	rcall	.-1368   	; 0x1dc <set_display_data_pins>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	44 dd       	rcall	.-1400   	; 0x1c0 <display_enable>
     738:	87 e8       	ldi	r24, 0x87	; 135
     73a:	93 e1       	ldi	r25, 0x13	; 19
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <init_display+0x34>
     740:	00 c0       	rjmp	.+0      	; 0x742 <init_display+0x3a>
     742:	00 00       	nop
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	4a dd       	rcall	.-1388   	; 0x1dc <set_display_data_pins>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	3a dd       	rcall	.-1420   	; 0x1c0 <display_enable>
     74c:	87 e8       	ldi	r24, 0x87	; 135
     74e:	93 e1       	ldi	r25, 0x13	; 19
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <init_display+0x48>
     754:	00 c0       	rjmp	.+0      	; 0x756 <init_display+0x4e>
     756:	00 00       	nop
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	40 dd       	rcall	.-1408   	; 0x1dc <set_display_data_pins>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	30 dd       	rcall	.-1440   	; 0x1c0 <display_enable>
     760:	87 e8       	ldi	r24, 0x87	; 135
     762:	93 e1       	ldi	r25, 0x13	; 19
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <init_display+0x5c>
     768:	00 c0       	rjmp	.+0      	; 0x76a <init_display+0x62>
     76a:	00 00       	nop
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	36 dd       	rcall	.-1428   	; 0x1dc <set_display_data_pins>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	26 dd       	rcall	.-1460   	; 0x1c0 <display_enable>
     774:	87 e8       	ldi	r24, 0x87	; 135
     776:	93 e1       	ldi	r25, 0x13	; 19
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <init_display+0x70>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <init_display+0x76>
     77e:	00 00       	nop
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	2c dd       	rcall	.-1448   	; 0x1dc <set_display_data_pins>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	1c dd       	rcall	.-1480   	; 0x1c0 <display_enable>
     788:	87 e8       	ldi	r24, 0x87	; 135
     78a:	93 e1       	ldi	r25, 0x13	; 19
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <init_display+0x84>
     790:	00 c0       	rjmp	.+0      	; 0x792 <init_display+0x8a>
     792:	00 00       	nop
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	22 dd       	rcall	.-1468   	; 0x1dc <set_display_data_pins>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	12 dd       	rcall	.-1500   	; 0x1c0 <display_enable>
     79c:	87 e8       	ldi	r24, 0x87	; 135
     79e:	93 e1       	ldi	r25, 0x13	; 19
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <init_display+0x98>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <init_display+0x9e>
     7a6:	00 00       	nop
     7a8:	8c e0       	ldi	r24, 0x0C	; 12
     7aa:	18 dd       	rcall	.-1488   	; 0x1dc <set_display_data_pins>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	08 dd       	rcall	.-1520   	; 0x1c0 <display_enable>
     7b0:	87 e8       	ldi	r24, 0x87	; 135
     7b2:	93 e1       	ldi	r25, 0x13	; 19
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <init_display+0xac>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <init_display+0xb2>
     7ba:	00 00       	nop
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e dd       	rcall	.-1508   	; 0x1dc <set_display_data_pins>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	fe dc       	rcall	.-1540   	; 0x1c0 <display_enable>
     7c4:	87 e8       	ldi	r24, 0x87	; 135
     7c6:	93 e1       	ldi	r25, 0x13	; 19
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <init_display+0xc0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <init_display+0xc6>
     7ce:	00 00       	nop
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	04 dd       	rcall	.-1528   	; 0x1dc <set_display_data_pins>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	f4 dc       	rcall	.-1560   	; 0x1c0 <display_enable>
     7d8:	87 e8       	ldi	r24, 0x87	; 135
     7da:	93 e1       	ldi	r25, 0x13	; 19
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <init_display+0xd4>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <init_display+0xda>
     7e2:	00 00       	nop
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	fa dc       	rcall	.-1548   	; 0x1dc <set_display_data_pins>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	ea dc       	rcall	.-1580   	; 0x1c0 <display_enable>
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	93 e1       	ldi	r25, 0x13	; 19
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <init_display+0xe8>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <init_display+0xee>
     7f6:	00 00       	nop
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	f0 dc       	rcall	.-1568   	; 0x1dc <set_display_data_pins>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	e0 dc       	rcall	.-1600   	; 0x1c0 <display_enable>
     800:	87 e8       	ldi	r24, 0x87	; 135
     802:	93 e1       	ldi	r25, 0x13	; 19
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <init_display+0xfc>
     808:	00 c0       	rjmp	.+0      	; 0x80a <init_display+0x102>
     80a:	00 00       	nop
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	e6 dc       	rcall	.-1588   	; 0x1dc <set_display_data_pins>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	d6 dc       	rcall	.-1620   	; 0x1c0 <display_enable>
     814:	87 e8       	ldi	r24, 0x87	; 135
     816:	93 e1       	ldi	r25, 0x13	; 19
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <init_display+0x110>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <init_display+0x116>
     81e:	00 00       	nop
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	dc dc       	rcall	.-1608   	; 0x1dc <set_display_data_pins>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	cc dc       	rcall	.-1640   	; 0x1c0 <display_enable>
     828:	87 e8       	ldi	r24, 0x87	; 135
     82a:	93 e1       	ldi	r25, 0x13	; 19
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <init_display+0x124>
     830:	00 c0       	rjmp	.+0      	; 0x832 <init_display+0x12a>
     832:	00 00       	nop
     834:	08 95       	ret

00000836 <display_write_char>:
     836:	cf 93       	push	r28
     838:	c8 2f       	mov	r28, r24
     83a:	da dc       	rcall	.-1612   	; 0x1f0 <display_set_rs_pin>
     83c:	8c 2f       	mov	r24, r28
     83e:	82 95       	swap	r24
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	cc dc       	rcall	.-1640   	; 0x1dc <set_display_data_pins>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	bc dc       	rcall	.-1672   	; 0x1c0 <display_enable>
     848:	8c 2f       	mov	r24, r28
     84a:	c8 dc       	rcall	.-1648   	; 0x1dc <set_display_data_pins>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	b8 dc       	rcall	.-1680   	; 0x1c0 <display_enable>
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <display_next_line>:
     854:	d1 dc       	rcall	.-1630   	; 0x1f8 <display_clear_rs_pin>
     856:	8c e0       	ldi	r24, 0x0C	; 12
     858:	c1 dc       	rcall	.-1662   	; 0x1dc <set_display_data_pins>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	b1 dc       	rcall	.-1694   	; 0x1c0 <display_enable>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	bd dc       	rcall	.-1670   	; 0x1dc <set_display_data_pins>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	ad dc       	rcall	.-1702   	; 0x1c0 <display_enable>
     866:	08 95       	ret

00000868 <display_write_string>:
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
     86e:	c0 dc       	rcall	.-1664   	; 0x1f0 <display_set_rs_pin>
     870:	88 81       	ld	r24, Y
     872:	88 23       	and	r24, r24
     874:	49 f0       	breq	.+18     	; 0x888 <display_write_string+0x20>
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	8a 30       	cpi	r24, 0x0A	; 10
     87a:	11 f4       	brne	.+4      	; 0x880 <display_write_string+0x18>
     87c:	eb df       	rcall	.-42     	; 0x854 <display_next_line>
     87e:	01 c0       	rjmp	.+2      	; 0x882 <display_write_string+0x1a>
     880:	da df       	rcall	.-76     	; 0x836 <display_write_char>
     882:	89 91       	ld	r24, Y+
     884:	81 11       	cpse	r24, r1
     886:	f8 cf       	rjmp	.-16     	; 0x878 <display_write_string+0x10>
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <display_clear>:
     88e:	b4 dc       	rcall	.-1688   	; 0x1f8 <display_clear_rs_pin>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	a4 dc       	rcall	.-1720   	; 0x1dc <set_display_data_pins>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	94 dc       	rcall	.-1752   	; 0x1c0 <display_enable>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	a0 dc       	rcall	.-1728   	; 0x1dc <set_display_data_pins>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 dc       	rcall	.-1760   	; 0x1c0 <display_enable>
     8a0:	87 ea       	ldi	r24, 0xA7	; 167
     8a2:	91 e6       	ldi	r25, 0x61	; 97
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <display_clear+0x16>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <display_clear+0x1c>
     8aa:	00 00       	nop
     8ac:	08 95       	ret

000008ae <dimmer_init>:
     8ae:	e0 e0       	ldi	r30, 0x00	; 0
     8b0:	fa e0       	ldi	r31, 0x0A	; 10
     8b2:	82 85       	ldd	r24, Z+10	; 0x0a
     8b4:	8e 78       	andi	r24, 0x8E	; 142
     8b6:	82 87       	std	Z+10, r24	; 0x0a
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	83 60       	ori	r24, 0x03	; 3
     8bc:	81 83       	std	Z+1, r24	; 0x01
     8be:	80 81       	ld	r24, Z
     8c0:	80 83       	st	Z, r24
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	86 ab       	std	Z+54, r24	; 0x36
     8c8:	97 ab       	std	Z+55, r25	; 0x37
     8ca:	21 85       	ldd	r18, Z+9	; 0x09
     8cc:	2e 7f       	andi	r18, 0xFE	; 254
     8ce:	21 87       	std	Z+9, r18	; 0x09
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b2 e0       	ldi	r27, 0x02	; 2
     8d4:	12 96       	adiw	r26, 0x02	; 2
     8d6:	2c 91       	ld	r18, X
     8d8:	12 97       	sbiw	r26, 0x02	; 2
     8da:	22 60       	ori	r18, 0x02	; 2
     8dc:	12 96       	adiw	r26, 0x02	; 2
     8de:	2c 93       	st	X, r18
     8e0:	21 81       	ldd	r18, Z+1	; 0x01
     8e2:	20 61       	ori	r18, 0x10	; 16
     8e4:	21 83       	std	Z+1, r18	; 0x01
     8e6:	21 81       	ldd	r18, Z+1	; 0x01
     8e8:	20 62       	ori	r18, 0x20	; 32
     8ea:	21 83       	std	Z+1, r18	; 0x01
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	31 e0       	ldi	r19, 0x01	; 1
     8f0:	20 93 5f 3e 	sts	0x3E5F, r18	; 0x803e5f <dimming_value_display>
     8f4:	30 93 60 3e 	sts	0x3E60, r19	; 0x803e60 <dimming_value_display+0x1>
     8f8:	20 a7       	std	Z+40, r18	; 0x28
     8fa:	31 a7       	std	Z+41, r19	; 0x29
     8fc:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <dimming_value_hmi_led>
     900:	90 93 5c 3e 	sts	0x3E5C, r25	; 0x803e5c <dimming_value_hmi_led+0x1>
     904:	82 a7       	std	Z+42, r24	; 0x2a
     906:	93 a7       	std	Z+43, r25	; 0x2b
     908:	80 81       	ld	r24, Z
     90a:	81 60       	ori	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24
     90e:	08 95       	ret

00000910 <set_dimming_value_display_bl>:
     910:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     914:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     918:	08 95       	ret

0000091a <set_hmi_led_dimming_value>:
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     91a:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     91e:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     922:	08 95       	ret

00000924 <led_hmi_on>:
}

void led_hmi_on(void) {
	set_hmi_led_dimming_value(dimming_value_hmi_led);
     924:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <dimming_value_hmi_led>
     928:	90 91 5c 3e 	lds	r25, 0x3E5C	; 0x803e5c <dimming_value_hmi_led+0x1>
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     92c:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     930:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     934:	08 95       	ret

00000936 <led_hmi_off>:
     936:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     93a:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     93e:	08 95       	ret

00000940 <toggle_hmi_led>:
void led_hmi_off(void) {
	set_hmi_led_dimming_value(0);
}

void toggle_hmi_led(void) {
	if(TCA0.SINGLE.CMP1 == 0x0000) {
     940:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     944:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     948:	89 2b       	or	r24, r25
     94a:	11 f4       	brne	.+4      	; 0x950 <toggle_hmi_led+0x10>
		led_hmi_on();
     94c:	eb df       	rcall	.-42     	; 0x924 <led_hmi_on>
     94e:	08 95       	ret
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     950:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     954:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     958:	08 95       	ret

0000095a <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     95a:	84 eb       	ldi	r24, 0xB4	; 180
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     962:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     966:	08 95       	ret

00000968 <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     968:	92 df       	rcall	.-220    	; 0x88e <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     96a:	87 e5       	ldi	r24, 0x57	; 87
     96c:	9c e9       	ldi	r25, 0x9C	; 156
     96e:	7c df       	rcall	.-264    	; 0x868 <display_write_string>
	button0_action = show_menu_timestamp;
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	95 e0       	ldi	r25, 0x05	; 5
     974:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     978:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = show_menu_actions;
     97c:	85 ec       	ldi	r24, 0xC5	; 197
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     984:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     988:	08 95       	ret

0000098a <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     98a:	85 ec       	ldi	r24, 0xC5	; 197
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     992:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     996:	7b df       	rcall	.-266    	; 0x88e <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     998:	89 e7       	ldi	r24, 0x79	; 121
     99a:	9c e9       	ldi	r25, 0x9C	; 156
     99c:	65 df       	rcall	.-310    	; 0x868 <display_write_string>
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
     99e:	8c ed       	ldi	r24, 0xDC	; 220
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     9a6:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = show_menu_sure_about_waking_bcu;
     9aa:	83 ef       	ldi	r24, 0xF3	; 243
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     9b2:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     9b6:	08 95       	ret

000009b8 <show_menu_sure_about_waking_bcu_and_backup>:
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}

void show_menu_sure_about_waking_bcu_and_backup() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     9b8:	8c ed       	ldi	r24, 0xDC	; 220
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9c0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9c4:	64 df       	rcall	.-312    	; 0x88e <display_clear>
	display_write_string("Sure?       No >\n           Yes >");
     9c6:	8b e9       	ldi	r24, 0x9B	; 155
     9c8:	9c e9       	ldi	r25, 0x9C	; 156
     9ca:	4e df       	rcall	.-356    	; 0x868 <display_write_string>
	button0_action = back_to_main_menu;
     9cc:	8d ea       	ldi	r24, 0xAD	; 173
     9ce:	94 e0       	ldi	r25, 0x04	; 4
     9d0:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     9d4:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = wake_bcu_and_do_backup_now;
     9d8:	85 e3       	ldi	r24, 0x35	; 53
     9da:	96 e0       	ldi	r25, 0x06	; 6
     9dc:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     9e0:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     9e4:	08 95       	ret

000009e6 <show_menu_sure_about_waking_bcu>:
}

void show_menu_sure_about_waking_bcu() {
	show_menu = show_menu_sure_about_waking_bcu;
     9e6:	83 ef       	ldi	r24, 0xF3	; 243
     9e8:	94 e0       	ldi	r25, 0x04	; 4
     9ea:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9ee:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9f2:	4d df       	rcall	.-358    	; 0x88e <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     9f4:	8d eb       	ldi	r24, 0xBD	; 189
     9f6:	9c e9       	ldi	r25, 0x9C	; 156
     9f8:	37 df       	rcall	.-402    	; 0x868 <display_write_string>
	button0_action = wake_bcu;
     9fa:	81 e4       	ldi	r24, 0x41	; 65
     9fc:	96 e0       	ldi	r25, 0x06	; 6
     9fe:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     a02:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = back_to_main_menu;
     a06:	8d ea       	ldi	r24, 0xAD	; 173
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     a0e:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     a12:	08 95       	ret

00000a14 <show_menu_timestamp>:
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     a14:	2f 92       	push	r2
     a16:	3f 92       	push	r3
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <show_menu_timestamp+0x26>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <show_menu_timestamp+0x28>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	show_menu = show_menu_timestamp;
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	95 e0       	ldi	r25, 0x05	; 5
     a44:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     a48:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
     a4c:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a50:	90 90 4d 01 	lds	r9, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a54:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a58:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a5c:	88 1a       	sub	r8, r24
     a5e:	99 0a       	sbc	r9, r25
     a60:	a1 2c       	mov	r10, r1
     a62:	b1 2c       	mov	r11, r1
     a64:	88 0c       	add	r8, r8
     a66:	99 1c       	adc	r9, r9
     a68:	aa 1c       	adc	r10, r10
     a6a:	bb 1c       	adc	r11, r11
     a6c:	88 0c       	add	r8, r8
     a6e:	99 1c       	adc	r9, r9
     a70:	aa 1c       	adc	r10, r10
     a72:	bb 1c       	adc	r11, r11
     a74:	88 0c       	add	r8, r8
     a76:	99 1c       	adc	r9, r9
     a78:	aa 1c       	adc	r10, r10
     a7a:	bb 1c       	adc	r11, r11
     a7c:	88 0c       	add	r8, r8
     a7e:	99 1c       	adc	r9, r9
     a80:	aa 1c       	adc	r10, r10
     a82:	bb 1c       	adc	r11, r11
     a84:	88 0c       	add	r8, r8
     a86:	99 1c       	adc	r9, r9
     a88:	aa 1c       	adc	r10, r10
     a8a:	bb 1c       	adc	r11, r11
	uint32_t days = seconds / 3600;
	days = days / 24;
     a8c:	c5 01       	movw	r24, r10
     a8e:	b4 01       	movw	r22, r8
     a90:	20 e8       	ldi	r18, 0x80	; 128
     a92:	31 e5       	ldi	r19, 0x51	; 81
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	e5 d3       	rcall	.+1994   	; 0x1264 <__udivmodsi4>
     a9a:	2b 83       	std	Y+3, r18	; 0x03
     a9c:	3c 83       	std	Y+4, r19	; 0x04
     a9e:	14 2f       	mov	r17, r20
     aa0:	05 2f       	mov	r16, r21
     aa2:	c2 2e       	mov	r12, r18
     aa4:	d3 2e       	mov	r13, r19
     aa6:	e4 2e       	mov	r14, r20
     aa8:	f5 2e       	mov	r15, r21
	for(int i = 0; i < days ; i++) {
     aaa:	c1 14       	cp	r12, r1
     aac:	d1 04       	cpc	r13, r1
     aae:	e1 04       	cpc	r14, r1
     ab0:	f1 04       	cpc	r15, r1
     ab2:	b9 f4       	brne	.+46     	; 0xae2 <show_menu_timestamp+0xce>
     ab4:	ab c0       	rjmp	.+342    	; 0xc0c <show_menu_timestamp+0x1f8>
     ab6:	01 97       	sbiw	r24, 0x01	; 1
	   for(int j = 0; j < 24; j++) {
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <show_menu_timestamp+0xa2>
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	88 1a       	sub	r8, r24
     abe:	81 e5       	ldi	r24, 0x51	; 81
     ac0:	98 0a       	sbc	r9, r24
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	a8 0a       	sbc	r10, r24
     ac6:	b1 08       	sbc	r11, r1
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
	uint32_t days = seconds / 3600;
	days = days / 24;
	for(int i = 0; i < days ; i++) {
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	c9 01       	movw	r24, r18
     ace:	03 2e       	mov	r0, r19
     ad0:	00 0c       	add	r0, r0
     ad2:	aa 0b       	sbc	r26, r26
     ad4:	bb 0b       	sbc	r27, r27
     ad6:	8c 15       	cp	r24, r12
     ad8:	9d 05       	cpc	r25, r13
     ada:	ae 05       	cpc	r26, r14
     adc:	bf 05       	cpc	r27, r15
     ade:	18 f0       	brcs	.+6      	; 0xae6 <show_menu_timestamp+0xd2>
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <show_menu_timestamp+0xd8>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	e5 cf       	rjmp	.-54     	; 0xab6 <show_menu_timestamp+0xa2>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	20 e1       	ldi	r18, 0x10	; 16
     af2:	3e e0       	ldi	r19, 0x0E	; 14
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	b5 d3       	rcall	.+1898   	; 0x1264 <__udivmodsi4>
     afa:	b2 2e       	mov	r11, r18
     afc:	a3 2e       	mov	r10, r19
     afe:	94 2e       	mov	r9, r20
     b00:	85 2e       	mov	r8, r21
     b02:	42 2e       	mov	r4, r18
     b04:	53 2e       	mov	r5, r19
     b06:	64 2e       	mov	r6, r20
     b08:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     b0a:	2c e3       	ldi	r18, 0x3C	; 60
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	a8 d3       	rcall	.+1872   	; 0x1264 <__udivmodsi4>
     b14:	22 2e       	mov	r2, r18
     b16:	33 2e       	mov	r3, r19
     b18:	b4 2f       	mov	r27, r20
     b1a:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     b1c:	f6 2f       	mov	r31, r22
     b1e:	79 83       	std	Y+1, r23	; 0x01
     b20:	8a 83       	std	Y+2, r24	; 0x02
     b22:	e9 2f       	mov	r30, r25
	switch (days) {
     b24:	c1 14       	cp	r12, r1
     b26:	d1 04       	cpc	r13, r1
     b28:	e1 04       	cpc	r14, r1
     b2a:	f1 04       	cpc	r15, r1
     b2c:	39 f0       	breq	.+14     	; 0xb3c <show_menu_timestamp+0x128>
     b2e:	ea e0       	ldi	r30, 0x0A	; 10
     b30:	ce 16       	cp	r12, r30
     b32:	d1 04       	cpc	r13, r1
     b34:	e1 04       	cpc	r14, r1
     b36:	f1 04       	cpc	r15, r1
     b38:	c8 f5       	brcc	.+114    	; 0xbac <show_menu_timestamp+0x198>
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <show_menu_timestamp+0x15c>
		case 0:
			sprintf(buffer, "ETA:    %02lu:%02lu:%02lu", hours, minutes, seconds);
     b3c:	ef 93       	push	r30
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	8f 93       	push	r24
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	9f 93       	push	r25
     b46:	ff 93       	push	r31
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	3f 92       	push	r3
     b4e:	2f 92       	push	r2
     b50:	7f 92       	push	r7
     b52:	6f 92       	push	r6
     b54:	5f 92       	push	r5
     b56:	4f 92       	push	r4
     b58:	8f ed       	ldi	r24, 0xDF	; 223
     b5a:	9c e9       	ldi	r25, 0x9C	; 156
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	82 e6       	ldi	r24, 0x62	; 98
     b62:	9e e3       	ldi	r25, 0x3E	; 62
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	1a d5       	rcall	.+2612   	; 0x159e <sprintf>
			break;
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	3b c0       	rjmp	.+118    	; 0xbe6 <show_menu_timestamp+0x1d2>
		case 1 ... 9:
			sprintf(buffer, "ETA %lu  %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	7f 93       	push	r23
     b76:	6f 93       	push	r22
     b78:	5f 93       	push	r21
     b7a:	4f 93       	push	r20
     b7c:	3f 93       	push	r19
     b7e:	2f 93       	push	r18
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	9f 93       	push	r25
     b90:	eb 81       	ldd	r30, Y+3	; 0x03
     b92:	ef 93       	push	r30
     b94:	89 ef       	ldi	r24, 0xF9	; 249
     b96:	9c e9       	ldi	r25, 0x9C	; 156
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	82 e6       	ldi	r24, 0x62	; 98
     b9e:	9e e3       	ldi	r25, 0x3E	; 62
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	fc d4       	rcall	.+2552   	; 0x159e <sprintf>
			break;
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	1d c0       	rjmp	.+58     	; 0xbe6 <show_menu_timestamp+0x1d2>
		default:
			sprintf(buffer, "ETA %lud %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	7f 93       	push	r23
     bb2:	6f 93       	push	r22
     bb4:	5f 93       	push	r21
     bb6:	4f 93       	push	r20
     bb8:	3f 93       	push	r19
     bba:	2f 93       	push	r18
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	9f 93       	push	r25
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	ef 93       	push	r30
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	9d e9       	ldi	r25, 0x9D	; 157
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	82 e6       	ldi	r24, 0x62	; 98
     bda:	9e e3       	ldi	r25, 0x3E	; 62
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	de d4       	rcall	.+2492   	; 0x159e <sprintf>
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	de bf       	out	0x3e, r29	; 62
	}
	
	display_clear();
     be6:	53 de       	rcall	.-858    	; 0x88e <display_clear>
	display_write_string(human_readable_timestamp_next_bu);
     be8:	82 e9       	ldi	r24, 0x92	; 146
     bea:	9e e3       	ldi	r25, 0x3E	; 62
     bec:	3d de       	rcall	.-902    	; 0x868 <display_write_string>
	display_next_line();
     bee:	32 de       	rcall	.-924    	; 0x854 <display_next_line>
	display_write_string(buffer);
     bf0:	82 e6       	ldi	r24, 0x62	; 98
     bf2:	9e e3       	ldi	r25, 0x3E	; 62
     bf4:	39 de       	rcall	.-910    	; 0x868 <display_write_string>
	button0_action = back_to_main_menu;
     bf6:	8d ea       	ldi	r24, 0xAD	; 173
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     bfe:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = back_to_main_menu;
     c02:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     c06:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
}
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <show_menu_timestamp+0x22a>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     c0c:	c5 01       	movw	r24, r10
     c0e:	b4 01       	movw	r22, r8
     c10:	20 e1       	ldi	r18, 0x10	; 16
     c12:	3e e0       	ldi	r19, 0x0E	; 14
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	25 d3       	rcall	.+1610   	; 0x1264 <__udivmodsi4>
     c1a:	42 2e       	mov	r4, r18
     c1c:	53 2e       	mov	r5, r19
     c1e:	64 2e       	mov	r6, r20
     c20:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     c22:	2c e3       	ldi	r18, 0x3C	; 60
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	1c d3       	rcall	.+1592   	; 0x1264 <__udivmodsi4>
     c2c:	22 2e       	mov	r2, r18
     c2e:	33 2e       	mov	r3, r19
     c30:	b4 2f       	mov	r27, r20
     c32:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     c34:	f6 2f       	mov	r31, r22
     c36:	79 83       	std	Y+1, r23	; 0x01
     c38:	8a 83       	std	Y+2, r24	; 0x02
     c3a:	e9 2f       	mov	r30, r25
     c3c:	7f cf       	rjmp	.-258    	; 0xb3c <show_menu_timestamp+0x128>
	display_write_string(human_readable_timestamp_next_bu);
	display_next_line();
	display_write_string(buffer);
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}
     c3e:	24 96       	adiw	r28, 0x04	; 4
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	3f 90       	pop	r3
     c66:	2f 90       	pop	r2
     c68:	08 95       	ret

00000c6a <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     c6a:	11 de       	rcall	.-990    	; 0x88e <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     c6c:	8f e2       	ldi	r24, 0x2F	; 47
     c6e:	9d e9       	ldi	r25, 0x9D	; 157
     c70:	fb dd       	rcall	.-1034   	; 0x868 <display_write_string>
	flag_schedule_backup_now = true;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_schedule_backup_now>
	next_pwr_state = active;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	80 93 c8 3e 	sts	0x3EC8, r24	; 0x803ec8 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     c7e:	4c d0       	rcall	.+152    	; 0xd18 <transition_to_pwr_state>
     c80:	08 95       	ret

00000c82 <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     c82:	05 de       	rcall	.-1014   	; 0x88e <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     c84:	8f e2       	ldi	r24, 0x2F	; 47
     c86:	9d e9       	ldi	r25, 0x9D	; 157
     c88:	ef dd       	rcall	.-1058   	; 0x868 <display_write_string>
	next_pwr_state = active;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	80 93 c8 3e 	sts	0x3EC8, r24	; 0x803ec8 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     c90:	43 d0       	rcall	.+134    	; 0xd18 <transition_to_pwr_state>
     c92:	08 95       	ret

00000c94 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f4 e0       	ldi	r31, 0x04	; 4
     c98:	84 81       	ldd	r24, Z+4	; 0x04
     c9a:	80 61       	ori	r24, 0x10	; 16
     c9c:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     ca4:	08 95       	ret

00000ca6 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     ca6:	e0 e0       	ldi	r30, 0x00	; 0
     ca8:	f4 e0       	ldi	r31, 0x04	; 4
     caa:	84 81       	ldd	r24, Z+4	; 0x04
     cac:	8f 7e       	andi	r24, 0xEF	; 239
     cae:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     cb0:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     cb4:	08 95       	ret

00000cb6 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     cb6:	e0 e2       	ldi	r30, 0x20	; 32
     cb8:	f4 e0       	ldi	r31, 0x04	; 4
     cba:	84 81       	ldd	r24, Z+4	; 0x04
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     cc6:	08 95       	ret

00000cc8 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     cc8:	e0 e2       	ldi	r30, 0x20	; 32
     cca:	f4 e0       	ldi	r31, 0x04	; 4
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     cd2:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     cd6:	08 95       	ret

00000cd8 <wait_until_bpi_ready_for_shutdown>:
			current_pwr_state = active;
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
     cd8:	cf 93       	push	r28
	display_clear();
     cda:	d9 dd       	rcall	.-1102   	; 0x88e <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     cdc:	8f e4       	ldi	r24, 0x4F	; 79
     cde:	9d e9       	ldi	r25, 0x9D	; 157
     ce0:	c3 dd       	rcall	.-1146   	; 0x868 <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     ce2:	c0 91 15 3e 	lds	r28, 0x3E15	; 0x803e15 <flag_bpi_heartbeat_ok>
		if(flag_abort_shutdown) {
     ce6:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_abort_shutdown>
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
	display_write_string("Waiting for BCU\nHB to stop");
	while (flag_bpi_heartbeat_ok == true) {
     cea:	cc 23       	and	r28, r28
     cec:	19 f0       	breq	.+6      	; 0xcf4 <wait_until_bpi_ready_for_shutdown+0x1c>
		if(flag_abort_shutdown) {
     cee:	88 23       	and	r24, r24
     cf0:	f1 f3       	breq	.-4      	; 0xcee <wait_until_bpi_ready_for_shutdown+0x16>
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <wait_until_bpi_ready_for_shutdown+0x38>
			return false;
		}
	}
	display_clear();
     cf4:	cc dd       	rcall	.-1128   	; 0x88e <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     cf6:	8a e6       	ldi	r24, 0x6A	; 106
     cf8:	9d e9       	ldi	r25, 0x9D	; 157
     cfa:	b6 dd       	rcall	.-1172   	; 0x868 <display_write_string>
	while (vcc3v3_present() == true) {
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <wait_until_bpi_ready_for_shutdown+0x2e>
		if(flag_abort_shutdown) {
     cfe:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_abort_shutdown>
     d02:	81 11       	cpse	r24, r1
     d04:	06 c0       	rjmp	.+12     	; 0xd12 <wait_until_bpi_ready_for_shutdown+0x3a>
			return false;
		}
	}
	display_clear();
	display_write_string("Waiting for 3V3\nto go low");
	while (vcc3v3_present() == true) {
     d06:	fa d9       	rcall	.-3084   	; 0xfc <vcc3v3_present>
     d08:	81 11       	cpse	r24, r1
     d0a:	f9 cf       	rjmp	.-14     	; 0xcfe <wait_until_bpi_ready_for_shutdown+0x26>
		if(flag_abort_shutdown) {
			return false;
		}
	}
	return true;
     d0c:	c1 e0       	ldi	r28, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <wait_until_bpi_ready_for_shutdown+0x3a>
bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
	display_write_string("Waiting for BCU\nHB to stop");
	while (flag_bpi_heartbeat_ok == true) {
		if(flag_abort_shutdown) {
			return false;
     d10:	c0 e0       	ldi	r28, 0x00	; 0
		if(flag_abort_shutdown) {
			return false;
		}
	}
	return true;
     d12:	8c 2f       	mov	r24, r28
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <transition_to_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void transition_to_pwr_state(enum pwr_states pwr_state) {
     d18:	cf 93       	push	r28
	switch(pwr_state) {
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	a1 f0       	breq	.+40     	; 0xd46 <transition_to_pwr_state+0x2e>
     d1e:	18 f0       	brcs	.+6      	; 0xd26 <transition_to_pwr_state+0xe>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	11 f1       	breq	.+68     	; 0xd68 <transition_to_pwr_state+0x50>
     d24:	38 c0       	rjmp	.+112    	; 0xd96 <transition_to_pwr_state+0x7e>
		case standby:
			if (current_pwr_state == active) {
     d26:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	19 f4       	brne	.+6      	; 0xd34 <transition_to_pwr_state+0x1c>
				if(!wait_until_bpi_ready_for_shutdown()) {
     d2e:	d4 df       	rcall	.-88     	; 0xcd8 <wait_until_bpi_ready_for_shutdown>
     d30:	88 23       	and	r24, r24
     d32:	89 f1       	breq	.+98     	; 0xd96 <transition_to_pwr_state+0x7e>
					/* shutdown aborted */
					break;
				}
			}
			disable_bpi_sply();
     d34:	c9 df       	rcall	.-110    	; 0xcc8 <disable_bpi_sply>
			dim_display(0);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	33 da       	rcall	.-2970   	; 0x1a2 <dim_display>
			led_hmi_off();
     d3c:	fc dd       	rcall	.-1032   	; 0x936 <led_hmi_off>
			disable_5v0_smps();
     d3e:	b3 df       	rcall	.-154    	; 0xca6 <disable_5v0_smps>
			//flag_goto_sleep = true; //why was that set true here??
			current_pwr_state = standby;
     d40:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <current_pwr_state>
			break;
     d44:	28 c0       	rjmp	.+80     	; 0xd96 <transition_to_pwr_state+0x7e>
		
		case display_on:
			current_pwr_state = display_on;
     d46:	c1 e0       	ldi	r28, 0x01	; 1
     d48:	c0 93 61 3e 	sts	0x3E61, r28	; 0x803e61 <current_pwr_state>
			set_interrupts_for_buttons();
     d4c:	21 da       	rcall	.-3006   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     d4e:	a2 df       	rcall	.-188    	; 0xc94 <enable_5v0_smps>
     d50:	86 e4       	ldi	r24, 0x46	; 70
     d52:	90 e1       	ldi	r25, 0x10	; 16
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <transition_to_pwr_state+0x3c>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <transition_to_pwr_state+0x42>
			_delay_ms(5);
			init_display();
     d5a:	d6 dc       	rcall	.-1620   	; 0x708 <init_display>
			flag_entering_mainloop_display_on = true;
     d5c:	c0 93 08 3e 	sts	0x3E08, r28	; 0x803e08 <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     d60:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_wakeup_by_rtc>
     d64:	88 23       	and	r24, r24
     d66:	b9 f0       	breq	.+46     	; 0xd96 <transition_to_pwr_state+0x7e>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	e4 e8       	ldi	r30, 0x84	; 132
     d6c:	fd e9       	ldi	r31, 0x9D	; 157
     d6e:	ab ec       	ldi	r26, 0xCB	; 203
     d70:	be e3       	ldi	r27, 0x3E	; 62
     d72:	01 90       	ld	r0, Z+
     d74:	0d 92       	st	X+, r0
     d76:	8a 95       	dec	r24
     d78:	e1 f7       	brne	.-8      	; 0xd72 <transition_to_pwr_state+0x5a>
			strcpy(display_line2_content,"Please wait ...");
     d7a:	80 e1       	ldi	r24, 0x10	; 16
     d7c:	e4 e9       	ldi	r30, 0x94	; 148
     d7e:	fd e9       	ldi	r31, 0x9D	; 157
     d80:	a3 eb       	ldi	r26, 0xB3	; 179
     d82:	be e3       	ldi	r27, 0x3E	; 62
     d84:	01 90       	ld	r0, Z+
     d86:	0d 92       	st	X+, r0
     d88:	8a 95       	dec	r24
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <transition_to_pwr_state+0x6c>
			enable_5v0_smps();
     d8c:	83 df       	rcall	.-250    	; 0xc94 <enable_5v0_smps>
			enable_bpi_sply();
     d8e:	93 df       	rcall	.-218    	; 0xcb6 <enable_bpi_sply>
			current_pwr_state = active;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <current_pwr_state>
			break;
	}
}
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     d9a:	e0 e4       	ldi	r30, 0x40	; 64
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	10 86       	std	Z+8, r1	; 0x08
     da0:	11 86       	std	Z+9, r1	; 0x09
     da2:	08 95       	ret

00000da4 <rtc_wait_for_all_status_bits_zero>:
     da4:	e0 e4       	ldi	r30, 0x40	; 64
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	81 11       	cpse	r24, r1
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <rtc_wait_for_all_status_bits_zero+0x4>
     dae:	08 95       	ret

00000db0 <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     db0:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     db4:	f7 df       	rcall	.-18     	; 0xda4 <rtc_wait_for_all_status_bits_zero>

void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm; // <- one counter increment represents 32 seconds
     db6:	e0 e4       	ldi	r30, 0x40	; 64
     db8:	f1 e0       	ldi	r31, 0x01	; 1
     dba:	89 ef       	ldi	r24, 0xF9	; 249
     dbc:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	87 83       	std	Z+7, r24	; 0x07
     dc6:	08 95       	ret

00000dc8 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     dd0:	c0 90 c4 3e 	lds	r12, 0x3EC4	; 0x803ec4 <seconds_to_next_bu>
     dd4:	d0 90 c5 3e 	lds	r13, 0x3EC5	; 0x803ec5 <seconds_to_next_bu+0x1>
     dd8:	e0 90 c6 3e 	lds	r14, 0x3EC6	; 0x803ec6 <seconds_to_next_bu+0x2>
     ddc:	f0 90 c7 3e 	lds	r15, 0x3EC7	; 0x803ec7 <seconds_to_next_bu+0x3>
     de0:	ff 20       	and	r15, r15
     de2:	2c f4       	brge	.+10     	; 0xdee <rtc_write_seconds_to_cmp+0x26>
     de4:	8f e1       	ldi	r24, 0x1F	; 31
     de6:	c8 0e       	add	r12, r24
     de8:	d1 1c       	adc	r13, r1
     dea:	e1 1c       	adc	r14, r1
     dec:	f1 1c       	adc	r15, r1
     dee:	68 94       	set
     df0:	14 f8       	bld	r1, 4
     df2:	f5 94       	asr	r15
     df4:	e7 94       	ror	r14
     df6:	d7 94       	ror	r13
     df8:	c7 94       	ror	r12
     dfa:	16 94       	lsr	r1
     dfc:	d1 f7       	brne	.-12     	; 0xdf2 <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     dfe:	ff 92       	push	r15
     e00:	ef 92       	push	r14
     e02:	df 92       	push	r13
     e04:	cf 92       	push	r12
     e06:	84 ea       	ldi	r24, 0xA4	; 164
     e08:	9d e9       	ldi	r25, 0x9D	; 157
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	82 e6       	ldi	r24, 0x62	; 98
     e10:	9e e3       	ldi	r25, 0x3E	; 62
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	c3 d3       	rcall	.+1926   	; 0x159e <sprintf>
	USART0_sendString_w_newline_eol(buffer);
     e18:	82 e6       	ldi	r24, 0x62	; 98
     e1a:	9e e3       	ldi	r25, 0x3E	; 62
     e1c:	82 d0       	rcall	.+260    	; 0xf22 <USART0_sendString_w_newline_eol>
	rtc_reset_counter();
     e1e:	bd df       	rcall	.-134    	; 0xd9a <rtc_reset_counter>
	if (register_value_next_bu == 0) {
     e20:	8d b7       	in	r24, 0x3d	; 61
     e22:	9e b7       	in	r25, 0x3e	; 62
     e24:	08 96       	adiw	r24, 0x08	; 8
     e26:	8d bf       	out	0x3d, r24	; 61
     e28:	9e bf       	out	0x3e, r25	; 62
     e2a:	c1 14       	cp	r12, r1
     e2c:	d1 04       	cpc	r13, r1
     e2e:	e1 04       	cpc	r14, r1
     e30:	f1 04       	cpc	r15, r1
     e32:	21 f4       	brne	.+8      	; 0xe3c <rtc_write_seconds_to_cmp+0x74>
		register_value_next_bu = 1;
     e34:	c1 2c       	mov	r12, r1
     e36:	d1 2c       	mov	r13, r1
     e38:	76 01       	movw	r14, r12
     e3a:	c3 94       	inc	r12
	}
	RTC.CMP = register_value_next_bu;
     e3c:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e40:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	08 95       	ret

00000e4e <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     e70:	e0 e4       	ldi	r30, 0x40	; 64
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	83 81       	ldd	r24, Z+3	; 0x03
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     e7a:	81 ec       	ldi	r24, 0xC1	; 193
     e7c:	9d e9       	ldi	r25, 0x9D	; 157
     e7e:	30 d0       	rcall	.+96     	; 0xee0 <USART0_sendString>
	flag_wakeup_by_rtc = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     e86:	80 93 c8 3e 	sts	0x3EC8, r24	; 0x803ec8 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     e8a:	46 df       	rcall	.-372    	; 0xd18 <transition_to_pwr_state>
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     eae:	e0 e0       	ldi	r30, 0x00	; 0
     eb0:	f8 e0       	ldi	r31, 0x08	; 8
     eb2:	85 81       	ldd	r24, Z+5	; 0x05
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	85 83       	std	Z+5, r24	; 0x05
     eb8:	08 95       	ret

00000eba <init_uart>:
     eba:	a2 d9       	rcall	.-3260   	; 0x200 <set_pb2_txd_and_pb3_rxd>
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f8 e0       	ldi	r31, 0x08	; 8
     ec0:	8c e6       	ldi	r24, 0x6C	; 108
     ec2:	95 e0       	ldi	r25, 0x05	; 5
     ec4:	80 87       	std	Z+8, r24	; 0x08
     ec6:	91 87       	std	Z+9, r25	; 0x09
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
     eca:	86 83       	std	Z+6, r24	; 0x06
     ecc:	f0 df       	rcall	.-32     	; 0xeae <USART0_enable_rx_complete_interrupt>
     ece:	08 95       	ret

00000ed0 <USART0_sendChar>:
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f8 e0       	ldi	r31, 0x08	; 8
     ed4:	94 81       	ldd	r25, Z+4	; 0x04
     ed6:	95 ff       	sbrs	r25, 5
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <USART0_sendChar+0x4>
     eda:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ede:	08 95       	ret

00000ee0 <USART0_sendString>:
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	8c 01       	movw	r16, r24
     eee:	7c 01       	movw	r14, r24
     ef0:	c0 e0       	ldi	r28, 0x00	; 0
     ef2:	d0 e0       	ldi	r29, 0x00	; 0
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <USART0_sendString+0x20>
     ef6:	f7 01       	movw	r30, r14
     ef8:	81 91       	ld	r24, Z+
     efa:	7f 01       	movw	r14, r30
     efc:	e9 df       	rcall	.-46     	; 0xed0 <USART0_sendChar>
     efe:	21 96       	adiw	r28, 0x01	; 1
     f00:	f8 01       	movw	r30, r16
     f02:	01 90       	ld	r0, Z+
     f04:	00 20       	and	r0, r0
     f06:	e9 f7       	brne	.-6      	; 0xf02 <USART0_sendString+0x22>
     f08:	31 97       	sbiw	r30, 0x01	; 1
     f0a:	e0 1b       	sub	r30, r16
     f0c:	f1 0b       	sbc	r31, r17
     f0e:	ce 17       	cp	r28, r30
     f10:	df 07       	cpc	r29, r31
     f12:	88 f3       	brcs	.-30     	; 0xef6 <USART0_sendString+0x16>
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <USART0_sendString_w_newline_eol>:
     f22:	de df       	rcall	.-68     	; 0xee0 <USART0_sendString>
     f24:	8a e0       	ldi	r24, 0x0A	; 10
     f26:	d4 df       	rcall	.-88     	; 0xed0 <USART0_sendChar>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	d2 df       	rcall	.-92     	; 0xed0 <USART0_sendChar>
     f2c:	08 95       	ret

00000f2e <USART0_send_ready>:
     f2e:	86 ec       	ldi	r24, 0xC6	; 198
     f30:	9d e9       	ldi	r25, 0x9D	; 157
     f32:	f7 df       	rcall	.-18     	; 0xf22 <USART0_sendString_w_newline_eol>
     f34:	08 95       	ret

00000f36 <USART0_read>:
     f36:	e0 e0       	ldi	r30, 0x00	; 0
     f38:	f8 e0       	ldi	r31, 0x08	; 8
     f3a:	84 81       	ldd	r24, Z+4	; 0x04
     f3c:	88 23       	and	r24, r24
     f3e:	ec f7       	brge	.-6      	; 0xf3a <USART0_read+0x4>
     f40:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     f44:	08 95       	ret

00000f46 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	7c 01       	movw	r14, r24
     f58:	6b 01       	movw	r12, r22
     f5a:	61 32       	cpi	r22, 0x21	; 33
     f5c:	71 05       	cpc	r23, r1
     f5e:	24 f0       	brlt	.+8      	; 0xf68 <USART0_read_string+0x22>
     f60:	68 94       	set
     f62:	cc 24       	eor	r12, r12
     f64:	c5 f8       	bld	r12, 5
     f66:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     f68:	dd 20       	and	r13, r13
     f6a:	c4 f0       	brlt	.+48     	; 0xf9c <USART0_read_string+0x56>
     f6c:	e7 01       	movw	r28, r14
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	7e 01       	movw	r14, r28
		i++;
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     f78:	de df       	rcall	.-68     	; 0xf36 <USART0_read>
     f7a:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     f7c:	8a 30       	cpi	r24, 0x0A	; 10
     f7e:	21 f0       	breq	.+8      	; 0xf88 <USART0_read_string+0x42>
     f80:	88 23       	and	r24, r24
     f82:	11 f0       	breq	.+4      	; 0xf88 <USART0_read_string+0x42>
     f84:	8d 30       	cpi	r24, 0x0D	; 13
     f86:	31 f4       	brne	.+12     	; 0xf94 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     f88:	f7 01       	movw	r30, r14
     f8a:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     f8c:	c0 16       	cp	r12, r16
     f8e:	d1 06       	cpc	r13, r17
     f90:	3c f4       	brge	.+14     	; 0xfa0 <USART0_read_string+0x5a>
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     f94:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     f96:	c0 16       	cp	r12, r16
     f98:	d1 06       	cpc	r13, r17
     f9a:	5c f7       	brge	.-42     	; 0xf72 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     f9c:	f7 01       	movw	r30, r14
     f9e:	10 82       	st	Z, r1
	}
}
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	08 95       	ret

00000fb2 <convert_str_to_long>:
		dimming_value_hmi_led = atoi(payload);
		flag_dim_hmi_led = true;
	}
}

long convert_str_to_long(char *str) {
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <convert_str_to_long+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	char *ptr;
	long ret;

	ret = strtol(str, &ptr, 10);
     fbc:	4a e0       	ldi	r20, 0x0A	; 10
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	be 01       	movw	r22, r28
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	70 d1       	rcall	.+736    	; 0x12a8 <strtol>
	return ret;
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
	char *message_code, *payload;
	
	strcpy(usart_receive_copy, usart_receive_buffer);
     fda:	6c ed       	ldi	r22, 0xDC	; 220
     fdc:	7e e3       	ldi	r23, 0x3E	; 62
     fde:	8b e1       	ldi	r24, 0x1B	; 27
     fe0:	9e e3       	ldi	r25, 0x3E	; 62
     fe2:	a7 d2       	rcall	.+1358   	; 0x1532 <strcpy>
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     fe4:	6c ec       	ldi	r22, 0xCC	; 204
     fe6:	7d e9       	ldi	r23, 0x9D	; 157
     fe8:	8c ed       	ldi	r24, 0xDC	; 220
     fea:	9e e3       	ldi	r25, 0x3E	; 62
     fec:	99 d2       	rcall	.+1330   	; 0x1520 <strcmp>
     fee:	89 2b       	or	r24, r25
     ff0:	19 f4       	brne	.+6      	; 0xff8 <USART0_process_incoming_message+0x26>
		USART0_sendString_w_newline_eol("Echo");
     ff2:	81 ed       	ldi	r24, 0xD1	; 209
     ff4:	9d e9       	ldi	r25, 0x9D	; 157
     ff6:	95 df       	rcall	.-214    	; 0xf22 <USART0_sendString_w_newline_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     ff8:	66 ed       	ldi	r22, 0xD6	; 214
     ffa:	7d e9       	ldi	r23, 0x9D	; 157
     ffc:	8c ed       	ldi	r24, 0xDC	; 220
     ffe:	9e e3       	ldi	r25, 0x3E	; 62
    1000:	8b d2       	rcall	.+1302   	; 0x1518 <strtok>
    1002:	d8 2f       	mov	r29, r24
    1004:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
    1006:	66 e9       	ldi	r22, 0x96	; 150
    1008:	7b e9       	ldi	r23, 0x9B	; 155
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	84 d2       	rcall	.+1288   	; 0x1518 <strtok>
    1010:	08 2f       	mov	r16, r24
    1012:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
    1014:	9f 93       	push	r25
    1016:	8f 93       	push	r24
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	88 ed       	ldi	r24, 0xD8	; 216
    101e:	9d e9       	ldi	r25, 0x9D	; 157
    1020:	9f 93       	push	r25
    1022:	8f 93       	push	r24
    1024:	82 e6       	ldi	r24, 0x62	; 98
    1026:	9e e3       	ldi	r25, 0x3E	; 62
    1028:	9f 93       	push	r25
    102a:	8f 93       	push	r24
    102c:	b8 d2       	rcall	.+1392   	; 0x159e <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
    102e:	6c ee       	ldi	r22, 0xEC	; 236
    1030:	7d e9       	ldi	r23, 0x9D	; 157
    1032:	8d 2f       	mov	r24, r29
    1034:	9c 2f       	mov	r25, r28
    1036:	74 d2       	rcall	.+1256   	; 0x1520 <strcmp>
    1038:	2d b7       	in	r18, 0x3d	; 61
    103a:	3e b7       	in	r19, 0x3e	; 62
    103c:	28 5f       	subi	r18, 0xF8	; 248
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	2d bf       	out	0x3d, r18	; 61
    1042:	3e bf       	out	0x3e, r19	; 62
    1044:	89 2b       	or	r24, r25
    1046:	41 f4       	brne	.+16     	; 0x1058 <USART0_process_incoming_message+0x86>
		USART0_sendString_w_newline_eol("ACK:D1");
    1048:	88 ee       	ldi	r24, 0xE8	; 232
    104a:	9d e9       	ldi	r25, 0x9D	; 157
    104c:	6a df       	rcall	.-300    	; 0xf22 <USART0_sendString_w_newline_eol>
		strcpy(display_line1_content, payload);
    104e:	60 2f       	mov	r22, r16
    1050:	71 2f       	mov	r23, r17
    1052:	8b ec       	ldi	r24, 0xCB	; 203
    1054:	9e e3       	ldi	r25, 0x3E	; 62
    1056:	6d d2       	rcall	.+1242   	; 0x1532 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
    1058:	63 ef       	ldi	r22, 0xF3	; 243
    105a:	7d e9       	ldi	r23, 0x9D	; 157
    105c:	8d 2f       	mov	r24, r29
    105e:	9c 2f       	mov	r25, r28
    1060:	5f d2       	rcall	.+1214   	; 0x1520 <strcmp>
    1062:	89 2b       	or	r24, r25
    1064:	59 f4       	brne	.+22     	; 0x107c <USART0_process_incoming_message+0xaa>
		USART0_sendString_w_newline_eol("ACK:D2");
    1066:	8f ee       	ldi	r24, 0xEF	; 239
    1068:	9d e9       	ldi	r25, 0x9D	; 157
    106a:	5b df       	rcall	.-330    	; 0xf22 <USART0_sendString_w_newline_eol>
		strcpy(display_line2_content, payload);
    106c:	60 2f       	mov	r22, r16
    106e:	71 2f       	mov	r23, r17
    1070:	83 eb       	ldi	r24, 0xB3	; 179
    1072:	9e e3       	ldi	r25, 0x3E	; 62
    1074:	5e d2       	rcall	.+1212   	; 0x1532 <strcpy>
		flag_string_for_display_received = true;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
    107c:	6a ef       	ldi	r22, 0xFA	; 250
    107e:	7d e9       	ldi	r23, 0x9D	; 157
    1080:	8d 2f       	mov	r24, r29
    1082:	9c 2f       	mov	r25, r28
    1084:	4d d2       	rcall	.+1178   	; 0x1520 <strcmp>
    1086:	89 2b       	or	r24, r25
    1088:	41 f4       	brne	.+16     	; 0x109a <USART0_process_incoming_message+0xc8>
		USART0_sendString_w_newline_eol("ACK:SR");
    108a:	86 ef       	ldi	r24, 0xF6	; 246
    108c:	9d e9       	ldi	r25, 0x9D	; 157
    108e:	49 df       	rcall	.-366    	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_pwr_state_change_request = true;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <flag_pwr_state_change_request>
		next_pwr_state = standby;
    1096:	10 92 c8 3e 	sts	0x3EC8, r1	; 0x803ec8 <next_pwr_state>
	}
	
	if (strcmp(message_code, "SA") == 0) {
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	7e e9       	ldi	r23, 0x9E	; 158
    109e:	8d 2f       	mov	r24, r29
    10a0:	9c 2f       	mov	r25, r28
    10a2:	3e d2       	rcall	.+1148   	; 0x1520 <strcmp>
    10a4:	89 2b       	or	r24, r25
    10a6:	31 f4       	brne	.+12     	; 0x10b4 <USART0_process_incoming_message+0xe2>
		USART0_sendString_w_newline_eol("ACK:SA");
    10a8:	8d ef       	ldi	r24, 0xFD	; 253
    10aa:	9d e9       	ldi	r25, 0x9D	; 157
    10ac:	3a df       	rcall	.-396    	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_abort_shutdown = true;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_abort_shutdown>
	}
	
	if (strcmp(message_code, "BU") == 0) {
    10b4:	64 e0       	ldi	r22, 0x04	; 4
    10b6:	7e e9       	ldi	r23, 0x9E	; 158
    10b8:	8d 2f       	mov	r24, r29
    10ba:	9c 2f       	mov	r25, r28
    10bc:	31 d2       	rcall	.+1122   	; 0x1520 <strcmp>
    10be:	89 2b       	or	r24, r25
    10c0:	11 f5       	brne	.+68     	; 0x1106 <USART0_process_incoming_message+0x134>
		sprintf(buffer,"ACK:BU:%s\n", payload);
    10c2:	1f 93       	push	r17
    10c4:	0f 93       	push	r16
    10c6:	87 e0       	ldi	r24, 0x07	; 7
    10c8:	9e e9       	ldi	r25, 0x9E	; 158
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	82 e6       	ldi	r24, 0x62	; 98
    10d0:	9e e3       	ldi	r25, 0x3E	; 62
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	63 d2       	rcall	.+1222   	; 0x159e <sprintf>
		USART0_sendString_w_newline_eol(buffer);
    10d8:	82 e6       	ldi	r24, 0x62	; 98
    10da:	9e e3       	ldi	r25, 0x3E	; 62
    10dc:	22 df       	rcall	.-444    	; 0xf22 <USART0_sendString_w_newline_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
    10de:	80 2f       	mov	r24, r16
    10e0:	91 2f       	mov	r25, r17
    10e2:	67 df       	rcall	.-306    	; 0xfb2 <convert_str_to_long>
    10e4:	60 93 c4 3e 	sts	0x3EC4, r22	; 0x803ec4 <seconds_to_next_bu>
    10e8:	70 93 c5 3e 	sts	0x3EC5, r23	; 0x803ec5 <seconds_to_next_bu+0x1>
    10ec:	80 93 c6 3e 	sts	0x3EC6, r24	; 0x803ec6 <seconds_to_next_bu+0x2>
    10f0:	90 93 c7 3e 	sts	0x3EC7, r25	; 0x803ec7 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_received_seconds_to_next_bu>
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
    1106:	62 e1       	ldi	r22, 0x12	; 18
    1108:	7e e9       	ldi	r23, 0x9E	; 158
    110a:	8d 2f       	mov	r24, r29
    110c:	9c 2f       	mov	r25, r28
    110e:	08 d2       	rcall	.+1040   	; 0x1520 <strcmp>
    1110:	89 2b       	or	r24, r25
    1112:	59 f4       	brne	.+22     	; 0x112a <USART0_process_incoming_message+0x158>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
    1114:	60 2f       	mov	r22, r16
    1116:	71 2f       	mov	r23, r17
    1118:	82 e9       	ldi	r24, 0x92	; 146
    111a:	9e e3       	ldi	r25, 0x3E	; 62
    111c:	0a d2       	rcall	.+1044   	; 0x1532 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	80 93 a2 3e 	sts	0x3EA2, r24	; 0x803ea2 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
    112a:	65 e1       	ldi	r22, 0x15	; 21
    112c:	7e e9       	ldi	r23, 0x9E	; 158
    112e:	8d 2f       	mov	r24, r29
    1130:	9c 2f       	mov	r25, r28
    1132:	f6 d1       	rcall	.+1004   	; 0x1520 <strcmp>
    1134:	89 2b       	or	r24, r25
    1136:	19 f4       	brne	.+6      	; 0x113e <USART0_process_incoming_message+0x16c>
		flag_goto_sleep = true;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
    113e:	6c e1       	ldi	r22, 0x1C	; 28
    1140:	7e e9       	ldi	r23, 0x9E	; 158
    1142:	8d 2f       	mov	r24, r29
    1144:	9c 2f       	mov	r25, r28
    1146:	ec d1       	rcall	.+984    	; 0x1520 <strcmp>
    1148:	89 2b       	or	r24, r25
    114a:	31 f4       	brne	.+12     	; 0x1158 <USART0_process_incoming_message+0x186>
		USART0_sendString_w_newline_eol("ACK:CC");
    114c:	88 e1       	ldi	r24, 0x18	; 24
    114e:	9e e9       	ldi	r25, 0x9E	; 158
    1150:	e8 de       	rcall	.-560    	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_request_current_measurement = true;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
    1158:	63 e2       	ldi	r22, 0x23	; 35
    115a:	7e e9       	ldi	r23, 0x9E	; 158
    115c:	8d 2f       	mov	r24, r29
    115e:	9c 2f       	mov	r25, r28
    1160:	df d1       	rcall	.+958    	; 0x1520 <strcmp>
    1162:	89 2b       	or	r24, r25
    1164:	31 f4       	brne	.+12     	; 0x1172 <USART0_process_incoming_message+0x1a0>
		USART0_sendString_w_newline_eol("ACK:TP");
    1166:	8f e1       	ldi	r24, 0x1F	; 31
    1168:	9e e9       	ldi	r25, 0x9E	; 158
    116a:	db de       	rcall	.-586    	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_request_temperature_measurement = true;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
    1172:	6a e2       	ldi	r22, 0x2A	; 42
    1174:	7e e9       	ldi	r23, 0x9E	; 158
    1176:	8d 2f       	mov	r24, r29
    1178:	9c 2f       	mov	r25, r28
    117a:	d2 d1       	rcall	.+932    	; 0x1520 <strcmp>
    117c:	89 2b       	or	r24, r25
    117e:	31 f4       	brne	.+12     	; 0x118c <USART0_process_incoming_message+0x1ba>
		USART0_sendString_w_newline_eol("ACK:3V");
    1180:	86 e2       	ldi	r24, 0x26	; 38
    1182:	9e e9       	ldi	r25, 0x9E	; 158
    1184:	ce de       	rcall	.-612    	; 0xf22 <USART0_sendString_w_newline_eol>
		flag_request_3v3_measurement = true;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
    118c:	61 e3       	ldi	r22, 0x31	; 49
    118e:	7e e9       	ldi	r23, 0x9E	; 158
    1190:	8d 2f       	mov	r24, r29
    1192:	9c 2f       	mov	r25, r28
    1194:	c5 d1       	rcall	.+906    	; 0x1520 <strcmp>
    1196:	89 2b       	or	r24, r25
    1198:	61 f4       	brne	.+24     	; 0x11b2 <USART0_process_incoming_message+0x1e0>
		USART0_sendString_w_newline_eol("ACK:ON");
    119a:	8d e2       	ldi	r24, 0x2D	; 45
    119c:	9e e9       	ldi	r25, 0x9E	; 158
    119e:	c1 de       	rcall	.-638    	; 0xf22 <USART0_sendString_w_newline_eol>
		if(flag_schedule_backup_now) {
    11a0:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_schedule_backup_now>
    11a4:	88 23       	and	r24, r24
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <USART0_process_incoming_message+0x1e0>
			flag_schedule_backup_now = false;
    11a8:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_schedule_backup_now>
			USART0_sendString_w_newline_eol("User Backup");
    11ac:	84 e3       	ldi	r24, 0x34	; 52
    11ae:	9e e9       	ldi	r25, 0x9E	; 158
    11b0:	b8 de       	rcall	.-656    	; 0xf22 <USART0_sendString_w_newline_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
    11b2:	64 e4       	ldi	r22, 0x44	; 68
    11b4:	7e e9       	ldi	r23, 0x9E	; 158
    11b6:	8d 2f       	mov	r24, r29
    11b8:	9c 2f       	mov	r25, r28
    11ba:	b2 d1       	rcall	.+868    	; 0x1520 <strcmp>
    11bc:	89 2b       	or	r24, r25
    11be:	79 f4       	brne	.+30     	; 0x11de <USART0_process_incoming_message+0x20c>
		USART0_sendString_w_newline_eol("ACK:DB");
    11c0:	80 e4       	ldi	r24, 0x40	; 64
    11c2:	9e e9       	ldi	r25, 0x9E	; 158
    11c4:	ae de       	rcall	.-676    	; 0xf22 <USART0_sendString_w_newline_eol>
		dimming_value_display = atoi(payload);
    11c6:	80 2f       	mov	r24, r16
    11c8:	91 2f       	mov	r25, r17
    11ca:	7f d1       	rcall	.+766    	; 0x14ca <atoi>
    11cc:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <dimming_value_display>
    11d0:	90 93 60 3e 	sts	0x3E60, r25	; 0x803e60 <dimming_value_display+0x1>
		set_dimming_value_display_bl(dimming_value_display);
    11d4:	9d db       	rcall	.-2246   	; 0x910 <set_dimming_value_display_bl>
		flag_dim_display = true;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_dim_display>
		USART0_send_ready();
    11dc:	a8 de       	rcall	.-688    	; 0xf2e <USART0_send_ready>
	}
	
	if(strcmp(message_code, "DL") == 0) {
    11de:	6b e4       	ldi	r22, 0x4B	; 75
    11e0:	7e e9       	ldi	r23, 0x9E	; 158
    11e2:	8d 2f       	mov	r24, r29
    11e4:	9c 2f       	mov	r25, r28
    11e6:	9c d1       	rcall	.+824    	; 0x1520 <strcmp>
    11e8:	89 2b       	or	r24, r25
    11ea:	69 f4       	brne	.+26     	; 0x1206 <USART0_process_incoming_message+0x234>
		USART0_sendString_w_newline_eol("ACK:DL");
    11ec:	87 e4       	ldi	r24, 0x47	; 71
    11ee:	9e e9       	ldi	r25, 0x9E	; 158
    11f0:	98 de       	rcall	.-720    	; 0xf22 <USART0_sendString_w_newline_eol>
		dimming_value_hmi_led = atoi(payload);
    11f2:	80 2f       	mov	r24, r16
    11f4:	91 2f       	mov	r25, r17
    11f6:	69 d1       	rcall	.+722    	; 0x14ca <atoi>
    11f8:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <dimming_value_hmi_led>
    11fc:	90 93 5c 3e 	sts	0x3E5C, r25	; 0x803e5c <dimming_value_hmi_led+0x1>
		flag_dim_hmi_led = true;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_dim_hmi_led>
	}
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
    1232:	60 e2       	ldi	r22, 0x20	; 32
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	8c ed       	ldi	r24, 0xDC	; 220
    1238:	9e e3       	ldi	r25, 0x3E	; 62
    123a:	85 de       	rcall	.-758    	; 0xf46 <USART0_read_string>
	flag_usart_string_receive_complete = true;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <flag_usart_string_receive_complete>
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__udivmodsi4>:
    1264:	a1 e2       	ldi	r26, 0x21	; 33
    1266:	1a 2e       	mov	r1, r26
    1268:	aa 1b       	sub	r26, r26
    126a:	bb 1b       	sub	r27, r27
    126c:	fd 01       	movw	r30, r26
    126e:	0d c0       	rjmp	.+26     	; 0x128a <__udivmodsi4_ep>

00001270 <__udivmodsi4_loop>:
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	ee 1f       	adc	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	a2 17       	cp	r26, r18
    127a:	b3 07       	cpc	r27, r19
    127c:	e4 07       	cpc	r30, r20
    127e:	f5 07       	cpc	r31, r21
    1280:	20 f0       	brcs	.+8      	; 0x128a <__udivmodsi4_ep>
    1282:	a2 1b       	sub	r26, r18
    1284:	b3 0b       	sbc	r27, r19
    1286:	e4 0b       	sbc	r30, r20
    1288:	f5 0b       	sbc	r31, r21

0000128a <__udivmodsi4_ep>:
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	1a 94       	dec	r1
    1294:	69 f7       	brne	.-38     	; 0x1270 <__udivmodsi4_loop>
    1296:	60 95       	com	r22
    1298:	70 95       	com	r23
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	bd 01       	movw	r22, r26
    12a4:	cf 01       	movw	r24, r30
    12a6:	08 95       	ret

000012a8 <strtol>:
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e9 e5       	ldi	r30, 0x59	; 89
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	34 c4       	rjmp	.+2152   	; 0x1b1a <__prologue_saves__+0x2>
    12b2:	5c 01       	movw	r10, r24
    12b4:	6b 01       	movw	r12, r22
    12b6:	7a 01       	movw	r14, r20
    12b8:	61 15       	cp	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <strtol+0x1c>
    12be:	fb 01       	movw	r30, r22
    12c0:	80 83       	st	Z, r24
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	e1 14       	cp	r14, r1
    12c6:	f1 04       	cpc	r15, r1
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <strtol+0x2c>
    12ca:	c7 01       	movw	r24, r14
    12cc:	02 97       	sbiw	r24, 0x02	; 2
    12ce:	83 97       	sbiw	r24, 0x23	; 35
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <strtol+0x2c>
    12d2:	e2 c0       	rjmp	.+452    	; 0x1498 <strtol+0x1f0>
    12d4:	e5 01       	movw	r28, r10
    12d6:	21 96       	adiw	r28, 0x01	; 1
    12d8:	f5 01       	movw	r30, r10
    12da:	10 81       	ld	r17, Z
    12dc:	81 2f       	mov	r24, r17
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	12 d1       	rcall	.+548    	; 0x1506 <isspace>
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f0       	breq	.+4      	; 0x12ea <strtol+0x42>
    12e6:	5e 01       	movw	r10, r28
    12e8:	f5 cf       	rjmp	.-22     	; 0x12d4 <strtol+0x2c>
    12ea:	1d 32       	cpi	r17, 0x2D	; 45
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <strtol+0x50>
    12ee:	21 96       	adiw	r28, 0x01	; 1
    12f0:	f5 01       	movw	r30, r10
    12f2:	11 81       	ldd	r17, Z+1	; 0x01
    12f4:	01 e0       	ldi	r16, 0x01	; 1
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <strtol+0x5e>
    12f8:	1b 32       	cpi	r17, 0x2B	; 43
    12fa:	21 f4       	brne	.+8      	; 0x1304 <strtol+0x5c>
    12fc:	e5 01       	movw	r28, r10
    12fe:	22 96       	adiw	r28, 0x02	; 2
    1300:	f5 01       	movw	r30, r10
    1302:	11 81       	ldd	r17, Z+1	; 0x01
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	e1 14       	cp	r14, r1
    1308:	f1 04       	cpc	r15, r1
    130a:	09 f1       	breq	.+66     	; 0x134e <strtol+0xa6>
    130c:	f0 e1       	ldi	r31, 0x10	; 16
    130e:	ef 16       	cp	r14, r31
    1310:	f1 04       	cpc	r15, r1
    1312:	29 f4       	brne	.+10     	; 0x131e <strtol+0x76>
    1314:	3e c0       	rjmp	.+124    	; 0x1392 <strtol+0xea>
    1316:	10 e3       	ldi	r17, 0x30	; 48
    1318:	e1 14       	cp	r14, r1
    131a:	f1 04       	cpc	r15, r1
    131c:	21 f1       	breq	.+72     	; 0x1366 <strtol+0xbe>
    131e:	28 e0       	ldi	r18, 0x08	; 8
    1320:	e2 16       	cp	r14, r18
    1322:	f1 04       	cpc	r15, r1
    1324:	01 f1       	breq	.+64     	; 0x1366 <strtol+0xbe>
    1326:	54 f4       	brge	.+20     	; 0x133c <strtol+0x94>
    1328:	e2 e0       	ldi	r30, 0x02	; 2
    132a:	ee 16       	cp	r14, r30
    132c:	f1 04       	cpc	r15, r1
    132e:	21 f5       	brne	.+72     	; 0x1378 <strtol+0xd0>
    1330:	81 2c       	mov	r8, r1
    1332:	91 2c       	mov	r9, r1
    1334:	a1 2c       	mov	r10, r1
    1336:	b0 e4       	ldi	r27, 0x40	; 64
    1338:	bb 2e       	mov	r11, r27
    133a:	3d c0       	rjmp	.+122    	; 0x13b6 <strtol+0x10e>
    133c:	fa e0       	ldi	r31, 0x0A	; 10
    133e:	ef 16       	cp	r14, r31
    1340:	f1 04       	cpc	r15, r1
    1342:	39 f0       	breq	.+14     	; 0x1352 <strtol+0xaa>
    1344:	20 e1       	ldi	r18, 0x10	; 16
    1346:	e2 16       	cp	r14, r18
    1348:	f1 04       	cpc	r15, r1
    134a:	b1 f4       	brne	.+44     	; 0x1378 <strtol+0xd0>
    134c:	2f c0       	rjmp	.+94     	; 0x13ac <strtol+0x104>
    134e:	10 33       	cpi	r17, 0x30	; 48
    1350:	11 f1       	breq	.+68     	; 0x1396 <strtol+0xee>
    1352:	fa e0       	ldi	r31, 0x0A	; 10
    1354:	ef 2e       	mov	r14, r31
    1356:	f1 2c       	mov	r15, r1
    1358:	ac ec       	ldi	r26, 0xCC	; 204
    135a:	8a 2e       	mov	r8, r26
    135c:	98 2c       	mov	r9, r8
    135e:	a8 2c       	mov	r10, r8
    1360:	ac e0       	ldi	r26, 0x0C	; 12
    1362:	ba 2e       	mov	r11, r26
    1364:	28 c0       	rjmp	.+80     	; 0x13b6 <strtol+0x10e>
    1366:	78 e0       	ldi	r23, 0x08	; 8
    1368:	e7 2e       	mov	r14, r23
    136a:	f1 2c       	mov	r15, r1
    136c:	81 2c       	mov	r8, r1
    136e:	91 2c       	mov	r9, r1
    1370:	a1 2c       	mov	r10, r1
    1372:	e0 e1       	ldi	r30, 0x10	; 16
    1374:	be 2e       	mov	r11, r30
    1376:	1f c0       	rjmp	.+62     	; 0x13b6 <strtol+0x10e>
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e8       	ldi	r25, 0x80	; 128
    1380:	97 01       	movw	r18, r14
    1382:	0f 2c       	mov	r0, r15
    1384:	00 0c       	add	r0, r0
    1386:	44 0b       	sbc	r20, r20
    1388:	55 0b       	sbc	r21, r21
    138a:	6c df       	rcall	.-296    	; 0x1264 <__udivmodsi4>
    138c:	49 01       	movw	r8, r18
    138e:	5a 01       	movw	r10, r20
    1390:	12 c0       	rjmp	.+36     	; 0x13b6 <strtol+0x10e>
    1392:	10 33       	cpi	r17, 0x30	; 48
    1394:	59 f4       	brne	.+22     	; 0x13ac <strtol+0x104>
    1396:	88 81       	ld	r24, Y
    1398:	8f 7d       	andi	r24, 0xDF	; 223
    139a:	88 35       	cpi	r24, 0x58	; 88
    139c:	09 f0       	breq	.+2      	; 0x13a0 <strtol+0xf8>
    139e:	bb cf       	rjmp	.-138    	; 0x1316 <strtol+0x6e>
    13a0:	19 81       	ldd	r17, Y+1	; 0x01
    13a2:	22 96       	adiw	r28, 0x02	; 2
    13a4:	02 60       	ori	r16, 0x02	; 2
    13a6:	80 e1       	ldi	r24, 0x10	; 16
    13a8:	e8 2e       	mov	r14, r24
    13aa:	f1 2c       	mov	r15, r1
    13ac:	81 2c       	mov	r8, r1
    13ae:	91 2c       	mov	r9, r1
    13b0:	a1 2c       	mov	r10, r1
    13b2:	68 e0       	ldi	r22, 0x08	; 8
    13b4:	b6 2e       	mov	r11, r22
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	cb 01       	movw	r24, r22
    13be:	27 01       	movw	r4, r14
    13c0:	0f 2c       	mov	r0, r15
    13c2:	00 0c       	add	r0, r0
    13c4:	66 08       	sbc	r6, r6
    13c6:	77 08       	sbc	r7, r7
    13c8:	fe 01       	movw	r30, r28
    13ca:	50 ed       	ldi	r21, 0xD0	; 208
    13cc:	35 2e       	mov	r3, r21
    13ce:	31 0e       	add	r3, r17
    13d0:	29 e0       	ldi	r18, 0x09	; 9
    13d2:	23 15       	cp	r18, r3
    13d4:	70 f4       	brcc	.+28     	; 0x13f2 <strtol+0x14a>
    13d6:	2f eb       	ldi	r18, 0xBF	; 191
    13d8:	21 0f       	add	r18, r17
    13da:	2a 31       	cpi	r18, 0x1A	; 26
    13dc:	18 f4       	brcc	.+6      	; 0x13e4 <strtol+0x13c>
    13de:	39 ec       	ldi	r19, 0xC9	; 201
    13e0:	33 2e       	mov	r3, r19
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <strtol+0x148>
    13e4:	2f e9       	ldi	r18, 0x9F	; 159
    13e6:	21 0f       	add	r18, r17
    13e8:	2a 31       	cpi	r18, 0x1A	; 26
    13ea:	10 f5       	brcc	.+68     	; 0x1430 <strtol+0x188>
    13ec:	29 ea       	ldi	r18, 0xA9	; 169
    13ee:	32 2e       	mov	r3, r18
    13f0:	31 0e       	add	r3, r17
    13f2:	23 2d       	mov	r18, r3
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	2e 15       	cp	r18, r14
    13f8:	3f 05       	cpc	r19, r15
    13fa:	d4 f4       	brge	.+52     	; 0x1430 <strtol+0x188>
    13fc:	47 fd       	sbrc	r20, 7
    13fe:	15 c0       	rjmp	.+42     	; 0x142a <strtol+0x182>
    1400:	86 16       	cp	r8, r22
    1402:	97 06       	cpc	r9, r23
    1404:	a8 06       	cpc	r10, r24
    1406:	b9 06       	cpc	r11, r25
    1408:	68 f0       	brcs	.+26     	; 0x1424 <strtol+0x17c>
    140a:	a3 01       	movw	r20, r6
    140c:	92 01       	movw	r18, r4
    140e:	6b d3       	rcall	.+1750   	; 0x1ae6 <__mulsi3>
    1410:	63 0d       	add	r22, r3
    1412:	71 1d       	adc	r23, r1
    1414:	81 1d       	adc	r24, r1
    1416:	91 1d       	adc	r25, r1
    1418:	61 30       	cpi	r22, 0x01	; 1
    141a:	71 05       	cpc	r23, r1
    141c:	81 05       	cpc	r24, r1
    141e:	20 e8       	ldi	r18, 0x80	; 128
    1420:	92 07       	cpc	r25, r18
    1422:	10 f0       	brcs	.+4      	; 0x1428 <strtol+0x180>
    1424:	4f ef       	ldi	r20, 0xFF	; 255
    1426:	01 c0       	rjmp	.+2      	; 0x142a <strtol+0x182>
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	21 96       	adiw	r28, 0x01	; 1
    142c:	10 81       	ld	r17, Z
    142e:	cc cf       	rjmp	.-104    	; 0x13c8 <strtol+0x120>
    1430:	20 2f       	mov	r18, r16
    1432:	21 70       	andi	r18, 0x01	; 1
    1434:	c1 14       	cp	r12, r1
    1436:	d1 04       	cpc	r13, r1
    1438:	71 f0       	breq	.+28     	; 0x1456 <strtol+0x1ae>
    143a:	44 23       	and	r20, r20
    143c:	29 f0       	breq	.+10     	; 0x1448 <strtol+0x1a0>
    143e:	21 97       	sbiw	r28, 0x01	; 1
    1440:	f6 01       	movw	r30, r12
    1442:	c0 83       	st	Z, r28
    1444:	d1 83       	std	Z+1, r29	; 0x01
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <strtol+0x1ae>
    1448:	01 ff       	sbrs	r16, 1
    144a:	19 c0       	rjmp	.+50     	; 0x147e <strtol+0x1d6>
    144c:	22 97       	sbiw	r28, 0x02	; 2
    144e:	f6 01       	movw	r30, r12
    1450:	c0 83       	st	Z, r28
    1452:	d1 83       	std	Z+1, r29	; 0x01
    1454:	14 c0       	rjmp	.+40     	; 0x147e <strtol+0x1d6>
    1456:	47 ff       	sbrs	r20, 7
    1458:	12 c0       	rjmp	.+36     	; 0x147e <strtol+0x1d6>
    145a:	22 23       	and	r18, r18
    145c:	29 f0       	breq	.+10     	; 0x1468 <strtol+0x1c0>
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e8       	ldi	r25, 0x80	; 128
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <strtol+0x1c8>
    1468:	6f ef       	ldi	r22, 0xFF	; 255
    146a:	7f ef       	ldi	r23, 0xFF	; 255
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f e7       	ldi	r25, 0x7F	; 127
    1470:	22 e2       	ldi	r18, 0x22	; 34
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	20 93 fd 3e 	sts	0x3EFD, r18	; 0x803efd <errno>
    1478:	30 93 fe 3e 	sts	0x3EFE, r19	; 0x803efe <errno+0x1>
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <strtol+0x1e8>
    147e:	22 23       	and	r18, r18
    1480:	81 f0       	breq	.+32     	; 0x14a2 <strtol+0x1fa>
    1482:	90 95       	com	r25
    1484:	80 95       	com	r24
    1486:	70 95       	com	r23
    1488:	61 95       	neg	r22
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	8f 4f       	sbci	r24, 0xFF	; 255
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	46 2f       	mov	r20, r22
    1492:	37 2f       	mov	r19, r23
    1494:	28 2f       	mov	r18, r24
    1496:	12 c0       	rjmp	.+36     	; 0x14bc <strtol+0x214>
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <strtol+0x214>
    14a2:	97 ff       	sbrs	r25, 7
    14a4:	f5 cf       	rjmp	.-22     	; 0x1490 <strtol+0x1e8>
    14a6:	82 e2       	ldi	r24, 0x22	; 34
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	80 93 fd 3e 	sts	0x3EFD, r24	; 0x803efd <errno>
    14ae:	90 93 fe 3e 	sts	0x3EFE, r25	; 0x803efe <errno+0x1>
    14b2:	6f ef       	ldi	r22, 0xFF	; 255
    14b4:	7f ef       	ldi	r23, 0xFF	; 255
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f e7       	ldi	r25, 0x7F	; 127
    14ba:	ea cf       	rjmp	.-44     	; 0x1490 <strtol+0x1e8>
    14bc:	64 2f       	mov	r22, r20
    14be:	73 2f       	mov	r23, r19
    14c0:	82 2f       	mov	r24, r18
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	e1 e1       	ldi	r30, 0x11	; 17
    14c8:	41 c3       	rjmp	.+1666   	; 0x1b4c <__epilogue_restores__+0x2>

000014ca <atoi>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	88 27       	eor	r24, r24
    14ce:	99 27       	eor	r25, r25
    14d0:	e8 94       	clt
    14d2:	21 91       	ld	r18, Z+
    14d4:	20 32       	cpi	r18, 0x20	; 32
    14d6:	e9 f3       	breq	.-6      	; 0x14d2 <atoi+0x8>
    14d8:	29 30       	cpi	r18, 0x09	; 9
    14da:	10 f0       	brcs	.+4      	; 0x14e0 <atoi+0x16>
    14dc:	2e 30       	cpi	r18, 0x0E	; 14
    14de:	c8 f3       	brcs	.-14     	; 0x14d2 <atoi+0x8>
    14e0:	2b 32       	cpi	r18, 0x2B	; 43
    14e2:	41 f0       	breq	.+16     	; 0x14f4 <atoi+0x2a>
    14e4:	2d 32       	cpi	r18, 0x2D	; 45
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <atoi+0x2c>
    14e8:	68 94       	set
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <atoi+0x2a>
    14ec:	0e 94 c7 0a 	call	0x158e	; 0x158e <__mulhi_const_10>
    14f0:	82 0f       	add	r24, r18
    14f2:	91 1d       	adc	r25, r1
    14f4:	21 91       	ld	r18, Z+
    14f6:	20 53       	subi	r18, 0x30	; 48
    14f8:	2a 30       	cpi	r18, 0x0A	; 10
    14fa:	c0 f3       	brcs	.-16     	; 0x14ec <atoi+0x22>
    14fc:	1e f4       	brtc	.+6      	; 0x1504 <atoi+0x3a>
    14fe:	90 95       	com	r25
    1500:	81 95       	neg	r24
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	08 95       	ret

00001506 <isspace>:
    1506:	91 11       	cpse	r25, r1
    1508:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__ctype_isfalse>
    150c:	80 32       	cpi	r24, 0x20	; 32
    150e:	19 f0       	breq	.+6      	; 0x1516 <isspace+0x10>
    1510:	89 50       	subi	r24, 0x09	; 9
    1512:	85 50       	subi	r24, 0x05	; 5
    1514:	c8 f7       	brcc	.-14     	; 0x1508 <isspace+0x2>
    1516:	08 95       	ret

00001518 <strtok>:
    1518:	44 e0       	ldi	r20, 0x04	; 4
    151a:	5e e3       	ldi	r21, 0x3E	; 62
    151c:	11 d0       	rcall	.+34     	; 0x1540 <strtok_r>
    151e:	08 95       	ret

00001520 <strcmp>:
    1520:	fb 01       	movw	r30, r22
    1522:	dc 01       	movw	r26, r24
    1524:	8d 91       	ld	r24, X+
    1526:	01 90       	ld	r0, Z+
    1528:	80 19       	sub	r24, r0
    152a:	01 10       	cpse	r0, r1
    152c:	d9 f3       	breq	.-10     	; 0x1524 <strcmp+0x4>
    152e:	99 0b       	sbc	r25, r25
    1530:	08 95       	ret

00001532 <strcpy>:
    1532:	fb 01       	movw	r30, r22
    1534:	dc 01       	movw	r26, r24
    1536:	01 90       	ld	r0, Z+
    1538:	0d 92       	st	X+, r0
    153a:	00 20       	and	r0, r0
    153c:	e1 f7       	brne	.-8      	; 0x1536 <strcpy+0x4>
    153e:	08 95       	ret

00001540 <strtok_r>:
    1540:	fa 01       	movw	r30, r20
    1542:	a1 91       	ld	r26, Z+
    1544:	b0 81       	ld	r27, Z
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	19 f4       	brne	.+6      	; 0x1550 <strtok_r+0x10>
    154a:	10 97       	sbiw	r26, 0x00	; 0
    154c:	e1 f0       	breq	.+56     	; 0x1586 <strtok_r+0x46>
    154e:	cd 01       	movw	r24, r26
    1550:	dc 01       	movw	r26, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0d 90       	ld	r0, X+
    1556:	00 20       	and	r0, r0
    1558:	11 f4       	brne	.+4      	; 0x155e <strtok_r+0x1e>
    155a:	c0 01       	movw	r24, r0
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <strtok_r+0x44>
    155e:	fb 01       	movw	r30, r22
    1560:	21 91       	ld	r18, Z+
    1562:	22 23       	and	r18, r18
    1564:	19 f0       	breq	.+6      	; 0x156c <strtok_r+0x2c>
    1566:	20 15       	cp	r18, r0
    1568:	d9 f7       	brne	.-10     	; 0x1560 <strtok_r+0x20>
    156a:	f3 cf       	rjmp	.-26     	; 0x1552 <strtok_r+0x12>
    156c:	fb 01       	movw	r30, r22
    156e:	21 91       	ld	r18, Z+
    1570:	20 15       	cp	r18, r0
    1572:	19 f4       	brne	.+6      	; 0x157a <strtok_r+0x3a>
    1574:	1e 92       	st	-X, r1
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <strtok_r+0x46>
    157a:	22 23       	and	r18, r18
    157c:	c1 f7       	brne	.-16     	; 0x156e <strtok_r+0x2e>
    157e:	0d 90       	ld	r0, X+
    1580:	00 20       	and	r0, r0
    1582:	a1 f7       	brne	.-24     	; 0x156c <strtok_r+0x2c>
    1584:	d0 01       	movw	r26, r0
    1586:	fa 01       	movw	r30, r20
    1588:	a1 93       	st	Z+, r26
    158a:	b0 83       	st	Z, r27
    158c:	08 95       	ret

0000158e <__mulhi_const_10>:
    158e:	7a e0       	ldi	r23, 0x0A	; 10
    1590:	97 9f       	mul	r25, r23
    1592:	90 2d       	mov	r25, r0
    1594:	87 9f       	mul	r24, r23
    1596:	80 2d       	mov	r24, r0
    1598:	91 0d       	add	r25, r1
    159a:	11 24       	eor	r1, r1
    159c:	08 95       	ret

0000159e <sprintf>:
    159e:	ae e0       	ldi	r26, 0x0E	; 14
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 ed       	ldi	r30, 0xD4	; 212
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	c6 c2       	rjmp	.+1420   	; 0x1b34 <__prologue_saves__+0x1c>
    15a8:	0d 89       	ldd	r16, Y+21	; 0x15
    15aa:	1e 89       	ldd	r17, Y+22	; 0x16
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	1a 83       	std	Y+2, r17	; 0x02
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f e7       	ldi	r25, 0x7F	; 127
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	ae 01       	movw	r20, r28
    15be:	47 5e       	subi	r20, 0xE7	; 231
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	6f 89       	ldd	r22, Y+23	; 0x17
    15c4:	78 8d       	ldd	r23, Y+24	; 0x18
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	08 d0       	rcall	.+16     	; 0x15dc <vfprintf>
    15cc:	ef 81       	ldd	r30, Y+7	; 0x07
    15ce:	f8 85       	ldd	r31, Y+8	; 0x08
    15d0:	e0 0f       	add	r30, r16
    15d2:	f1 1f       	adc	r31, r17
    15d4:	10 82       	st	Z, r1
    15d6:	2e 96       	adiw	r28, 0x0e	; 14
    15d8:	e4 e0       	ldi	r30, 0x04	; 4
    15da:	c5 c2       	rjmp	.+1418   	; 0x1b66 <__epilogue_restores__+0x1c>

000015dc <vfprintf>:
    15dc:	ab e0       	ldi	r26, 0x0B	; 11
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e3 ef       	ldi	r30, 0xF3	; 243
    15e2:	fa e0       	ldi	r31, 0x0A	; 10
    15e4:	99 c2       	rjmp	.+1330   	; 0x1b18 <__prologue_saves__>
    15e6:	6c 01       	movw	r12, r24
    15e8:	7b 01       	movw	r14, r22
    15ea:	8a 01       	movw	r16, r20
    15ec:	fc 01       	movw	r30, r24
    15ee:	16 82       	std	Z+6, r1	; 0x06
    15f0:	17 82       	std	Z+7, r1	; 0x07
    15f2:	83 81       	ldd	r24, Z+3	; 0x03
    15f4:	81 ff       	sbrs	r24, 1
    15f6:	bf c1       	rjmp	.+894    	; 0x1976 <vfprintf+0x39a>
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	3c 01       	movw	r6, r24
    15fe:	f6 01       	movw	r30, r12
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	f7 01       	movw	r30, r14
    1604:	93 fd       	sbrc	r25, 3
    1606:	85 91       	lpm	r24, Z+
    1608:	93 ff       	sbrs	r25, 3
    160a:	81 91       	ld	r24, Z+
    160c:	7f 01       	movw	r14, r30
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <vfprintf+0x38>
    1612:	ad c1       	rjmp	.+858    	; 0x196e <vfprintf+0x392>
    1614:	85 32       	cpi	r24, 0x25	; 37
    1616:	39 f4       	brne	.+14     	; 0x1626 <vfprintf+0x4a>
    1618:	93 fd       	sbrc	r25, 3
    161a:	85 91       	lpm	r24, Z+
    161c:	93 ff       	sbrs	r25, 3
    161e:	81 91       	ld	r24, Z+
    1620:	7f 01       	movw	r14, r30
    1622:	85 32       	cpi	r24, 0x25	; 37
    1624:	21 f4       	brne	.+8      	; 0x162e <vfprintf+0x52>
    1626:	b6 01       	movw	r22, r12
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	c3 d1       	rcall	.+902    	; 0x19b2 <fputc>
    162c:	e8 cf       	rjmp	.-48     	; 0x15fe <vfprintf+0x22>
    162e:	91 2c       	mov	r9, r1
    1630:	21 2c       	mov	r2, r1
    1632:	31 2c       	mov	r3, r1
    1634:	ff e1       	ldi	r31, 0x1F	; 31
    1636:	f3 15       	cp	r31, r3
    1638:	d8 f0       	brcs	.+54     	; 0x1670 <vfprintf+0x94>
    163a:	8b 32       	cpi	r24, 0x2B	; 43
    163c:	79 f0       	breq	.+30     	; 0x165c <vfprintf+0x80>
    163e:	38 f4       	brcc	.+14     	; 0x164e <vfprintf+0x72>
    1640:	80 32       	cpi	r24, 0x20	; 32
    1642:	79 f0       	breq	.+30     	; 0x1662 <vfprintf+0x86>
    1644:	83 32       	cpi	r24, 0x23	; 35
    1646:	a1 f4       	brne	.+40     	; 0x1670 <vfprintf+0x94>
    1648:	23 2d       	mov	r18, r3
    164a:	20 61       	ori	r18, 0x10	; 16
    164c:	1d c0       	rjmp	.+58     	; 0x1688 <vfprintf+0xac>
    164e:	8d 32       	cpi	r24, 0x2D	; 45
    1650:	61 f0       	breq	.+24     	; 0x166a <vfprintf+0x8e>
    1652:	80 33       	cpi	r24, 0x30	; 48
    1654:	69 f4       	brne	.+26     	; 0x1670 <vfprintf+0x94>
    1656:	23 2d       	mov	r18, r3
    1658:	21 60       	ori	r18, 0x01	; 1
    165a:	16 c0       	rjmp	.+44     	; 0x1688 <vfprintf+0xac>
    165c:	83 2d       	mov	r24, r3
    165e:	82 60       	ori	r24, 0x02	; 2
    1660:	38 2e       	mov	r3, r24
    1662:	e3 2d       	mov	r30, r3
    1664:	e4 60       	ori	r30, 0x04	; 4
    1666:	3e 2e       	mov	r3, r30
    1668:	2a c0       	rjmp	.+84     	; 0x16be <vfprintf+0xe2>
    166a:	f3 2d       	mov	r31, r3
    166c:	f8 60       	ori	r31, 0x08	; 8
    166e:	1d c0       	rjmp	.+58     	; 0x16aa <vfprintf+0xce>
    1670:	37 fc       	sbrc	r3, 7
    1672:	2d c0       	rjmp	.+90     	; 0x16ce <vfprintf+0xf2>
    1674:	20 ed       	ldi	r18, 0xD0	; 208
    1676:	28 0f       	add	r18, r24
    1678:	2a 30       	cpi	r18, 0x0A	; 10
    167a:	40 f0       	brcs	.+16     	; 0x168c <vfprintf+0xb0>
    167c:	8e 32       	cpi	r24, 0x2E	; 46
    167e:	b9 f4       	brne	.+46     	; 0x16ae <vfprintf+0xd2>
    1680:	36 fc       	sbrc	r3, 6
    1682:	75 c1       	rjmp	.+746    	; 0x196e <vfprintf+0x392>
    1684:	23 2d       	mov	r18, r3
    1686:	20 64       	ori	r18, 0x40	; 64
    1688:	32 2e       	mov	r3, r18
    168a:	19 c0       	rjmp	.+50     	; 0x16be <vfprintf+0xe2>
    168c:	36 fe       	sbrs	r3, 6
    168e:	06 c0       	rjmp	.+12     	; 0x169c <vfprintf+0xc0>
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	98 9e       	mul	r9, r24
    1694:	20 0d       	add	r18, r0
    1696:	11 24       	eor	r1, r1
    1698:	92 2e       	mov	r9, r18
    169a:	11 c0       	rjmp	.+34     	; 0x16be <vfprintf+0xe2>
    169c:	ea e0       	ldi	r30, 0x0A	; 10
    169e:	2e 9e       	mul	r2, r30
    16a0:	20 0d       	add	r18, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	22 2e       	mov	r2, r18
    16a6:	f3 2d       	mov	r31, r3
    16a8:	f0 62       	ori	r31, 0x20	; 32
    16aa:	3f 2e       	mov	r3, r31
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <vfprintf+0xe2>
    16ae:	8c 36       	cpi	r24, 0x6C	; 108
    16b0:	21 f4       	brne	.+8      	; 0x16ba <vfprintf+0xde>
    16b2:	83 2d       	mov	r24, r3
    16b4:	80 68       	ori	r24, 0x80	; 128
    16b6:	38 2e       	mov	r3, r24
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0xe2>
    16ba:	88 36       	cpi	r24, 0x68	; 104
    16bc:	41 f4       	brne	.+16     	; 0x16ce <vfprintf+0xf2>
    16be:	f7 01       	movw	r30, r14
    16c0:	93 fd       	sbrc	r25, 3
    16c2:	85 91       	lpm	r24, Z+
    16c4:	93 ff       	sbrs	r25, 3
    16c6:	81 91       	ld	r24, Z+
    16c8:	7f 01       	movw	r14, r30
    16ca:	81 11       	cpse	r24, r1
    16cc:	b3 cf       	rjmp	.-154    	; 0x1634 <vfprintf+0x58>
    16ce:	98 2f       	mov	r25, r24
    16d0:	9f 7d       	andi	r25, 0xDF	; 223
    16d2:	95 54       	subi	r25, 0x45	; 69
    16d4:	93 30       	cpi	r25, 0x03	; 3
    16d6:	28 f4       	brcc	.+10     	; 0x16e2 <vfprintf+0x106>
    16d8:	0c 5f       	subi	r16, 0xFC	; 252
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	9f e3       	ldi	r25, 0x3F	; 63
    16de:	99 83       	std	Y+1, r25	; 0x01
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <vfprintf+0x120>
    16e2:	83 36       	cpi	r24, 0x63	; 99
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <vfprintf+0x116>
    16e6:	83 37       	cpi	r24, 0x73	; 115
    16e8:	71 f0       	breq	.+28     	; 0x1706 <vfprintf+0x12a>
    16ea:	83 35       	cpi	r24, 0x53	; 83
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <vfprintf+0x114>
    16ee:	55 c0       	rjmp	.+170    	; 0x179a <vfprintf+0x1be>
    16f0:	20 c0       	rjmp	.+64     	; 0x1732 <vfprintf+0x156>
    16f2:	f8 01       	movw	r30, r16
    16f4:	80 81       	ld	r24, Z
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	0e 5f       	subi	r16, 0xFE	; 254
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	88 24       	eor	r8, r8
    16fe:	83 94       	inc	r8
    1700:	91 2c       	mov	r9, r1
    1702:	53 01       	movw	r10, r6
    1704:	12 c0       	rjmp	.+36     	; 0x172a <vfprintf+0x14e>
    1706:	28 01       	movw	r4, r16
    1708:	f2 e0       	ldi	r31, 0x02	; 2
    170a:	4f 0e       	add	r4, r31
    170c:	51 1c       	adc	r5, r1
    170e:	f8 01       	movw	r30, r16
    1710:	a0 80       	ld	r10, Z
    1712:	b1 80       	ldd	r11, Z+1	; 0x01
    1714:	36 fe       	sbrs	r3, 6
    1716:	03 c0       	rjmp	.+6      	; 0x171e <vfprintf+0x142>
    1718:	69 2d       	mov	r22, r9
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <vfprintf+0x146>
    171e:	6f ef       	ldi	r22, 0xFF	; 255
    1720:	7f ef       	ldi	r23, 0xFF	; 255
    1722:	c5 01       	movw	r24, r10
    1724:	3b d1       	rcall	.+630    	; 0x199c <strnlen>
    1726:	4c 01       	movw	r8, r24
    1728:	82 01       	movw	r16, r4
    172a:	f3 2d       	mov	r31, r3
    172c:	ff 77       	andi	r31, 0x7F	; 127
    172e:	3f 2e       	mov	r3, r31
    1730:	15 c0       	rjmp	.+42     	; 0x175c <vfprintf+0x180>
    1732:	28 01       	movw	r4, r16
    1734:	22 e0       	ldi	r18, 0x02	; 2
    1736:	42 0e       	add	r4, r18
    1738:	51 1c       	adc	r5, r1
    173a:	f8 01       	movw	r30, r16
    173c:	a0 80       	ld	r10, Z
    173e:	b1 80       	ldd	r11, Z+1	; 0x01
    1740:	36 fe       	sbrs	r3, 6
    1742:	03 c0       	rjmp	.+6      	; 0x174a <vfprintf+0x16e>
    1744:	69 2d       	mov	r22, r9
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x172>
    174a:	6f ef       	ldi	r22, 0xFF	; 255
    174c:	7f ef       	ldi	r23, 0xFF	; 255
    174e:	c5 01       	movw	r24, r10
    1750:	1a d1       	rcall	.+564    	; 0x1986 <strnlen_P>
    1752:	4c 01       	movw	r8, r24
    1754:	f3 2d       	mov	r31, r3
    1756:	f0 68       	ori	r31, 0x80	; 128
    1758:	3f 2e       	mov	r3, r31
    175a:	82 01       	movw	r16, r4
    175c:	33 fc       	sbrc	r3, 3
    175e:	19 c0       	rjmp	.+50     	; 0x1792 <vfprintf+0x1b6>
    1760:	82 2d       	mov	r24, r2
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 16       	cp	r8, r24
    1766:	99 06       	cpc	r9, r25
    1768:	a0 f4       	brcc	.+40     	; 0x1792 <vfprintf+0x1b6>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	20 d1       	rcall	.+576    	; 0x19b2 <fputc>
    1772:	2a 94       	dec	r2
    1774:	f5 cf       	rjmp	.-22     	; 0x1760 <vfprintf+0x184>
    1776:	f5 01       	movw	r30, r10
    1778:	37 fc       	sbrc	r3, 7
    177a:	85 91       	lpm	r24, Z+
    177c:	37 fe       	sbrs	r3, 7
    177e:	81 91       	ld	r24, Z+
    1780:	5f 01       	movw	r10, r30
    1782:	b6 01       	movw	r22, r12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	15 d1       	rcall	.+554    	; 0x19b2 <fputc>
    1788:	21 10       	cpse	r2, r1
    178a:	2a 94       	dec	r2
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	82 1a       	sub	r8, r18
    1790:	91 08       	sbc	r9, r1
    1792:	81 14       	cp	r8, r1
    1794:	91 04       	cpc	r9, r1
    1796:	79 f7       	brne	.-34     	; 0x1776 <vfprintf+0x19a>
    1798:	e1 c0       	rjmp	.+450    	; 0x195c <vfprintf+0x380>
    179a:	84 36       	cpi	r24, 0x64	; 100
    179c:	11 f0       	breq	.+4      	; 0x17a2 <vfprintf+0x1c6>
    179e:	89 36       	cpi	r24, 0x69	; 105
    17a0:	39 f5       	brne	.+78     	; 0x17f0 <vfprintf+0x214>
    17a2:	f8 01       	movw	r30, r16
    17a4:	37 fe       	sbrs	r3, 7
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <vfprintf+0x1da>
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0c 5f       	subi	r16, 0xFC	; 252
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <vfprintf+0x1ea>
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	07 2e       	mov	r0, r23
    17bc:	00 0c       	add	r0, r0
    17be:	88 0b       	sbc	r24, r24
    17c0:	99 0b       	sbc	r25, r25
    17c2:	0e 5f       	subi	r16, 0xFE	; 254
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	f3 2d       	mov	r31, r3
    17c8:	ff 76       	andi	r31, 0x6F	; 111
    17ca:	3f 2e       	mov	r3, r31
    17cc:	97 ff       	sbrs	r25, 7
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <vfprintf+0x206>
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	f0 68       	ori	r31, 0x80	; 128
    17e0:	3f 2e       	mov	r3, r31
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	a3 01       	movw	r20, r6
    17e8:	20 d1       	rcall	.+576    	; 0x1a2a <__ultoa_invert>
    17ea:	88 2e       	mov	r8, r24
    17ec:	86 18       	sub	r8, r6
    17ee:	44 c0       	rjmp	.+136    	; 0x1878 <vfprintf+0x29c>
    17f0:	85 37       	cpi	r24, 0x75	; 117
    17f2:	31 f4       	brne	.+12     	; 0x1800 <vfprintf+0x224>
    17f4:	23 2d       	mov	r18, r3
    17f6:	2f 7e       	andi	r18, 0xEF	; 239
    17f8:	b2 2e       	mov	r11, r18
    17fa:	2a e0       	ldi	r18, 0x0A	; 10
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	25 c0       	rjmp	.+74     	; 0x184a <vfprintf+0x26e>
    1800:	93 2d       	mov	r25, r3
    1802:	99 7f       	andi	r25, 0xF9	; 249
    1804:	b9 2e       	mov	r11, r25
    1806:	8f 36       	cpi	r24, 0x6F	; 111
    1808:	c1 f0       	breq	.+48     	; 0x183a <vfprintf+0x25e>
    180a:	18 f4       	brcc	.+6      	; 0x1812 <vfprintf+0x236>
    180c:	88 35       	cpi	r24, 0x58	; 88
    180e:	79 f0       	breq	.+30     	; 0x182e <vfprintf+0x252>
    1810:	ae c0       	rjmp	.+348    	; 0x196e <vfprintf+0x392>
    1812:	80 37       	cpi	r24, 0x70	; 112
    1814:	19 f0       	breq	.+6      	; 0x181c <vfprintf+0x240>
    1816:	88 37       	cpi	r24, 0x78	; 120
    1818:	21 f0       	breq	.+8      	; 0x1822 <vfprintf+0x246>
    181a:	a9 c0       	rjmp	.+338    	; 0x196e <vfprintf+0x392>
    181c:	e9 2f       	mov	r30, r25
    181e:	e0 61       	ori	r30, 0x10	; 16
    1820:	be 2e       	mov	r11, r30
    1822:	b4 fe       	sbrs	r11, 4
    1824:	0d c0       	rjmp	.+26     	; 0x1840 <vfprintf+0x264>
    1826:	fb 2d       	mov	r31, r11
    1828:	f4 60       	ori	r31, 0x04	; 4
    182a:	bf 2e       	mov	r11, r31
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <vfprintf+0x264>
    182e:	34 fe       	sbrs	r3, 4
    1830:	0a c0       	rjmp	.+20     	; 0x1846 <vfprintf+0x26a>
    1832:	29 2f       	mov	r18, r25
    1834:	26 60       	ori	r18, 0x06	; 6
    1836:	b2 2e       	mov	r11, r18
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x26a>
    183a:	28 e0       	ldi	r18, 0x08	; 8
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	05 c0       	rjmp	.+10     	; 0x184a <vfprintf+0x26e>
    1840:	20 e1       	ldi	r18, 0x10	; 16
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <vfprintf+0x26e>
    1846:	20 e1       	ldi	r18, 0x10	; 16
    1848:	32 e0       	ldi	r19, 0x02	; 2
    184a:	f8 01       	movw	r30, r16
    184c:	b7 fe       	sbrs	r11, 7
    184e:	07 c0       	rjmp	.+14     	; 0x185e <vfprintf+0x282>
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	0c 5f       	subi	r16, 0xFC	; 252
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	06 c0       	rjmp	.+12     	; 0x186a <vfprintf+0x28e>
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 5f       	subi	r16, 0xFE	; 254
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	a3 01       	movw	r20, r6
    186c:	de d0       	rcall	.+444    	; 0x1a2a <__ultoa_invert>
    186e:	88 2e       	mov	r8, r24
    1870:	86 18       	sub	r8, r6
    1872:	fb 2d       	mov	r31, r11
    1874:	ff 77       	andi	r31, 0x7F	; 127
    1876:	3f 2e       	mov	r3, r31
    1878:	36 fe       	sbrs	r3, 6
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <vfprintf+0x2ba>
    187c:	23 2d       	mov	r18, r3
    187e:	2e 7f       	andi	r18, 0xFE	; 254
    1880:	a2 2e       	mov	r10, r18
    1882:	89 14       	cp	r8, r9
    1884:	58 f4       	brcc	.+22     	; 0x189c <vfprintf+0x2c0>
    1886:	34 fe       	sbrs	r3, 4
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <vfprintf+0x2c4>
    188a:	32 fc       	sbrc	r3, 2
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x2c4>
    188e:	83 2d       	mov	r24, r3
    1890:	8e 7e       	andi	r24, 0xEE	; 238
    1892:	a8 2e       	mov	r10, r24
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x2c4>
    1896:	b8 2c       	mov	r11, r8
    1898:	a3 2c       	mov	r10, r3
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <vfprintf+0x2c6>
    189c:	b8 2c       	mov	r11, r8
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <vfprintf+0x2c6>
    18a0:	b9 2c       	mov	r11, r9
    18a2:	a4 fe       	sbrs	r10, 4
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <vfprintf+0x2e8>
    18a6:	fe 01       	movw	r30, r28
    18a8:	e8 0d       	add	r30, r8
    18aa:	f1 1d       	adc	r31, r1
    18ac:	80 81       	ld	r24, Z
    18ae:	80 33       	cpi	r24, 0x30	; 48
    18b0:	21 f4       	brne	.+8      	; 0x18ba <vfprintf+0x2de>
    18b2:	9a 2d       	mov	r25, r10
    18b4:	99 7e       	andi	r25, 0xE9	; 233
    18b6:	a9 2e       	mov	r10, r25
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <vfprintf+0x2f0>
    18ba:	a2 fe       	sbrs	r10, 2
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <vfprintf+0x2ee>
    18be:	b3 94       	inc	r11
    18c0:	b3 94       	inc	r11
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <vfprintf+0x2f0>
    18c4:	8a 2d       	mov	r24, r10
    18c6:	86 78       	andi	r24, 0x86	; 134
    18c8:	09 f0       	breq	.+2      	; 0x18cc <vfprintf+0x2f0>
    18ca:	b3 94       	inc	r11
    18cc:	a3 fc       	sbrc	r10, 3
    18ce:	10 c0       	rjmp	.+32     	; 0x18f0 <vfprintf+0x314>
    18d0:	a0 fe       	sbrs	r10, 0
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0x304>
    18d4:	b2 14       	cp	r11, r2
    18d6:	80 f4       	brcc	.+32     	; 0x18f8 <vfprintf+0x31c>
    18d8:	28 0c       	add	r2, r8
    18da:	92 2c       	mov	r9, r2
    18dc:	9b 18       	sub	r9, r11
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <vfprintf+0x31e>
    18e0:	b2 14       	cp	r11, r2
    18e2:	58 f4       	brcc	.+22     	; 0x18fa <vfprintf+0x31e>
    18e4:	b6 01       	movw	r22, r12
    18e6:	80 e2       	ldi	r24, 0x20	; 32
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	63 d0       	rcall	.+198    	; 0x19b2 <fputc>
    18ec:	b3 94       	inc	r11
    18ee:	f8 cf       	rjmp	.-16     	; 0x18e0 <vfprintf+0x304>
    18f0:	b2 14       	cp	r11, r2
    18f2:	18 f4       	brcc	.+6      	; 0x18fa <vfprintf+0x31e>
    18f4:	2b 18       	sub	r2, r11
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x320>
    18f8:	98 2c       	mov	r9, r8
    18fa:	21 2c       	mov	r2, r1
    18fc:	a4 fe       	sbrs	r10, 4
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <vfprintf+0x342>
    1900:	b6 01       	movw	r22, r12
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	55 d0       	rcall	.+170    	; 0x19b2 <fputc>
    1908:	a2 fe       	sbrs	r10, 2
    190a:	16 c0       	rjmp	.+44     	; 0x1938 <vfprintf+0x35c>
    190c:	a1 fc       	sbrc	r10, 1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x33a>
    1910:	88 e7       	ldi	r24, 0x78	; 120
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x33e>
    1916:	88 e5       	ldi	r24, 0x58	; 88
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	b6 01       	movw	r22, r12
    191c:	0c c0       	rjmp	.+24     	; 0x1936 <vfprintf+0x35a>
    191e:	8a 2d       	mov	r24, r10
    1920:	86 78       	andi	r24, 0x86	; 134
    1922:	51 f0       	breq	.+20     	; 0x1938 <vfprintf+0x35c>
    1924:	a1 fe       	sbrs	r10, 1
    1926:	02 c0       	rjmp	.+4      	; 0x192c <vfprintf+0x350>
    1928:	8b e2       	ldi	r24, 0x2B	; 43
    192a:	01 c0       	rjmp	.+2      	; 0x192e <vfprintf+0x352>
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	a7 fc       	sbrc	r10, 7
    1930:	8d e2       	ldi	r24, 0x2D	; 45
    1932:	b6 01       	movw	r22, r12
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	3d d0       	rcall	.+122    	; 0x19b2 <fputc>
    1938:	89 14       	cp	r8, r9
    193a:	30 f4       	brcc	.+12     	; 0x1948 <vfprintf+0x36c>
    193c:	b6 01       	movw	r22, r12
    193e:	80 e3       	ldi	r24, 0x30	; 48
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	37 d0       	rcall	.+110    	; 0x19b2 <fputc>
    1944:	9a 94       	dec	r9
    1946:	f8 cf       	rjmp	.-16     	; 0x1938 <vfprintf+0x35c>
    1948:	8a 94       	dec	r8
    194a:	f3 01       	movw	r30, r6
    194c:	e8 0d       	add	r30, r8
    194e:	f1 1d       	adc	r31, r1
    1950:	80 81       	ld	r24, Z
    1952:	b6 01       	movw	r22, r12
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	2d d0       	rcall	.+90     	; 0x19b2 <fputc>
    1958:	81 10       	cpse	r8, r1
    195a:	f6 cf       	rjmp	.-20     	; 0x1948 <vfprintf+0x36c>
    195c:	22 20       	and	r2, r2
    195e:	09 f4       	brne	.+2      	; 0x1962 <vfprintf+0x386>
    1960:	4e ce       	rjmp	.-868    	; 0x15fe <vfprintf+0x22>
    1962:	b6 01       	movw	r22, r12
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	24 d0       	rcall	.+72     	; 0x19b2 <fputc>
    196a:	2a 94       	dec	r2
    196c:	f7 cf       	rjmp	.-18     	; 0x195c <vfprintf+0x380>
    196e:	f6 01       	movw	r30, r12
    1970:	86 81       	ldd	r24, Z+6	; 0x06
    1972:	97 81       	ldd	r25, Z+7	; 0x07
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x39e>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	2b 96       	adiw	r28, 0x0b	; 11
    197c:	e2 e1       	ldi	r30, 0x12	; 18
    197e:	e5 c0       	rjmp	.+458    	; 0x1b4a <__epilogue_restores__>

00001980 <__ctype_isfalse>:
    1980:	99 27       	eor	r25, r25
    1982:	88 27       	eor	r24, r24

00001984 <__ctype_istrue>:
    1984:	08 95       	ret

00001986 <strnlen_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	61 50       	subi	r22, 0x01	; 1
    198c:	70 40       	sbci	r23, 0x00	; 0
    198e:	01 10       	cpse	r0, r1
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <strnlen_P+0x2>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	8e 0f       	add	r24, r30
    1998:	9f 1f       	adc	r25, r31
    199a:	08 95       	ret

0000199c <strnlen>:
    199c:	fc 01       	movw	r30, r24
    199e:	61 50       	subi	r22, 0x01	; 1
    19a0:	70 40       	sbci	r23, 0x00	; 0
    19a2:	01 90       	ld	r0, Z+
    19a4:	01 10       	cpse	r0, r1
    19a6:	d8 f7       	brcc	.-10     	; 0x199e <strnlen+0x2>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	8e 0f       	add	r24, r30
    19ae:	9f 1f       	adc	r25, r31
    19b0:	08 95       	ret

000019b2 <fputc>:
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	fb 01       	movw	r30, r22
    19bc:	23 81       	ldd	r18, Z+3	; 0x03
    19be:	21 fd       	sbrc	r18, 1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <fputc+0x16>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	2c c0       	rjmp	.+88     	; 0x1a20 <fputc+0x6e>
    19c8:	22 ff       	sbrs	r18, 2
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <fputc+0x46>
    19cc:	46 81       	ldd	r20, Z+6	; 0x06
    19ce:	57 81       	ldd	r21, Z+7	; 0x07
    19d0:	24 81       	ldd	r18, Z+4	; 0x04
    19d2:	35 81       	ldd	r19, Z+5	; 0x05
    19d4:	42 17       	cp	r20, r18
    19d6:	53 07       	cpc	r21, r19
    19d8:	44 f4       	brge	.+16     	; 0x19ea <fputc+0x38>
    19da:	a0 81       	ld	r26, Z
    19dc:	b1 81       	ldd	r27, Z+1	; 0x01
    19de:	9d 01       	movw	r18, r26
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	20 83       	st	Z, r18
    19e6:	31 83       	std	Z+1, r19	; 0x01
    19e8:	8c 93       	st	X, r24
    19ea:	26 81       	ldd	r18, Z+6	; 0x06
    19ec:	37 81       	ldd	r19, Z+7	; 0x07
    19ee:	2f 5f       	subi	r18, 0xFF	; 255
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	26 83       	std	Z+6, r18	; 0x06
    19f4:	37 83       	std	Z+7, r19	; 0x07
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <fputc+0x6e>
    19f8:	8b 01       	movw	r16, r22
    19fa:	ec 01       	movw	r28, r24
    19fc:	fb 01       	movw	r30, r22
    19fe:	00 84       	ldd	r0, Z+8	; 0x08
    1a00:	f1 85       	ldd	r31, Z+9	; 0x09
    1a02:	e0 2d       	mov	r30, r0
    1a04:	09 95       	icall
    1a06:	89 2b       	or	r24, r25
    1a08:	e1 f6       	brne	.-72     	; 0x19c2 <fputc+0x10>
    1a0a:	d8 01       	movw	r26, r16
    1a0c:	16 96       	adiw	r26, 0x06	; 6
    1a0e:	8d 91       	ld	r24, X+
    1a10:	9c 91       	ld	r25, X
    1a12:	17 97       	sbiw	r26, 0x07	; 7
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	16 96       	adiw	r26, 0x06	; 6
    1a18:	8d 93       	st	X+, r24
    1a1a:	9c 93       	st	X, r25
    1a1c:	17 97       	sbiw	r26, 0x07	; 7
    1a1e:	ce 01       	movw	r24, r28
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <__ultoa_invert>:
    1a2a:	fa 01       	movw	r30, r20
    1a2c:	aa 27       	eor	r26, r26
    1a2e:	28 30       	cpi	r18, 0x08	; 8
    1a30:	51 f1       	breq	.+84     	; 0x1a86 <__ultoa_invert+0x5c>
    1a32:	20 31       	cpi	r18, 0x10	; 16
    1a34:	81 f1       	breq	.+96     	; 0x1a96 <__ultoa_invert+0x6c>
    1a36:	e8 94       	clt
    1a38:	6f 93       	push	r22
    1a3a:	6e 7f       	andi	r22, 0xFE	; 254
    1a3c:	6e 5f       	subi	r22, 0xFE	; 254
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	af 4f       	sbci	r26, 0xFF	; 255
    1a46:	b1 e0       	ldi	r27, 0x01	; 1
    1a48:	3e d0       	rcall	.+124    	; 0x1ac6 <__ultoa_invert+0x9c>
    1a4a:	b4 e0       	ldi	r27, 0x04	; 4
    1a4c:	3c d0       	rcall	.+120    	; 0x1ac6 <__ultoa_invert+0x9c>
    1a4e:	67 0f       	add	r22, r23
    1a50:	78 1f       	adc	r23, r24
    1a52:	89 1f       	adc	r24, r25
    1a54:	9a 1f       	adc	r25, r26
    1a56:	a1 1d       	adc	r26, r1
    1a58:	68 0f       	add	r22, r24
    1a5a:	79 1f       	adc	r23, r25
    1a5c:	8a 1f       	adc	r24, r26
    1a5e:	91 1d       	adc	r25, r1
    1a60:	a1 1d       	adc	r26, r1
    1a62:	6a 0f       	add	r22, r26
    1a64:	71 1d       	adc	r23, r1
    1a66:	81 1d       	adc	r24, r1
    1a68:	91 1d       	adc	r25, r1
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	20 d0       	rcall	.+64     	; 0x1aae <__ultoa_invert+0x84>
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <__ultoa_invert+0x48>
    1a70:	68 94       	set
    1a72:	3f 91       	pop	r19
    1a74:	2a e0       	ldi	r18, 0x0A	; 10
    1a76:	26 9f       	mul	r18, r22
    1a78:	11 24       	eor	r1, r1
    1a7a:	30 19       	sub	r19, r0
    1a7c:	30 5d       	subi	r19, 0xD0	; 208
    1a7e:	31 93       	st	Z+, r19
    1a80:	de f6       	brtc	.-74     	; 0x1a38 <__ultoa_invert+0xe>
    1a82:	cf 01       	movw	r24, r30
    1a84:	08 95       	ret
    1a86:	46 2f       	mov	r20, r22
    1a88:	47 70       	andi	r20, 0x07	; 7
    1a8a:	40 5d       	subi	r20, 0xD0	; 208
    1a8c:	41 93       	st	Z+, r20
    1a8e:	b3 e0       	ldi	r27, 0x03	; 3
    1a90:	0f d0       	rcall	.+30     	; 0x1ab0 <__ultoa_invert+0x86>
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__ultoa_invert+0x5c>
    1a94:	f6 cf       	rjmp	.-20     	; 0x1a82 <__ultoa_invert+0x58>
    1a96:	46 2f       	mov	r20, r22
    1a98:	4f 70       	andi	r20, 0x0F	; 15
    1a9a:	40 5d       	subi	r20, 0xD0	; 208
    1a9c:	4a 33       	cpi	r20, 0x3A	; 58
    1a9e:	18 f0       	brcs	.+6      	; 0x1aa6 <__ultoa_invert+0x7c>
    1aa0:	49 5d       	subi	r20, 0xD9	; 217
    1aa2:	31 fd       	sbrc	r19, 1
    1aa4:	40 52       	subi	r20, 0x20	; 32
    1aa6:	41 93       	st	Z+, r20
    1aa8:	02 d0       	rcall	.+4      	; 0x1aae <__ultoa_invert+0x84>
    1aaa:	a9 f7       	brne	.-22     	; 0x1a96 <__ultoa_invert+0x6c>
    1aac:	ea cf       	rjmp	.-44     	; 0x1a82 <__ultoa_invert+0x58>
    1aae:	b4 e0       	ldi	r27, 0x04	; 4
    1ab0:	a6 95       	lsr	r26
    1ab2:	97 95       	ror	r25
    1ab4:	87 95       	ror	r24
    1ab6:	77 95       	ror	r23
    1ab8:	67 95       	ror	r22
    1aba:	ba 95       	dec	r27
    1abc:	c9 f7       	brne	.-14     	; 0x1ab0 <__ultoa_invert+0x86>
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	61 05       	cpc	r22, r1
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	08 95       	ret
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	ac 01       	movw	r20, r24
    1aca:	0a 2e       	mov	r0, r26
    1acc:	06 94       	lsr	r0
    1ace:	57 95       	ror	r21
    1ad0:	47 95       	ror	r20
    1ad2:	37 95       	ror	r19
    1ad4:	27 95       	ror	r18
    1ad6:	ba 95       	dec	r27
    1ad8:	c9 f7       	brne	.-14     	; 0x1acc <__ultoa_invert+0xa2>
    1ada:	62 0f       	add	r22, r18
    1adc:	73 1f       	adc	r23, r19
    1ade:	84 1f       	adc	r24, r20
    1ae0:	95 1f       	adc	r25, r21
    1ae2:	a0 1d       	adc	r26, r0
    1ae4:	08 95       	ret

00001ae6 <__mulsi3>:
    1ae6:	db 01       	movw	r26, r22
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	0b d0       	rcall	.+22     	; 0x1b04 <__muluhisi3>
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	a2 9f       	mul	r26, r18
    1af4:	80 0d       	add	r24, r0
    1af6:	91 1d       	adc	r25, r1
    1af8:	a3 9f       	mul	r26, r19
    1afa:	90 0d       	add	r25, r0
    1afc:	b2 9f       	mul	r27, r18
    1afe:	90 0d       	add	r25, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	08 95       	ret

00001b04 <__muluhisi3>:
    1b04:	3a d0       	rcall	.+116    	; 0x1b7a <__umulhisi3>
    1b06:	a5 9f       	mul	r26, r21
    1b08:	90 0d       	add	r25, r0
    1b0a:	b4 9f       	mul	r27, r20
    1b0c:	90 0d       	add	r25, r0
    1b0e:	a4 9f       	mul	r26, r20
    1b10:	80 0d       	add	r24, r0
    1b12:	91 1d       	adc	r25, r1
    1b14:	11 24       	eor	r1, r1
    1b16:	08 95       	ret

00001b18 <__prologue_saves__>:
    1b18:	2f 92       	push	r2
    1b1a:	3f 92       	push	r3
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	6f 92       	push	r6
    1b22:	7f 92       	push	r7
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	ca 1b       	sub	r28, r26
    1b42:	db 0b       	sbc	r29, r27
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	09 94       	ijmp

00001b4a <__epilogue_restores__>:
    1b4a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b4c:	39 88       	ldd	r3, Y+17	; 0x11
    1b4e:	48 88       	ldd	r4, Y+16	; 0x10
    1b50:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b54:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b56:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b58:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b5c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b60:	df 80       	ldd	r13, Y+7	; 0x07
    1b62:	ee 80       	ldd	r14, Y+6	; 0x06
    1b64:	fd 80       	ldd	r15, Y+5	; 0x05
    1b66:	0c 81       	ldd	r16, Y+4	; 0x04
    1b68:	1b 81       	ldd	r17, Y+3	; 0x03
    1b6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b6e:	ce 0f       	add	r28, r30
    1b70:	d1 1d       	adc	r29, r1
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	ed 01       	movw	r28, r26
    1b78:	08 95       	ret

00001b7a <__umulhisi3>:
    1b7a:	a2 9f       	mul	r26, r18
    1b7c:	b0 01       	movw	r22, r0
    1b7e:	b3 9f       	mul	r27, r19
    1b80:	c0 01       	movw	r24, r0
    1b82:	a3 9f       	mul	r26, r19
    1b84:	01 d0       	rcall	.+2      	; 0x1b88 <__umulhisi3+0xe>
    1b86:	b2 9f       	mul	r27, r18
    1b88:	70 0d       	add	r23, r0
    1b8a:	81 1d       	adc	r24, r1
    1b8c:	11 24       	eor	r1, r1
    1b8e:	91 1d       	adc	r25, r1
    1b90:	08 95       	ret

00001b92 <_exit>:
    1b92:	f8 94       	cli

00001b94 <__stop_program>:
    1b94:	ff cf       	rjmp	.-2      	; 0x1b94 <__stop_program>
