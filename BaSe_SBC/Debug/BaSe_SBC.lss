
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001ef1  00001fa5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f5  00009bfc  00001bfc  00001cb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000010b  00803e04  00803e04  00001fa9  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000400  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008697  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002900  00000000  00000000  0000aadb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022f0  00000000  00000000  0000d3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a30  00000000  00000000  0000f6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000246c  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a7a  00000000  00000000  00012568  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  00013fe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	0c c1       	rjmp	.+536    	; 0x220 <__vector_3>
       8:	33 c1       	rjmp	.+614    	; 0x270 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	33 c7       	rjmp	.+3686   	; 0xe74 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	80 c1       	rjmp	.+768    	; 0x316 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	24 c9       	rjmp	.-3512   	; 0xfffff276 <__eeprom_end+0xff7ef276>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e1 ef       	ldi	r30, 0xF1	; 241
      48:	fe e1       	ldi	r31, 0x1E	; 30
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	af 30       	cpi	r26, 0x0F	; 15
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	28 d2       	rcall	.+1104   	; 0x4b8 <main>
      68:	c7 cd       	rjmp	.-1138   	; 0xfffffbf8 <__eeprom_end+0xff7efbf8>

0000006a <__bad_interrupt>:
      6a:	1e c1       	rjmp	.+572    	; 0x2a8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <dim_display>:
     1a2:	18 16       	cp	r1, r24
     1a4:	19 06       	cpc	r1, r25
     1a6:	44 f4       	brge	.+16     	; 0x1b8 <dim_display+0x16>
     1a8:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     1ac:	88 23       	and	r24, r24
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <dim_display+0x16>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b6:	08 95       	ret
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1be:	08 95       	ret

000001c0 <display_enable>:
     1c0:	e0 e0       	ldi	r30, 0x00	; 0
     1c2:	f4 e0       	ldi	r31, 0x04	; 4
     1c4:	80 e8       	ldi	r24, 0x80	; 128
     1c6:	85 83       	std	Z+5, r24	; 0x05
     1c8:	92 e4       	ldi	r25, 0x42	; 66
     1ca:	9a 95       	dec	r25
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <display_enable+0xa>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <display_enable+0x10>
     1d0:	86 83       	std	Z+6, r24	; 0x06
     1d2:	82 e4       	ldi	r24, 0x42	; 66
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <display_enable+0x14>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <display_enable+0x1a>
     1da:	08 95       	ret

000001dc <set_display_data_pins>:
     1dc:	e0 e4       	ldi	r30, 0x40	; 64
     1de:	f4 e0       	ldi	r31, 0x04	; 4
     1e0:	94 81       	ldd	r25, Z+4	; 0x04
     1e2:	90 7f       	andi	r25, 0xF0	; 240
     1e4:	94 83       	std	Z+4, r25	; 0x04
     1e6:	94 81       	ldd	r25, Z+4	; 0x04
     1e8:	8f 70       	andi	r24, 0x0F	; 15
     1ea:	98 2b       	or	r25, r24
     1ec:	94 83       	std	Z+4, r25	; 0x04
     1ee:	08 95       	ret

000001f0 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     1f0:	80 e4       	ldi	r24, 0x40	; 64
     1f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     1f6:	08 95       	ret

000001f8 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1f8:	80 e4       	ldi	r24, 0x40	; 64
     1fa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1fe:	08 95       	ret

00000200 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     200:	e0 e2       	ldi	r30, 0x20	; 32
     202:	f4 e0       	ldi	r31, 0x04	; 4
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     208:	81 83       	std	Z+1, r24	; 0x01
     20a:	08 95       	ret

0000020c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     20c:	84 e0       	ldi	r24, 0x04	; 4
     20e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     212:	08 95       	ret

00000214 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     214:	e0 e2       	ldi	r30, 0x20	; 32
     216:	f4 e0       	ldi	r31, 0x04	; 4
     218:	85 89       	ldd	r24, Z+21	; 0x15
     21a:	89 60       	ori	r24, 0x09	; 9
     21c:	85 8b       	std	Z+21, r24	; 0x15
     21e:	08 95       	ret

00000220 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	8f 93       	push	r24
     22c:	ef 93       	push	r30
     22e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     230:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     234:	82 ff       	sbrs	r24, 2
     236:	08 c0       	rjmp	.+16     	; 0x248 <__vector_3+0x28>
		flag_button_0_pressed = true;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 5e 3e 	sts	0x3E5E, r24	; 0x803e5e <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     23e:	e9 e0       	ldi	r30, 0x09	; 9
     240:	f4 e0       	ldi	r31, 0x04	; 4
     242:	80 81       	ld	r24, Z
     244:	84 70       	andi	r24, 0x04	; 4
     246:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     248:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     24c:	83 ff       	sbrs	r24, 3
     24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_3+0x40>
		flag_button_1_pressed = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     256:	e9 e0       	ldi	r30, 0x09	; 9
     258:	f4 e0       	ldi	r31, 0x04	; 4
     25a:	80 81       	ld	r24, Z
     25c:	88 70       	andi	r24, 0x08	; 8
     25e:	80 83       	st	Z, r24
	}
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	8f 91       	pop	r24
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	8f 93       	push	r24
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     280:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     284:	85 ff       	sbrs	r24, 5
     286:	08 c0       	rjmp	.+16     	; 0x298 <__vector_4+0x28>
		flag_heartbeat = true;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     28e:	e9 e2       	ldi	r30, 0x29	; 41
     290:	f4 e0       	ldi	r31, 0x04	; 4
     292:	80 81       	ld	r24, Z
     294:	80 72       	andi	r24, 0x20	; 32
     296:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	8f 91       	pop	r24
     29e:	0f 90       	pop	r0
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	0f 90       	pop	r0
     2a4:	1f 90       	pop	r1
     2a6:	18 95       	reti

000002a8 <__vector_default>:

ISR(BADISR_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	/* This routine is called if a non defined interrupt-vector is requested */
	USART0_sendString_w_newline_eol("bad ISR");
     2ca:	8e ef       	ldi	r24, 0xFE	; 254
     2cc:	9b e9       	ldi	r25, 0x9B	; 155
     2ce:	3c d6       	rcall	.+3192   	; 0xf48 <USART0_sendString_w_newline_eol>
     2d0:	ff 91       	pop	r31
     2d2:	ef 91       	pop	r30
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_newline_eol(buffer);
}
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	fa e0       	ldi	r31, 0x0A	; 10
     2f6:	8b e2       	ldi	r24, 0x2B	; 43
     2f8:	9a e0       	ldi	r25, 0x0A	; 10
     2fa:	86 a3       	std	Z+38, r24	; 0x26
     2fc:	97 a3       	std	Z+39, r25	; 0x27
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	82 87       	std	Z+10, r24	; 0x0a
     302:	08 95       	ret

00000304 <init_heatbeat_monitor>:
     304:	87 df       	rcall	.-242    	; 0x214 <setup_interrupt_for_hb_edge_detection>
     306:	f5 df       	rcall	.-22     	; 0x2f2 <setup_interrupt_timeout_detection>
     308:	08 95       	ret

0000030a <heartbeat_monitor>:
     30a:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <flag_heartbeat>
     30e:	81 11       	cpse	r24, r1
     310:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <flag_heartbeat>
     314:	08 95       	ret

00000316 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     320:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_bpi_heartbeat_ok>
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     32e:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     332:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_button_1_pressed>
     336:	81 11       	cpse	r24, r1
     338:	02 c0       	rjmp	.+4      	; 0x33e <mainloop_standby+0x10>
     33a:	99 23       	and	r25, r25
     33c:	41 f0       	breq	.+16     	; 0x34e <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     33e:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		flag_button_1_pressed = false;
     342:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 d8 3e 	sts	0x3ED8, r24	; 0x803ed8 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     34c:	f8 d4       	rcall	.+2544   	; 0xd3e <transition_to_pwr_state>
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	80 e7       	ldi	r24, 0x70	; 112
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <mainloop_standby+0x26>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <mainloop_standby+0x30>
     35e:	00 00       	nop
     360:	08 95       	ret

00000362 <mainloop_display_on>:
void reset_idle_timer() {
	/* if timer matches, it brings the sbu back to standby. This function resetts the timer */
	;
}

void mainloop_display_on() {
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
	if (flag_entering_mainloop_display_on) {
     36c:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_entering_mainloop_display_on>
     370:	88 23       	and	r24, r24
     372:	b9 f0       	breq	.+46     	; 0x3a2 <mainloop_display_on+0x40>
		flag_entering_mainloop_display_on = false;
     374:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     378:	84 eb       	ldi	r24, 0xB4	; 180
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     380:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     38c:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
		button1_action = show_menu_actions;
     390:	85 ec       	ldi	r24, 0xC5	; 197
     392:	94 e0       	ldi	r25, 0x04	; 4
     394:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     398:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
		dim_display(1);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	00 df       	rcall	.-512    	; 0x1a2 <dim_display>
	}
	reset_idle_timer();
	show_menu();
     3a2:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     3a6:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     3aa:	09 95       	icall
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	80 e7       	ldi	r24, 0x70	; 112
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <mainloop_display_on+0x50>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <mainloop_display_on+0x5a>
     3bc:	00 00       	nop
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
     3be:	10 92 d9 3e 	sts	0x3ED9, r1	; 0x803ed9 <menu_show_counter>
     3c2:	10 92 da 3e 	sts	0x3EDA, r1	; 0x803eda <menu_show_counter+0x1>
	while(!flag_button_0_pressed & !button_1_pressed()) {
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3c6:	06 e0       	ldi	r16, 0x06	; 6
     3c8:	1c e9       	ldi	r17, 0x9C	; 156
     3ca:	c2 e7       	ldi	r28, 0x72	; 114
     3cc:	de e3       	ldi	r29, 0x3E	; 62
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     3ce:	2d c0       	rjmp	.+90     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3d0:	8f e1       	ldi	r24, 0x1F	; 31
     3d2:	9e e4       	ldi	r25, 0x4E	; 78
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <mainloop_display_on+0x72>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <mainloop_display_on+0x78>
     3da:	00 00       	nop
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3dc:	80 91 da 3e 	lds	r24, 0x3EDA	; 0x803eda <menu_show_counter+0x1>
     3e0:	8f 93       	push	r24
     3e2:	80 91 d9 3e 	lds	r24, 0x3ED9	; 0x803ed9 <menu_show_counter>
     3e6:	8f 93       	push	r24
     3e8:	1f 93       	push	r17
     3ea:	0f 93       	push	r16
     3ec:	df 93       	push	r29
     3ee:	cf 93       	push	r28
     3f0:	09 d9       	rcall	.-3566   	; 0xfffff604 <__eeprom_end+0xff7ef604>
		USART0_sendString(buffer);
     3f2:	ce 01       	movw	r24, r28
     3f4:	88 d5       	rcall	.+2832   	; 0xf06 <USART0_sendString>
		menu_show_counter++;
     3f6:	80 91 d9 3e 	lds	r24, 0x3ED9	; 0x803ed9 <menu_show_counter>
     3fa:	90 91 da 3e 	lds	r25, 0x3EDA	; 0x803eda <menu_show_counter+0x1>
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	80 93 d9 3e 	sts	0x3ED9, r24	; 0x803ed9 <menu_show_counter>
     404:	90 93 da 3e 	sts	0x3EDA, r25	; 0x803eda <menu_show_counter+0x1>
		if (flag_wakeup_by_rtc) {
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <flag_wakeup_by_rtc>
     418:	21 11       	cpse	r18, r1
     41a:	10 c0       	rjmp	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			break;
		}
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
     41c:	8d 32       	cpi	r24, 0x2D	; 45
     41e:	91 40       	sbci	r25, 0x01	; 1
     420:	20 f0       	brcs	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			flag_goto_sleep = true;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
			break;
     428:	09 c0       	rjmp	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     42a:	f0 90 5e 3e 	lds	r15, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     42e:	a6 de       	rcall	.-692    	; 0x17c <button_1_pressed>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	89 2b       	or	r24, r25
     434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	f2 16       	cp	r15, r18
     43a:	50 f2       	brcs	.-108    	; 0x3d0 <mainloop_display_on+0x6e>
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
			flag_goto_sleep = true;
			break;
		}
	}
	USART0_sendString("out of loop");
     43c:	88 e1       	ldi	r24, 0x18	; 24
     43e:	9c e9       	ldi	r25, 0x9C	; 156
     440:	62 d5       	rcall	.+2756   	; 0xf06 <USART0_sendString>
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     442:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     446:	88 23       	and	r24, r24
     448:	39 f0       	breq	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		flag_button_0_pressed = false;
     44a:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		button0_action();
     44e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <button0_action>
     452:	f0 91 1a 3e 	lds	r31, 0x3E1A	; 0x803e1a <button0_action+0x1>
     456:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     458:	91 de       	rcall	.-734    	; 0x17c <button_1_pressed>
     45a:	89 2b       	or	r24, r25
     45c:	39 f0       	breq	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		flag_button_1_pressed = false;
     45e:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		button1_action();
     462:	e0 91 17 3e 	lds	r30, 0x3E17	; 0x803e17 <button1_action>
     466:	f0 91 18 3e 	lds	r31, 0x3E18	; 0x803e18 <button1_action+0x1>
     46a:	09 95       	icall
	}
	
	if (flag_goto_sleep) {
     46c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_goto_sleep>
     470:	88 23       	and	r24, r24
     472:	49 f0       	breq	.+18     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		USART0_sendString("going to sleep ...\n");
     474:	84 e2       	ldi	r24, 0x24	; 36
     476:	9c e9       	ldi	r25, 0x9C	; 156
     478:	46 d5       	rcall	.+2700   	; 0xf06 <USART0_sendString>
		flag_goto_sleep = false;
     47a:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_goto_sleep>
		next_pwr_state = standby;
     47e:	10 92 d8 3e 	sts	0x3ED8, r1	; 0x803ed8 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	5c d4       	rcall	.+2232   	; 0xd3e <transition_to_pwr_state>
	}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	08 95       	ret

00000492 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     492:	3c de       	rcall	.-904    	; 0x10c <init_flags>
	init_pins();
     494:	4f de       	rcall	.-866    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     496:	36 df       	rcall	.-404    	; 0x304 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     498:	7b de       	rcall	.-778    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     49a:	22 d5       	rcall	.+2628   	; 0xee0 <init_uart>
	init_display();
     49c:	35 d1       	rcall	.+618    	; 0x708 <init_display>
	adc_init();
     49e:	f1 dd       	rcall	.-1054   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     4a0:	81 e1       	ldi	r24, 0x11	; 17
     4a2:	e8 e3       	ldi	r30, 0x38	; 56
     4a4:	fc e9       	ldi	r31, 0x9C	; 156
     4a6:	a2 ea       	ldi	r26, 0xA2	; 162
     4a8:	be e3       	ldi	r27, 0x3E	; 62
     4aa:	01 90       	ld	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	8a 95       	dec	r24
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <init_sbu+0x18>
	dimmer_init();
     4b2:	fd d1       	rcall	.+1018   	; 0x8ae <dimmer_init>
	sei();
     4b4:	78 94       	sei
     4b6:	08 95       	ret

000004b8 <main>:
}

int main(void)
{
	init_sbu();
     4b8:	ec df       	rcall	.-40     	; 0x492 <init_sbu>

	display_write_string("Standby Unit\nready!");
     4ba:	89 e4       	ldi	r24, 0x49	; 73
     4bc:	9c e9       	ldi	r25, 0x9C	; 156
     4be:	d4 d1       	rcall	.+936    	; 0x868 <display_write_string>
	USART0_sendString("I:STARTED");
     4c0:	8d e5       	ldi	r24, 0x5D	; 93
     4c2:	9c e9       	ldi	r25, 0x9C	; 156
     4c4:	20 d5       	rcall	.+2624   	; 0xf06 <USART0_sendString>
	dim_display(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	6b de       	rcall	.-810    	; 0x1a2 <dim_display>
	
	current_pwr_state = active;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4d2:	c1 e9       	ldi	r28, 0x91	; 145
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f1 eb       	ldi	r31, 0xB1	; 177
     4da:	cf 2e       	mov	r12, r31
     4dc:	f1 e0       	ldi	r31, 0x01	; 1
     4de:	df 2e       	mov	r13, r31
     4e0:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f7 e9       	ldi	r31, 0x97	; 151
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4ee:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4f0:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	39 f0       	breq	.+14     	; 0x506 <main+0x4e>
     4f8:	20 f0       	brcs	.+8      	; 0x502 <main+0x4a>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	29 f4       	brne	.+10     	; 0x508 <main+0x50>
			case active:
				mainloop = mainloop_active;
     4fe:	e8 01       	movw	r28, r16
     500:	03 c0       	rjmp	.+6      	; 0x508 <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     502:	e7 01       	movw	r28, r14
				break;
     504:	01 c0       	rjmp	.+2      	; 0x508 <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     506:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     508:	fe 01       	movw	r30, r28
     50a:	09 95       	icall
    }
     50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <main+0x38>

0000050e <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     50e:	e0 e5       	ldi	r30, 0x50	; 80
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	82 60       	ori	r24, 0x02	; 2
     516:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     518:	80 81       	ld	r24, Z
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	80 83       	st	Z, r24
	sleep_cpu();
     51e:	88 95       	sleep
     520:	08 95       	ret

00000522 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	3d de       	rcall	.-902    	; 0x1a2 <dim_display>
	heartbeat_monitor();
     528:	f0 de       	rcall	.-544    	; 0x30a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     52a:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <flag_bpi_heartbeat_ok>
     52e:	81 11       	cpse	r24, r1
     530:	01 c0       	rjmp	.+2      	; 0x534 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     532:	6c de       	rcall	.-808    	; 0x20c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     534:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <flag_button_0_pressed>
     538:	88 23       	and	r24, r24
     53a:	19 f0       	breq	.+6      	; 0x542 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     53c:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <flag_button_0_pressed>
		led_hmi_off();
     540:	fa d1       	rcall	.+1012   	; 0x936 <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     542:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_button_1_pressed>
     546:	88 23       	and	r24, r24
     548:	29 f0       	breq	.+10     	; 0x554 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     54a:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     54e:	87 e6       	ldi	r24, 0x67	; 103
     550:	9c e9       	ldi	r25, 0x9C	; 156
     552:	d9 d4       	rcall	.+2482   	; 0xf06 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     554:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <flag_usart_string_receive_complete>
     558:	88 23       	and	r24, r24
     55a:	19 f0       	breq	.+6      	; 0x562 <mainloop_active+0x40>
		USART0_process_incoming_message();
     55c:	4d d5       	rcall	.+2714   	; 0xff8 <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     55e:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     562:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_string_for_display_received>
     566:	88 23       	and	r24, r24
     568:	59 f0       	breq	.+22     	; 0x580 <mainloop_active+0x5e>
		flag_string_for_display_received = false;
     56a:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_string_for_display_received>
		display_clear();
     56e:	8f d1       	rcall	.+798    	; 0x88e <display_clear>
		display_write_string(display_line1_content);
     570:	8b ed       	ldi	r24, 0xDB	; 219
     572:	9e e3       	ldi	r25, 0x3E	; 62
     574:	79 d1       	rcall	.+754    	; 0x868 <display_write_string>
		display_next_line();
     576:	6e d1       	rcall	.+732    	; 0x854 <display_next_line>
		display_write_string(display_line2_content);
     578:	83 ec       	ldi	r24, 0xC3	; 195
     57a:	9e e3       	ldi	r25, 0x3E	; 62
     57c:	75 d1       	rcall	.+746    	; 0x868 <display_write_string>
		USART0_send_ready();
     57e:	ea d4       	rcall	.+2516   	; 0xf54 <USART0_send_ready>
	}
	
	if (flag_pwr_state_change_request == true) {
     580:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_pwr_state_change_request>
     584:	88 23       	and	r24, r24
     586:	61 f0       	breq	.+24     	; 0x5a0 <mainloop_active+0x7e>
		display_clear();
     588:	82 d1       	rcall	.+772    	; 0x88e <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     58a:	81 e7       	ldi	r24, 0x71	; 113
     58c:	9c e9       	ldi	r25, 0x9C	; 156
     58e:	6c d1       	rcall	.+728    	; 0x868 <display_write_string>
		flag_pwr_state_change_request = false;
     590:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     594:	80 91 d8 3e 	lds	r24, 0x3ED8	; 0x803ed8 <next_pwr_state>
     598:	d2 d3       	rcall	.+1956   	; 0xd3e <transition_to_pwr_state>
		flag_goto_sleep = true;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     5a0:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
     5a4:	88 23       	and	r24, r24
     5a6:	39 f0       	breq	.+14     	; 0x5b6 <mainloop_active+0x94>
		display_clear();
     5a8:	72 d1       	rcall	.+740    	; 0x88e <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     5aa:	82 ea       	ldi	r24, 0xA2	; 162
     5ac:	9e e3       	ldi	r25, 0x3E	; 62
     5ae:	5c d1       	rcall	.+696    	; 0x868 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     5b0:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
		USART0_send_ready();
     5b4:	cf d4       	rcall	.+2462   	; 0xf54 <USART0_send_ready>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     5b6:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_received_seconds_to_next_bu>
     5ba:	88 23       	and	r24, r24
     5bc:	11 f1       	breq	.+68     	; 0x602 <mainloop_active+0xe0>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     5be:	80 91 d7 3e 	lds	r24, 0x3ED7	; 0x803ed7 <seconds_to_next_bu+0x3>
     5c2:	8f 93       	push	r24
     5c4:	80 91 d6 3e 	lds	r24, 0x3ED6	; 0x803ed6 <seconds_to_next_bu+0x2>
     5c8:	8f 93       	push	r24
     5ca:	80 91 d5 3e 	lds	r24, 0x3ED5	; 0x803ed5 <seconds_to_next_bu+0x1>
     5ce:	8f 93       	push	r24
     5d0:	80 91 d4 3e 	lds	r24, 0x3ED4	; 0x803ed4 <seconds_to_next_bu>
     5d4:	8f 93       	push	r24
     5d6:	8e e8       	ldi	r24, 0x8E	; 142
     5d8:	9c e9       	ldi	r25, 0x9C	; 156
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	82 e7       	ldi	r24, 0x72	; 114
     5e0:	9e e3       	ldi	r25, 0x3E	; 62
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e d8       	rcall	.-4068   	; 0xfffff604 <__eeprom_end+0xff7ef604>
		USART0_sendString_w_newline_eol(buffer);
     5e8:	82 e7       	ldi	r24, 0x72	; 114
     5ea:	9e e3       	ldi	r25, 0x3E	; 62
     5ec:	ad d4       	rcall	.+2394   	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_received_seconds_to_next_bu = false;
     5ee:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5f2:	fd d3       	rcall	.+2042   	; 0xdee <rtc_write_seconds_to_cmp>
		rtc_setup();
     5f4:	f0 d3       	rcall	.+2016   	; 0xdd6 <rtc_setup>
		USART0_send_ready();
     5f6:	ae d4       	rcall	.+2396   	; 0xf54 <USART0_send_ready>
     5f8:	8d b7       	in	r24, 0x3d	; 61
     5fa:	9e b7       	in	r25, 0x3e	; 62
     5fc:	08 96       	adiw	r24, 0x08	; 8
     5fe:	8d bf       	out	0x3d, r24	; 61
     600:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     602:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_goto_sleep>
     606:	88 23       	and	r24, r24
     608:	79 f0       	breq	.+30     	; 0x628 <mainloop_active+0x106>
		flag_goto_sleep = false;
     60a:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_goto_sleep>
		USART0_sendString_w_newline_eol("going to sleep ...\n");
     60e:	84 e2       	ldi	r24, 0x24	; 36
     610:	9c e9       	ldi	r25, 0x9C	; 156
     612:	9a d4       	rcall	.+2356   	; 0xf48 <USART0_sendString_w_newline_eol>
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	20 e7       	ldi	r18, 0x70	; 112
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	91 50       	subi	r25, 0x01	; 1
     61c:	20 40       	sbci	r18, 0x00	; 0
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <mainloop_active+0xf8>
     622:	00 c0       	rjmp	.+0      	; 0x624 <mainloop_active+0x102>
     624:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     626:	73 df       	rcall	.-282    	; 0x50e <goto_sleep_standby>
	}
	
	if (flag_request_current_measurement == true) {
     628:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_request_current_measurement>
     62c:	88 23       	and	r24, r24
     62e:	c1 f0       	breq	.+48     	; 0x660 <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     630:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     634:	4b dd       	rcall	.-1386   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"CC:%d", input_current);
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	8b ea       	ldi	r24, 0xAB	; 171
     63c:	9c e9       	ldi	r25, 0x9C	; 156
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	82 e7       	ldi	r24, 0x72	; 114
     644:	9e e3       	ldi	r25, 0x3E	; 62
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	dc d7       	rcall	.+4024   	; 0x1604 <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     64c:	82 e7       	ldi	r24, 0x72	; 114
     64e:	9e e3       	ldi	r25, 0x3E	; 62
     650:	7b d4       	rcall	.+2294   	; 0xf48 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     652:	80 d4       	rcall	.+2304   	; 0xf54 <USART0_send_ready>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if	(flag_request_temperature_measurement == true) {
     660:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_request_temperature_measurement>
     664:	88 23       	and	r24, r24
     666:	c1 f0       	breq	.+48     	; 0x698 <mainloop_active+0x176>
		flag_request_temperature_measurement = false;
     668:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     66c:	3b dd       	rcall	.-1418   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TP:%d", temperature);
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	81 eb       	ldi	r24, 0xB1	; 177
     674:	9c e9       	ldi	r25, 0x9C	; 156
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	82 e7       	ldi	r24, 0x72	; 114
     67c:	9e e3       	ldi	r25, 0x3E	; 62
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	c0 d7       	rcall	.+3968   	; 0x1604 <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     684:	82 e7       	ldi	r24, 0x72	; 114
     686:	9e e3       	ldi	r25, 0x3E	; 62
     688:	5f d4       	rcall	.+2238   	; 0xf48 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     68a:	64 d4       	rcall	.+2248   	; 0xf54 <USART0_send_ready>
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_request_3v3_measurement == true) {
     698:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_request_3v3_measurement>
     69c:	88 23       	and	r24, r24
     69e:	c1 f0       	breq	.+48     	; 0x6d0 <mainloop_active+0x1ae>
		flag_request_3v3_measurement = false;
     6a0:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     6a4:	07 dd       	rcall	.-1522   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V:%d", voltage_3v3);
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	87 eb       	ldi	r24, 0xB7	; 183
     6ac:	9c e9       	ldi	r25, 0x9C	; 156
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	82 e7       	ldi	r24, 0x72	; 114
     6b4:	9e e3       	ldi	r25, 0x3E	; 62
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	a4 d7       	rcall	.+3912   	; 0x1604 <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     6bc:	82 e7       	ldi	r24, 0x72	; 114
     6be:	9e e3       	ldi	r25, 0x3E	; 62
     6c0:	43 d4       	rcall	.+2182   	; 0xf48 <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     6c2:	48 d4       	rcall	.+2192   	; 0xf54 <USART0_send_ready>
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_dim_display) {
     6d0:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_dim_display>
     6d4:	81 11       	cpse	r24, r1
		//set_dimming_value_display_bl(dimming_value_display);		
		//display_clear();
		//sprintf(buffer,"%u", dimming_value_display);
		//display_write_string(buffer);
		//Todo: update_default_display_dimming_value_in_eeprom();
		flag_dim_display = false;
     6d6:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_dim_display>
		//USART0_send_ready();
	}
	
	if (flag_dim_hmi_led) {
     6da:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_dim_hmi_led>
     6de:	88 23       	and	r24, r24
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <mainloop_active+0x1d0>
		flag_dim_hmi_led = false;
     6e2:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_dim_hmi_led>
		set_hmi_led_dimming_value(dimming_value_hmi_led);
     6e6:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <dimming_value_hmi_led>
     6ea:	90 91 5c 3e 	lds	r25, 0x3E5C	; 0x803e5c <dimming_value_hmi_led+0x1>
     6ee:	15 d1       	rcall	.+554    	; 0x91a <set_hmi_led_dimming_value>
		USART0_send_ready();
     6f0:	31 d4       	rcall	.+2146   	; 0xf54 <USART0_send_ready>
     6f2:	9f ef       	ldi	r25, 0xFF	; 255
     6f4:	20 e7       	ldi	r18, 0x70	; 112
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	91 50       	subi	r25, 0x01	; 1
     6fa:	20 40       	sbci	r18, 0x00	; 0
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <mainloop_active+0x1d6>
     700:	00 c0       	rjmp	.+0      	; 0x702 <mainloop_active+0x1e0>
     702:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     704:	1d d1       	rcall	.+570    	; 0x940 <toggle_hmi_led>
     706:	08 95       	ret

00000708 <init_display>:
void set_dimming_value_display_bl(uint16_t dimming_value) {
	TCA0.SINGLE.CMP0 = dimming_value;
}

void set_dimming_value_led(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     708:	2f e7       	ldi	r18, 0x7F	; 127
     70a:	8a e1       	ldi	r24, 0x1A	; 26
     70c:	96 e0       	ldi	r25, 0x06	; 6
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <init_display+0x6>
     716:	00 c0       	rjmp	.+0      	; 0x718 <init_display+0x10>
     718:	00 00       	nop
     71a:	6e dd       	rcall	.-1316   	; 0x1f8 <display_clear_rs_pin>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	5e dd       	rcall	.-1348   	; 0x1dc <set_display_data_pins>
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	4e dd       	rcall	.-1380   	; 0x1c0 <display_enable>
     724:	87 e8       	ldi	r24, 0x87	; 135
     726:	93 e1       	ldi	r25, 0x13	; 19
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <init_display+0x20>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <init_display+0x26>
     72e:	00 00       	nop
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	54 dd       	rcall	.-1368   	; 0x1dc <set_display_data_pins>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	44 dd       	rcall	.-1400   	; 0x1c0 <display_enable>
     738:	87 e8       	ldi	r24, 0x87	; 135
     73a:	93 e1       	ldi	r25, 0x13	; 19
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <init_display+0x34>
     740:	00 c0       	rjmp	.+0      	; 0x742 <init_display+0x3a>
     742:	00 00       	nop
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	4a dd       	rcall	.-1388   	; 0x1dc <set_display_data_pins>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	3a dd       	rcall	.-1420   	; 0x1c0 <display_enable>
     74c:	87 e8       	ldi	r24, 0x87	; 135
     74e:	93 e1       	ldi	r25, 0x13	; 19
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <init_display+0x48>
     754:	00 c0       	rjmp	.+0      	; 0x756 <init_display+0x4e>
     756:	00 00       	nop
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	40 dd       	rcall	.-1408   	; 0x1dc <set_display_data_pins>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	30 dd       	rcall	.-1440   	; 0x1c0 <display_enable>
     760:	87 e8       	ldi	r24, 0x87	; 135
     762:	93 e1       	ldi	r25, 0x13	; 19
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <init_display+0x5c>
     768:	00 c0       	rjmp	.+0      	; 0x76a <init_display+0x62>
     76a:	00 00       	nop
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	36 dd       	rcall	.-1428   	; 0x1dc <set_display_data_pins>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	26 dd       	rcall	.-1460   	; 0x1c0 <display_enable>
     774:	87 e8       	ldi	r24, 0x87	; 135
     776:	93 e1       	ldi	r25, 0x13	; 19
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <init_display+0x70>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <init_display+0x76>
     77e:	00 00       	nop
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	2c dd       	rcall	.-1448   	; 0x1dc <set_display_data_pins>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	1c dd       	rcall	.-1480   	; 0x1c0 <display_enable>
     788:	87 e8       	ldi	r24, 0x87	; 135
     78a:	93 e1       	ldi	r25, 0x13	; 19
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <init_display+0x84>
     790:	00 c0       	rjmp	.+0      	; 0x792 <init_display+0x8a>
     792:	00 00       	nop
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	22 dd       	rcall	.-1468   	; 0x1dc <set_display_data_pins>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	12 dd       	rcall	.-1500   	; 0x1c0 <display_enable>
     79c:	87 e8       	ldi	r24, 0x87	; 135
     79e:	93 e1       	ldi	r25, 0x13	; 19
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <init_display+0x98>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <init_display+0x9e>
     7a6:	00 00       	nop
     7a8:	8c e0       	ldi	r24, 0x0C	; 12
     7aa:	18 dd       	rcall	.-1488   	; 0x1dc <set_display_data_pins>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	08 dd       	rcall	.-1520   	; 0x1c0 <display_enable>
     7b0:	87 e8       	ldi	r24, 0x87	; 135
     7b2:	93 e1       	ldi	r25, 0x13	; 19
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <init_display+0xac>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <init_display+0xb2>
     7ba:	00 00       	nop
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e dd       	rcall	.-1508   	; 0x1dc <set_display_data_pins>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	fe dc       	rcall	.-1540   	; 0x1c0 <display_enable>
     7c4:	87 e8       	ldi	r24, 0x87	; 135
     7c6:	93 e1       	ldi	r25, 0x13	; 19
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <init_display+0xc0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <init_display+0xc6>
     7ce:	00 00       	nop
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	04 dd       	rcall	.-1528   	; 0x1dc <set_display_data_pins>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	f4 dc       	rcall	.-1560   	; 0x1c0 <display_enable>
     7d8:	87 e8       	ldi	r24, 0x87	; 135
     7da:	93 e1       	ldi	r25, 0x13	; 19
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <init_display+0xd4>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <init_display+0xda>
     7e2:	00 00       	nop
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	fa dc       	rcall	.-1548   	; 0x1dc <set_display_data_pins>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	ea dc       	rcall	.-1580   	; 0x1c0 <display_enable>
     7ec:	87 e8       	ldi	r24, 0x87	; 135
     7ee:	93 e1       	ldi	r25, 0x13	; 19
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <init_display+0xe8>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <init_display+0xee>
     7f6:	00 00       	nop
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	f0 dc       	rcall	.-1568   	; 0x1dc <set_display_data_pins>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	e0 dc       	rcall	.-1600   	; 0x1c0 <display_enable>
     800:	87 e8       	ldi	r24, 0x87	; 135
     802:	93 e1       	ldi	r25, 0x13	; 19
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <init_display+0xfc>
     808:	00 c0       	rjmp	.+0      	; 0x80a <init_display+0x102>
     80a:	00 00       	nop
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	e6 dc       	rcall	.-1588   	; 0x1dc <set_display_data_pins>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	d6 dc       	rcall	.-1620   	; 0x1c0 <display_enable>
     814:	87 e8       	ldi	r24, 0x87	; 135
     816:	93 e1       	ldi	r25, 0x13	; 19
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <init_display+0x110>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <init_display+0x116>
     81e:	00 00       	nop
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	dc dc       	rcall	.-1608   	; 0x1dc <set_display_data_pins>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	cc dc       	rcall	.-1640   	; 0x1c0 <display_enable>
     828:	87 e8       	ldi	r24, 0x87	; 135
     82a:	93 e1       	ldi	r25, 0x13	; 19
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <init_display+0x124>
     830:	00 c0       	rjmp	.+0      	; 0x832 <init_display+0x12a>
     832:	00 00       	nop
     834:	08 95       	ret

00000836 <display_write_char>:
     836:	cf 93       	push	r28
     838:	c8 2f       	mov	r28, r24
     83a:	da dc       	rcall	.-1612   	; 0x1f0 <display_set_rs_pin>
     83c:	8c 2f       	mov	r24, r28
     83e:	82 95       	swap	r24
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	cc dc       	rcall	.-1640   	; 0x1dc <set_display_data_pins>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	bc dc       	rcall	.-1672   	; 0x1c0 <display_enable>
     848:	8c 2f       	mov	r24, r28
     84a:	c8 dc       	rcall	.-1648   	; 0x1dc <set_display_data_pins>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	b8 dc       	rcall	.-1680   	; 0x1c0 <display_enable>
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <display_next_line>:
     854:	d1 dc       	rcall	.-1630   	; 0x1f8 <display_clear_rs_pin>
     856:	8c e0       	ldi	r24, 0x0C	; 12
     858:	c1 dc       	rcall	.-1662   	; 0x1dc <set_display_data_pins>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	b1 dc       	rcall	.-1694   	; 0x1c0 <display_enable>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	bd dc       	rcall	.-1670   	; 0x1dc <set_display_data_pins>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	ad dc       	rcall	.-1702   	; 0x1c0 <display_enable>
     866:	08 95       	ret

00000868 <display_write_string>:
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
     86e:	c0 dc       	rcall	.-1664   	; 0x1f0 <display_set_rs_pin>
     870:	88 81       	ld	r24, Y
     872:	88 23       	and	r24, r24
     874:	49 f0       	breq	.+18     	; 0x888 <display_write_string+0x20>
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	8a 30       	cpi	r24, 0x0A	; 10
     87a:	11 f4       	brne	.+4      	; 0x880 <display_write_string+0x18>
     87c:	eb df       	rcall	.-42     	; 0x854 <display_next_line>
     87e:	01 c0       	rjmp	.+2      	; 0x882 <display_write_string+0x1a>
     880:	da df       	rcall	.-76     	; 0x836 <display_write_char>
     882:	89 91       	ld	r24, Y+
     884:	81 11       	cpse	r24, r1
     886:	f8 cf       	rjmp	.-16     	; 0x878 <display_write_string+0x10>
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <display_clear>:
     88e:	b4 dc       	rcall	.-1688   	; 0x1f8 <display_clear_rs_pin>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	a4 dc       	rcall	.-1720   	; 0x1dc <set_display_data_pins>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	94 dc       	rcall	.-1752   	; 0x1c0 <display_enable>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	a0 dc       	rcall	.-1728   	; 0x1dc <set_display_data_pins>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 dc       	rcall	.-1760   	; 0x1c0 <display_enable>
     8a0:	87 ea       	ldi	r24, 0xA7	; 167
     8a2:	91 e6       	ldi	r25, 0x61	; 97
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <display_clear+0x16>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <display_clear+0x1c>
     8aa:	00 00       	nop
     8ac:	08 95       	ret

000008ae <dimmer_init>:
     8ae:	e0 e0       	ldi	r30, 0x00	; 0
     8b0:	fa e0       	ldi	r31, 0x0A	; 10
     8b2:	82 85       	ldd	r24, Z+10	; 0x0a
     8b4:	8e 78       	andi	r24, 0x8E	; 142
     8b6:	82 87       	std	Z+10, r24	; 0x0a
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	83 60       	ori	r24, 0x03	; 3
     8bc:	81 83       	std	Z+1, r24	; 0x01
     8be:	80 81       	ld	r24, Z
     8c0:	80 83       	st	Z, r24
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	86 ab       	std	Z+54, r24	; 0x36
     8c8:	97 ab       	std	Z+55, r25	; 0x37
     8ca:	21 85       	ldd	r18, Z+9	; 0x09
     8cc:	2e 7f       	andi	r18, 0xFE	; 254
     8ce:	21 87       	std	Z+9, r18	; 0x09
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b2 e0       	ldi	r27, 0x02	; 2
     8d4:	12 96       	adiw	r26, 0x02	; 2
     8d6:	2c 91       	ld	r18, X
     8d8:	12 97       	sbiw	r26, 0x02	; 2
     8da:	22 60       	ori	r18, 0x02	; 2
     8dc:	12 96       	adiw	r26, 0x02	; 2
     8de:	2c 93       	st	X, r18
     8e0:	21 81       	ldd	r18, Z+1	; 0x01
     8e2:	20 61       	ori	r18, 0x10	; 16
     8e4:	21 83       	std	Z+1, r18	; 0x01
     8e6:	21 81       	ldd	r18, Z+1	; 0x01
     8e8:	20 62       	ori	r18, 0x20	; 32
     8ea:	21 83       	std	Z+1, r18	; 0x01
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	31 e0       	ldi	r19, 0x01	; 1
     8f0:	20 93 5f 3e 	sts	0x3E5F, r18	; 0x803e5f <dimming_value_display>
     8f4:	30 93 60 3e 	sts	0x3E60, r19	; 0x803e60 <dimming_value_display+0x1>
     8f8:	20 a7       	std	Z+40, r18	; 0x28
     8fa:	31 a7       	std	Z+41, r19	; 0x29
     8fc:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <dimming_value_hmi_led>
     900:	90 93 5c 3e 	sts	0x3E5C, r25	; 0x803e5c <dimming_value_hmi_led+0x1>
     904:	82 a7       	std	Z+42, r24	; 0x2a
     906:	93 a7       	std	Z+43, r25	; 0x2b
     908:	80 81       	ld	r24, Z
     90a:	81 60       	ori	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24
     90e:	08 95       	ret

00000910 <set_dimming_value_display_bl>:
     910:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     914:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     918:	08 95       	ret

0000091a <set_hmi_led_dimming_value>:
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     91a:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     91e:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     922:	08 95       	ret

00000924 <led_hmi_on>:
}

void led_hmi_on(void) {
	set_hmi_led_dimming_value(dimming_value_hmi_led);
     924:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <dimming_value_hmi_led>
     928:	90 91 5c 3e 	lds	r25, 0x3E5C	; 0x803e5c <dimming_value_hmi_led+0x1>
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     92c:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     930:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     934:	08 95       	ret

00000936 <led_hmi_off>:
     936:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     93a:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     93e:	08 95       	ret

00000940 <toggle_hmi_led>:
void led_hmi_off(void) {
	set_hmi_led_dimming_value(0);
}

void toggle_hmi_led(void) {
	if(TCA0.SINGLE.CMP1 == 0x0000) {
     940:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     944:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     948:	89 2b       	or	r24, r25
     94a:	11 f4       	brne	.+4      	; 0x950 <toggle_hmi_led+0x10>
		led_hmi_on();
     94c:	eb df       	rcall	.-42     	; 0x924 <led_hmi_on>
     94e:	08 95       	ret
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     950:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     954:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     958:	08 95       	ret

0000095a <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     95a:	84 eb       	ldi	r24, 0xB4	; 180
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     962:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     966:	08 95       	ret

00000968 <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     968:	92 df       	rcall	.-220    	; 0x88e <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     96a:	8d eb       	ldi	r24, 0xBD	; 189
     96c:	9c e9       	ldi	r25, 0x9C	; 156
     96e:	7c df       	rcall	.-264    	; 0x868 <display_write_string>
	button0_action = show_menu_timestamp;
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	95 e0       	ldi	r25, 0x05	; 5
     974:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     978:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = show_menu_actions;
     97c:	85 ec       	ldi	r24, 0xC5	; 197
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     984:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     988:	08 95       	ret

0000098a <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     98a:	85 ec       	ldi	r24, 0xC5	; 197
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     992:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     996:	7b df       	rcall	.-266    	; 0x88e <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     998:	8f ed       	ldi	r24, 0xDF	; 223
     99a:	9c e9       	ldi	r25, 0x9C	; 156
     99c:	65 df       	rcall	.-310    	; 0x868 <display_write_string>
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
     99e:	8c ed       	ldi	r24, 0xDC	; 220
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     9a6:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = show_menu_sure_about_waking_bcu;
     9aa:	83 ef       	ldi	r24, 0xF3	; 243
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     9b2:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     9b6:	08 95       	ret

000009b8 <show_menu_sure_about_waking_bcu_and_backup>:
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}

void show_menu_sure_about_waking_bcu_and_backup() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     9b8:	8c ed       	ldi	r24, 0xDC	; 220
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9c0:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9c4:	64 df       	rcall	.-312    	; 0x88e <display_clear>
	display_write_string("Sure?       No >\n           Yes >");
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	9d e9       	ldi	r25, 0x9D	; 157
     9ca:	4e df       	rcall	.-356    	; 0x868 <display_write_string>
	button0_action = back_to_main_menu;
     9cc:	8d ea       	ldi	r24, 0xAD	; 173
     9ce:	94 e0       	ldi	r25, 0x04	; 4
     9d0:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     9d4:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = wake_bcu_and_do_backup_now;
     9d8:	85 e3       	ldi	r24, 0x35	; 53
     9da:	96 e0       	ldi	r25, 0x06	; 6
     9dc:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     9e0:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     9e4:	08 95       	ret

000009e6 <show_menu_sure_about_waking_bcu>:
}

void show_menu_sure_about_waking_bcu() {
	show_menu = show_menu_sure_about_waking_bcu;
     9e6:	83 ef       	ldi	r24, 0xF3	; 243
     9e8:	94 e0       	ldi	r25, 0x04	; 4
     9ea:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9ee:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9f2:	4d df       	rcall	.-358    	; 0x88e <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     9f4:	83 e2       	ldi	r24, 0x23	; 35
     9f6:	9d e9       	ldi	r25, 0x9D	; 157
     9f8:	37 df       	rcall	.-402    	; 0x868 <display_write_string>
	button0_action = wake_bcu;
     9fa:	8a e4       	ldi	r24, 0x4A	; 74
     9fc:	96 e0       	ldi	r25, 0x06	; 6
     9fe:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     a02:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = back_to_main_menu;
     a06:	8d ea       	ldi	r24, 0xAD	; 173
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     a0e:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
     a12:	08 95       	ret

00000a14 <show_menu_timestamp>:
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     a14:	2f 92       	push	r2
     a16:	3f 92       	push	r3
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <show_menu_timestamp+0x26>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <show_menu_timestamp+0x28>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	show_menu = show_menu_timestamp;
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	95 e0       	ldi	r25, 0x05	; 5
     a44:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     a48:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
     a4c:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a50:	90 90 4d 01 	lds	r9, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a54:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a58:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a5c:	88 1a       	sub	r8, r24
     a5e:	99 0a       	sbc	r9, r25
     a60:	a1 2c       	mov	r10, r1
     a62:	b1 2c       	mov	r11, r1
     a64:	88 0c       	add	r8, r8
     a66:	99 1c       	adc	r9, r9
     a68:	aa 1c       	adc	r10, r10
     a6a:	bb 1c       	adc	r11, r11
     a6c:	88 0c       	add	r8, r8
     a6e:	99 1c       	adc	r9, r9
     a70:	aa 1c       	adc	r10, r10
     a72:	bb 1c       	adc	r11, r11
     a74:	88 0c       	add	r8, r8
     a76:	99 1c       	adc	r9, r9
     a78:	aa 1c       	adc	r10, r10
     a7a:	bb 1c       	adc	r11, r11
     a7c:	88 0c       	add	r8, r8
     a7e:	99 1c       	adc	r9, r9
     a80:	aa 1c       	adc	r10, r10
     a82:	bb 1c       	adc	r11, r11
     a84:	88 0c       	add	r8, r8
     a86:	99 1c       	adc	r9, r9
     a88:	aa 1c       	adc	r10, r10
     a8a:	bb 1c       	adc	r11, r11
	uint32_t days = seconds / 3600;
	days = days / 24;
     a8c:	c5 01       	movw	r24, r10
     a8e:	b4 01       	movw	r22, r8
     a90:	20 e8       	ldi	r18, 0x80	; 128
     a92:	31 e5       	ldi	r19, 0x51	; 81
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	18 d4       	rcall	.+2096   	; 0x12ca <__udivmodsi4>
     a9a:	2b 83       	std	Y+3, r18	; 0x03
     a9c:	3c 83       	std	Y+4, r19	; 0x04
     a9e:	14 2f       	mov	r17, r20
     aa0:	05 2f       	mov	r16, r21
     aa2:	c2 2e       	mov	r12, r18
     aa4:	d3 2e       	mov	r13, r19
     aa6:	e4 2e       	mov	r14, r20
     aa8:	f5 2e       	mov	r15, r21
	for(int i = 0; i < days ; i++) {
     aaa:	c1 14       	cp	r12, r1
     aac:	d1 04       	cpc	r13, r1
     aae:	e1 04       	cpc	r14, r1
     ab0:	f1 04       	cpc	r15, r1
     ab2:	b9 f4       	brne	.+46     	; 0xae2 <show_menu_timestamp+0xce>
     ab4:	ab c0       	rjmp	.+342    	; 0xc0c <show_menu_timestamp+0x1f8>
     ab6:	01 97       	sbiw	r24, 0x01	; 1
	   for(int j = 0; j < 24; j++) {
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <show_menu_timestamp+0xa2>
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	88 1a       	sub	r8, r24
     abe:	81 e5       	ldi	r24, 0x51	; 81
     ac0:	98 0a       	sbc	r9, r24
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	a8 0a       	sbc	r10, r24
     ac6:	b1 08       	sbc	r11, r1
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
	uint32_t days = seconds / 3600;
	days = days / 24;
	for(int i = 0; i < days ; i++) {
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	c9 01       	movw	r24, r18
     ace:	03 2e       	mov	r0, r19
     ad0:	00 0c       	add	r0, r0
     ad2:	aa 0b       	sbc	r26, r26
     ad4:	bb 0b       	sbc	r27, r27
     ad6:	8c 15       	cp	r24, r12
     ad8:	9d 05       	cpc	r25, r13
     ada:	ae 05       	cpc	r26, r14
     adc:	bf 05       	cpc	r27, r15
     ade:	18 f0       	brcs	.+6      	; 0xae6 <show_menu_timestamp+0xd2>
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <show_menu_timestamp+0xd8>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	e5 cf       	rjmp	.-54     	; 0xab6 <show_menu_timestamp+0xa2>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	20 e1       	ldi	r18, 0x10	; 16
     af2:	3e e0       	ldi	r19, 0x0E	; 14
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	e8 d3       	rcall	.+2000   	; 0x12ca <__udivmodsi4>
     afa:	b2 2e       	mov	r11, r18
     afc:	a3 2e       	mov	r10, r19
     afe:	94 2e       	mov	r9, r20
     b00:	85 2e       	mov	r8, r21
     b02:	42 2e       	mov	r4, r18
     b04:	53 2e       	mov	r5, r19
     b06:	64 2e       	mov	r6, r20
     b08:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     b0a:	2c e3       	ldi	r18, 0x3C	; 60
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	db d3       	rcall	.+1974   	; 0x12ca <__udivmodsi4>
     b14:	22 2e       	mov	r2, r18
     b16:	33 2e       	mov	r3, r19
     b18:	b4 2f       	mov	r27, r20
     b1a:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     b1c:	f6 2f       	mov	r31, r22
     b1e:	79 83       	std	Y+1, r23	; 0x01
     b20:	8a 83       	std	Y+2, r24	; 0x02
     b22:	e9 2f       	mov	r30, r25
	switch (days) {
     b24:	c1 14       	cp	r12, r1
     b26:	d1 04       	cpc	r13, r1
     b28:	e1 04       	cpc	r14, r1
     b2a:	f1 04       	cpc	r15, r1
     b2c:	39 f0       	breq	.+14     	; 0xb3c <show_menu_timestamp+0x128>
     b2e:	ea e0       	ldi	r30, 0x0A	; 10
     b30:	ce 16       	cp	r12, r30
     b32:	d1 04       	cpc	r13, r1
     b34:	e1 04       	cpc	r14, r1
     b36:	f1 04       	cpc	r15, r1
     b38:	c8 f5       	brcc	.+114    	; 0xbac <show_menu_timestamp+0x198>
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <show_menu_timestamp+0x15c>
		case 0:
			sprintf(buffer, "ETA:    %02lu:%02lu:%02lu", hours, minutes, seconds);
     b3c:	ef 93       	push	r30
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	8f 93       	push	r24
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	9f 93       	push	r25
     b46:	ff 93       	push	r31
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	3f 92       	push	r3
     b4e:	2f 92       	push	r2
     b50:	7f 92       	push	r7
     b52:	6f 92       	push	r6
     b54:	5f 92       	push	r5
     b56:	4f 92       	push	r4
     b58:	85 e4       	ldi	r24, 0x45	; 69
     b5a:	9d e9       	ldi	r25, 0x9D	; 157
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	82 e7       	ldi	r24, 0x72	; 114
     b62:	9e e3       	ldi	r25, 0x3E	; 62
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	4d d5       	rcall	.+2714   	; 0x1604 <sprintf>
			break;
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	3b c0       	rjmp	.+118    	; 0xbe6 <show_menu_timestamp+0x1d2>
		case 1 ... 9:
			sprintf(buffer, "ETA %lu  %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	7f 93       	push	r23
     b76:	6f 93       	push	r22
     b78:	5f 93       	push	r21
     b7a:	4f 93       	push	r20
     b7c:	3f 93       	push	r19
     b7e:	2f 93       	push	r18
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	9f 93       	push	r25
     b90:	eb 81       	ldd	r30, Y+3	; 0x03
     b92:	ef 93       	push	r30
     b94:	8f e5       	ldi	r24, 0x5F	; 95
     b96:	9d e9       	ldi	r25, 0x9D	; 157
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	82 e7       	ldi	r24, 0x72	; 114
     b9e:	9e e3       	ldi	r25, 0x3E	; 62
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	2f d5       	rcall	.+2654   	; 0x1604 <sprintf>
			break;
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	1d c0       	rjmp	.+58     	; 0xbe6 <show_menu_timestamp+0x1d2>
		default:
			sprintf(buffer, "ETA %lud %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	7f 93       	push	r23
     bb2:	6f 93       	push	r22
     bb4:	5f 93       	push	r21
     bb6:	4f 93       	push	r20
     bb8:	3f 93       	push	r19
     bba:	2f 93       	push	r18
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	9f 93       	push	r25
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	ef 93       	push	r30
     bd0:	8a e7       	ldi	r24, 0x7A	; 122
     bd2:	9d e9       	ldi	r25, 0x9D	; 157
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	82 e7       	ldi	r24, 0x72	; 114
     bda:	9e e3       	ldi	r25, 0x3E	; 62
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	11 d5       	rcall	.+2594   	; 0x1604 <sprintf>
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	de bf       	out	0x3e, r29	; 62
	}
	
	display_clear();
     be6:	53 de       	rcall	.-858    	; 0x88e <display_clear>
	display_write_string(human_readable_timestamp_next_bu);
     be8:	82 ea       	ldi	r24, 0xA2	; 162
     bea:	9e e3       	ldi	r25, 0x3E	; 62
     bec:	3d de       	rcall	.-902    	; 0x868 <display_write_string>
	display_next_line();
     bee:	32 de       	rcall	.-924    	; 0x854 <display_next_line>
	display_write_string(buffer);
     bf0:	82 e7       	ldi	r24, 0x72	; 114
     bf2:	9e e3       	ldi	r25, 0x3E	; 62
     bf4:	39 de       	rcall	.-910    	; 0x868 <display_write_string>
	button0_action = back_to_main_menu;
     bf6:	8d ea       	ldi	r24, 0xAD	; 173
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button0_action>
     bfe:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button0_action+0x1>
	button1_action = back_to_main_menu;
     c02:	80 93 17 3e 	sts	0x3E17, r24	; 0x803e17 <button1_action>
     c06:	90 93 18 3e 	sts	0x3E18, r25	; 0x803e18 <button1_action+0x1>
}
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <show_menu_timestamp+0x22a>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     c0c:	c5 01       	movw	r24, r10
     c0e:	b4 01       	movw	r22, r8
     c10:	20 e1       	ldi	r18, 0x10	; 16
     c12:	3e e0       	ldi	r19, 0x0E	; 14
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	58 d3       	rcall	.+1712   	; 0x12ca <__udivmodsi4>
     c1a:	42 2e       	mov	r4, r18
     c1c:	53 2e       	mov	r5, r19
     c1e:	64 2e       	mov	r6, r20
     c20:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     c22:	2c e3       	ldi	r18, 0x3C	; 60
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	4f d3       	rcall	.+1694   	; 0x12ca <__udivmodsi4>
     c2c:	22 2e       	mov	r2, r18
     c2e:	33 2e       	mov	r3, r19
     c30:	b4 2f       	mov	r27, r20
     c32:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     c34:	f6 2f       	mov	r31, r22
     c36:	79 83       	std	Y+1, r23	; 0x01
     c38:	8a 83       	std	Y+2, r24	; 0x02
     c3a:	e9 2f       	mov	r30, r25
     c3c:	7f cf       	rjmp	.-258    	; 0xb3c <show_menu_timestamp+0x128>
	display_write_string(human_readable_timestamp_next_bu);
	display_next_line();
	display_write_string(buffer);
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}
     c3e:	24 96       	adiw	r28, 0x04	; 4
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	3f 90       	pop	r3
     c66:	2f 90       	pop	r2
     c68:	08 95       	ret

00000c6a <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     c6a:	11 de       	rcall	.-990    	; 0x88e <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     c6c:	85 e9       	ldi	r24, 0x95	; 149
     c6e:	9d e9       	ldi	r25, 0x9D	; 157
     c70:	fb dd       	rcall	.-1034   	; 0x868 <display_write_string>
	flag_schedule_backup_now = true;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_schedule_backup_now>
	strcpy(wakeup_reason, "WR_BACKUP");
     c78:	8a e0       	ldi	r24, 0x0A	; 10
     c7a:	e5 eb       	ldi	r30, 0xB5	; 181
     c7c:	fd e9       	ldi	r31, 0x9D	; 157
     c7e:	a2 e6       	ldi	r26, 0x62	; 98
     c80:	be e3       	ldi	r27, 0x3E	; 62
     c82:	01 90       	ld	r0, Z+
     c84:	0d 92       	st	X+, r0
     c86:	8a 95       	dec	r24
     c88:	e1 f7       	brne	.-8      	; 0xc82 <wake_bcu_and_do_backup_now+0x18>
	next_pwr_state = active;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	80 93 d8 3e 	sts	0x3ED8, r24	; 0x803ed8 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     c90:	56 d0       	rcall	.+172    	; 0xd3e <transition_to_pwr_state>
     c92:	08 95       	ret

00000c94 <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     c94:	fc dd       	rcall	.-1032   	; 0x88e <display_clear>
	display_write_string("Waking BCU for\nConfiguration..");
     c96:	8f eb       	ldi	r24, 0xBF	; 191
     c98:	9d e9       	ldi	r25, 0x9D	; 157
     c9a:	e6 dd       	rcall	.-1076   	; 0x868 <display_write_string>
	next_pwr_state = active;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	80 93 d8 3e 	sts	0x3ED8, r24	; 0x803ed8 <next_pwr_state>
	strcpy(wakeup_reason, "WR_CONFIG");
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	ee ed       	ldi	r30, 0xDE	; 222
     ca6:	fd e9       	ldi	r31, 0x9D	; 157
     ca8:	a2 e6       	ldi	r26, 0x62	; 98
     caa:	be e3       	ldi	r27, 0x3E	; 62
     cac:	01 90       	ld	r0, Z+
     cae:	0d 92       	st	X+, r0
     cb0:	8a 95       	dec	r24
     cb2:	e1 f7       	brne	.-8      	; 0xcac <wake_bcu+0x18>
	transition_to_pwr_state(next_pwr_state);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	43 d0       	rcall	.+134    	; 0xd3e <transition_to_pwr_state>
     cb8:	08 95       	ret

00000cba <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     cba:	e0 e0       	ldi	r30, 0x00	; 0
     cbc:	f4 e0       	ldi	r31, 0x04	; 4
     cbe:	84 81       	ldd	r24, Z+4	; 0x04
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     cca:	08 95       	ret

00000ccc <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     ccc:	e0 e0       	ldi	r30, 0x00	; 0
     cce:	f4 e0       	ldi	r31, 0x04	; 4
     cd0:	84 81       	ldd	r24, Z+4	; 0x04
     cd2:	8f 7e       	andi	r24, 0xEF	; 239
     cd4:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     cd6:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     cda:	08 95       	ret

00000cdc <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     cdc:	e0 e2       	ldi	r30, 0x20	; 32
     cde:	f4 e0       	ldi	r31, 0x04	; 4
     ce0:	84 81       	ldd	r24, Z+4	; 0x04
     ce2:	8d 7f       	andi	r24, 0xFD	; 253
     ce4:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     cec:	08 95       	ret

00000cee <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     cee:	e0 e2       	ldi	r30, 0x20	; 32
     cf0:	f4 e0       	ldi	r31, 0x04	; 4
     cf2:	84 81       	ldd	r24, Z+4	; 0x04
     cf4:	82 60       	ori	r24, 0x02	; 2
     cf6:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     cf8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     cfc:	08 95       	ret

00000cfe <wait_until_bpi_ready_for_shutdown>:
			current_pwr_state = active;
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
     cfe:	cf 93       	push	r28
	display_clear();
     d00:	c6 dd       	rcall	.-1140   	; 0x88e <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     d02:	88 ee       	ldi	r24, 0xE8	; 232
     d04:	9d e9       	ldi	r25, 0x9D	; 157
     d06:	b0 dd       	rcall	.-1184   	; 0x868 <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     d08:	c0 91 15 3e 	lds	r28, 0x3E15	; 0x803e15 <flag_bpi_heartbeat_ok>
		if(flag_abort_shutdown) {
     d0c:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_abort_shutdown>
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
	display_write_string("Waiting for BCU\nHB to stop");
	while (flag_bpi_heartbeat_ok == true) {
     d10:	cc 23       	and	r28, r28
     d12:	19 f0       	breq	.+6      	; 0xd1a <wait_until_bpi_ready_for_shutdown+0x1c>
		if(flag_abort_shutdown) {
     d14:	88 23       	and	r24, r24
     d16:	f1 f3       	breq	.-4      	; 0xd14 <wait_until_bpi_ready_for_shutdown+0x16>
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <wait_until_bpi_ready_for_shutdown+0x38>
			return false;
		}
	}
	display_clear();
     d1a:	b9 dd       	rcall	.-1166   	; 0x88e <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	9e e9       	ldi	r25, 0x9E	; 158
     d20:	a3 dd       	rcall	.-1210   	; 0x868 <display_write_string>
	while (vcc3v3_present() == true) {
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <wait_until_bpi_ready_for_shutdown+0x2e>
		if(flag_abort_shutdown) {
     d24:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_abort_shutdown>
     d28:	81 11       	cpse	r24, r1
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <wait_until_bpi_ready_for_shutdown+0x3a>
			return false;
		}
	}
	display_clear();
	display_write_string("Waiting for 3V3\nto go low");
	while (vcc3v3_present() == true) {
     d2c:	e7 d9       	rcall	.-3122   	; 0xfc <vcc3v3_present>
     d2e:	81 11       	cpse	r24, r1
     d30:	f9 cf       	rjmp	.-14     	; 0xd24 <wait_until_bpi_ready_for_shutdown+0x26>
		if(flag_abort_shutdown) {
			return false;
		}
	}
	return true;
     d32:	c1 e0       	ldi	r28, 0x01	; 1
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <wait_until_bpi_ready_for_shutdown+0x3a>
bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
	display_write_string("Waiting for BCU\nHB to stop");
	while (flag_bpi_heartbeat_ok == true) {
		if(flag_abort_shutdown) {
			return false;
     d36:	c0 e0       	ldi	r28, 0x00	; 0
		if(flag_abort_shutdown) {
			return false;
		}
	}
	return true;
     d38:	8c 2f       	mov	r24, r28
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <transition_to_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void transition_to_pwr_state(enum pwr_states pwr_state) {
     d3e:	cf 93       	push	r28
	switch(pwr_state) {
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	a1 f0       	breq	.+40     	; 0xd6c <transition_to_pwr_state+0x2e>
     d44:	18 f0       	brcs	.+6      	; 0xd4c <transition_to_pwr_state+0xe>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	11 f1       	breq	.+68     	; 0xd8e <transition_to_pwr_state+0x50>
     d4a:	38 c0       	rjmp	.+112    	; 0xdbc <transition_to_pwr_state+0x7e>
		case standby:
			if (current_pwr_state == active) {
     d4c:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <current_pwr_state>
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	19 f4       	brne	.+6      	; 0xd5a <transition_to_pwr_state+0x1c>
				if(!wait_until_bpi_ready_for_shutdown()) {
     d54:	d4 df       	rcall	.-88     	; 0xcfe <wait_until_bpi_ready_for_shutdown>
     d56:	88 23       	and	r24, r24
     d58:	89 f1       	breq	.+98     	; 0xdbc <transition_to_pwr_state+0x7e>
					/* shutdown aborted */
					break;
				}
			}
			disable_bpi_sply();
     d5a:	c9 df       	rcall	.-110    	; 0xcee <disable_bpi_sply>
			dim_display(0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	20 da       	rcall	.-3008   	; 0x1a2 <dim_display>
			led_hmi_off();
     d62:	e9 dd       	rcall	.-1070   	; 0x936 <led_hmi_off>
			disable_5v0_smps();
     d64:	b3 df       	rcall	.-154    	; 0xccc <disable_5v0_smps>
			//flag_goto_sleep = true; //why was that set true here??
			current_pwr_state = standby;
     d66:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <current_pwr_state>
			break;
     d6a:	28 c0       	rjmp	.+80     	; 0xdbc <transition_to_pwr_state+0x7e>
		
		case display_on:
			current_pwr_state = display_on;
     d6c:	c1 e0       	ldi	r28, 0x01	; 1
     d6e:	c0 93 61 3e 	sts	0x3E61, r28	; 0x803e61 <current_pwr_state>
			set_interrupts_for_buttons();
     d72:	0e da       	rcall	.-3044   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     d74:	a2 df       	rcall	.-188    	; 0xcba <enable_5v0_smps>
     d76:	86 e4       	ldi	r24, 0x46	; 70
     d78:	90 e1       	ldi	r25, 0x10	; 16
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <transition_to_pwr_state+0x3c>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <transition_to_pwr_state+0x42>
			_delay_ms(5);
			init_display();
     d80:	c3 dc       	rcall	.-1658   	; 0x708 <init_display>
			flag_entering_mainloop_display_on = true;
     d82:	c0 93 08 3e 	sts	0x3E08, r28	; 0x803e08 <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     d86:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_wakeup_by_rtc>
     d8a:	88 23       	and	r24, r24
     d8c:	b9 f0       	breq	.+46     	; 0xdbc <transition_to_pwr_state+0x7e>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     d8e:	80 e1       	ldi	r24, 0x10	; 16
     d90:	ed e1       	ldi	r30, 0x1D	; 29
     d92:	fe e9       	ldi	r31, 0x9E	; 158
     d94:	ab ed       	ldi	r26, 0xDB	; 219
     d96:	be e3       	ldi	r27, 0x3E	; 62
     d98:	01 90       	ld	r0, Z+
     d9a:	0d 92       	st	X+, r0
     d9c:	8a 95       	dec	r24
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <transition_to_pwr_state+0x5a>
			strcpy(display_line2_content,"Please wait ...");
     da0:	80 e1       	ldi	r24, 0x10	; 16
     da2:	ed e2       	ldi	r30, 0x2D	; 45
     da4:	fe e9       	ldi	r31, 0x9E	; 158
     da6:	a3 ec       	ldi	r26, 0xC3	; 195
     da8:	be e3       	ldi	r27, 0x3E	; 62
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <transition_to_pwr_state+0x6c>
			enable_5v0_smps();
     db2:	83 df       	rcall	.-250    	; 0xcba <enable_5v0_smps>
			enable_bpi_sply();
     db4:	93 df       	rcall	.-218    	; 0xcdc <enable_bpi_sply>
			current_pwr_state = active;
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <current_pwr_state>
			break;
	}
}
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     dc0:	e0 e4       	ldi	r30, 0x40	; 64
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	10 86       	std	Z+8, r1	; 0x08
     dc6:	11 86       	std	Z+9, r1	; 0x09
     dc8:	08 95       	ret

00000dca <rtc_wait_for_all_status_bits_zero>:
     dca:	e0 e4       	ldi	r30, 0x40	; 64
     dcc:	f1 e0       	ldi	r31, 0x01	; 1
     dce:	81 81       	ldd	r24, Z+1	; 0x01
     dd0:	81 11       	cpse	r24, r1
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <rtc_wait_for_all_status_bits_zero+0x4>
     dd4:	08 95       	ret

00000dd6 <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     dd6:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     dda:	f7 df       	rcall	.-18     	; 0xdca <rtc_wait_for_all_status_bits_zero>

void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm; // <- one counter increment represents 32 seconds
     ddc:	e0 e4       	ldi	r30, 0x40	; 64
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	89 ef       	ldi	r24, 0xF9	; 249
     de2:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	87 83       	std	Z+7, r24	; 0x07
     dec:	08 95       	ret

00000dee <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     df6:	c0 90 d4 3e 	lds	r12, 0x3ED4	; 0x803ed4 <seconds_to_next_bu>
     dfa:	d0 90 d5 3e 	lds	r13, 0x3ED5	; 0x803ed5 <seconds_to_next_bu+0x1>
     dfe:	e0 90 d6 3e 	lds	r14, 0x3ED6	; 0x803ed6 <seconds_to_next_bu+0x2>
     e02:	f0 90 d7 3e 	lds	r15, 0x3ED7	; 0x803ed7 <seconds_to_next_bu+0x3>
     e06:	ff 20       	and	r15, r15
     e08:	2c f4       	brge	.+10     	; 0xe14 <rtc_write_seconds_to_cmp+0x26>
     e0a:	8f e1       	ldi	r24, 0x1F	; 31
     e0c:	c8 0e       	add	r12, r24
     e0e:	d1 1c       	adc	r13, r1
     e10:	e1 1c       	adc	r14, r1
     e12:	f1 1c       	adc	r15, r1
     e14:	68 94       	set
     e16:	14 f8       	bld	r1, 4
     e18:	f5 94       	asr	r15
     e1a:	e7 94       	ror	r14
     e1c:	d7 94       	ror	r13
     e1e:	c7 94       	ror	r12
     e20:	16 94       	lsr	r1
     e22:	d1 f7       	brne	.-12     	; 0xe18 <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     e24:	ff 92       	push	r15
     e26:	ef 92       	push	r14
     e28:	df 92       	push	r13
     e2a:	cf 92       	push	r12
     e2c:	8d e3       	ldi	r24, 0x3D	; 61
     e2e:	9e e9       	ldi	r25, 0x9E	; 158
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	82 e7       	ldi	r24, 0x72	; 114
     e36:	9e e3       	ldi	r25, 0x3E	; 62
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	e3 d3       	rcall	.+1990   	; 0x1604 <sprintf>
	USART0_sendString_w_newline_eol(buffer);
     e3e:	82 e7       	ldi	r24, 0x72	; 114
     e40:	9e e3       	ldi	r25, 0x3E	; 62
     e42:	82 d0       	rcall	.+260    	; 0xf48 <USART0_sendString_w_newline_eol>
	rtc_reset_counter();
     e44:	bd df       	rcall	.-134    	; 0xdc0 <rtc_reset_counter>
	if (register_value_next_bu == 0) {
     e46:	8d b7       	in	r24, 0x3d	; 61
     e48:	9e b7       	in	r25, 0x3e	; 62
     e4a:	08 96       	adiw	r24, 0x08	; 8
     e4c:	8d bf       	out	0x3d, r24	; 61
     e4e:	9e bf       	out	0x3e, r25	; 62
     e50:	c1 14       	cp	r12, r1
     e52:	d1 04       	cpc	r13, r1
     e54:	e1 04       	cpc	r14, r1
     e56:	f1 04       	cpc	r15, r1
     e58:	21 f4       	brne	.+8      	; 0xe62 <rtc_write_seconds_to_cmp+0x74>
		register_value_next_bu = 1;
     e5a:	c1 2c       	mov	r12, r1
     e5c:	d1 2c       	mov	r13, r1
     e5e:	76 01       	movw	r14, r12
     e60:	c3 94       	inc	r12
	}
	RTC.CMP = register_value_next_bu;
     e62:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e66:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	08 95       	ret

00000e74 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     e96:	e0 e4       	ldi	r30, 0x40	; 64
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	83 81       	ldd	r24, Z+3	; 0x03
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     ea0:	8a e5       	ldi	r24, 0x5A	; 90
     ea2:	9e e9       	ldi	r25, 0x9E	; 158
     ea4:	30 d0       	rcall	.+96     	; 0xf06 <USART0_sendString>
	flag_wakeup_by_rtc = true;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     eac:	80 93 d8 3e 	sts	0x3ED8, r24	; 0x803ed8 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     eb0:	46 df       	rcall	.-372    	; 0xd3e <transition_to_pwr_state>
}
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	bf 91       	pop	r27
     eb8:	af 91       	pop	r26
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	7f 91       	pop	r23
     ec0:	6f 91       	pop	r22
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     ed4:	e0 e0       	ldi	r30, 0x00	; 0
     ed6:	f8 e0       	ldi	r31, 0x08	; 8
     ed8:	85 81       	ldd	r24, Z+5	; 0x05
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	85 83       	std	Z+5, r24	; 0x05
     ede:	08 95       	ret

00000ee0 <init_uart>:
     ee0:	8f d9       	rcall	.-3298   	; 0x200 <set_pb2_txd_and_pb3_rxd>
     ee2:	e0 e0       	ldi	r30, 0x00	; 0
     ee4:	f8 e0       	ldi	r31, 0x08	; 8
     ee6:	8c e6       	ldi	r24, 0x6C	; 108
     ee8:	95 e0       	ldi	r25, 0x05	; 5
     eea:	80 87       	std	Z+8, r24	; 0x08
     eec:	91 87       	std	Z+9, r25	; 0x09
     eee:	80 ec       	ldi	r24, 0xC0	; 192
     ef0:	86 83       	std	Z+6, r24	; 0x06
     ef2:	f0 df       	rcall	.-32     	; 0xed4 <USART0_enable_rx_complete_interrupt>
     ef4:	08 95       	ret

00000ef6 <USART0_sendChar>:
     ef6:	e0 e0       	ldi	r30, 0x00	; 0
     ef8:	f8 e0       	ldi	r31, 0x08	; 8
     efa:	94 81       	ldd	r25, Z+4	; 0x04
     efc:	95 ff       	sbrs	r25, 5
     efe:	fd cf       	rjmp	.-6      	; 0xefa <USART0_sendChar+0x4>
     f00:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     f04:	08 95       	ret

00000f06 <USART0_sendString>:
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	8c 01       	movw	r16, r24
     f14:	7c 01       	movw	r14, r24
     f16:	c0 e0       	ldi	r28, 0x00	; 0
     f18:	d0 e0       	ldi	r29, 0x00	; 0
     f1a:	05 c0       	rjmp	.+10     	; 0xf26 <USART0_sendString+0x20>
     f1c:	f7 01       	movw	r30, r14
     f1e:	81 91       	ld	r24, Z+
     f20:	7f 01       	movw	r14, r30
     f22:	e9 df       	rcall	.-46     	; 0xef6 <USART0_sendChar>
     f24:	21 96       	adiw	r28, 0x01	; 1
     f26:	f8 01       	movw	r30, r16
     f28:	01 90       	ld	r0, Z+
     f2a:	00 20       	and	r0, r0
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <USART0_sendString+0x22>
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	e0 1b       	sub	r30, r16
     f32:	f1 0b       	sbc	r31, r17
     f34:	ce 17       	cp	r28, r30
     f36:	df 07       	cpc	r29, r31
     f38:	88 f3       	brcs	.-30     	; 0xf1c <USART0_sendString+0x16>
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	08 95       	ret

00000f48 <USART0_sendString_w_newline_eol>:
     f48:	de df       	rcall	.-68     	; 0xf06 <USART0_sendString>
     f4a:	8a e0       	ldi	r24, 0x0A	; 10
     f4c:	d4 df       	rcall	.-88     	; 0xef6 <USART0_sendChar>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	d2 df       	rcall	.-92     	; 0xef6 <USART0_sendChar>
     f52:	08 95       	ret

00000f54 <USART0_send_ready>:
     f54:	8f e5       	ldi	r24, 0x5F	; 95
     f56:	9e e9       	ldi	r25, 0x9E	; 158
     f58:	f7 df       	rcall	.-18     	; 0xf48 <USART0_sendString_w_newline_eol>
     f5a:	08 95       	ret

00000f5c <USART0_read>:
     f5c:	e0 e0       	ldi	r30, 0x00	; 0
     f5e:	f8 e0       	ldi	r31, 0x08	; 8
     f60:	84 81       	ldd	r24, Z+4	; 0x04
     f62:	88 23       	and	r24, r24
     f64:	ec f7       	brge	.-6      	; 0xf60 <USART0_read+0x4>
     f66:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     f6a:	08 95       	ret

00000f6c <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	7c 01       	movw	r14, r24
     f7e:	6b 01       	movw	r12, r22
     f80:	61 32       	cpi	r22, 0x21	; 33
     f82:	71 05       	cpc	r23, r1
     f84:	24 f0       	brlt	.+8      	; 0xf8e <USART0_read_string+0x22>
     f86:	68 94       	set
     f88:	cc 24       	eor	r12, r12
     f8a:	c5 f8       	bld	r12, 5
     f8c:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     f8e:	dd 20       	and	r13, r13
     f90:	c4 f0       	brlt	.+48     	; 0xfc2 <USART0_read_string+0x56>
     f92:	e7 01       	movw	r28, r14
     f94:	00 e0       	ldi	r16, 0x00	; 0
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	7e 01       	movw	r14, r28
		i++;
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     f9e:	de df       	rcall	.-68     	; 0xf5c <USART0_read>
     fa0:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     fa2:	8a 30       	cpi	r24, 0x0A	; 10
     fa4:	21 f0       	breq	.+8      	; 0xfae <USART0_read_string+0x42>
     fa6:	88 23       	and	r24, r24
     fa8:	11 f0       	breq	.+4      	; 0xfae <USART0_read_string+0x42>
     faa:	8d 30       	cpi	r24, 0x0D	; 13
     fac:	31 f4       	brne	.+12     	; 0xfba <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     fae:	f7 01       	movw	r30, r14
     fb0:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     fb2:	c0 16       	cp	r12, r16
     fb4:	d1 06       	cpc	r13, r17
     fb6:	3c f4       	brge	.+14     	; 0xfc6 <USART0_read_string+0x5a>
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     fba:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     fbc:	c0 16       	cp	r12, r16
     fbe:	d1 06       	cpc	r13, r17
     fc0:	5c f7       	brge	.-42     	; 0xf98 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     fc2:	f7 01       	movw	r30, r14
     fc4:	10 82       	st	Z, r1
	}
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <convert_str_to_long>:
		strcpy(wakeup_reason, payload);
		USART0_send_ready();
	}
}

long convert_str_to_long(char *str) {
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <convert_str_to_long+0x6>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	char *ptr;
	long ret;

	ret = strtol(str, &ptr, 10);
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	be 01       	movw	r22, r28
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	90 d1       	rcall	.+800    	; 0x130e <strtol>
	return ret;
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	char *message_code, *payload;
	
	strcpy(usart_receive_copy, usart_receive_buffer);
    1000:	6c ee       	ldi	r22, 0xEC	; 236
    1002:	7e e3       	ldi	r23, 0x3E	; 62
    1004:	8b e1       	ldi	r24, 0x1B	; 27
    1006:	9e e3       	ldi	r25, 0x3E	; 62
    1008:	c7 d2       	rcall	.+1422   	; 0x1598 <strcpy>
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
    100a:	65 e6       	ldi	r22, 0x65	; 101
    100c:	7e e9       	ldi	r23, 0x9E	; 158
    100e:	8c ee       	ldi	r24, 0xEC	; 236
    1010:	9e e3       	ldi	r25, 0x3E	; 62
    1012:	b9 d2       	rcall	.+1394   	; 0x1586 <strcmp>
    1014:	89 2b       	or	r24, r25
    1016:	19 f4       	brne	.+6      	; 0x101e <USART0_process_incoming_message+0x26>
		USART0_sendString_w_newline_eol("Echo");
    1018:	8a e6       	ldi	r24, 0x6A	; 106
    101a:	9e e9       	ldi	r25, 0x9E	; 158
    101c:	95 df       	rcall	.-214    	; 0xf48 <USART0_sendString_w_newline_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
    101e:	6f e6       	ldi	r22, 0x6F	; 111
    1020:	7e e9       	ldi	r23, 0x9E	; 158
    1022:	8c ee       	ldi	r24, 0xEC	; 236
    1024:	9e e3       	ldi	r25, 0x3E	; 62
    1026:	ab d2       	rcall	.+1366   	; 0x157e <strtok>
    1028:	d8 2f       	mov	r29, r24
    102a:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
    102c:	6c ef       	ldi	r22, 0xFC	; 252
    102e:	7b e9       	ldi	r23, 0x9B	; 155
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a4 d2       	rcall	.+1352   	; 0x157e <strtok>
    1036:	08 2f       	mov	r16, r24
    1038:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	81 e7       	ldi	r24, 0x71	; 113
    1044:	9e e9       	ldi	r25, 0x9E	; 158
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	82 e7       	ldi	r24, 0x72	; 114
    104c:	9e e3       	ldi	r25, 0x3E	; 62
    104e:	9f 93       	push	r25
    1050:	8f 93       	push	r24
    1052:	d8 d2       	rcall	.+1456   	; 0x1604 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
    1054:	65 e8       	ldi	r22, 0x85	; 133
    1056:	7e e9       	ldi	r23, 0x9E	; 158
    1058:	8d 2f       	mov	r24, r29
    105a:	9c 2f       	mov	r25, r28
    105c:	94 d2       	rcall	.+1320   	; 0x1586 <strcmp>
    105e:	2d b7       	in	r18, 0x3d	; 61
    1060:	3e b7       	in	r19, 0x3e	; 62
    1062:	28 5f       	subi	r18, 0xF8	; 248
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	2d bf       	out	0x3d, r18	; 61
    1068:	3e bf       	out	0x3e, r19	; 62
    106a:	89 2b       	or	r24, r25
    106c:	41 f4       	brne	.+16     	; 0x107e <USART0_process_incoming_message+0x86>
		USART0_sendString_w_newline_eol("ACK:D1");
    106e:	81 e8       	ldi	r24, 0x81	; 129
    1070:	9e e9       	ldi	r25, 0x9E	; 158
    1072:	6a df       	rcall	.-300    	; 0xf48 <USART0_sendString_w_newline_eol>
		strcpy(display_line1_content, payload);
    1074:	60 2f       	mov	r22, r16
    1076:	71 2f       	mov	r23, r17
    1078:	8b ed       	ldi	r24, 0xDB	; 219
    107a:	9e e3       	ldi	r25, 0x3E	; 62
    107c:	8d d2       	rcall	.+1306   	; 0x1598 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
    107e:	6c e8       	ldi	r22, 0x8C	; 140
    1080:	7e e9       	ldi	r23, 0x9E	; 158
    1082:	8d 2f       	mov	r24, r29
    1084:	9c 2f       	mov	r25, r28
    1086:	7f d2       	rcall	.+1278   	; 0x1586 <strcmp>
    1088:	89 2b       	or	r24, r25
    108a:	59 f4       	brne	.+22     	; 0x10a2 <USART0_process_incoming_message+0xaa>
		USART0_sendString_w_newline_eol("ACK:D2");
    108c:	88 e8       	ldi	r24, 0x88	; 136
    108e:	9e e9       	ldi	r25, 0x9E	; 158
    1090:	5b df       	rcall	.-330    	; 0xf48 <USART0_sendString_w_newline_eol>
		strcpy(display_line2_content, payload);
    1092:	60 2f       	mov	r22, r16
    1094:	71 2f       	mov	r23, r17
    1096:	83 ec       	ldi	r24, 0xC3	; 195
    1098:	9e e3       	ldi	r25, 0x3E	; 62
    109a:	7e d2       	rcall	.+1276   	; 0x1598 <strcpy>
		flag_string_for_display_received = true;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
    10a2:	63 e9       	ldi	r22, 0x93	; 147
    10a4:	7e e9       	ldi	r23, 0x9E	; 158
    10a6:	8d 2f       	mov	r24, r29
    10a8:	9c 2f       	mov	r25, r28
    10aa:	6d d2       	rcall	.+1242   	; 0x1586 <strcmp>
    10ac:	89 2b       	or	r24, r25
    10ae:	41 f4       	brne	.+16     	; 0x10c0 <USART0_process_incoming_message+0xc8>
		// Fixme: shutdown request doesnt work anymore!
		USART0_sendString_w_newline_eol("ACK:SR");
    10b0:	8f e8       	ldi	r24, 0x8F	; 143
    10b2:	9e e9       	ldi	r25, 0x9E	; 158
    10b4:	49 df       	rcall	.-366    	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_pwr_state_change_request = true;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <flag_pwr_state_change_request>
		next_pwr_state = standby;
    10bc:	10 92 d8 3e 	sts	0x3ED8, r1	; 0x803ed8 <next_pwr_state>
	}
	
	if (strcmp(message_code, "SA") == 0) {
    10c0:	6a e9       	ldi	r22, 0x9A	; 154
    10c2:	7e e9       	ldi	r23, 0x9E	; 158
    10c4:	8d 2f       	mov	r24, r29
    10c6:	9c 2f       	mov	r25, r28
    10c8:	5e d2       	rcall	.+1212   	; 0x1586 <strcmp>
    10ca:	89 2b       	or	r24, r25
    10cc:	31 f4       	brne	.+12     	; 0x10da <USART0_process_incoming_message+0xe2>
		USART0_sendString_w_newline_eol("ACK:SA");
    10ce:	86 e9       	ldi	r24, 0x96	; 150
    10d0:	9e e9       	ldi	r25, 0x9E	; 158
    10d2:	3a df       	rcall	.-396    	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_abort_shutdown = true;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_abort_shutdown>
	}
	
	if (strcmp(message_code, "BU") == 0) {
    10da:	6d e9       	ldi	r22, 0x9D	; 157
    10dc:	7e e9       	ldi	r23, 0x9E	; 158
    10de:	8d 2f       	mov	r24, r29
    10e0:	9c 2f       	mov	r25, r28
    10e2:	51 d2       	rcall	.+1186   	; 0x1586 <strcmp>
    10e4:	89 2b       	or	r24, r25
    10e6:	11 f5       	brne	.+68     	; 0x112c <USART0_process_incoming_message+0x134>
		sprintf(buffer,"ACK:BU:%s\n", payload);
    10e8:	1f 93       	push	r17
    10ea:	0f 93       	push	r16
    10ec:	80 ea       	ldi	r24, 0xA0	; 160
    10ee:	9e e9       	ldi	r25, 0x9E	; 158
    10f0:	9f 93       	push	r25
    10f2:	8f 93       	push	r24
    10f4:	82 e7       	ldi	r24, 0x72	; 114
    10f6:	9e e3       	ldi	r25, 0x3E	; 62
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	83 d2       	rcall	.+1286   	; 0x1604 <sprintf>
		USART0_sendString_w_newline_eol(buffer);
    10fe:	82 e7       	ldi	r24, 0x72	; 114
    1100:	9e e3       	ldi	r25, 0x3E	; 62
    1102:	22 df       	rcall	.-444    	; 0xf48 <USART0_sendString_w_newline_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
    1104:	80 2f       	mov	r24, r16
    1106:	91 2f       	mov	r25, r17
    1108:	67 df       	rcall	.-306    	; 0xfd8 <convert_str_to_long>
    110a:	60 93 d4 3e 	sts	0x3ED4, r22	; 0x803ed4 <seconds_to_next_bu>
    110e:	70 93 d5 3e 	sts	0x3ED5, r23	; 0x803ed5 <seconds_to_next_bu+0x1>
    1112:	80 93 d6 3e 	sts	0x3ED6, r24	; 0x803ed6 <seconds_to_next_bu+0x2>
    1116:	90 93 d7 3e 	sts	0x3ED7, r25	; 0x803ed7 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_received_seconds_to_next_bu>
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
    112c:	6b ea       	ldi	r22, 0xAB	; 171
    112e:	7e e9       	ldi	r23, 0x9E	; 158
    1130:	8d 2f       	mov	r24, r29
    1132:	9c 2f       	mov	r25, r28
    1134:	28 d2       	rcall	.+1104   	; 0x1586 <strcmp>
    1136:	89 2b       	or	r24, r25
    1138:	59 f4       	brne	.+22     	; 0x1150 <USART0_process_incoming_message+0x158>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
    113a:	60 2f       	mov	r22, r16
    113c:	71 2f       	mov	r23, r17
    113e:	82 ea       	ldi	r24, 0xA2	; 162
    1140:	9e e3       	ldi	r25, 0x3E	; 62
    1142:	2a d2       	rcall	.+1108   	; 0x1598 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
    1144:	8a e0       	ldi	r24, 0x0A	; 10
    1146:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
    1150:	6e ea       	ldi	r22, 0xAE	; 174
    1152:	7e e9       	ldi	r23, 0x9E	; 158
    1154:	8d 2f       	mov	r24, r29
    1156:	9c 2f       	mov	r25, r28
    1158:	16 d2       	rcall	.+1068   	; 0x1586 <strcmp>
    115a:	89 2b       	or	r24, r25
    115c:	19 f4       	brne	.+6      	; 0x1164 <USART0_process_incoming_message+0x16c>
		flag_goto_sleep = true;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
    1164:	65 eb       	ldi	r22, 0xB5	; 181
    1166:	7e e9       	ldi	r23, 0x9E	; 158
    1168:	8d 2f       	mov	r24, r29
    116a:	9c 2f       	mov	r25, r28
    116c:	0c d2       	rcall	.+1048   	; 0x1586 <strcmp>
    116e:	89 2b       	or	r24, r25
    1170:	31 f4       	brne	.+12     	; 0x117e <USART0_process_incoming_message+0x186>
		USART0_sendString_w_newline_eol("ACK:CC");
    1172:	81 eb       	ldi	r24, 0xB1	; 177
    1174:	9e e9       	ldi	r25, 0x9E	; 158
    1176:	e8 de       	rcall	.-560    	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_request_current_measurement = true;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
    117e:	6c eb       	ldi	r22, 0xBC	; 188
    1180:	7e e9       	ldi	r23, 0x9E	; 158
    1182:	8d 2f       	mov	r24, r29
    1184:	9c 2f       	mov	r25, r28
    1186:	ff d1       	rcall	.+1022   	; 0x1586 <strcmp>
    1188:	89 2b       	or	r24, r25
    118a:	31 f4       	brne	.+12     	; 0x1198 <USART0_process_incoming_message+0x1a0>
		USART0_sendString_w_newline_eol("ACK:TP");
    118c:	88 eb       	ldi	r24, 0xB8	; 184
    118e:	9e e9       	ldi	r25, 0x9E	; 158
    1190:	db de       	rcall	.-586    	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_request_temperature_measurement = true;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
    1198:	63 ec       	ldi	r22, 0xC3	; 195
    119a:	7e e9       	ldi	r23, 0x9E	; 158
    119c:	8d 2f       	mov	r24, r29
    119e:	9c 2f       	mov	r25, r28
    11a0:	f2 d1       	rcall	.+996    	; 0x1586 <strcmp>
    11a2:	89 2b       	or	r24, r25
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <USART0_process_incoming_message+0x1ba>
		USART0_sendString_w_newline_eol("ACK:3V");
    11a6:	8f eb       	ldi	r24, 0xBF	; 191
    11a8:	9e e9       	ldi	r25, 0x9E	; 158
    11aa:	ce de       	rcall	.-612    	; 0xf48 <USART0_sendString_w_newline_eol>
		flag_request_3v3_measurement = true;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
    11b2:	6a ec       	ldi	r22, 0xCA	; 202
    11b4:	7e e9       	ldi	r23, 0x9E	; 158
    11b6:	8d 2f       	mov	r24, r29
    11b8:	9c 2f       	mov	r25, r28
    11ba:	e5 d1       	rcall	.+970    	; 0x1586 <strcmp>
    11bc:	89 2b       	or	r24, r25
    11be:	61 f4       	brne	.+24     	; 0x11d8 <USART0_process_incoming_message+0x1e0>
		USART0_sendString_w_newline_eol("ACK:ON");
    11c0:	86 ec       	ldi	r24, 0xC6	; 198
    11c2:	9e e9       	ldi	r25, 0x9E	; 158
    11c4:	c1 de       	rcall	.-638    	; 0xf48 <USART0_sendString_w_newline_eol>
		if(flag_schedule_backup_now) {
    11c6:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_schedule_backup_now>
    11ca:	88 23       	and	r24, r24
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <USART0_process_incoming_message+0x1e0>
			flag_schedule_backup_now = false;
    11ce:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_schedule_backup_now>
			USART0_sendString_w_newline_eol("User Backup");
    11d2:	8d ec       	ldi	r24, 0xCD	; 205
    11d4:	9e e9       	ldi	r25, 0x9E	; 158
    11d6:	b8 de       	rcall	.-656    	; 0xf48 <USART0_sendString_w_newline_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
    11d8:	6d ed       	ldi	r22, 0xDD	; 221
    11da:	7e e9       	ldi	r23, 0x9E	; 158
    11dc:	8d 2f       	mov	r24, r29
    11de:	9c 2f       	mov	r25, r28
    11e0:	d2 d1       	rcall	.+932    	; 0x1586 <strcmp>
    11e2:	89 2b       	or	r24, r25
    11e4:	79 f4       	brne	.+30     	; 0x1204 <USART0_process_incoming_message+0x20c>
		USART0_sendString_w_newline_eol("ACK:DB");
    11e6:	89 ed       	ldi	r24, 0xD9	; 217
    11e8:	9e e9       	ldi	r25, 0x9E	; 158
    11ea:	ae de       	rcall	.-676    	; 0xf48 <USART0_sendString_w_newline_eol>
		dimming_value_display = atoi(payload);
    11ec:	80 2f       	mov	r24, r16
    11ee:	91 2f       	mov	r25, r17
    11f0:	9f d1       	rcall	.+830    	; 0x1530 <atoi>
    11f2:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <dimming_value_display>
    11f6:	90 93 60 3e 	sts	0x3E60, r25	; 0x803e60 <dimming_value_display+0x1>
		set_dimming_value_display_bl(dimming_value_display);
    11fa:	8a db       	rcall	.-2284   	; 0x910 <set_dimming_value_display_bl>
		flag_dim_display = true;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_dim_display>
		USART0_send_ready();
    1202:	a8 de       	rcall	.-688    	; 0xf54 <USART0_send_ready>
	}
	
	if(strcmp(message_code, "DL") == 0) {
    1204:	64 ee       	ldi	r22, 0xE4	; 228
    1206:	7e e9       	ldi	r23, 0x9E	; 158
    1208:	8d 2f       	mov	r24, r29
    120a:	9c 2f       	mov	r25, r28
    120c:	bc d1       	rcall	.+888    	; 0x1586 <strcmp>
    120e:	89 2b       	or	r24, r25
    1210:	69 f4       	brne	.+26     	; 0x122c <USART0_process_incoming_message+0x234>
		USART0_sendString_w_newline_eol("ACK:DL");
    1212:	80 ee       	ldi	r24, 0xE0	; 224
    1214:	9e e9       	ldi	r25, 0x9E	; 158
    1216:	98 de       	rcall	.-720    	; 0xf48 <USART0_sendString_w_newline_eol>
		dimming_value_hmi_led = atoi(payload);
    1218:	80 2f       	mov	r24, r16
    121a:	91 2f       	mov	r25, r17
    121c:	89 d1       	rcall	.+786    	; 0x1530 <atoi>
    121e:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <dimming_value_hmi_led>
    1222:	90 93 5c 3e 	sts	0x3E5C, r25	; 0x803e5c <dimming_value_hmi_led+0x1>
		flag_dim_hmi_led = true;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_dim_hmi_led>
	}
	
	if(strcmp(message_code, "WR") == 0) {
    122c:	6b ee       	ldi	r22, 0xEB	; 235
    122e:	7e e9       	ldi	r23, 0x9E	; 158
    1230:	8d 2f       	mov	r24, r29
    1232:	9c 2f       	mov	r25, r28
    1234:	a8 d1       	rcall	.+848    	; 0x1586 <strcmp>
    1236:	89 2b       	or	r24, r25
    1238:	49 f4       	brne	.+18     	; 0x124c <USART0_process_incoming_message+0x254>
		USART0_sendString_w_newline_eol("ACK:WR");
    123a:	87 ee       	ldi	r24, 0xE7	; 231
    123c:	9e e9       	ldi	r25, 0x9E	; 158
    123e:	84 de       	rcall	.-760    	; 0xf48 <USART0_sendString_w_newline_eol>
		USART0_sendString_w_newline_eol(wakeup_reason);
    1240:	82 e6       	ldi	r24, 0x62	; 98
    1242:	9e e3       	ldi	r25, 0x3E	; 62
    1244:	81 de       	rcall	.-766    	; 0xf48 <USART0_sendString_w_newline_eol>
		strcpy(wakeup_reason, "");
    1246:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <wakeup_reason>
		USART0_send_ready();
    124a:	84 de       	rcall	.-760    	; 0xf54 <USART0_send_ready>
	}
	
	if(strcmp(message_code, "WD") == 0) {
    124c:	6e ee       	ldi	r22, 0xEE	; 238
    124e:	7e e9       	ldi	r23, 0x9E	; 158
    1250:	8d 2f       	mov	r24, r29
    1252:	9c 2f       	mov	r25, r28
    1254:	98 d1       	rcall	.+816    	; 0x1586 <strcmp>
    1256:	89 2b       	or	r24, r25
    1258:	49 f4       	brne	.+18     	; 0x126c <USART0_process_incoming_message+0x274>
		USART0_sendString_w_newline_eol("ACK:WR");
    125a:	87 ee       	ldi	r24, 0xE7	; 231
    125c:	9e e9       	ldi	r25, 0x9E	; 158
    125e:	74 de       	rcall	.-792    	; 0xf48 <USART0_sendString_w_newline_eol>
		strcpy(wakeup_reason, payload);
    1260:	60 2f       	mov	r22, r16
    1262:	71 2f       	mov	r23, r17
    1264:	82 e6       	ldi	r24, 0x62	; 98
    1266:	9e e3       	ldi	r25, 0x3E	; 62
    1268:	97 d1       	rcall	.+814    	; 0x1598 <strcpy>
		USART0_send_ready();
    126a:	74 de       	rcall	.-792    	; 0xf54 <USART0_send_ready>
	}
}
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
    1298:	60 e2       	ldi	r22, 0x20	; 32
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	8c ee       	ldi	r24, 0xEC	; 236
    129e:	9e e3       	ldi	r25, 0x3E	; 62
    12a0:	65 de       	rcall	.-822    	; 0xf6c <USART0_read_string>
	flag_usart_string_receive_complete = true;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <flag_usart_string_receive_complete>
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__udivmodsi4>:
    12ca:	a1 e2       	ldi	r26, 0x21	; 33
    12cc:	1a 2e       	mov	r1, r26
    12ce:	aa 1b       	sub	r26, r26
    12d0:	bb 1b       	sub	r27, r27
    12d2:	fd 01       	movw	r30, r26
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <__udivmodsi4_ep>

000012d6 <__udivmodsi4_loop>:
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	ee 1f       	adc	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	a2 17       	cp	r26, r18
    12e0:	b3 07       	cpc	r27, r19
    12e2:	e4 07       	cpc	r30, r20
    12e4:	f5 07       	cpc	r31, r21
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__udivmodsi4_ep>
    12e8:	a2 1b       	sub	r26, r18
    12ea:	b3 0b       	sbc	r27, r19
    12ec:	e4 0b       	sbc	r30, r20
    12ee:	f5 0b       	sbc	r31, r21

000012f0 <__udivmodsi4_ep>:
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	1a 94       	dec	r1
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <__udivmodsi4_loop>
    12fc:	60 95       	com	r22
    12fe:	70 95       	com	r23
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	bd 01       	movw	r22, r26
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret

0000130e <strtol>:
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ec e8       	ldi	r30, 0x8C	; 140
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	34 c4       	rjmp	.+2152   	; 0x1b80 <__prologue_saves__+0x2>
    1318:	5c 01       	movw	r10, r24
    131a:	6b 01       	movw	r12, r22
    131c:	7a 01       	movw	r14, r20
    131e:	61 15       	cp	r22, r1
    1320:	71 05       	cpc	r23, r1
    1322:	19 f0       	breq	.+6      	; 0x132a <strtol+0x1c>
    1324:	fb 01       	movw	r30, r22
    1326:	80 83       	st	Z, r24
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	e1 14       	cp	r14, r1
    132c:	f1 04       	cpc	r15, r1
    132e:	29 f0       	breq	.+10     	; 0x133a <strtol+0x2c>
    1330:	c7 01       	movw	r24, r14
    1332:	02 97       	sbiw	r24, 0x02	; 2
    1334:	83 97       	sbiw	r24, 0x23	; 35
    1336:	08 f0       	brcs	.+2      	; 0x133a <strtol+0x2c>
    1338:	e2 c0       	rjmp	.+452    	; 0x14fe <strtol+0x1f0>
    133a:	e5 01       	movw	r28, r10
    133c:	21 96       	adiw	r28, 0x01	; 1
    133e:	f5 01       	movw	r30, r10
    1340:	10 81       	ld	r17, Z
    1342:	81 2f       	mov	r24, r17
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	12 d1       	rcall	.+548    	; 0x156c <isspace>
    1348:	89 2b       	or	r24, r25
    134a:	11 f0       	breq	.+4      	; 0x1350 <strtol+0x42>
    134c:	5e 01       	movw	r10, r28
    134e:	f5 cf       	rjmp	.-22     	; 0x133a <strtol+0x2c>
    1350:	1d 32       	cpi	r17, 0x2D	; 45
    1352:	29 f4       	brne	.+10     	; 0x135e <strtol+0x50>
    1354:	21 96       	adiw	r28, 0x01	; 1
    1356:	f5 01       	movw	r30, r10
    1358:	11 81       	ldd	r17, Z+1	; 0x01
    135a:	01 e0       	ldi	r16, 0x01	; 1
    135c:	07 c0       	rjmp	.+14     	; 0x136c <strtol+0x5e>
    135e:	1b 32       	cpi	r17, 0x2B	; 43
    1360:	21 f4       	brne	.+8      	; 0x136a <strtol+0x5c>
    1362:	e5 01       	movw	r28, r10
    1364:	22 96       	adiw	r28, 0x02	; 2
    1366:	f5 01       	movw	r30, r10
    1368:	11 81       	ldd	r17, Z+1	; 0x01
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	e1 14       	cp	r14, r1
    136e:	f1 04       	cpc	r15, r1
    1370:	09 f1       	breq	.+66     	; 0x13b4 <strtol+0xa6>
    1372:	f0 e1       	ldi	r31, 0x10	; 16
    1374:	ef 16       	cp	r14, r31
    1376:	f1 04       	cpc	r15, r1
    1378:	29 f4       	brne	.+10     	; 0x1384 <strtol+0x76>
    137a:	3e c0       	rjmp	.+124    	; 0x13f8 <strtol+0xea>
    137c:	10 e3       	ldi	r17, 0x30	; 48
    137e:	e1 14       	cp	r14, r1
    1380:	f1 04       	cpc	r15, r1
    1382:	21 f1       	breq	.+72     	; 0x13cc <strtol+0xbe>
    1384:	28 e0       	ldi	r18, 0x08	; 8
    1386:	e2 16       	cp	r14, r18
    1388:	f1 04       	cpc	r15, r1
    138a:	01 f1       	breq	.+64     	; 0x13cc <strtol+0xbe>
    138c:	54 f4       	brge	.+20     	; 0x13a2 <strtol+0x94>
    138e:	e2 e0       	ldi	r30, 0x02	; 2
    1390:	ee 16       	cp	r14, r30
    1392:	f1 04       	cpc	r15, r1
    1394:	21 f5       	brne	.+72     	; 0x13de <strtol+0xd0>
    1396:	81 2c       	mov	r8, r1
    1398:	91 2c       	mov	r9, r1
    139a:	a1 2c       	mov	r10, r1
    139c:	b0 e4       	ldi	r27, 0x40	; 64
    139e:	bb 2e       	mov	r11, r27
    13a0:	3d c0       	rjmp	.+122    	; 0x141c <strtol+0x10e>
    13a2:	fa e0       	ldi	r31, 0x0A	; 10
    13a4:	ef 16       	cp	r14, r31
    13a6:	f1 04       	cpc	r15, r1
    13a8:	39 f0       	breq	.+14     	; 0x13b8 <strtol+0xaa>
    13aa:	20 e1       	ldi	r18, 0x10	; 16
    13ac:	e2 16       	cp	r14, r18
    13ae:	f1 04       	cpc	r15, r1
    13b0:	b1 f4       	brne	.+44     	; 0x13de <strtol+0xd0>
    13b2:	2f c0       	rjmp	.+94     	; 0x1412 <strtol+0x104>
    13b4:	10 33       	cpi	r17, 0x30	; 48
    13b6:	11 f1       	breq	.+68     	; 0x13fc <strtol+0xee>
    13b8:	fa e0       	ldi	r31, 0x0A	; 10
    13ba:	ef 2e       	mov	r14, r31
    13bc:	f1 2c       	mov	r15, r1
    13be:	ac ec       	ldi	r26, 0xCC	; 204
    13c0:	8a 2e       	mov	r8, r26
    13c2:	98 2c       	mov	r9, r8
    13c4:	a8 2c       	mov	r10, r8
    13c6:	ac e0       	ldi	r26, 0x0C	; 12
    13c8:	ba 2e       	mov	r11, r26
    13ca:	28 c0       	rjmp	.+80     	; 0x141c <strtol+0x10e>
    13cc:	78 e0       	ldi	r23, 0x08	; 8
    13ce:	e7 2e       	mov	r14, r23
    13d0:	f1 2c       	mov	r15, r1
    13d2:	81 2c       	mov	r8, r1
    13d4:	91 2c       	mov	r9, r1
    13d6:	a1 2c       	mov	r10, r1
    13d8:	e0 e1       	ldi	r30, 0x10	; 16
    13da:	be 2e       	mov	r11, r30
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <strtol+0x10e>
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e8       	ldi	r25, 0x80	; 128
    13e6:	97 01       	movw	r18, r14
    13e8:	0f 2c       	mov	r0, r15
    13ea:	00 0c       	add	r0, r0
    13ec:	44 0b       	sbc	r20, r20
    13ee:	55 0b       	sbc	r21, r21
    13f0:	6c df       	rcall	.-296    	; 0x12ca <__udivmodsi4>
    13f2:	49 01       	movw	r8, r18
    13f4:	5a 01       	movw	r10, r20
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <strtol+0x10e>
    13f8:	10 33       	cpi	r17, 0x30	; 48
    13fa:	59 f4       	brne	.+22     	; 0x1412 <strtol+0x104>
    13fc:	88 81       	ld	r24, Y
    13fe:	8f 7d       	andi	r24, 0xDF	; 223
    1400:	88 35       	cpi	r24, 0x58	; 88
    1402:	09 f0       	breq	.+2      	; 0x1406 <strtol+0xf8>
    1404:	bb cf       	rjmp	.-138    	; 0x137c <strtol+0x6e>
    1406:	19 81       	ldd	r17, Y+1	; 0x01
    1408:	22 96       	adiw	r28, 0x02	; 2
    140a:	02 60       	ori	r16, 0x02	; 2
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	e8 2e       	mov	r14, r24
    1410:	f1 2c       	mov	r15, r1
    1412:	81 2c       	mov	r8, r1
    1414:	91 2c       	mov	r9, r1
    1416:	a1 2c       	mov	r10, r1
    1418:	68 e0       	ldi	r22, 0x08	; 8
    141a:	b6 2e       	mov	r11, r22
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	cb 01       	movw	r24, r22
    1424:	27 01       	movw	r4, r14
    1426:	0f 2c       	mov	r0, r15
    1428:	00 0c       	add	r0, r0
    142a:	66 08       	sbc	r6, r6
    142c:	77 08       	sbc	r7, r7
    142e:	fe 01       	movw	r30, r28
    1430:	50 ed       	ldi	r21, 0xD0	; 208
    1432:	35 2e       	mov	r3, r21
    1434:	31 0e       	add	r3, r17
    1436:	29 e0       	ldi	r18, 0x09	; 9
    1438:	23 15       	cp	r18, r3
    143a:	70 f4       	brcc	.+28     	; 0x1458 <strtol+0x14a>
    143c:	2f eb       	ldi	r18, 0xBF	; 191
    143e:	21 0f       	add	r18, r17
    1440:	2a 31       	cpi	r18, 0x1A	; 26
    1442:	18 f4       	brcc	.+6      	; 0x144a <strtol+0x13c>
    1444:	39 ec       	ldi	r19, 0xC9	; 201
    1446:	33 2e       	mov	r3, r19
    1448:	06 c0       	rjmp	.+12     	; 0x1456 <strtol+0x148>
    144a:	2f e9       	ldi	r18, 0x9F	; 159
    144c:	21 0f       	add	r18, r17
    144e:	2a 31       	cpi	r18, 0x1A	; 26
    1450:	10 f5       	brcc	.+68     	; 0x1496 <strtol+0x188>
    1452:	29 ea       	ldi	r18, 0xA9	; 169
    1454:	32 2e       	mov	r3, r18
    1456:	31 0e       	add	r3, r17
    1458:	23 2d       	mov	r18, r3
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	2e 15       	cp	r18, r14
    145e:	3f 05       	cpc	r19, r15
    1460:	d4 f4       	brge	.+52     	; 0x1496 <strtol+0x188>
    1462:	47 fd       	sbrc	r20, 7
    1464:	15 c0       	rjmp	.+42     	; 0x1490 <strtol+0x182>
    1466:	86 16       	cp	r8, r22
    1468:	97 06       	cpc	r9, r23
    146a:	a8 06       	cpc	r10, r24
    146c:	b9 06       	cpc	r11, r25
    146e:	68 f0       	brcs	.+26     	; 0x148a <strtol+0x17c>
    1470:	a3 01       	movw	r20, r6
    1472:	92 01       	movw	r18, r4
    1474:	6b d3       	rcall	.+1750   	; 0x1b4c <__mulsi3>
    1476:	63 0d       	add	r22, r3
    1478:	71 1d       	adc	r23, r1
    147a:	81 1d       	adc	r24, r1
    147c:	91 1d       	adc	r25, r1
    147e:	61 30       	cpi	r22, 0x01	; 1
    1480:	71 05       	cpc	r23, r1
    1482:	81 05       	cpc	r24, r1
    1484:	20 e8       	ldi	r18, 0x80	; 128
    1486:	92 07       	cpc	r25, r18
    1488:	10 f0       	brcs	.+4      	; 0x148e <strtol+0x180>
    148a:	4f ef       	ldi	r20, 0xFF	; 255
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <strtol+0x182>
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	21 96       	adiw	r28, 0x01	; 1
    1492:	10 81       	ld	r17, Z
    1494:	cc cf       	rjmp	.-104    	; 0x142e <strtol+0x120>
    1496:	20 2f       	mov	r18, r16
    1498:	21 70       	andi	r18, 0x01	; 1
    149a:	c1 14       	cp	r12, r1
    149c:	d1 04       	cpc	r13, r1
    149e:	71 f0       	breq	.+28     	; 0x14bc <strtol+0x1ae>
    14a0:	44 23       	and	r20, r20
    14a2:	29 f0       	breq	.+10     	; 0x14ae <strtol+0x1a0>
    14a4:	21 97       	sbiw	r28, 0x01	; 1
    14a6:	f6 01       	movw	r30, r12
    14a8:	c0 83       	st	Z, r28
    14aa:	d1 83       	std	Z+1, r29	; 0x01
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <strtol+0x1ae>
    14ae:	01 ff       	sbrs	r16, 1
    14b0:	19 c0       	rjmp	.+50     	; 0x14e4 <strtol+0x1d6>
    14b2:	22 97       	sbiw	r28, 0x02	; 2
    14b4:	f6 01       	movw	r30, r12
    14b6:	c0 83       	st	Z, r28
    14b8:	d1 83       	std	Z+1, r29	; 0x01
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <strtol+0x1d6>
    14bc:	47 ff       	sbrs	r20, 7
    14be:	12 c0       	rjmp	.+36     	; 0x14e4 <strtol+0x1d6>
    14c0:	22 23       	and	r18, r18
    14c2:	29 f0       	breq	.+10     	; 0x14ce <strtol+0x1c0>
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e8       	ldi	r25, 0x80	; 128
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <strtol+0x1c8>
    14ce:	6f ef       	ldi	r22, 0xFF	; 255
    14d0:	7f ef       	ldi	r23, 0xFF	; 255
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	9f e7       	ldi	r25, 0x7F	; 127
    14d6:	22 e2       	ldi	r18, 0x22	; 34
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	20 93 0d 3f 	sts	0x3F0D, r18	; 0x803f0d <errno>
    14de:	30 93 0e 3f 	sts	0x3F0E, r19	; 0x803f0e <errno+0x1>
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <strtol+0x1e8>
    14e4:	22 23       	and	r18, r18
    14e6:	81 f0       	breq	.+32     	; 0x1508 <strtol+0x1fa>
    14e8:	90 95       	com	r25
    14ea:	80 95       	com	r24
    14ec:	70 95       	com	r23
    14ee:	61 95       	neg	r22
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	8f 4f       	sbci	r24, 0xFF	; 255
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	46 2f       	mov	r20, r22
    14f8:	37 2f       	mov	r19, r23
    14fa:	28 2f       	mov	r18, r24
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <strtol+0x214>
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <strtol+0x214>
    1508:	97 ff       	sbrs	r25, 7
    150a:	f5 cf       	rjmp	.-22     	; 0x14f6 <strtol+0x1e8>
    150c:	82 e2       	ldi	r24, 0x22	; 34
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	80 93 0d 3f 	sts	0x3F0D, r24	; 0x803f0d <errno>
    1514:	90 93 0e 3f 	sts	0x3F0E, r25	; 0x803f0e <errno+0x1>
    1518:	6f ef       	ldi	r22, 0xFF	; 255
    151a:	7f ef       	ldi	r23, 0xFF	; 255
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	9f e7       	ldi	r25, 0x7F	; 127
    1520:	ea cf       	rjmp	.-44     	; 0x14f6 <strtol+0x1e8>
    1522:	64 2f       	mov	r22, r20
    1524:	73 2f       	mov	r23, r19
    1526:	82 2f       	mov	r24, r18
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	e1 e1       	ldi	r30, 0x11	; 17
    152e:	41 c3       	rjmp	.+1666   	; 0x1bb2 <__epilogue_restores__+0x2>

00001530 <atoi>:
    1530:	fc 01       	movw	r30, r24
    1532:	88 27       	eor	r24, r24
    1534:	99 27       	eor	r25, r25
    1536:	e8 94       	clt
    1538:	21 91       	ld	r18, Z+
    153a:	20 32       	cpi	r18, 0x20	; 32
    153c:	e9 f3       	breq	.-6      	; 0x1538 <atoi+0x8>
    153e:	29 30       	cpi	r18, 0x09	; 9
    1540:	10 f0       	brcs	.+4      	; 0x1546 <atoi+0x16>
    1542:	2e 30       	cpi	r18, 0x0E	; 14
    1544:	c8 f3       	brcs	.-14     	; 0x1538 <atoi+0x8>
    1546:	2b 32       	cpi	r18, 0x2B	; 43
    1548:	41 f0       	breq	.+16     	; 0x155a <atoi+0x2a>
    154a:	2d 32       	cpi	r18, 0x2D	; 45
    154c:	39 f4       	brne	.+14     	; 0x155c <atoi+0x2c>
    154e:	68 94       	set
    1550:	04 c0       	rjmp	.+8      	; 0x155a <atoi+0x2a>
    1552:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__mulhi_const_10>
    1556:	82 0f       	add	r24, r18
    1558:	91 1d       	adc	r25, r1
    155a:	21 91       	ld	r18, Z+
    155c:	20 53       	subi	r18, 0x30	; 48
    155e:	2a 30       	cpi	r18, 0x0A	; 10
    1560:	c0 f3       	brcs	.-16     	; 0x1552 <atoi+0x22>
    1562:	1e f4       	brtc	.+6      	; 0x156a <atoi+0x3a>
    1564:	90 95       	com	r25
    1566:	81 95       	neg	r24
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	08 95       	ret

0000156c <isspace>:
    156c:	91 11       	cpse	r25, r1
    156e:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__ctype_isfalse>
    1572:	80 32       	cpi	r24, 0x20	; 32
    1574:	19 f0       	breq	.+6      	; 0x157c <isspace+0x10>
    1576:	89 50       	subi	r24, 0x09	; 9
    1578:	85 50       	subi	r24, 0x05	; 5
    157a:	c8 f7       	brcc	.-14     	; 0x156e <isspace+0x2>
    157c:	08 95       	ret

0000157e <strtok>:
    157e:	44 e0       	ldi	r20, 0x04	; 4
    1580:	5e e3       	ldi	r21, 0x3E	; 62
    1582:	11 d0       	rcall	.+34     	; 0x15a6 <strtok_r>
    1584:	08 95       	ret

00001586 <strcmp>:
    1586:	fb 01       	movw	r30, r22
    1588:	dc 01       	movw	r26, r24
    158a:	8d 91       	ld	r24, X+
    158c:	01 90       	ld	r0, Z+
    158e:	80 19       	sub	r24, r0
    1590:	01 10       	cpse	r0, r1
    1592:	d9 f3       	breq	.-10     	; 0x158a <strcmp+0x4>
    1594:	99 0b       	sbc	r25, r25
    1596:	08 95       	ret

00001598 <strcpy>:
    1598:	fb 01       	movw	r30, r22
    159a:	dc 01       	movw	r26, r24
    159c:	01 90       	ld	r0, Z+
    159e:	0d 92       	st	X+, r0
    15a0:	00 20       	and	r0, r0
    15a2:	e1 f7       	brne	.-8      	; 0x159c <strcpy+0x4>
    15a4:	08 95       	ret

000015a6 <strtok_r>:
    15a6:	fa 01       	movw	r30, r20
    15a8:	a1 91       	ld	r26, Z+
    15aa:	b0 81       	ld	r27, Z
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <strtok_r+0x10>
    15b0:	10 97       	sbiw	r26, 0x00	; 0
    15b2:	e1 f0       	breq	.+56     	; 0x15ec <strtok_r+0x46>
    15b4:	cd 01       	movw	r24, r26
    15b6:	dc 01       	movw	r26, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0d 90       	ld	r0, X+
    15bc:	00 20       	and	r0, r0
    15be:	11 f4       	brne	.+4      	; 0x15c4 <strtok_r+0x1e>
    15c0:	c0 01       	movw	r24, r0
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <strtok_r+0x44>
    15c4:	fb 01       	movw	r30, r22
    15c6:	21 91       	ld	r18, Z+
    15c8:	22 23       	and	r18, r18
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <strtok_r+0x2c>
    15cc:	20 15       	cp	r18, r0
    15ce:	d9 f7       	brne	.-10     	; 0x15c6 <strtok_r+0x20>
    15d0:	f3 cf       	rjmp	.-26     	; 0x15b8 <strtok_r+0x12>
    15d2:	fb 01       	movw	r30, r22
    15d4:	21 91       	ld	r18, Z+
    15d6:	20 15       	cp	r18, r0
    15d8:	19 f4       	brne	.+6      	; 0x15e0 <strtok_r+0x3a>
    15da:	1e 92       	st	-X, r1
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <strtok_r+0x46>
    15e0:	22 23       	and	r18, r18
    15e2:	c1 f7       	brne	.-16     	; 0x15d4 <strtok_r+0x2e>
    15e4:	0d 90       	ld	r0, X+
    15e6:	00 20       	and	r0, r0
    15e8:	a1 f7       	brne	.-24     	; 0x15d2 <strtok_r+0x2c>
    15ea:	d0 01       	movw	r26, r0
    15ec:	fa 01       	movw	r30, r20
    15ee:	a1 93       	st	Z+, r26
    15f0:	b0 83       	st	Z, r27
    15f2:	08 95       	ret

000015f4 <__mulhi_const_10>:
    15f4:	7a e0       	ldi	r23, 0x0A	; 10
    15f6:	97 9f       	mul	r25, r23
    15f8:	90 2d       	mov	r25, r0
    15fa:	87 9f       	mul	r24, r23
    15fc:	80 2d       	mov	r24, r0
    15fe:	91 0d       	add	r25, r1
    1600:	11 24       	eor	r1, r1
    1602:	08 95       	ret

00001604 <sprintf>:
    1604:	ae e0       	ldi	r26, 0x0E	; 14
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e7 e0       	ldi	r30, 0x07	; 7
    160a:	fb e0       	ldi	r31, 0x0B	; 11
    160c:	c6 c2       	rjmp	.+1420   	; 0x1b9a <__prologue_saves__+0x1c>
    160e:	0d 89       	ldd	r16, Y+21	; 0x15
    1610:	1e 89       	ldd	r17, Y+22	; 0x16
    1612:	86 e0       	ldi	r24, 0x06	; 6
    1614:	8c 83       	std	Y+4, r24	; 0x04
    1616:	09 83       	std	Y+1, r16	; 0x01
    1618:	1a 83       	std	Y+2, r17	; 0x02
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	9f e7       	ldi	r25, 0x7F	; 127
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	ae 01       	movw	r20, r28
    1624:	47 5e       	subi	r20, 0xE7	; 231
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	6f 89       	ldd	r22, Y+23	; 0x17
    162a:	78 8d       	ldd	r23, Y+24	; 0x18
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	08 d0       	rcall	.+16     	; 0x1642 <vfprintf>
    1632:	ef 81       	ldd	r30, Y+7	; 0x07
    1634:	f8 85       	ldd	r31, Y+8	; 0x08
    1636:	e0 0f       	add	r30, r16
    1638:	f1 1f       	adc	r31, r17
    163a:	10 82       	st	Z, r1
    163c:	2e 96       	adiw	r28, 0x0e	; 14
    163e:	e4 e0       	ldi	r30, 0x04	; 4
    1640:	c5 c2       	rjmp	.+1418   	; 0x1bcc <__epilogue_restores__+0x1c>

00001642 <vfprintf>:
    1642:	ab e0       	ldi	r26, 0x0B	; 11
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e6 e2       	ldi	r30, 0x26	; 38
    1648:	fb e0       	ldi	r31, 0x0B	; 11
    164a:	99 c2       	rjmp	.+1330   	; 0x1b7e <__prologue_saves__>
    164c:	6c 01       	movw	r12, r24
    164e:	7b 01       	movw	r14, r22
    1650:	8a 01       	movw	r16, r20
    1652:	fc 01       	movw	r30, r24
    1654:	16 82       	std	Z+6, r1	; 0x06
    1656:	17 82       	std	Z+7, r1	; 0x07
    1658:	83 81       	ldd	r24, Z+3	; 0x03
    165a:	81 ff       	sbrs	r24, 1
    165c:	bf c1       	rjmp	.+894    	; 0x19dc <vfprintf+0x39a>
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	3c 01       	movw	r6, r24
    1664:	f6 01       	movw	r30, r12
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	f7 01       	movw	r30, r14
    166a:	93 fd       	sbrc	r25, 3
    166c:	85 91       	lpm	r24, Z+
    166e:	93 ff       	sbrs	r25, 3
    1670:	81 91       	ld	r24, Z+
    1672:	7f 01       	movw	r14, r30
    1674:	88 23       	and	r24, r24
    1676:	09 f4       	brne	.+2      	; 0x167a <vfprintf+0x38>
    1678:	ad c1       	rjmp	.+858    	; 0x19d4 <vfprintf+0x392>
    167a:	85 32       	cpi	r24, 0x25	; 37
    167c:	39 f4       	brne	.+14     	; 0x168c <vfprintf+0x4a>
    167e:	93 fd       	sbrc	r25, 3
    1680:	85 91       	lpm	r24, Z+
    1682:	93 ff       	sbrs	r25, 3
    1684:	81 91       	ld	r24, Z+
    1686:	7f 01       	movw	r14, r30
    1688:	85 32       	cpi	r24, 0x25	; 37
    168a:	21 f4       	brne	.+8      	; 0x1694 <vfprintf+0x52>
    168c:	b6 01       	movw	r22, r12
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	c3 d1       	rcall	.+902    	; 0x1a18 <fputc>
    1692:	e8 cf       	rjmp	.-48     	; 0x1664 <vfprintf+0x22>
    1694:	91 2c       	mov	r9, r1
    1696:	21 2c       	mov	r2, r1
    1698:	31 2c       	mov	r3, r1
    169a:	ff e1       	ldi	r31, 0x1F	; 31
    169c:	f3 15       	cp	r31, r3
    169e:	d8 f0       	brcs	.+54     	; 0x16d6 <vfprintf+0x94>
    16a0:	8b 32       	cpi	r24, 0x2B	; 43
    16a2:	79 f0       	breq	.+30     	; 0x16c2 <vfprintf+0x80>
    16a4:	38 f4       	brcc	.+14     	; 0x16b4 <vfprintf+0x72>
    16a6:	80 32       	cpi	r24, 0x20	; 32
    16a8:	79 f0       	breq	.+30     	; 0x16c8 <vfprintf+0x86>
    16aa:	83 32       	cpi	r24, 0x23	; 35
    16ac:	a1 f4       	brne	.+40     	; 0x16d6 <vfprintf+0x94>
    16ae:	23 2d       	mov	r18, r3
    16b0:	20 61       	ori	r18, 0x10	; 16
    16b2:	1d c0       	rjmp	.+58     	; 0x16ee <vfprintf+0xac>
    16b4:	8d 32       	cpi	r24, 0x2D	; 45
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <vfprintf+0x8e>
    16b8:	80 33       	cpi	r24, 0x30	; 48
    16ba:	69 f4       	brne	.+26     	; 0x16d6 <vfprintf+0x94>
    16bc:	23 2d       	mov	r18, r3
    16be:	21 60       	ori	r18, 0x01	; 1
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <vfprintf+0xac>
    16c2:	83 2d       	mov	r24, r3
    16c4:	82 60       	ori	r24, 0x02	; 2
    16c6:	38 2e       	mov	r3, r24
    16c8:	e3 2d       	mov	r30, r3
    16ca:	e4 60       	ori	r30, 0x04	; 4
    16cc:	3e 2e       	mov	r3, r30
    16ce:	2a c0       	rjmp	.+84     	; 0x1724 <vfprintf+0xe2>
    16d0:	f3 2d       	mov	r31, r3
    16d2:	f8 60       	ori	r31, 0x08	; 8
    16d4:	1d c0       	rjmp	.+58     	; 0x1710 <vfprintf+0xce>
    16d6:	37 fc       	sbrc	r3, 7
    16d8:	2d c0       	rjmp	.+90     	; 0x1734 <vfprintf+0xf2>
    16da:	20 ed       	ldi	r18, 0xD0	; 208
    16dc:	28 0f       	add	r18, r24
    16de:	2a 30       	cpi	r18, 0x0A	; 10
    16e0:	40 f0       	brcs	.+16     	; 0x16f2 <vfprintf+0xb0>
    16e2:	8e 32       	cpi	r24, 0x2E	; 46
    16e4:	b9 f4       	brne	.+46     	; 0x1714 <vfprintf+0xd2>
    16e6:	36 fc       	sbrc	r3, 6
    16e8:	75 c1       	rjmp	.+746    	; 0x19d4 <vfprintf+0x392>
    16ea:	23 2d       	mov	r18, r3
    16ec:	20 64       	ori	r18, 0x40	; 64
    16ee:	32 2e       	mov	r3, r18
    16f0:	19 c0       	rjmp	.+50     	; 0x1724 <vfprintf+0xe2>
    16f2:	36 fe       	sbrs	r3, 6
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0xc0>
    16f6:	8a e0       	ldi	r24, 0x0A	; 10
    16f8:	98 9e       	mul	r9, r24
    16fa:	20 0d       	add	r18, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	92 2e       	mov	r9, r18
    1700:	11 c0       	rjmp	.+34     	; 0x1724 <vfprintf+0xe2>
    1702:	ea e0       	ldi	r30, 0x0A	; 10
    1704:	2e 9e       	mul	r2, r30
    1706:	20 0d       	add	r18, r0
    1708:	11 24       	eor	r1, r1
    170a:	22 2e       	mov	r2, r18
    170c:	f3 2d       	mov	r31, r3
    170e:	f0 62       	ori	r31, 0x20	; 32
    1710:	3f 2e       	mov	r3, r31
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <vfprintf+0xe2>
    1714:	8c 36       	cpi	r24, 0x6C	; 108
    1716:	21 f4       	brne	.+8      	; 0x1720 <vfprintf+0xde>
    1718:	83 2d       	mov	r24, r3
    171a:	80 68       	ori	r24, 0x80	; 128
    171c:	38 2e       	mov	r3, r24
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0xe2>
    1720:	88 36       	cpi	r24, 0x68	; 104
    1722:	41 f4       	brne	.+16     	; 0x1734 <vfprintf+0xf2>
    1724:	f7 01       	movw	r30, r14
    1726:	93 fd       	sbrc	r25, 3
    1728:	85 91       	lpm	r24, Z+
    172a:	93 ff       	sbrs	r25, 3
    172c:	81 91       	ld	r24, Z+
    172e:	7f 01       	movw	r14, r30
    1730:	81 11       	cpse	r24, r1
    1732:	b3 cf       	rjmp	.-154    	; 0x169a <vfprintf+0x58>
    1734:	98 2f       	mov	r25, r24
    1736:	9f 7d       	andi	r25, 0xDF	; 223
    1738:	95 54       	subi	r25, 0x45	; 69
    173a:	93 30       	cpi	r25, 0x03	; 3
    173c:	28 f4       	brcc	.+10     	; 0x1748 <vfprintf+0x106>
    173e:	0c 5f       	subi	r16, 0xFC	; 252
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	9f e3       	ldi	r25, 0x3F	; 63
    1744:	99 83       	std	Y+1, r25	; 0x01
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <vfprintf+0x120>
    1748:	83 36       	cpi	r24, 0x63	; 99
    174a:	31 f0       	breq	.+12     	; 0x1758 <vfprintf+0x116>
    174c:	83 37       	cpi	r24, 0x73	; 115
    174e:	71 f0       	breq	.+28     	; 0x176c <vfprintf+0x12a>
    1750:	83 35       	cpi	r24, 0x53	; 83
    1752:	09 f0       	breq	.+2      	; 0x1756 <vfprintf+0x114>
    1754:	55 c0       	rjmp	.+170    	; 0x1800 <vfprintf+0x1be>
    1756:	20 c0       	rjmp	.+64     	; 0x1798 <vfprintf+0x156>
    1758:	f8 01       	movw	r30, r16
    175a:	80 81       	ld	r24, Z
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	0e 5f       	subi	r16, 0xFE	; 254
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	88 24       	eor	r8, r8
    1764:	83 94       	inc	r8
    1766:	91 2c       	mov	r9, r1
    1768:	53 01       	movw	r10, r6
    176a:	12 c0       	rjmp	.+36     	; 0x1790 <vfprintf+0x14e>
    176c:	28 01       	movw	r4, r16
    176e:	f2 e0       	ldi	r31, 0x02	; 2
    1770:	4f 0e       	add	r4, r31
    1772:	51 1c       	adc	r5, r1
    1774:	f8 01       	movw	r30, r16
    1776:	a0 80       	ld	r10, Z
    1778:	b1 80       	ldd	r11, Z+1	; 0x01
    177a:	36 fe       	sbrs	r3, 6
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <vfprintf+0x142>
    177e:	69 2d       	mov	r22, r9
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <vfprintf+0x146>
    1784:	6f ef       	ldi	r22, 0xFF	; 255
    1786:	7f ef       	ldi	r23, 0xFF	; 255
    1788:	c5 01       	movw	r24, r10
    178a:	3b d1       	rcall	.+630    	; 0x1a02 <strnlen>
    178c:	4c 01       	movw	r8, r24
    178e:	82 01       	movw	r16, r4
    1790:	f3 2d       	mov	r31, r3
    1792:	ff 77       	andi	r31, 0x7F	; 127
    1794:	3f 2e       	mov	r3, r31
    1796:	15 c0       	rjmp	.+42     	; 0x17c2 <vfprintf+0x180>
    1798:	28 01       	movw	r4, r16
    179a:	22 e0       	ldi	r18, 0x02	; 2
    179c:	42 0e       	add	r4, r18
    179e:	51 1c       	adc	r5, r1
    17a0:	f8 01       	movw	r30, r16
    17a2:	a0 80       	ld	r10, Z
    17a4:	b1 80       	ldd	r11, Z+1	; 0x01
    17a6:	36 fe       	sbrs	r3, 6
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x16e>
    17aa:	69 2d       	mov	r22, r9
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x172>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	c5 01       	movw	r24, r10
    17b6:	1a d1       	rcall	.+564    	; 0x19ec <strnlen_P>
    17b8:	4c 01       	movw	r8, r24
    17ba:	f3 2d       	mov	r31, r3
    17bc:	f0 68       	ori	r31, 0x80	; 128
    17be:	3f 2e       	mov	r3, r31
    17c0:	82 01       	movw	r16, r4
    17c2:	33 fc       	sbrc	r3, 3
    17c4:	19 c0       	rjmp	.+50     	; 0x17f8 <vfprintf+0x1b6>
    17c6:	82 2d       	mov	r24, r2
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	88 16       	cp	r8, r24
    17cc:	99 06       	cpc	r9, r25
    17ce:	a0 f4       	brcc	.+40     	; 0x17f8 <vfprintf+0x1b6>
    17d0:	b6 01       	movw	r22, r12
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	20 d1       	rcall	.+576    	; 0x1a18 <fputc>
    17d8:	2a 94       	dec	r2
    17da:	f5 cf       	rjmp	.-22     	; 0x17c6 <vfprintf+0x184>
    17dc:	f5 01       	movw	r30, r10
    17de:	37 fc       	sbrc	r3, 7
    17e0:	85 91       	lpm	r24, Z+
    17e2:	37 fe       	sbrs	r3, 7
    17e4:	81 91       	ld	r24, Z+
    17e6:	5f 01       	movw	r10, r30
    17e8:	b6 01       	movw	r22, r12
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	15 d1       	rcall	.+554    	; 0x1a18 <fputc>
    17ee:	21 10       	cpse	r2, r1
    17f0:	2a 94       	dec	r2
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	82 1a       	sub	r8, r18
    17f6:	91 08       	sbc	r9, r1
    17f8:	81 14       	cp	r8, r1
    17fa:	91 04       	cpc	r9, r1
    17fc:	79 f7       	brne	.-34     	; 0x17dc <vfprintf+0x19a>
    17fe:	e1 c0       	rjmp	.+450    	; 0x19c2 <vfprintf+0x380>
    1800:	84 36       	cpi	r24, 0x64	; 100
    1802:	11 f0       	breq	.+4      	; 0x1808 <vfprintf+0x1c6>
    1804:	89 36       	cpi	r24, 0x69	; 105
    1806:	39 f5       	brne	.+78     	; 0x1856 <vfprintf+0x214>
    1808:	f8 01       	movw	r30, r16
    180a:	37 fe       	sbrs	r3, 7
    180c:	07 c0       	rjmp	.+14     	; 0x181c <vfprintf+0x1da>
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	0c 5f       	subi	r16, 0xFC	; 252
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	08 c0       	rjmp	.+16     	; 0x182c <vfprintf+0x1ea>
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	07 2e       	mov	r0, r23
    1822:	00 0c       	add	r0, r0
    1824:	88 0b       	sbc	r24, r24
    1826:	99 0b       	sbc	r25, r25
    1828:	0e 5f       	subi	r16, 0xFE	; 254
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	f3 2d       	mov	r31, r3
    182e:	ff 76       	andi	r31, 0x6F	; 111
    1830:	3f 2e       	mov	r3, r31
    1832:	97 ff       	sbrs	r25, 7
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x206>
    1836:	90 95       	com	r25
    1838:	80 95       	com	r24
    183a:	70 95       	com	r23
    183c:	61 95       	neg	r22
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	f0 68       	ori	r31, 0x80	; 128
    1846:	3f 2e       	mov	r3, r31
    1848:	2a e0       	ldi	r18, 0x0A	; 10
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	a3 01       	movw	r20, r6
    184e:	20 d1       	rcall	.+576    	; 0x1a90 <__ultoa_invert>
    1850:	88 2e       	mov	r8, r24
    1852:	86 18       	sub	r8, r6
    1854:	44 c0       	rjmp	.+136    	; 0x18de <vfprintf+0x29c>
    1856:	85 37       	cpi	r24, 0x75	; 117
    1858:	31 f4       	brne	.+12     	; 0x1866 <vfprintf+0x224>
    185a:	23 2d       	mov	r18, r3
    185c:	2f 7e       	andi	r18, 0xEF	; 239
    185e:	b2 2e       	mov	r11, r18
    1860:	2a e0       	ldi	r18, 0x0A	; 10
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	25 c0       	rjmp	.+74     	; 0x18b0 <vfprintf+0x26e>
    1866:	93 2d       	mov	r25, r3
    1868:	99 7f       	andi	r25, 0xF9	; 249
    186a:	b9 2e       	mov	r11, r25
    186c:	8f 36       	cpi	r24, 0x6F	; 111
    186e:	c1 f0       	breq	.+48     	; 0x18a0 <vfprintf+0x25e>
    1870:	18 f4       	brcc	.+6      	; 0x1878 <vfprintf+0x236>
    1872:	88 35       	cpi	r24, 0x58	; 88
    1874:	79 f0       	breq	.+30     	; 0x1894 <vfprintf+0x252>
    1876:	ae c0       	rjmp	.+348    	; 0x19d4 <vfprintf+0x392>
    1878:	80 37       	cpi	r24, 0x70	; 112
    187a:	19 f0       	breq	.+6      	; 0x1882 <vfprintf+0x240>
    187c:	88 37       	cpi	r24, 0x78	; 120
    187e:	21 f0       	breq	.+8      	; 0x1888 <vfprintf+0x246>
    1880:	a9 c0       	rjmp	.+338    	; 0x19d4 <vfprintf+0x392>
    1882:	e9 2f       	mov	r30, r25
    1884:	e0 61       	ori	r30, 0x10	; 16
    1886:	be 2e       	mov	r11, r30
    1888:	b4 fe       	sbrs	r11, 4
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <vfprintf+0x264>
    188c:	fb 2d       	mov	r31, r11
    188e:	f4 60       	ori	r31, 0x04	; 4
    1890:	bf 2e       	mov	r11, r31
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <vfprintf+0x264>
    1894:	34 fe       	sbrs	r3, 4
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <vfprintf+0x26a>
    1898:	29 2f       	mov	r18, r25
    189a:	26 60       	ori	r18, 0x06	; 6
    189c:	b2 2e       	mov	r11, r18
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x26a>
    18a0:	28 e0       	ldi	r18, 0x08	; 8
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x26e>
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x26e>
    18ac:	20 e1       	ldi	r18, 0x10	; 16
    18ae:	32 e0       	ldi	r19, 0x02	; 2
    18b0:	f8 01       	movw	r30, r16
    18b2:	b7 fe       	sbrs	r11, 7
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <vfprintf+0x282>
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0c 5f       	subi	r16, 0xFC	; 252
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x28e>
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 5f       	subi	r16, 0xFE	; 254
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	a3 01       	movw	r20, r6
    18d2:	de d0       	rcall	.+444    	; 0x1a90 <__ultoa_invert>
    18d4:	88 2e       	mov	r8, r24
    18d6:	86 18       	sub	r8, r6
    18d8:	fb 2d       	mov	r31, r11
    18da:	ff 77       	andi	r31, 0x7F	; 127
    18dc:	3f 2e       	mov	r3, r31
    18de:	36 fe       	sbrs	r3, 6
    18e0:	0d c0       	rjmp	.+26     	; 0x18fc <vfprintf+0x2ba>
    18e2:	23 2d       	mov	r18, r3
    18e4:	2e 7f       	andi	r18, 0xFE	; 254
    18e6:	a2 2e       	mov	r10, r18
    18e8:	89 14       	cp	r8, r9
    18ea:	58 f4       	brcc	.+22     	; 0x1902 <vfprintf+0x2c0>
    18ec:	34 fe       	sbrs	r3, 4
    18ee:	0b c0       	rjmp	.+22     	; 0x1906 <vfprintf+0x2c4>
    18f0:	32 fc       	sbrc	r3, 2
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <vfprintf+0x2c4>
    18f4:	83 2d       	mov	r24, r3
    18f6:	8e 7e       	andi	r24, 0xEE	; 238
    18f8:	a8 2e       	mov	r10, r24
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <vfprintf+0x2c4>
    18fc:	b8 2c       	mov	r11, r8
    18fe:	a3 2c       	mov	r10, r3
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <vfprintf+0x2c6>
    1902:	b8 2c       	mov	r11, r8
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x2c6>
    1906:	b9 2c       	mov	r11, r9
    1908:	a4 fe       	sbrs	r10, 4
    190a:	0f c0       	rjmp	.+30     	; 0x192a <vfprintf+0x2e8>
    190c:	fe 01       	movw	r30, r28
    190e:	e8 0d       	add	r30, r8
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	80 33       	cpi	r24, 0x30	; 48
    1916:	21 f4       	brne	.+8      	; 0x1920 <vfprintf+0x2de>
    1918:	9a 2d       	mov	r25, r10
    191a:	99 7e       	andi	r25, 0xE9	; 233
    191c:	a9 2e       	mov	r10, r25
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <vfprintf+0x2f0>
    1920:	a2 fe       	sbrs	r10, 2
    1922:	06 c0       	rjmp	.+12     	; 0x1930 <vfprintf+0x2ee>
    1924:	b3 94       	inc	r11
    1926:	b3 94       	inc	r11
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <vfprintf+0x2f0>
    192a:	8a 2d       	mov	r24, r10
    192c:	86 78       	andi	r24, 0x86	; 134
    192e:	09 f0       	breq	.+2      	; 0x1932 <vfprintf+0x2f0>
    1930:	b3 94       	inc	r11
    1932:	a3 fc       	sbrc	r10, 3
    1934:	10 c0       	rjmp	.+32     	; 0x1956 <vfprintf+0x314>
    1936:	a0 fe       	sbrs	r10, 0
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x304>
    193a:	b2 14       	cp	r11, r2
    193c:	80 f4       	brcc	.+32     	; 0x195e <vfprintf+0x31c>
    193e:	28 0c       	add	r2, r8
    1940:	92 2c       	mov	r9, r2
    1942:	9b 18       	sub	r9, r11
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <vfprintf+0x31e>
    1946:	b2 14       	cp	r11, r2
    1948:	58 f4       	brcc	.+22     	; 0x1960 <vfprintf+0x31e>
    194a:	b6 01       	movw	r22, r12
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	63 d0       	rcall	.+198    	; 0x1a18 <fputc>
    1952:	b3 94       	inc	r11
    1954:	f8 cf       	rjmp	.-16     	; 0x1946 <vfprintf+0x304>
    1956:	b2 14       	cp	r11, r2
    1958:	18 f4       	brcc	.+6      	; 0x1960 <vfprintf+0x31e>
    195a:	2b 18       	sub	r2, r11
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <vfprintf+0x320>
    195e:	98 2c       	mov	r9, r8
    1960:	21 2c       	mov	r2, r1
    1962:	a4 fe       	sbrs	r10, 4
    1964:	0f c0       	rjmp	.+30     	; 0x1984 <vfprintf+0x342>
    1966:	b6 01       	movw	r22, r12
    1968:	80 e3       	ldi	r24, 0x30	; 48
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	55 d0       	rcall	.+170    	; 0x1a18 <fputc>
    196e:	a2 fe       	sbrs	r10, 2
    1970:	16 c0       	rjmp	.+44     	; 0x199e <vfprintf+0x35c>
    1972:	a1 fc       	sbrc	r10, 1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <vfprintf+0x33a>
    1976:	88 e7       	ldi	r24, 0x78	; 120
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x33e>
    197c:	88 e5       	ldi	r24, 0x58	; 88
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	b6 01       	movw	r22, r12
    1982:	0c c0       	rjmp	.+24     	; 0x199c <vfprintf+0x35a>
    1984:	8a 2d       	mov	r24, r10
    1986:	86 78       	andi	r24, 0x86	; 134
    1988:	51 f0       	breq	.+20     	; 0x199e <vfprintf+0x35c>
    198a:	a1 fe       	sbrs	r10, 1
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <vfprintf+0x350>
    198e:	8b e2       	ldi	r24, 0x2B	; 43
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <vfprintf+0x352>
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	a7 fc       	sbrc	r10, 7
    1996:	8d e2       	ldi	r24, 0x2D	; 45
    1998:	b6 01       	movw	r22, r12
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	3d d0       	rcall	.+122    	; 0x1a18 <fputc>
    199e:	89 14       	cp	r8, r9
    19a0:	30 f4       	brcc	.+12     	; 0x19ae <vfprintf+0x36c>
    19a2:	b6 01       	movw	r22, r12
    19a4:	80 e3       	ldi	r24, 0x30	; 48
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	37 d0       	rcall	.+110    	; 0x1a18 <fputc>
    19aa:	9a 94       	dec	r9
    19ac:	f8 cf       	rjmp	.-16     	; 0x199e <vfprintf+0x35c>
    19ae:	8a 94       	dec	r8
    19b0:	f3 01       	movw	r30, r6
    19b2:	e8 0d       	add	r30, r8
    19b4:	f1 1d       	adc	r31, r1
    19b6:	80 81       	ld	r24, Z
    19b8:	b6 01       	movw	r22, r12
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	2d d0       	rcall	.+90     	; 0x1a18 <fputc>
    19be:	81 10       	cpse	r8, r1
    19c0:	f6 cf       	rjmp	.-20     	; 0x19ae <vfprintf+0x36c>
    19c2:	22 20       	and	r2, r2
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <vfprintf+0x386>
    19c6:	4e ce       	rjmp	.-868    	; 0x1664 <vfprintf+0x22>
    19c8:	b6 01       	movw	r22, r12
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	24 d0       	rcall	.+72     	; 0x1a18 <fputc>
    19d0:	2a 94       	dec	r2
    19d2:	f7 cf       	rjmp	.-18     	; 0x19c2 <vfprintf+0x380>
    19d4:	f6 01       	movw	r30, r12
    19d6:	86 81       	ldd	r24, Z+6	; 0x06
    19d8:	97 81       	ldd	r25, Z+7	; 0x07
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <vfprintf+0x39e>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	2b 96       	adiw	r28, 0x0b	; 11
    19e2:	e2 e1       	ldi	r30, 0x12	; 18
    19e4:	e5 c0       	rjmp	.+458    	; 0x1bb0 <__epilogue_restores__>

000019e6 <__ctype_isfalse>:
    19e6:	99 27       	eor	r25, r25
    19e8:	88 27       	eor	r24, r24

000019ea <__ctype_istrue>:
    19ea:	08 95       	ret

000019ec <strnlen_P>:
    19ec:	fc 01       	movw	r30, r24
    19ee:	05 90       	lpm	r0, Z+
    19f0:	61 50       	subi	r22, 0x01	; 1
    19f2:	70 40       	sbci	r23, 0x00	; 0
    19f4:	01 10       	cpse	r0, r1
    19f6:	d8 f7       	brcc	.-10     	; 0x19ee <strnlen_P+0x2>
    19f8:	80 95       	com	r24
    19fa:	90 95       	com	r25
    19fc:	8e 0f       	add	r24, r30
    19fe:	9f 1f       	adc	r25, r31
    1a00:	08 95       	ret

00001a02 <strnlen>:
    1a02:	fc 01       	movw	r30, r24
    1a04:	61 50       	subi	r22, 0x01	; 1
    1a06:	70 40       	sbci	r23, 0x00	; 0
    1a08:	01 90       	ld	r0, Z+
    1a0a:	01 10       	cpse	r0, r1
    1a0c:	d8 f7       	brcc	.-10     	; 0x1a04 <strnlen+0x2>
    1a0e:	80 95       	com	r24
    1a10:	90 95       	com	r25
    1a12:	8e 0f       	add	r24, r30
    1a14:	9f 1f       	adc	r25, r31
    1a16:	08 95       	ret

00001a18 <fputc>:
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	fb 01       	movw	r30, r22
    1a22:	23 81       	ldd	r18, Z+3	; 0x03
    1a24:	21 fd       	sbrc	r18, 1
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <fputc+0x16>
    1a28:	8f ef       	ldi	r24, 0xFF	; 255
    1a2a:	9f ef       	ldi	r25, 0xFF	; 255
    1a2c:	2c c0       	rjmp	.+88     	; 0x1a86 <fputc+0x6e>
    1a2e:	22 ff       	sbrs	r18, 2
    1a30:	16 c0       	rjmp	.+44     	; 0x1a5e <fputc+0x46>
    1a32:	46 81       	ldd	r20, Z+6	; 0x06
    1a34:	57 81       	ldd	r21, Z+7	; 0x07
    1a36:	24 81       	ldd	r18, Z+4	; 0x04
    1a38:	35 81       	ldd	r19, Z+5	; 0x05
    1a3a:	42 17       	cp	r20, r18
    1a3c:	53 07       	cpc	r21, r19
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <fputc+0x38>
    1a40:	a0 81       	ld	r26, Z
    1a42:	b1 81       	ldd	r27, Z+1	; 0x01
    1a44:	9d 01       	movw	r18, r26
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	20 83       	st	Z, r18
    1a4c:	31 83       	std	Z+1, r19	; 0x01
    1a4e:	8c 93       	st	X, r24
    1a50:	26 81       	ldd	r18, Z+6	; 0x06
    1a52:	37 81       	ldd	r19, Z+7	; 0x07
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	26 83       	std	Z+6, r18	; 0x06
    1a5a:	37 83       	std	Z+7, r19	; 0x07
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <fputc+0x6e>
    1a5e:	8b 01       	movw	r16, r22
    1a60:	ec 01       	movw	r28, r24
    1a62:	fb 01       	movw	r30, r22
    1a64:	00 84       	ldd	r0, Z+8	; 0x08
    1a66:	f1 85       	ldd	r31, Z+9	; 0x09
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	09 95       	icall
    1a6c:	89 2b       	or	r24, r25
    1a6e:	e1 f6       	brne	.-72     	; 0x1a28 <fputc+0x10>
    1a70:	d8 01       	movw	r26, r16
    1a72:	16 96       	adiw	r26, 0x06	; 6
    1a74:	8d 91       	ld	r24, X+
    1a76:	9c 91       	ld	r25, X
    1a78:	17 97       	sbiw	r26, 0x07	; 7
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	8d 93       	st	X+, r24
    1a80:	9c 93       	st	X, r25
    1a82:	17 97       	sbiw	r26, 0x07	; 7
    1a84:	ce 01       	movw	r24, r28
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <__ultoa_invert>:
    1a90:	fa 01       	movw	r30, r20
    1a92:	aa 27       	eor	r26, r26
    1a94:	28 30       	cpi	r18, 0x08	; 8
    1a96:	51 f1       	breq	.+84     	; 0x1aec <__ultoa_invert+0x5c>
    1a98:	20 31       	cpi	r18, 0x10	; 16
    1a9a:	81 f1       	breq	.+96     	; 0x1afc <__ultoa_invert+0x6c>
    1a9c:	e8 94       	clt
    1a9e:	6f 93       	push	r22
    1aa0:	6e 7f       	andi	r22, 0xFE	; 254
    1aa2:	6e 5f       	subi	r22, 0xFE	; 254
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	af 4f       	sbci	r26, 0xFF	; 255
    1aac:	b1 e0       	ldi	r27, 0x01	; 1
    1aae:	3e d0       	rcall	.+124    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab0:	b4 e0       	ldi	r27, 0x04	; 4
    1ab2:	3c d0       	rcall	.+120    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab4:	67 0f       	add	r22, r23
    1ab6:	78 1f       	adc	r23, r24
    1ab8:	89 1f       	adc	r24, r25
    1aba:	9a 1f       	adc	r25, r26
    1abc:	a1 1d       	adc	r26, r1
    1abe:	68 0f       	add	r22, r24
    1ac0:	79 1f       	adc	r23, r25
    1ac2:	8a 1f       	adc	r24, r26
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	6a 0f       	add	r22, r26
    1aca:	71 1d       	adc	r23, r1
    1acc:	81 1d       	adc	r24, r1
    1ace:	91 1d       	adc	r25, r1
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	20 d0       	rcall	.+64     	; 0x1b14 <__ultoa_invert+0x84>
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <__ultoa_invert+0x48>
    1ad6:	68 94       	set
    1ad8:	3f 91       	pop	r19
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	26 9f       	mul	r18, r22
    1ade:	11 24       	eor	r1, r1
    1ae0:	30 19       	sub	r19, r0
    1ae2:	30 5d       	subi	r19, 0xD0	; 208
    1ae4:	31 93       	st	Z+, r19
    1ae6:	de f6       	brtc	.-74     	; 0x1a9e <__ultoa_invert+0xe>
    1ae8:	cf 01       	movw	r24, r30
    1aea:	08 95       	ret
    1aec:	46 2f       	mov	r20, r22
    1aee:	47 70       	andi	r20, 0x07	; 7
    1af0:	40 5d       	subi	r20, 0xD0	; 208
    1af2:	41 93       	st	Z+, r20
    1af4:	b3 e0       	ldi	r27, 0x03	; 3
    1af6:	0f d0       	rcall	.+30     	; 0x1b16 <__ultoa_invert+0x86>
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x5c>
    1afa:	f6 cf       	rjmp	.-20     	; 0x1ae8 <__ultoa_invert+0x58>
    1afc:	46 2f       	mov	r20, r22
    1afe:	4f 70       	andi	r20, 0x0F	; 15
    1b00:	40 5d       	subi	r20, 0xD0	; 208
    1b02:	4a 33       	cpi	r20, 0x3A	; 58
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__ultoa_invert+0x7c>
    1b06:	49 5d       	subi	r20, 0xD9	; 217
    1b08:	31 fd       	sbrc	r19, 1
    1b0a:	40 52       	subi	r20, 0x20	; 32
    1b0c:	41 93       	st	Z+, r20
    1b0e:	02 d0       	rcall	.+4      	; 0x1b14 <__ultoa_invert+0x84>
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__ultoa_invert+0x6c>
    1b12:	ea cf       	rjmp	.-44     	; 0x1ae8 <__ultoa_invert+0x58>
    1b14:	b4 e0       	ldi	r27, 0x04	; 4
    1b16:	a6 95       	lsr	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	ba 95       	dec	r27
    1b22:	c9 f7       	brne	.-14     	; 0x1b16 <__ultoa_invert+0x86>
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 05       	cpc	r22, r1
    1b28:	71 05       	cpc	r23, r1
    1b2a:	08 95       	ret
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	ac 01       	movw	r20, r24
    1b30:	0a 2e       	mov	r0, r26
    1b32:	06 94       	lsr	r0
    1b34:	57 95       	ror	r21
    1b36:	47 95       	ror	r20
    1b38:	37 95       	ror	r19
    1b3a:	27 95       	ror	r18
    1b3c:	ba 95       	dec	r27
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0xa2>
    1b40:	62 0f       	add	r22, r18
    1b42:	73 1f       	adc	r23, r19
    1b44:	84 1f       	adc	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	a0 1d       	adc	r26, r0
    1b4a:	08 95       	ret

00001b4c <__mulsi3>:
    1b4c:	db 01       	movw	r26, r22
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	0b d0       	rcall	.+22     	; 0x1b6a <__muluhisi3>
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	a2 9f       	mul	r26, r18
    1b5a:	80 0d       	add	r24, r0
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	a3 9f       	mul	r26, r19
    1b60:	90 0d       	add	r25, r0
    1b62:	b2 9f       	mul	r27, r18
    1b64:	90 0d       	add	r25, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 95       	ret

00001b6a <__muluhisi3>:
    1b6a:	3a d0       	rcall	.+116    	; 0x1be0 <__umulhisi3>
    1b6c:	a5 9f       	mul	r26, r21
    1b6e:	90 0d       	add	r25, r0
    1b70:	b4 9f       	mul	r27, r20
    1b72:	90 0d       	add	r25, r0
    1b74:	a4 9f       	mul	r26, r20
    1b76:	80 0d       	add	r24, r0
    1b78:	91 1d       	adc	r25, r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	08 95       	ret

00001b7e <__prologue_saves__>:
    1b7e:	2f 92       	push	r2
    1b80:	3f 92       	push	r3
    1b82:	4f 92       	push	r4
    1b84:	5f 92       	push	r5
    1b86:	6f 92       	push	r6
    1b88:	7f 92       	push	r7
    1b8a:	8f 92       	push	r8
    1b8c:	9f 92       	push	r9
    1b8e:	af 92       	push	r10
    1b90:	bf 92       	push	r11
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	ca 1b       	sub	r28, r26
    1ba8:	db 0b       	sbc	r29, r27
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	09 94       	ijmp

00001bb0 <__epilogue_restores__>:
    1bb0:	2a 88       	ldd	r2, Y+18	; 0x12
    1bb2:	39 88       	ldd	r3, Y+17	; 0x11
    1bb4:	48 88       	ldd	r4, Y+16	; 0x10
    1bb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bba:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bc2:	b9 84       	ldd	r11, Y+9	; 0x09
    1bc4:	c8 84       	ldd	r12, Y+8	; 0x08
    1bc6:	df 80       	ldd	r13, Y+7	; 0x07
    1bc8:	ee 80       	ldd	r14, Y+6	; 0x06
    1bca:	fd 80       	ldd	r15, Y+5	; 0x05
    1bcc:	0c 81       	ldd	r16, Y+4	; 0x04
    1bce:	1b 81       	ldd	r17, Y+3	; 0x03
    1bd0:	aa 81       	ldd	r26, Y+2	; 0x02
    1bd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1bd4:	ce 0f       	add	r28, r30
    1bd6:	d1 1d       	adc	r29, r1
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	ed 01       	movw	r28, r26
    1bde:	08 95       	ret

00001be0 <__umulhisi3>:
    1be0:	a2 9f       	mul	r26, r18
    1be2:	b0 01       	movw	r22, r0
    1be4:	b3 9f       	mul	r27, r19
    1be6:	c0 01       	movw	r24, r0
    1be8:	a3 9f       	mul	r26, r19
    1bea:	01 d0       	rcall	.+2      	; 0x1bee <__umulhisi3+0xe>
    1bec:	b2 9f       	mul	r27, r18
    1bee:	70 0d       	add	r23, r0
    1bf0:	81 1d       	adc	r24, r1
    1bf2:	11 24       	eor	r1, r1
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	08 95       	ret

00001bf8 <_exit>:
    1bf8:	f8 94       	cli

00001bfa <__stop_program>:
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <__stop_program>
