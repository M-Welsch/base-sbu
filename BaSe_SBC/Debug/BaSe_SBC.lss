
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000026  00008ab4  00000ab4  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000026  00803e00  00803e00  00000b6e  2**0
                  ALLOC
  4 .comment      0000008c  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000034e7  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cf6  00000000  00000000  000042d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f64  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000394  00000000  00000000  00006f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001158  00000000  00000000  000072c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d25  00000000  00000000  00008420  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00009145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	99 c0       	rjmp	.+306    	; 0x13a <__vector_3>
   8:	c0 c0       	rjmp	.+384    	; 0x18a <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 32       	cpi	r26, 0x26	; 38
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	20 d1       	rcall	.+576    	; 0x292 <main>
  52:	2e c5       	rjmp	.+2652   	; 0xab0 <_exit>

00000054 <__bad_interrupt>:
  54:	b6 c0       	rjmp	.+364    	; 0x1c2 <__vector_default>

00000056 <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
  56:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <flag_button_0_pressed>
	flag_heartbeat = false;
  5a:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <flag_heartbeat>
  5e:	08 95       	ret

00000060 <init_pins>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	e0 e0       	ldi	r30, 0x00	; 0
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	80 e8       	ldi	r24, 0x80	; 128
  66:	86 83       	std	Z+6, r24	; 0x06
  68:	81 83       	std	Z+1, r24	; 0x01
  6a:	80 e4       	ldi	r24, 0x40	; 64
  6c:	81 83       	std	Z+1, r24	; 0x01
  6e:	80 e1       	ldi	r24, 0x10	; 16
  70:	85 83       	std	Z+5, r24	; 0x05
  72:	81 83       	std	Z+1, r24	; 0x01
  74:	8c e0       	ldi	r24, 0x0C	; 12
  76:	82 83       	std	Z+2, r24	; 0x02
  78:	82 89       	ldd	r24, Z+18	; 0x12
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	82 8b       	std	Z+18, r24	; 0x12
  7e:	83 89       	ldd	r24, Z+19	; 0x13
  80:	88 60       	ori	r24, 0x08	; 8
  82:	83 8b       	std	Z+19, r24	; 0x13
  84:	e0 e2       	ldi	r30, 0x20	; 32
  86:	f4 e0       	ldi	r31, 0x04	; 4
  88:	83 e1       	ldi	r24, 0x13	; 19
  8a:	81 83       	std	Z+1, r24	; 0x01
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	82 83       	std	Z+2, r24	; 0x02
  90:	e0 e4       	ldi	r30, 0x40	; 64
  92:	f4 e0       	ldi	r31, 0x04	; 4
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	81 83       	std	Z+1, r24	; 0x01
  98:	15 82       	std	Z+5, r1	; 0x05
  9a:	08 95       	ret

0000009c <button_1_pressed>:
  9c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
  a0:	86 95       	lsr	r24
  a2:	86 95       	lsr	r24
  a4:	86 95       	lsr	r24
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	89 27       	eor	r24, r25
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <set_interrupts_for_buttons>:
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	f4 e0       	ldi	r31, 0x04	; 4
  b4:	82 89       	ldd	r24, Z+18	; 0x12
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	82 8b       	std	Z+18, r24	; 0x12
  ba:	83 89       	ldd	r24, Z+19	; 0x13
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	83 8b       	std	Z+19, r24	; 0x13
  c0:	08 95       	ret

000000c2 <led_hmi_off>:
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
  c8:	08 95       	ret

000000ca <toggle_hmi_led>:
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
  d0:	08 95       	ret

000000d2 <toggle_display_backlight>:
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
  d8:	08 95       	ret

000000da <display_enable>:
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f4 e0       	ldi	r31, 0x04	; 4
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	85 83       	std	Z+5, r24	; 0x05
  e2:	92 e4       	ldi	r25, 0x42	; 66
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <display_enable+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <display_enable+0x10>
  ea:	86 83       	std	Z+6, r24	; 0x06
  ec:	82 e4       	ldi	r24, 0x42	; 66
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <display_enable+0x14>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <display_enable+0x1a>
  f4:	08 95       	ret

000000f6 <set_display_data_pins>:
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	94 81       	ldd	r25, Z+4	; 0x04
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	94 83       	std	Z+4, r25	; 0x04
 100:	94 81       	ldd	r25, Z+4	; 0x04
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	98 2b       	or	r25, r24
 106:	94 83       	std	Z+4, r25	; 0x04
 108:	08 95       	ret

0000010a <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 110:	08 95       	ret

00000112 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 118:	08 95       	ret

0000011a <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
 11a:	e0 e2       	ldi	r30, 0x20	; 32
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
 122:	81 83       	std	Z+1, r24	; 0x01
 124:	08 95       	ret

00000126 <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
 12c:	08 95       	ret

0000012e <setup_heartbeat_interrupt>:
}

/* Heartbeat */
void setup_heartbeat_interrupt(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 12e:	e0 e2       	ldi	r30, 0x20	; 32
 130:	f4 e0       	ldi	r31, 0x04	; 4
 132:	85 89       	ldd	r24, Z+21	; 0x15
 134:	89 60       	ori	r24, 0x09	; 9
 136:	85 8b       	std	Z+21, r24	; 0x15
 138:	08 95       	ret

0000013a <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	/* EDIT: still true?? */
	if(PORTA_INTFLAGS & button_0) {
 14a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 14e:	82 ff       	sbrs	r24, 2
 150:	08 c0       	rjmp	.+16     	; 0x162 <__vector_3+0x28>
		flag_button_0_pressed = true;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
 158:	e9 e0       	ldi	r30, 0x09	; 9
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	80 81       	ld	r24, Z
 15e:	84 70       	andi	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
 162:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 166:	83 ff       	sbrs	r24, 3
 168:	08 c0       	rjmp	.+16     	; 0x17a <__vector_3+0x40>
		flag_button_1_pressed = true;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
 170:	e9 e0       	ldi	r30, 0x09	; 9
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	80 81       	ld	r24, Z
 176:	88 70       	andi	r24, 0x08	; 8
 178:	80 83       	st	Z, r24
	}
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_4>:

ISR(PORTB_PORT_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
 19a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 19e:	85 ff       	sbrs	r24, 5
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <__vector_4+0x28>
		flag_heartbeat = true;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
 1a8:	e9 e2       	ldi	r30, 0x29	; 41
 1aa:	f4 e0       	ldi	r31, 0x04	; 4
 1ac:	80 81       	ld	r24, Z
 1ae:	80 72       	andi	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_default>:

ISR(BADISR_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
 1da:	84 e1       	ldi	r24, 0x14	; 20
 1dc:	90 e0       	ldi	r25, 0x00	; 0
}

/* HMI LED */

void led_hmi_on(void) {
	PORTB.OUTSET = led_hmi;
 1de:	e0 e2       	ldi	r30, 0x20	; 32
 1e0:	f4 e0       	ldi	r31, 0x04	; 4
 1e2:	20 e1       	ldi	r18, 0x10	; 16
 1e4:	25 83       	std	Z+5, r18	; 0x05
 1e6:	af e4       	ldi	r26, 0x4F	; 79
 1e8:	b3 ec       	ldi	r27, 0xC3	; 195
 1ea:	11 97       	sbiw	r26, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <__vector_default+0x28>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <__vector_default+0x2e>
 1f0:	00 00       	nop
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
 1f2:	26 83       	std	Z+6, r18	; 0x06
 1f4:	af e4       	ldi	r26, 0x4F	; 79
 1f6:	b3 ec       	ldi	r27, 0xC3	; 195
 1f8:	11 97       	sbiw	r26, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_default+0x36>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_default+0x3c>
 1fe:	00 00       	nop
 200:	01 97       	sbiw	r24, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
 202:	81 f7       	brne	.-32     	; 0x1e4 <__vector_default+0x22>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <init_heatbeat_monitor>:
#include <stdio.h>

int heartbeat_count = 0;

void init_heatbeat_monitor(void) {
	setup_heartbeat_interrupt();
 21c:	88 df       	rcall	.-240    	; 0x12e <setup_heartbeat_interrupt>
 21e:	08 95       	ret

00000220 <heartbeat_monitor>:
}

void heartbeat_monitor(void) {
	if(flag_heartbeat) {
 220:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <flag_heartbeat>
 224:	88 23       	and	r24, r24
 226:	19 f0       	breq	.+6      	; 0x22e <heartbeat_monitor+0xe>
		toggle_display_backlight();
 228:	54 df       	rcall	.-344    	; 0xd2 <toggle_display_backlight>
		flag_heartbeat = false;
 22a:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <flag_heartbeat>
 22e:	08 95       	ret

00000230 <get_heartbeat_count>:
	USART0_sendString_w_eol(buffer);
}

int get_heartbeat_count() {
	return heartbeat_count;
}
 230:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <heartbeat_count>
 234:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <heartbeat_count+0x1>
 238:	08 95       	ret

0000023a <increment_or_reset_heartbeat_count>:

int increment_or_reset_heartbeat_count() {
	if (heartbeat_count == 255) {
 23a:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <heartbeat_count>
 23e:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <heartbeat_count+0x1>
 242:	8f 3f       	cpi	r24, 0xFF	; 255
 244:	91 05       	cpc	r25, r1
 246:	29 f4       	brne	.+10     	; 0x252 <increment_or_reset_heartbeat_count+0x18>
		heartbeat_count = 0;
 248:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <heartbeat_count>
 24c:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <heartbeat_count+0x1>
 250:	05 c0       	rjmp	.+10     	; 0x25c <increment_or_reset_heartbeat_count+0x22>
	} else {
		heartbeat_count++;
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <heartbeat_count>
 258:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <heartbeat_count+0x1>
	}
	return heartbeat_count;
 25c:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <heartbeat_count>
 260:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <heartbeat_count+0x1>
 264:	08 95       	ret

00000266 <send_heartbeat_count_to_bpi>:
		flag_heartbeat = false;
	}
}

void send_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_heartbeat_count());
 266:	e9 df       	rcall	.-46     	; 0x23a <increment_or_reset_heartbeat_count>
 268:	9f 93       	push	r25
 26a:	8f 93       	push	r24
 26c:	84 eb       	ldi	r24, 0xB4	; 180
 26e:	9a e8       	ldi	r25, 0x8A	; 138
 270:	9f 93       	push	r25
 272:	8f 93       	push	r24
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	9e e3       	ldi	r25, 0x3E	; 62
 278:	9f 93       	push	r25
 27a:	8f 93       	push	r24
 27c:	47 d1       	rcall	.+654    	; 0x50c <sprintf>
	USART0_sendString_w_eol(buffer);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	9e e3       	ldi	r25, 0x3E	; 62
 282:	40 d1       	rcall	.+640    	; 0x504 <USART0_sendString_w_eol>
}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	08 95       	ret

00000292 <main>:
#include "heartbeat.h"


int main(void)
{
	init_flags();
 292:	e1 de       	rcall	.-574    	; 0x56 <init_flags>
	init_pins();
 294:	e5 de       	rcall	.-566    	; 0x60 <init_pins>
	init_heatbeat_monitor();
 296:	c2 df       	rcall	.-124    	; 0x21c <init_heatbeat_monitor>
	set_interrupts_for_buttons();
 298:	0b df       	rcall	.-490    	; 0xb0 <set_interrupts_for_buttons>
	init_uart();
 29a:	01 d1       	rcall	.+514    	; 0x49e <init_uart>
	init_display();
 29c:	3b d0       	rcall	.+118    	; 0x314 <init_display>
	sei();
 29e:	78 94       	sei
	
	display_write_string("Hallo Welt!\n");
 2a0:	89 eb       	ldi	r24, 0xB9	; 185
 2a2:	9a e8       	ldi	r25, 0x8A	; 138
 2a4:	dd d0       	rcall	.+442    	; 0x460 <display_write_string>
	USART0_sendString("I:STARTED");
 2a6:	86 ec       	ldi	r24, 0xC6	; 198
 2a8:	9a e8       	ldi	r25, 0x8A	; 138
 2aa:	0b d1       	rcall	.+534    	; 0x4c2 <USART0_sendString>
		/* let hmi led toggle as a sbc heartbeat */
		
		_delay_ms(100);		
		toggle_hmi_led();
		send_heartbeat_count_to_bpi();
		sprintf(buffer, "H:%i", get_heartbeat_count());
 2ac:	04 eb       	ldi	r16, 0xB4	; 180
 2ae:	1a e8       	ldi	r17, 0x8A	; 138
 2b0:	c6 e0       	ldi	r28, 0x06	; 6
 2b2:	de e3       	ldi	r29, 0x3E	; 62
	display_write_string("Hallo Welt!\n");
	USART0_sendString("I:STARTED");
	
    while (1) 
    {
		heartbeat_monitor();
 2b4:	b5 df       	rcall	.-150    	; 0x220 <heartbeat_monitor>
		if(!flag_heartbeat_ok) {
 2b6:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
 2ba:	81 11       	cpse	r24, r1
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <main+0x2e>
			/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
			disable_usart_tx();
 2be:	33 df       	rcall	.-410    	; 0x126 <disable_usart_tx>
		}
		
		if (flag_button_0_pressed == true) {
 2c0:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <flag_button_0_pressed>
 2c4:	88 23       	and	r24, r24
 2c6:	19 f0       	breq	.+6      	; 0x2ce <main+0x3c>
			led_hmi_off();
 2c8:	fc de       	rcall	.-520    	; 0xc2 <led_hmi_off>
			flag_button_0_pressed = false;
 2ca:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <flag_button_0_pressed>
		}
		if (button_1_pressed() == 1) {
 2ce:	e6 de       	rcall	.-564    	; 0x9c <button_1_pressed>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	19 f4       	brne	.+6      	; 0x2da <main+0x48>
			USART0_sendString("C:Hello\r\n");
 2d4:	80 ed       	ldi	r24, 0xD0	; 208
 2d6:	9a e8       	ldi	r25, 0x8A	; 138
 2d8:	f4 d0       	rcall	.+488    	; 0x4c2 <USART0_sendString>
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	80 e7       	ldi	r24, 0x70	; 112
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x4e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x58>
 2ea:	00 00       	nop
		}
		
		/* let hmi led toggle as a sbc heartbeat */
		
		_delay_ms(100);		
		toggle_hmi_led();
 2ec:	ee de       	rcall	.-548    	; 0xca <toggle_hmi_led>
		send_heartbeat_count_to_bpi();
 2ee:	bb df       	rcall	.-138    	; 0x266 <send_heartbeat_count_to_bpi>
		sprintf(buffer, "H:%i", get_heartbeat_count());
 2f0:	9f df       	rcall	.-194    	; 0x230 <get_heartbeat_count>
 2f2:	9f 93       	push	r25
 2f4:	8f 93       	push	r24
 2f6:	1f 93       	push	r17
 2f8:	0f 93       	push	r16
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	06 d1       	rcall	.+524    	; 0x50c <sprintf>
		display_clear();
 300:	be d0       	rcall	.+380    	; 0x47e <display_clear>
		display_write_string(buffer);
 302:	ce 01       	movw	r24, r28
 304:	ad d0       	rcall	.+346    	; 0x460 <display_write_string>
    }
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	d0 cf       	rjmp	.-96     	; 0x2b4 <main+0x22>

00000314 <init_display>:
 314:	2f e7       	ldi	r18, 0x7F	; 127
 316:	8a e1       	ldi	r24, 0x1A	; 26
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <init_display+0x6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <init_display+0x10>
 324:	00 00       	nop
 326:	f5 de       	rcall	.-534    	; 0x112 <display_clear_rs_pin>
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	e5 de       	rcall	.-566    	; 0xf6 <set_display_data_pins>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	d5 de       	rcall	.-598    	; 0xda <display_enable>
 330:	87 e8       	ldi	r24, 0x87	; 135
 332:	93 e1       	ldi	r25, 0x13	; 19
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <init_display+0x20>
 338:	00 c0       	rjmp	.+0      	; 0x33a <init_display+0x26>
 33a:	00 00       	nop
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	db de       	rcall	.-586    	; 0xf6 <set_display_data_pins>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	cb de       	rcall	.-618    	; 0xda <display_enable>
 344:	87 e8       	ldi	r24, 0x87	; 135
 346:	93 e1       	ldi	r25, 0x13	; 19
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <init_display+0x34>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <init_display+0x3a>
 34e:	00 00       	nop
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	d1 de       	rcall	.-606    	; 0xf6 <set_display_data_pins>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	c1 de       	rcall	.-638    	; 0xda <display_enable>
 358:	87 e8       	ldi	r24, 0x87	; 135
 35a:	93 e1       	ldi	r25, 0x13	; 19
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <init_display+0x48>
 360:	00 c0       	rjmp	.+0      	; 0x362 <init_display+0x4e>
 362:	00 00       	nop
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	c7 de       	rcall	.-626    	; 0xf6 <set_display_data_pins>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	b7 de       	rcall	.-658    	; 0xda <display_enable>
 36c:	87 e8       	ldi	r24, 0x87	; 135
 36e:	93 e1       	ldi	r25, 0x13	; 19
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <init_display+0x5c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <init_display+0x62>
 376:	00 00       	nop
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	bd de       	rcall	.-646    	; 0xf6 <set_display_data_pins>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	ad de       	rcall	.-678    	; 0xda <display_enable>
 380:	87 e8       	ldi	r24, 0x87	; 135
 382:	93 e1       	ldi	r25, 0x13	; 19
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <init_display+0x70>
 388:	00 c0       	rjmp	.+0      	; 0x38a <init_display+0x76>
 38a:	00 00       	nop
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	b3 de       	rcall	.-666    	; 0xf6 <set_display_data_pins>
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	a3 de       	rcall	.-698    	; 0xda <display_enable>
 394:	87 e8       	ldi	r24, 0x87	; 135
 396:	93 e1       	ldi	r25, 0x13	; 19
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <init_display+0x84>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <init_display+0x8a>
 39e:	00 00       	nop
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	a9 de       	rcall	.-686    	; 0xf6 <set_display_data_pins>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	99 de       	rcall	.-718    	; 0xda <display_enable>
 3a8:	87 e8       	ldi	r24, 0x87	; 135
 3aa:	93 e1       	ldi	r25, 0x13	; 19
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <init_display+0x98>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <init_display+0x9e>
 3b2:	00 00       	nop
 3b4:	8c e0       	ldi	r24, 0x0C	; 12
 3b6:	9f de       	rcall	.-706    	; 0xf6 <set_display_data_pins>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	8f de       	rcall	.-738    	; 0xda <display_enable>
 3bc:	87 e8       	ldi	r24, 0x87	; 135
 3be:	93 e1       	ldi	r25, 0x13	; 19
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <init_display+0xac>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <init_display+0xb2>
 3c6:	00 00       	nop
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	95 de       	rcall	.-726    	; 0xf6 <set_display_data_pins>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	85 de       	rcall	.-758    	; 0xda <display_enable>
 3d0:	87 e8       	ldi	r24, 0x87	; 135
 3d2:	93 e1       	ldi	r25, 0x13	; 19
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <init_display+0xc0>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <init_display+0xc6>
 3da:	00 00       	nop
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	8b de       	rcall	.-746    	; 0xf6 <set_display_data_pins>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	7b de       	rcall	.-778    	; 0xda <display_enable>
 3e4:	87 e8       	ldi	r24, 0x87	; 135
 3e6:	93 e1       	ldi	r25, 0x13	; 19
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <init_display+0xd4>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <init_display+0xda>
 3ee:	00 00       	nop
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	81 de       	rcall	.-766    	; 0xf6 <set_display_data_pins>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	71 de       	rcall	.-798    	; 0xda <display_enable>
 3f8:	87 e8       	ldi	r24, 0x87	; 135
 3fa:	93 e1       	ldi	r25, 0x13	; 19
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <init_display+0xe8>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	77 de       	rcall	.-786    	; 0xf6 <set_display_data_pins>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	67 de       	rcall	.-818    	; 0xda <display_enable>
 40c:	87 e8       	ldi	r24, 0x87	; 135
 40e:	93 e1       	ldi	r25, 0x13	; 19
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	6d de       	rcall	.-806    	; 0xf6 <set_display_data_pins>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	5d de       	rcall	.-838    	; 0xda <display_enable>
 420:	87 e8       	ldi	r24, 0x87	; 135
 422:	93 e1       	ldi	r25, 0x13	; 19
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	63 de       	rcall	.-826    	; 0xf6 <set_display_data_pins>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	53 de       	rcall	.-858    	; 0xda <display_enable>
 434:	87 e8       	ldi	r24, 0x87	; 135
 436:	93 e1       	ldi	r25, 0x13	; 19
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	08 95       	ret

00000442 <display_write_char>:
 442:	cf 93       	push	r28
 444:	c8 2f       	mov	r28, r24
 446:	61 de       	rcall	.-830    	; 0x10a <display_set_rs_pin>
 448:	8c 2f       	mov	r24, r28
 44a:	82 95       	swap	r24
 44c:	8f 70       	andi	r24, 0x0F	; 15
 44e:	53 de       	rcall	.-858    	; 0xf6 <set_display_data_pins>
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	43 de       	rcall	.-890    	; 0xda <display_enable>
 454:	8c 2f       	mov	r24, r28
 456:	4f de       	rcall	.-866    	; 0xf6 <set_display_data_pins>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	3f de       	rcall	.-898    	; 0xda <display_enable>
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <display_write_string>:
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
 466:	51 de       	rcall	.-862    	; 0x10a <display_set_rs_pin>
 468:	88 81       	ld	r24, Y
 46a:	88 23       	and	r24, r24
 46c:	29 f0       	breq	.+10     	; 0x478 <display_write_string+0x18>
 46e:	21 96       	adiw	r28, 0x01	; 1
 470:	e8 df       	rcall	.-48     	; 0x442 <display_write_char>
 472:	89 91       	ld	r24, Y+
 474:	81 11       	cpse	r24, r1
 476:	fc cf       	rjmp	.-8      	; 0x470 <display_write_string+0x10>
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
 47e:	49 de       	rcall	.-878    	; 0x112 <display_clear_rs_pin>
	set_display_data_pins(0x00);
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	39 de       	rcall	.-910    	; 0xf6 <set_display_data_pins>
	display_enable(1);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	29 de       	rcall	.-942    	; 0xda <display_enable>
	set_display_data_pins(0x01);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	35 de       	rcall	.-918    	; 0xf6 <set_display_data_pins>
	display_enable(1);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	25 de       	rcall	.-950    	; 0xda <display_enable>
 490:	87 ea       	ldi	r24, 0xA7	; 167
 492:	91 e6       	ldi	r25, 0x61	; 97
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <display_clear+0x16>
 498:	00 c0       	rjmp	.+0      	; 0x49a <display_clear+0x1c>
 49a:	00 00       	nop
 49c:	08 95       	ret

0000049e <init_uart>:
//#define USART0_BAUD_RATE(BAUD_RATE) ((float)(F_CPU * 64 / (16 * (float)BAUD_RATE)) + 0.5)
#define BAUD_RATE 9600
#define UROUND(x) ((2UL*(x)+1)/2)

void init_uart(void) {
	set_pb2_txd_and_pb3_rxd();
 49e:	3d de       	rcall	.-902    	; 0x11a <set_pb2_txd_and_pb3_rxd>
	USART0.BAUD = UROUND(64UL*F_CPU/16/BAUD_RATE);
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f8 e0       	ldi	r31, 0x08	; 8
 4a4:	8c e6       	ldi	r24, 0x6C	; 108
 4a6:	95 e0       	ldi	r25, 0x05	; 5
 4a8:	80 87       	std	Z+8, r24	; 0x08
 4aa:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 4ac:	80 ec       	ldi	r24, 0xC0	; 192
 4ae:	86 83       	std	Z+6, r24	; 0x06
 4b0:	08 95       	ret

000004b2 <USART0_sendChar>:
}

void USART0_sendChar(char c) {
	while((USART0.STATUS & USART_DREIF_bm) == 0)
 4b2:	e0 e0       	ldi	r30, 0x00	; 0
 4b4:	f8 e0       	ldi	r31, 0x08	; 8
 4b6:	94 81       	ldd	r25, Z+4	; 0x04
 4b8:	95 ff       	sbrs	r25, 5
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <USART0_sendChar+0x4>
	;
	USART0.TXDATAL = c;
 4bc:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 4c0:	08 95       	ret

000004c2 <USART0_sendString>:
}
void USART0_sendString_w_eol(char *s) {
	USART0_sendString(s);
	USART0_sendChar('\n');
}
void USART0_sendString(char *s) {
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	8c 01       	movw	r16, r24
 4d0:	7c 01       	movw	r14, r24
	for(size_t i = 0; i < strlen(s); i++) {
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <USART0_sendString+0x20>
		USART0_sendChar(s[i]);
 4d8:	f7 01       	movw	r30, r14
 4da:	81 91       	ld	r24, Z+
 4dc:	7f 01       	movw	r14, r30
 4de:	e9 df       	rcall	.-46     	; 0x4b2 <USART0_sendChar>
void USART0_sendString_w_eol(char *s) {
	USART0_sendString(s);
	USART0_sendChar('\n');
}
void USART0_sendString(char *s) {
	for(size_t i = 0; i < strlen(s); i++) {
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	f8 01       	movw	r30, r16
 4e4:	01 90       	ld	r0, Z+
 4e6:	00 20       	and	r0, r0
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <USART0_sendString+0x22>
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	e0 1b       	sub	r30, r16
 4ee:	f1 0b       	sbc	r31, r17
 4f0:	ce 17       	cp	r28, r30
 4f2:	df 07       	cpc	r29, r31
 4f4:	88 f3       	brcs	.-30     	; 0x4d8 <USART0_sendString+0x16>
		USART0_sendChar(s[i]);
	}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	08 95       	ret

00000504 <USART0_sendString_w_eol>:
	while((USART0.STATUS & USART_DREIF_bm) == 0)
	;
	USART0.TXDATAL = c;
}
void USART0_sendString_w_eol(char *s) {
	USART0_sendString(s);
 504:	de df       	rcall	.-68     	; 0x4c2 <USART0_sendString>
	USART0_sendChar('\n');
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	d4 df       	rcall	.-88     	; 0x4b2 <USART0_sendChar>
 50a:	08 95       	ret

0000050c <sprintf>:
 50c:	ae e0       	ldi	r26, 0x0E	; 14
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	eb e8       	ldi	r30, 0x8B	; 139
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	aa c2       	rjmp	.+1364   	; 0xa6a <__prologue_saves__+0x1c>
 516:	0d 89       	ldd	r16, Y+21	; 0x15
 518:	1e 89       	ldd	r17, Y+22	; 0x16
 51a:	86 e0       	ldi	r24, 0x06	; 6
 51c:	8c 83       	std	Y+4, r24	; 0x04
 51e:	09 83       	std	Y+1, r16	; 0x01
 520:	1a 83       	std	Y+2, r17	; 0x02
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	9f e7       	ldi	r25, 0x7F	; 127
 526:	8d 83       	std	Y+5, r24	; 0x05
 528:	9e 83       	std	Y+6, r25	; 0x06
 52a:	ae 01       	movw	r20, r28
 52c:	47 5e       	subi	r20, 0xE7	; 231
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	6f 89       	ldd	r22, Y+23	; 0x17
 532:	78 8d       	ldd	r23, Y+24	; 0x18
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	08 d0       	rcall	.+16     	; 0x54a <vfprintf>
 53a:	ef 81       	ldd	r30, Y+7	; 0x07
 53c:	f8 85       	ldd	r31, Y+8	; 0x08
 53e:	e0 0f       	add	r30, r16
 540:	f1 1f       	adc	r31, r17
 542:	10 82       	st	Z, r1
 544:	2e 96       	adiw	r28, 0x0e	; 14
 546:	e4 e0       	ldi	r30, 0x04	; 4
 548:	a9 c2       	rjmp	.+1362   	; 0xa9c <__epilogue_restores__+0x1c>

0000054a <vfprintf>:
 54a:	ab e0       	ldi	r26, 0x0B	; 11
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	ea ea       	ldi	r30, 0xAA	; 170
 550:	f2 e0       	ldi	r31, 0x02	; 2
 552:	7d c2       	rjmp	.+1274   	; 0xa4e <__prologue_saves__>
 554:	6c 01       	movw	r12, r24
 556:	7b 01       	movw	r14, r22
 558:	8a 01       	movw	r16, r20
 55a:	fc 01       	movw	r30, r24
 55c:	16 82       	std	Z+6, r1	; 0x06
 55e:	17 82       	std	Z+7, r1	; 0x07
 560:	83 81       	ldd	r24, Z+3	; 0x03
 562:	81 ff       	sbrs	r24, 1
 564:	bf c1       	rjmp	.+894    	; 0x8e4 <vfprintf+0x39a>
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	3c 01       	movw	r6, r24
 56c:	f6 01       	movw	r30, r12
 56e:	93 81       	ldd	r25, Z+3	; 0x03
 570:	f7 01       	movw	r30, r14
 572:	93 fd       	sbrc	r25, 3
 574:	85 91       	lpm	r24, Z+
 576:	93 ff       	sbrs	r25, 3
 578:	81 91       	ld	r24, Z+
 57a:	7f 01       	movw	r14, r30
 57c:	88 23       	and	r24, r24
 57e:	09 f4       	brne	.+2      	; 0x582 <vfprintf+0x38>
 580:	ad c1       	rjmp	.+858    	; 0x8dc <vfprintf+0x392>
 582:	85 32       	cpi	r24, 0x25	; 37
 584:	39 f4       	brne	.+14     	; 0x594 <vfprintf+0x4a>
 586:	93 fd       	sbrc	r25, 3
 588:	85 91       	lpm	r24, Z+
 58a:	93 ff       	sbrs	r25, 3
 58c:	81 91       	ld	r24, Z+
 58e:	7f 01       	movw	r14, r30
 590:	85 32       	cpi	r24, 0x25	; 37
 592:	21 f4       	brne	.+8      	; 0x59c <vfprintf+0x52>
 594:	b6 01       	movw	r22, r12
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	c0 d1       	rcall	.+896    	; 0x91a <fputc>
 59a:	e8 cf       	rjmp	.-48     	; 0x56c <vfprintf+0x22>
 59c:	91 2c       	mov	r9, r1
 59e:	21 2c       	mov	r2, r1
 5a0:	31 2c       	mov	r3, r1
 5a2:	ff e1       	ldi	r31, 0x1F	; 31
 5a4:	f3 15       	cp	r31, r3
 5a6:	d8 f0       	brcs	.+54     	; 0x5de <vfprintf+0x94>
 5a8:	8b 32       	cpi	r24, 0x2B	; 43
 5aa:	79 f0       	breq	.+30     	; 0x5ca <vfprintf+0x80>
 5ac:	38 f4       	brcc	.+14     	; 0x5bc <vfprintf+0x72>
 5ae:	80 32       	cpi	r24, 0x20	; 32
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <vfprintf+0x86>
 5b2:	83 32       	cpi	r24, 0x23	; 35
 5b4:	a1 f4       	brne	.+40     	; 0x5de <vfprintf+0x94>
 5b6:	23 2d       	mov	r18, r3
 5b8:	20 61       	ori	r18, 0x10	; 16
 5ba:	1d c0       	rjmp	.+58     	; 0x5f6 <vfprintf+0xac>
 5bc:	8d 32       	cpi	r24, 0x2D	; 45
 5be:	61 f0       	breq	.+24     	; 0x5d8 <vfprintf+0x8e>
 5c0:	80 33       	cpi	r24, 0x30	; 48
 5c2:	69 f4       	brne	.+26     	; 0x5de <vfprintf+0x94>
 5c4:	23 2d       	mov	r18, r3
 5c6:	21 60       	ori	r18, 0x01	; 1
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <vfprintf+0xac>
 5ca:	83 2d       	mov	r24, r3
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	38 2e       	mov	r3, r24
 5d0:	e3 2d       	mov	r30, r3
 5d2:	e4 60       	ori	r30, 0x04	; 4
 5d4:	3e 2e       	mov	r3, r30
 5d6:	2a c0       	rjmp	.+84     	; 0x62c <vfprintf+0xe2>
 5d8:	f3 2d       	mov	r31, r3
 5da:	f8 60       	ori	r31, 0x08	; 8
 5dc:	1d c0       	rjmp	.+58     	; 0x618 <vfprintf+0xce>
 5de:	37 fc       	sbrc	r3, 7
 5e0:	2d c0       	rjmp	.+90     	; 0x63c <vfprintf+0xf2>
 5e2:	20 ed       	ldi	r18, 0xD0	; 208
 5e4:	28 0f       	add	r18, r24
 5e6:	2a 30       	cpi	r18, 0x0A	; 10
 5e8:	40 f0       	brcs	.+16     	; 0x5fa <vfprintf+0xb0>
 5ea:	8e 32       	cpi	r24, 0x2E	; 46
 5ec:	b9 f4       	brne	.+46     	; 0x61c <vfprintf+0xd2>
 5ee:	36 fc       	sbrc	r3, 6
 5f0:	75 c1       	rjmp	.+746    	; 0x8dc <vfprintf+0x392>
 5f2:	23 2d       	mov	r18, r3
 5f4:	20 64       	ori	r18, 0x40	; 64
 5f6:	32 2e       	mov	r3, r18
 5f8:	19 c0       	rjmp	.+50     	; 0x62c <vfprintf+0xe2>
 5fa:	36 fe       	sbrs	r3, 6
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <vfprintf+0xc0>
 5fe:	8a e0       	ldi	r24, 0x0A	; 10
 600:	98 9e       	mul	r9, r24
 602:	20 0d       	add	r18, r0
 604:	11 24       	eor	r1, r1
 606:	92 2e       	mov	r9, r18
 608:	11 c0       	rjmp	.+34     	; 0x62c <vfprintf+0xe2>
 60a:	ea e0       	ldi	r30, 0x0A	; 10
 60c:	2e 9e       	mul	r2, r30
 60e:	20 0d       	add	r18, r0
 610:	11 24       	eor	r1, r1
 612:	22 2e       	mov	r2, r18
 614:	f3 2d       	mov	r31, r3
 616:	f0 62       	ori	r31, 0x20	; 32
 618:	3f 2e       	mov	r3, r31
 61a:	08 c0       	rjmp	.+16     	; 0x62c <vfprintf+0xe2>
 61c:	8c 36       	cpi	r24, 0x6C	; 108
 61e:	21 f4       	brne	.+8      	; 0x628 <vfprintf+0xde>
 620:	83 2d       	mov	r24, r3
 622:	80 68       	ori	r24, 0x80	; 128
 624:	38 2e       	mov	r3, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0xe2>
 628:	88 36       	cpi	r24, 0x68	; 104
 62a:	41 f4       	brne	.+16     	; 0x63c <vfprintf+0xf2>
 62c:	f7 01       	movw	r30, r14
 62e:	93 fd       	sbrc	r25, 3
 630:	85 91       	lpm	r24, Z+
 632:	93 ff       	sbrs	r25, 3
 634:	81 91       	ld	r24, Z+
 636:	7f 01       	movw	r14, r30
 638:	81 11       	cpse	r24, r1
 63a:	b3 cf       	rjmp	.-154    	; 0x5a2 <vfprintf+0x58>
 63c:	98 2f       	mov	r25, r24
 63e:	9f 7d       	andi	r25, 0xDF	; 223
 640:	95 54       	subi	r25, 0x45	; 69
 642:	93 30       	cpi	r25, 0x03	; 3
 644:	28 f4       	brcc	.+10     	; 0x650 <vfprintf+0x106>
 646:	0c 5f       	subi	r16, 0xFC	; 252
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	9f e3       	ldi	r25, 0x3F	; 63
 64c:	99 83       	std	Y+1, r25	; 0x01
 64e:	0d c0       	rjmp	.+26     	; 0x66a <vfprintf+0x120>
 650:	83 36       	cpi	r24, 0x63	; 99
 652:	31 f0       	breq	.+12     	; 0x660 <vfprintf+0x116>
 654:	83 37       	cpi	r24, 0x73	; 115
 656:	71 f0       	breq	.+28     	; 0x674 <vfprintf+0x12a>
 658:	83 35       	cpi	r24, 0x53	; 83
 65a:	09 f0       	breq	.+2      	; 0x65e <vfprintf+0x114>
 65c:	55 c0       	rjmp	.+170    	; 0x708 <vfprintf+0x1be>
 65e:	20 c0       	rjmp	.+64     	; 0x6a0 <vfprintf+0x156>
 660:	f8 01       	movw	r30, r16
 662:	80 81       	ld	r24, Z
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	0e 5f       	subi	r16, 0xFE	; 254
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	88 24       	eor	r8, r8
 66c:	83 94       	inc	r8
 66e:	91 2c       	mov	r9, r1
 670:	53 01       	movw	r10, r6
 672:	12 c0       	rjmp	.+36     	; 0x698 <vfprintf+0x14e>
 674:	28 01       	movw	r4, r16
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	4f 0e       	add	r4, r31
 67a:	51 1c       	adc	r5, r1
 67c:	f8 01       	movw	r30, r16
 67e:	a0 80       	ld	r10, Z
 680:	b1 80       	ldd	r11, Z+1	; 0x01
 682:	36 fe       	sbrs	r3, 6
 684:	03 c0       	rjmp	.+6      	; 0x68c <vfprintf+0x142>
 686:	69 2d       	mov	r22, r9
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x146>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c5 01       	movw	r24, r10
 692:	38 d1       	rcall	.+624    	; 0x904 <strnlen>
 694:	4c 01       	movw	r8, r24
 696:	82 01       	movw	r16, r4
 698:	f3 2d       	mov	r31, r3
 69a:	ff 77       	andi	r31, 0x7F	; 127
 69c:	3f 2e       	mov	r3, r31
 69e:	15 c0       	rjmp	.+42     	; 0x6ca <vfprintf+0x180>
 6a0:	28 01       	movw	r4, r16
 6a2:	22 e0       	ldi	r18, 0x02	; 2
 6a4:	42 0e       	add	r4, r18
 6a6:	51 1c       	adc	r5, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	a0 80       	ld	r10, Z
 6ac:	b1 80       	ldd	r11, Z+1	; 0x01
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x16e>
 6b2:	69 2d       	mov	r22, r9
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <vfprintf+0x172>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	7f ef       	ldi	r23, 0xFF	; 255
 6bc:	c5 01       	movw	r24, r10
 6be:	17 d1       	rcall	.+558    	; 0x8ee <strnlen_P>
 6c0:	4c 01       	movw	r8, r24
 6c2:	f3 2d       	mov	r31, r3
 6c4:	f0 68       	ori	r31, 0x80	; 128
 6c6:	3f 2e       	mov	r3, r31
 6c8:	82 01       	movw	r16, r4
 6ca:	33 fc       	sbrc	r3, 3
 6cc:	19 c0       	rjmp	.+50     	; 0x700 <vfprintf+0x1b6>
 6ce:	82 2d       	mov	r24, r2
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	88 16       	cp	r8, r24
 6d4:	99 06       	cpc	r9, r25
 6d6:	a0 f4       	brcc	.+40     	; 0x700 <vfprintf+0x1b6>
 6d8:	b6 01       	movw	r22, r12
 6da:	80 e2       	ldi	r24, 0x20	; 32
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	1d d1       	rcall	.+570    	; 0x91a <fputc>
 6e0:	2a 94       	dec	r2
 6e2:	f5 cf       	rjmp	.-22     	; 0x6ce <vfprintf+0x184>
 6e4:	f5 01       	movw	r30, r10
 6e6:	37 fc       	sbrc	r3, 7
 6e8:	85 91       	lpm	r24, Z+
 6ea:	37 fe       	sbrs	r3, 7
 6ec:	81 91       	ld	r24, Z+
 6ee:	5f 01       	movw	r10, r30
 6f0:	b6 01       	movw	r22, r12
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	12 d1       	rcall	.+548    	; 0x91a <fputc>
 6f6:	21 10       	cpse	r2, r1
 6f8:	2a 94       	dec	r2
 6fa:	21 e0       	ldi	r18, 0x01	; 1
 6fc:	82 1a       	sub	r8, r18
 6fe:	91 08       	sbc	r9, r1
 700:	81 14       	cp	r8, r1
 702:	91 04       	cpc	r9, r1
 704:	79 f7       	brne	.-34     	; 0x6e4 <vfprintf+0x19a>
 706:	e1 c0       	rjmp	.+450    	; 0x8ca <vfprintf+0x380>
 708:	84 36       	cpi	r24, 0x64	; 100
 70a:	11 f0       	breq	.+4      	; 0x710 <vfprintf+0x1c6>
 70c:	89 36       	cpi	r24, 0x69	; 105
 70e:	39 f5       	brne	.+78     	; 0x75e <vfprintf+0x214>
 710:	f8 01       	movw	r30, r16
 712:	37 fe       	sbrs	r3, 7
 714:	07 c0       	rjmp	.+14     	; 0x724 <vfprintf+0x1da>
 716:	60 81       	ld	r22, Z
 718:	71 81       	ldd	r23, Z+1	; 0x01
 71a:	82 81       	ldd	r24, Z+2	; 0x02
 71c:	93 81       	ldd	r25, Z+3	; 0x03
 71e:	0c 5f       	subi	r16, 0xFC	; 252
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	08 c0       	rjmp	.+16     	; 0x734 <vfprintf+0x1ea>
 724:	60 81       	ld	r22, Z
 726:	71 81       	ldd	r23, Z+1	; 0x01
 728:	07 2e       	mov	r0, r23
 72a:	00 0c       	add	r0, r0
 72c:	88 0b       	sbc	r24, r24
 72e:	99 0b       	sbc	r25, r25
 730:	0e 5f       	subi	r16, 0xFE	; 254
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	f3 2d       	mov	r31, r3
 736:	ff 76       	andi	r31, 0x6F	; 111
 738:	3f 2e       	mov	r3, r31
 73a:	97 ff       	sbrs	r25, 7
 73c:	09 c0       	rjmp	.+18     	; 0x750 <vfprintf+0x206>
 73e:	90 95       	com	r25
 740:	80 95       	com	r24
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	f0 68       	ori	r31, 0x80	; 128
 74e:	3f 2e       	mov	r3, r31
 750:	2a e0       	ldi	r18, 0x0A	; 10
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	a3 01       	movw	r20, r6
 756:	1d d1       	rcall	.+570    	; 0x992 <__ultoa_invert>
 758:	88 2e       	mov	r8, r24
 75a:	86 18       	sub	r8, r6
 75c:	44 c0       	rjmp	.+136    	; 0x7e6 <vfprintf+0x29c>
 75e:	85 37       	cpi	r24, 0x75	; 117
 760:	31 f4       	brne	.+12     	; 0x76e <vfprintf+0x224>
 762:	23 2d       	mov	r18, r3
 764:	2f 7e       	andi	r18, 0xEF	; 239
 766:	b2 2e       	mov	r11, r18
 768:	2a e0       	ldi	r18, 0x0A	; 10
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	25 c0       	rjmp	.+74     	; 0x7b8 <vfprintf+0x26e>
 76e:	93 2d       	mov	r25, r3
 770:	99 7f       	andi	r25, 0xF9	; 249
 772:	b9 2e       	mov	r11, r25
 774:	8f 36       	cpi	r24, 0x6F	; 111
 776:	c1 f0       	breq	.+48     	; 0x7a8 <vfprintf+0x25e>
 778:	18 f4       	brcc	.+6      	; 0x780 <vfprintf+0x236>
 77a:	88 35       	cpi	r24, 0x58	; 88
 77c:	79 f0       	breq	.+30     	; 0x79c <vfprintf+0x252>
 77e:	ae c0       	rjmp	.+348    	; 0x8dc <vfprintf+0x392>
 780:	80 37       	cpi	r24, 0x70	; 112
 782:	19 f0       	breq	.+6      	; 0x78a <vfprintf+0x240>
 784:	88 37       	cpi	r24, 0x78	; 120
 786:	21 f0       	breq	.+8      	; 0x790 <vfprintf+0x246>
 788:	a9 c0       	rjmp	.+338    	; 0x8dc <vfprintf+0x392>
 78a:	e9 2f       	mov	r30, r25
 78c:	e0 61       	ori	r30, 0x10	; 16
 78e:	be 2e       	mov	r11, r30
 790:	b4 fe       	sbrs	r11, 4
 792:	0d c0       	rjmp	.+26     	; 0x7ae <vfprintf+0x264>
 794:	fb 2d       	mov	r31, r11
 796:	f4 60       	ori	r31, 0x04	; 4
 798:	bf 2e       	mov	r11, r31
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <vfprintf+0x264>
 79c:	34 fe       	sbrs	r3, 4
 79e:	0a c0       	rjmp	.+20     	; 0x7b4 <vfprintf+0x26a>
 7a0:	29 2f       	mov	r18, r25
 7a2:	26 60       	ori	r18, 0x06	; 6
 7a4:	b2 2e       	mov	r11, r18
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0x26a>
 7a8:	28 e0       	ldi	r18, 0x08	; 8
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <vfprintf+0x26e>
 7ae:	20 e1       	ldi	r18, 0x10	; 16
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <vfprintf+0x26e>
 7b4:	20 e1       	ldi	r18, 0x10	; 16
 7b6:	32 e0       	ldi	r19, 0x02	; 2
 7b8:	f8 01       	movw	r30, r16
 7ba:	b7 fe       	sbrs	r11, 7
 7bc:	07 c0       	rjmp	.+14     	; 0x7cc <vfprintf+0x282>
 7be:	60 81       	ld	r22, Z
 7c0:	71 81       	ldd	r23, Z+1	; 0x01
 7c2:	82 81       	ldd	r24, Z+2	; 0x02
 7c4:	93 81       	ldd	r25, Z+3	; 0x03
 7c6:	0c 5f       	subi	r16, 0xFC	; 252
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0x28e>
 7cc:	60 81       	ld	r22, Z
 7ce:	71 81       	ldd	r23, Z+1	; 0x01
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 5f       	subi	r16, 0xFE	; 254
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
 7d8:	a3 01       	movw	r20, r6
 7da:	db d0       	rcall	.+438    	; 0x992 <__ultoa_invert>
 7dc:	88 2e       	mov	r8, r24
 7de:	86 18       	sub	r8, r6
 7e0:	fb 2d       	mov	r31, r11
 7e2:	ff 77       	andi	r31, 0x7F	; 127
 7e4:	3f 2e       	mov	r3, r31
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <vfprintf+0x2ba>
 7ea:	23 2d       	mov	r18, r3
 7ec:	2e 7f       	andi	r18, 0xFE	; 254
 7ee:	a2 2e       	mov	r10, r18
 7f0:	89 14       	cp	r8, r9
 7f2:	58 f4       	brcc	.+22     	; 0x80a <vfprintf+0x2c0>
 7f4:	34 fe       	sbrs	r3, 4
 7f6:	0b c0       	rjmp	.+22     	; 0x80e <vfprintf+0x2c4>
 7f8:	32 fc       	sbrc	r3, 2
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <vfprintf+0x2c4>
 7fc:	83 2d       	mov	r24, r3
 7fe:	8e 7e       	andi	r24, 0xEE	; 238
 800:	a8 2e       	mov	r10, r24
 802:	05 c0       	rjmp	.+10     	; 0x80e <vfprintf+0x2c4>
 804:	b8 2c       	mov	r11, r8
 806:	a3 2c       	mov	r10, r3
 808:	03 c0       	rjmp	.+6      	; 0x810 <vfprintf+0x2c6>
 80a:	b8 2c       	mov	r11, r8
 80c:	01 c0       	rjmp	.+2      	; 0x810 <vfprintf+0x2c6>
 80e:	b9 2c       	mov	r11, r9
 810:	a4 fe       	sbrs	r10, 4
 812:	0f c0       	rjmp	.+30     	; 0x832 <vfprintf+0x2e8>
 814:	fe 01       	movw	r30, r28
 816:	e8 0d       	add	r30, r8
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	21 f4       	brne	.+8      	; 0x828 <vfprintf+0x2de>
 820:	9a 2d       	mov	r25, r10
 822:	99 7e       	andi	r25, 0xE9	; 233
 824:	a9 2e       	mov	r10, r25
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x2f0>
 828:	a2 fe       	sbrs	r10, 2
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x2ee>
 82c:	b3 94       	inc	r11
 82e:	b3 94       	inc	r11
 830:	04 c0       	rjmp	.+8      	; 0x83a <vfprintf+0x2f0>
 832:	8a 2d       	mov	r24, r10
 834:	86 78       	andi	r24, 0x86	; 134
 836:	09 f0       	breq	.+2      	; 0x83a <vfprintf+0x2f0>
 838:	b3 94       	inc	r11
 83a:	a3 fc       	sbrc	r10, 3
 83c:	10 c0       	rjmp	.+32     	; 0x85e <vfprintf+0x314>
 83e:	a0 fe       	sbrs	r10, 0
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0x304>
 842:	b2 14       	cp	r11, r2
 844:	80 f4       	brcc	.+32     	; 0x866 <vfprintf+0x31c>
 846:	28 0c       	add	r2, r8
 848:	92 2c       	mov	r9, r2
 84a:	9b 18       	sub	r9, r11
 84c:	0d c0       	rjmp	.+26     	; 0x868 <vfprintf+0x31e>
 84e:	b2 14       	cp	r11, r2
 850:	58 f4       	brcc	.+22     	; 0x868 <vfprintf+0x31e>
 852:	b6 01       	movw	r22, r12
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	60 d0       	rcall	.+192    	; 0x91a <fputc>
 85a:	b3 94       	inc	r11
 85c:	f8 cf       	rjmp	.-16     	; 0x84e <vfprintf+0x304>
 85e:	b2 14       	cp	r11, r2
 860:	18 f4       	brcc	.+6      	; 0x868 <vfprintf+0x31e>
 862:	2b 18       	sub	r2, r11
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x320>
 866:	98 2c       	mov	r9, r8
 868:	21 2c       	mov	r2, r1
 86a:	a4 fe       	sbrs	r10, 4
 86c:	0f c0       	rjmp	.+30     	; 0x88c <vfprintf+0x342>
 86e:	b6 01       	movw	r22, r12
 870:	80 e3       	ldi	r24, 0x30	; 48
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	52 d0       	rcall	.+164    	; 0x91a <fputc>
 876:	a2 fe       	sbrs	r10, 2
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <vfprintf+0x35c>
 87a:	a1 fc       	sbrc	r10, 1
 87c:	03 c0       	rjmp	.+6      	; 0x884 <vfprintf+0x33a>
 87e:	88 e7       	ldi	r24, 0x78	; 120
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x33e>
 884:	88 e5       	ldi	r24, 0x58	; 88
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	b6 01       	movw	r22, r12
 88a:	0c c0       	rjmp	.+24     	; 0x8a4 <vfprintf+0x35a>
 88c:	8a 2d       	mov	r24, r10
 88e:	86 78       	andi	r24, 0x86	; 134
 890:	51 f0       	breq	.+20     	; 0x8a6 <vfprintf+0x35c>
 892:	a1 fe       	sbrs	r10, 1
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0x350>
 896:	8b e2       	ldi	r24, 0x2B	; 43
 898:	01 c0       	rjmp	.+2      	; 0x89c <vfprintf+0x352>
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	a7 fc       	sbrc	r10, 7
 89e:	8d e2       	ldi	r24, 0x2D	; 45
 8a0:	b6 01       	movw	r22, r12
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	3a d0       	rcall	.+116    	; 0x91a <fputc>
 8a6:	89 14       	cp	r8, r9
 8a8:	30 f4       	brcc	.+12     	; 0x8b6 <vfprintf+0x36c>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e3       	ldi	r24, 0x30	; 48
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	34 d0       	rcall	.+104    	; 0x91a <fputc>
 8b2:	9a 94       	dec	r9
 8b4:	f8 cf       	rjmp	.-16     	; 0x8a6 <vfprintf+0x35c>
 8b6:	8a 94       	dec	r8
 8b8:	f3 01       	movw	r30, r6
 8ba:	e8 0d       	add	r30, r8
 8bc:	f1 1d       	adc	r31, r1
 8be:	80 81       	ld	r24, Z
 8c0:	b6 01       	movw	r22, r12
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	2a d0       	rcall	.+84     	; 0x91a <fputc>
 8c6:	81 10       	cpse	r8, r1
 8c8:	f6 cf       	rjmp	.-20     	; 0x8b6 <vfprintf+0x36c>
 8ca:	22 20       	and	r2, r2
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <vfprintf+0x386>
 8ce:	4e ce       	rjmp	.-868    	; 0x56c <vfprintf+0x22>
 8d0:	b6 01       	movw	r22, r12
 8d2:	80 e2       	ldi	r24, 0x20	; 32
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	21 d0       	rcall	.+66     	; 0x91a <fputc>
 8d8:	2a 94       	dec	r2
 8da:	f7 cf       	rjmp	.-18     	; 0x8ca <vfprintf+0x380>
 8dc:	f6 01       	movw	r30, r12
 8de:	86 81       	ldd	r24, Z+6	; 0x06
 8e0:	97 81       	ldd	r25, Z+7	; 0x07
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x39e>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	2b 96       	adiw	r28, 0x0b	; 11
 8ea:	e2 e1       	ldi	r30, 0x12	; 18
 8ec:	c9 c0       	rjmp	.+402    	; 0xa80 <__epilogue_restores__>

000008ee <strnlen_P>:
 8ee:	fc 01       	movw	r30, r24
 8f0:	05 90       	lpm	r0, Z+
 8f2:	61 50       	subi	r22, 0x01	; 1
 8f4:	70 40       	sbci	r23, 0x00	; 0
 8f6:	01 10       	cpse	r0, r1
 8f8:	d8 f7       	brcc	.-10     	; 0x8f0 <strnlen_P+0x2>
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	8e 0f       	add	r24, r30
 900:	9f 1f       	adc	r25, r31
 902:	08 95       	ret

00000904 <strnlen>:
 904:	fc 01       	movw	r30, r24
 906:	61 50       	subi	r22, 0x01	; 1
 908:	70 40       	sbci	r23, 0x00	; 0
 90a:	01 90       	ld	r0, Z+
 90c:	01 10       	cpse	r0, r1
 90e:	d8 f7       	brcc	.-10     	; 0x906 <strnlen+0x2>
 910:	80 95       	com	r24
 912:	90 95       	com	r25
 914:	8e 0f       	add	r24, r30
 916:	9f 1f       	adc	r25, r31
 918:	08 95       	ret

0000091a <fputc>:
 91a:	0f 93       	push	r16
 91c:	1f 93       	push	r17
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	fb 01       	movw	r30, r22
 924:	23 81       	ldd	r18, Z+3	; 0x03
 926:	21 fd       	sbrc	r18, 1
 928:	03 c0       	rjmp	.+6      	; 0x930 <fputc+0x16>
 92a:	8f ef       	ldi	r24, 0xFF	; 255
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	2c c0       	rjmp	.+88     	; 0x988 <fputc+0x6e>
 930:	22 ff       	sbrs	r18, 2
 932:	16 c0       	rjmp	.+44     	; 0x960 <fputc+0x46>
 934:	46 81       	ldd	r20, Z+6	; 0x06
 936:	57 81       	ldd	r21, Z+7	; 0x07
 938:	24 81       	ldd	r18, Z+4	; 0x04
 93a:	35 81       	ldd	r19, Z+5	; 0x05
 93c:	42 17       	cp	r20, r18
 93e:	53 07       	cpc	r21, r19
 940:	44 f4       	brge	.+16     	; 0x952 <fputc+0x38>
 942:	a0 81       	ld	r26, Z
 944:	b1 81       	ldd	r27, Z+1	; 0x01
 946:	9d 01       	movw	r18, r26
 948:	2f 5f       	subi	r18, 0xFF	; 255
 94a:	3f 4f       	sbci	r19, 0xFF	; 255
 94c:	20 83       	st	Z, r18
 94e:	31 83       	std	Z+1, r19	; 0x01
 950:	8c 93       	st	X, r24
 952:	26 81       	ldd	r18, Z+6	; 0x06
 954:	37 81       	ldd	r19, Z+7	; 0x07
 956:	2f 5f       	subi	r18, 0xFF	; 255
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	26 83       	std	Z+6, r18	; 0x06
 95c:	37 83       	std	Z+7, r19	; 0x07
 95e:	14 c0       	rjmp	.+40     	; 0x988 <fputc+0x6e>
 960:	8b 01       	movw	r16, r22
 962:	ec 01       	movw	r28, r24
 964:	fb 01       	movw	r30, r22
 966:	00 84       	ldd	r0, Z+8	; 0x08
 968:	f1 85       	ldd	r31, Z+9	; 0x09
 96a:	e0 2d       	mov	r30, r0
 96c:	09 95       	icall
 96e:	89 2b       	or	r24, r25
 970:	e1 f6       	brne	.-72     	; 0x92a <fputc+0x10>
 972:	d8 01       	movw	r26, r16
 974:	16 96       	adiw	r26, 0x06	; 6
 976:	8d 91       	ld	r24, X+
 978:	9c 91       	ld	r25, X
 97a:	17 97       	sbiw	r26, 0x07	; 7
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	16 96       	adiw	r26, 0x06	; 6
 980:	8d 93       	st	X+, r24
 982:	9c 93       	st	X, r25
 984:	17 97       	sbiw	r26, 0x07	; 7
 986:	ce 01       	movw	r24, r28
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	08 95       	ret

00000992 <__ultoa_invert>:
 992:	fa 01       	movw	r30, r20
 994:	aa 27       	eor	r26, r26
 996:	28 30       	cpi	r18, 0x08	; 8
 998:	51 f1       	breq	.+84     	; 0x9ee <__ultoa_invert+0x5c>
 99a:	20 31       	cpi	r18, 0x10	; 16
 99c:	81 f1       	breq	.+96     	; 0x9fe <__ultoa_invert+0x6c>
 99e:	e8 94       	clt
 9a0:	6f 93       	push	r22
 9a2:	6e 7f       	andi	r22, 0xFE	; 254
 9a4:	6e 5f       	subi	r22, 0xFE	; 254
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	af 4f       	sbci	r26, 0xFF	; 255
 9ae:	b1 e0       	ldi	r27, 0x01	; 1
 9b0:	3e d0       	rcall	.+124    	; 0xa2e <__ultoa_invert+0x9c>
 9b2:	b4 e0       	ldi	r27, 0x04	; 4
 9b4:	3c d0       	rcall	.+120    	; 0xa2e <__ultoa_invert+0x9c>
 9b6:	67 0f       	add	r22, r23
 9b8:	78 1f       	adc	r23, r24
 9ba:	89 1f       	adc	r24, r25
 9bc:	9a 1f       	adc	r25, r26
 9be:	a1 1d       	adc	r26, r1
 9c0:	68 0f       	add	r22, r24
 9c2:	79 1f       	adc	r23, r25
 9c4:	8a 1f       	adc	r24, r26
 9c6:	91 1d       	adc	r25, r1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	6a 0f       	add	r22, r26
 9cc:	71 1d       	adc	r23, r1
 9ce:	81 1d       	adc	r24, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	a1 1d       	adc	r26, r1
 9d4:	20 d0       	rcall	.+64     	; 0xa16 <__ultoa_invert+0x84>
 9d6:	09 f4       	brne	.+2      	; 0x9da <__ultoa_invert+0x48>
 9d8:	68 94       	set
 9da:	3f 91       	pop	r19
 9dc:	2a e0       	ldi	r18, 0x0A	; 10
 9de:	26 9f       	mul	r18, r22
 9e0:	11 24       	eor	r1, r1
 9e2:	30 19       	sub	r19, r0
 9e4:	30 5d       	subi	r19, 0xD0	; 208
 9e6:	31 93       	st	Z+, r19
 9e8:	de f6       	brtc	.-74     	; 0x9a0 <__ultoa_invert+0xe>
 9ea:	cf 01       	movw	r24, r30
 9ec:	08 95       	ret
 9ee:	46 2f       	mov	r20, r22
 9f0:	47 70       	andi	r20, 0x07	; 7
 9f2:	40 5d       	subi	r20, 0xD0	; 208
 9f4:	41 93       	st	Z+, r20
 9f6:	b3 e0       	ldi	r27, 0x03	; 3
 9f8:	0f d0       	rcall	.+30     	; 0xa18 <__ultoa_invert+0x86>
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__ultoa_invert+0x5c>
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <__ultoa_invert+0x58>
 9fe:	46 2f       	mov	r20, r22
 a00:	4f 70       	andi	r20, 0x0F	; 15
 a02:	40 5d       	subi	r20, 0xD0	; 208
 a04:	4a 33       	cpi	r20, 0x3A	; 58
 a06:	18 f0       	brcs	.+6      	; 0xa0e <__ultoa_invert+0x7c>
 a08:	49 5d       	subi	r20, 0xD9	; 217
 a0a:	31 fd       	sbrc	r19, 1
 a0c:	40 52       	subi	r20, 0x20	; 32
 a0e:	41 93       	st	Z+, r20
 a10:	02 d0       	rcall	.+4      	; 0xa16 <__ultoa_invert+0x84>
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__ultoa_invert+0x6c>
 a14:	ea cf       	rjmp	.-44     	; 0x9ea <__ultoa_invert+0x58>
 a16:	b4 e0       	ldi	r27, 0x04	; 4
 a18:	a6 95       	lsr	r26
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__ultoa_invert+0x86>
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	61 05       	cpc	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	08 95       	ret
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	0a 2e       	mov	r0, r26
 a34:	06 94       	lsr	r0
 a36:	57 95       	ror	r21
 a38:	47 95       	ror	r20
 a3a:	37 95       	ror	r19
 a3c:	27 95       	ror	r18
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__ultoa_invert+0xa2>
 a42:	62 0f       	add	r22, r18
 a44:	73 1f       	adc	r23, r19
 a46:	84 1f       	adc	r24, r20
 a48:	95 1f       	adc	r25, r21
 a4a:	a0 1d       	adc	r26, r0
 a4c:	08 95       	ret

00000a4e <__prologue_saves__>:
 a4e:	2f 92       	push	r2
 a50:	3f 92       	push	r3
 a52:	4f 92       	push	r4
 a54:	5f 92       	push	r5
 a56:	6f 92       	push	r6
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	ca 1b       	sub	r28, r26
 a78:	db 0b       	sbc	r29, r27
 a7a:	cd bf       	out	0x3d, r28	; 61
 a7c:	de bf       	out	0x3e, r29	; 62
 a7e:	09 94       	ijmp

00000a80 <__epilogue_restores__>:
 a80:	2a 88       	ldd	r2, Y+18	; 0x12
 a82:	39 88       	ldd	r3, Y+17	; 0x11
 a84:	48 88       	ldd	r4, Y+16	; 0x10
 a86:	5f 84       	ldd	r5, Y+15	; 0x0f
 a88:	6e 84       	ldd	r6, Y+14	; 0x0e
 a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a90:	aa 84       	ldd	r10, Y+10	; 0x0a
 a92:	b9 84       	ldd	r11, Y+9	; 0x09
 a94:	c8 84       	ldd	r12, Y+8	; 0x08
 a96:	df 80       	ldd	r13, Y+7	; 0x07
 a98:	ee 80       	ldd	r14, Y+6	; 0x06
 a9a:	fd 80       	ldd	r15, Y+5	; 0x05
 a9c:	0c 81       	ldd	r16, Y+4	; 0x04
 a9e:	1b 81       	ldd	r17, Y+3	; 0x03
 aa0:	aa 81       	ldd	r26, Y+2	; 0x02
 aa2:	b9 81       	ldd	r27, Y+1	; 0x01
 aa4:	ce 0f       	add	r28, r30
 aa6:	d1 1d       	adc	r29, r1
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	ed 01       	movw	r28, r26
 aae:	08 95       	ret

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
