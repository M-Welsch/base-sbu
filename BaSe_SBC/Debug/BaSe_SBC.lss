
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803e00  00001f36  00001fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000312  00009c24  00001c24  00001cd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000011f  00803e06  00803e06  00001ff0  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000408  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000087d0  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000292a  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002372  00000000  00000000  0000d58a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a64  00000000  00000000  0000f8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002495  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b44  00000000  00000000  000127f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000368  00000000  00000000  00014339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	0a c1       	rjmp	.+532    	; 0x21c <__vector_3>
       8:	31 c1       	rjmp	.+610    	; 0x26c <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	3d c7       	rjmp	.+3706   	; 0xe88 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	7e c1       	rjmp	.+764    	; 0x312 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	38 c9       	rjmp	.-3472   	; 0xfffff29e <__eeprom_end+0xff7ef29e>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e6 e3       	ldi	r30, 0x36	; 54
      48:	ff e1       	ldi	r31, 0x1F	; 31
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a6 30       	cpi	r26, 0x06	; 6
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	a6 e0       	ldi	r26, 0x06	; 6
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a5 32       	cpi	r26, 0x25	; 37
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	26 d2       	rcall	.+1100   	; 0x4b4 <main>
      68:	db cd       	rjmp	.-1098   	; 0xfffffc20 <__eeprom_end+0xff7efc20>

0000006a <__bad_interrupt>:
      6a:	1c c1       	rjmp	.+568    	; 0x2a4 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
      fc:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <flag_button_0_pressed>
	flag_heartbeat = false;
     100:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <flag_heartbeat>
     104:	08 95       	ret

00000106 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     106:	e0 e0       	ldi	r30, 0x00	; 0
     108:	f4 e0       	ldi	r31, 0x04	; 4
     10a:	81 89       	ldd	r24, Z+17	; 0x11
     10c:	88 7f       	andi	r24, 0xF8	; 248
     10e:	81 8b       	std	Z+17, r24	; 0x11
     110:	81 89       	ldd	r24, Z+17	; 0x11
     112:	84 60       	ori	r24, 0x04	; 4
     114:	81 8b       	std	Z+17, r24	; 0x11
     116:	85 89       	ldd	r24, Z+21	; 0x15
     118:	88 7f       	andi	r24, 0xF8	; 248
     11a:	85 8b       	std	Z+21, r24	; 0x15
     11c:	85 89       	ldd	r24, Z+21	; 0x15
     11e:	84 60       	ori	r24, 0x04	; 4
     120:	85 8b       	std	Z+21, r24	; 0x15
     122:	08 95       	ret

00000124 <init_pins>:
     124:	e0 e0       	ldi	r30, 0x00	; 0
     126:	f4 e0       	ldi	r31, 0x04	; 4
     128:	80 e8       	ldi	r24, 0x80	; 128
     12a:	86 83       	std	Z+6, r24	; 0x06
     12c:	81 83       	std	Z+1, r24	; 0x01
     12e:	80 e4       	ldi	r24, 0x40	; 64
     130:	81 83       	std	Z+1, r24	; 0x01
     132:	80 e1       	ldi	r24, 0x10	; 16
     134:	85 83       	std	Z+5, r24	; 0x05
     136:	81 83       	std	Z+1, r24	; 0x01
     138:	8c e0       	ldi	r24, 0x0C	; 12
     13a:	82 83       	std	Z+2, r24	; 0x02
     13c:	82 89       	ldd	r24, Z+18	; 0x12
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	82 8b       	std	Z+18, r24	; 0x12
     142:	83 89       	ldd	r24, Z+19	; 0x13
     144:	88 60       	ori	r24, 0x08	; 8
     146:	83 8b       	std	Z+19, r24	; 0x13
     148:	e0 e2       	ldi	r30, 0x20	; 32
     14a:	f4 e0       	ldi	r31, 0x04	; 4
     14c:	83 e1       	ldi	r24, 0x13	; 19
     14e:	81 83       	std	Z+1, r24	; 0x01
     150:	80 e2       	ldi	r24, 0x20	; 32
     152:	82 83       	std	Z+2, r24	; 0x02
     154:	a0 e4       	ldi	r26, 0x40	; 64
     156:	b4 e0       	ldi	r27, 0x04	; 4
     158:	8f e0       	ldi	r24, 0x0F	; 15
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	8c 93       	st	X, r24
     15e:	11 97       	sbiw	r26, 0x01	; 1
     160:	15 96       	adiw	r26, 0x05	; 5
     162:	1c 92       	st	X, r1
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	81 83       	std	Z+1, r24	; 0x01
     168:	ce df       	rcall	.-100    	; 0x106 <disable_digital_input_buffers_for_adc>
     16a:	08 95       	ret

0000016c <button_1_pressed>:
     16c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     170:	86 95       	lsr	r24
     172:	86 95       	lsr	r24
     174:	86 95       	lsr	r24
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	89 27       	eor	r24, r25
     17a:	81 70       	andi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	08 95       	ret

00000180 <set_interrupts_for_buttons>:
     180:	e0 e0       	ldi	r30, 0x00	; 0
     182:	f4 e0       	ldi	r31, 0x04	; 4
     184:	82 89       	ldd	r24, Z+18	; 0x12
     186:	83 60       	ori	r24, 0x03	; 3
     188:	82 8b       	std	Z+18, r24	; 0x12
     18a:	83 89       	ldd	r24, Z+19	; 0x13
     18c:	83 60       	ori	r24, 0x03	; 3
     18e:	83 8b       	std	Z+19, r24	; 0x13
     190:	08 95       	ret

00000192 <dim_display>:
     192:	18 16       	cp	r1, r24
     194:	19 06       	cpc	r1, r25
     196:	44 f4       	brge	.+16     	; 0x1a8 <dim_display+0x16>
     198:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <current_pwr_state>
     19c:	88 23       	and	r24, r24
     19e:	21 f0       	breq	.+8      	; 0x1a8 <dim_display+0x16>
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1a6:	08 95       	ret
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1ae:	08 95       	ret

000001b0 <display_enable>:
     1b0:	e0 e0       	ldi	r30, 0x00	; 0
     1b2:	f4 e0       	ldi	r31, 0x04	; 4
     1b4:	80 e8       	ldi	r24, 0x80	; 128
     1b6:	85 83       	std	Z+5, r24	; 0x05
     1b8:	92 e4       	ldi	r25, 0x42	; 66
     1ba:	9a 95       	dec	r25
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <display_enable+0xa>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <display_enable+0x10>
     1c0:	86 83       	std	Z+6, r24	; 0x06
     1c2:	82 e4       	ldi	r24, 0x42	; 66
     1c4:	8a 95       	dec	r24
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <display_enable+0x14>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <display_enable+0x1a>
     1ca:	08 95       	ret

000001cc <set_display_data_pins>:
     1cc:	e0 e4       	ldi	r30, 0x40	; 64
     1ce:	f4 e0       	ldi	r31, 0x04	; 4
     1d0:	94 81       	ldd	r25, Z+4	; 0x04
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	94 83       	std	Z+4, r25	; 0x04
     1d6:	94 81       	ldd	r25, Z+4	; 0x04
     1d8:	8f 70       	andi	r24, 0x0F	; 15
     1da:	98 2b       	or	r25, r24
     1dc:	94 83       	std	Z+4, r25	; 0x04
     1de:	08 95       	ret

000001e0 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     1e0:	80 e4       	ldi	r24, 0x40	; 64
     1e2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     1e6:	08 95       	ret

000001e8 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1e8:	80 e4       	ldi	r24, 0x40	; 64
     1ea:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1ee:	08 95       	ret

000001f0 <display_control_pins_low>:
}

void display_control_pins_low() {
	set_display_data_pins(0x00);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	ec df       	rcall	.-40     	; 0x1cc <set_display_data_pins>
void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1f4:	80 e4       	ldi	r24, 0x40	; 64
     1f6:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1fa:	08 95       	ret

000001fc <set_pb2_txd_and_pb3_rxd>:
	display_clear_rs_pin();	
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     1fc:	e0 e2       	ldi	r30, 0x20	; 32
     1fe:	f4 e0       	ldi	r31, 0x04	; 4
     200:	84 e0       	ldi	r24, 0x04	; 4
     202:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     204:	81 83       	std	Z+1, r24	; 0x01
     206:	08 95       	ret

00000208 <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     20e:	08 95       	ret

00000210 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     210:	e0 e2       	ldi	r30, 0x20	; 32
     212:	f4 e0       	ldi	r31, 0x04	; 4
     214:	85 89       	ldd	r24, Z+21	; 0x15
     216:	89 60       	ori	r24, 0x09	; 9
     218:	85 8b       	std	Z+21, r24	; 0x15
     21a:	08 95       	ret

0000021c <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	8f 93       	push	r24
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     22c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     230:	82 ff       	sbrs	r24, 2
     232:	08 c0       	rjmp	.+16     	; 0x244 <__vector_3+0x28>
		flag_button_0_pressed = true;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	80 93 60 3e 	sts	0x3E60, r24	; 0x803e60 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     23a:	e9 e0       	ldi	r30, 0x09	; 9
     23c:	f4 e0       	ldi	r31, 0x04	; 4
     23e:	80 81       	ld	r24, Z
     240:	84 70       	andi	r24, 0x04	; 4
     242:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     244:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     248:	83 ff       	sbrs	r24, 3
     24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_3+0x40>
		flag_button_1_pressed = true;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     252:	e9 e0       	ldi	r30, 0x09	; 9
     254:	f4 e0       	ldi	r31, 0x04	; 4
     256:	80 81       	ld	r24, Z
     258:	88 70       	andi	r24, 0x08	; 8
     25a:	80 83       	st	Z, r24
	}
}
     25c:	ff 91       	pop	r31
     25e:	ef 91       	pop	r30
     260:	8f 91       	pop	r24
     262:	0f 90       	pop	r0
     264:	0f be       	out	0x3f, r0	; 63
     266:	0f 90       	pop	r0
     268:	1f 90       	pop	r1
     26a:	18 95       	reti

0000026c <__vector_4>:

ISR(PORTB_PORT_vect)
{
     26c:	1f 92       	push	r1
     26e:	0f 92       	push	r0
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	11 24       	eor	r1, r1
     276:	8f 93       	push	r24
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     27c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     280:	85 ff       	sbrs	r24, 5
     282:	08 c0       	rjmp	.+16     	; 0x294 <__vector_4+0x28>
		flag_heartbeat = true;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     28a:	e9 e2       	ldi	r30, 0x29	; 41
     28c:	f4 e0       	ldi	r31, 0x04	; 4
     28e:	80 81       	ld	r24, Z
     290:	80 72       	andi	r24, 0x20	; 32
     292:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	8f 91       	pop	r24
     29a:	0f 90       	pop	r0
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	0f 90       	pop	r0
     2a0:	1f 90       	pop	r1
     2a2:	18 95       	reti

000002a4 <__vector_default>:

ISR(BADISR_vect)
{
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
     2ae:	2f 93       	push	r18
     2b0:	3f 93       	push	r19
     2b2:	4f 93       	push	r20
     2b4:	5f 93       	push	r21
     2b6:	6f 93       	push	r22
     2b8:	7f 93       	push	r23
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
	/* This routine is called if a non defined interrupt-vector is requested */
	USART0_sendString_w_newline_eol("bad ISR");
     2c6:	86 e2       	ldi	r24, 0x26	; 38
     2c8:	9c e9       	ldi	r25, 0x9C	; 156
     2ca:	48 d6       	rcall	.+3216   	; 0xf5c <USART0_sendString_w_newline_eol>
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	bf 91       	pop	r27
     2d2:	af 91       	pop	r26
     2d4:	9f 91       	pop	r25
     2d6:	8f 91       	pop	r24
     2d8:	7f 91       	pop	r23
     2da:	6f 91       	pop	r22
     2dc:	5f 91       	pop	r21
     2de:	4f 91       	pop	r20
     2e0:	3f 91       	pop	r19
     2e2:	2f 91       	pop	r18
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_newline_eol(buffer);
}
     2ee:	e0 e0       	ldi	r30, 0x00	; 0
     2f0:	fa e0       	ldi	r31, 0x0A	; 10
     2f2:	8b e2       	ldi	r24, 0x2B	; 43
     2f4:	9a e0       	ldi	r25, 0x0A	; 10
     2f6:	86 a3       	std	Z+38, r24	; 0x26
     2f8:	97 a3       	std	Z+39, r25	; 0x27
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	82 87       	std	Z+10, r24	; 0x0a
     2fe:	08 95       	ret

00000300 <init_heatbeat_monitor>:
     300:	87 df       	rcall	.-242    	; 0x210 <setup_interrupt_for_hb_edge_detection>
     302:	f5 df       	rcall	.-22     	; 0x2ee <setup_interrupt_timeout_detection>
     304:	08 95       	ret

00000306 <heartbeat_monitor>:
     306:	80 91 5f 3e 	lds	r24, 0x3E5F	; 0x803e5f <flag_heartbeat>
     30a:	81 11       	cpse	r24, r1
     30c:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <flag_heartbeat>
     310:	08 95       	ret

00000312 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     31c:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <flag_bpi_heartbeat_ok>
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     32a:	90 91 60 3e 	lds	r25, 0x3E60	; 0x803e60 <flag_button_0_pressed>
     32e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_1_pressed>
     332:	81 11       	cpse	r24, r1
     334:	02 c0       	rjmp	.+4      	; 0x33a <mainloop_standby+0x10>
     336:	99 23       	and	r25, r25
     338:	41 f0       	breq	.+16     	; 0x34a <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     33a:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <flag_button_0_pressed>
		flag_button_1_pressed = false;
     33e:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 da 3e 	sts	0x3EDA, r24	; 0x803eda <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     348:	d6 d4       	rcall	.+2476   	; 0xcf6 <transition_to_pwr_state>
     34a:	2f ef       	ldi	r18, 0xFF	; 255
     34c:	80 e7       	ldi	r24, 0x70	; 112
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	21 50       	subi	r18, 0x01	; 1
     352:	80 40       	sbci	r24, 0x00	; 0
     354:	90 40       	sbci	r25, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <mainloop_standby+0x26>
     358:	00 c0       	rjmp	.+0      	; 0x35a <mainloop_standby+0x30>
     35a:	00 00       	nop
     35c:	08 95       	ret

0000035e <mainloop_display_on>:
void reset_idle_timer() {
	/* if timer matches, it brings the sbu back to standby. This function resetts the timer */
	;
}

void mainloop_display_on() {
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
	if (flag_entering_mainloop_display_on) {
     368:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_entering_mainloop_display_on>
     36c:	88 23       	and	r24, r24
     36e:	b9 f0       	breq	.+46     	; 0x39e <mainloop_display_on+0x40>
		flag_entering_mainloop_display_on = false;
     370:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     374:	80 eb       	ldi	r24, 0xB0	; 176
     376:	94 e0       	ldi	r25, 0x04	; 4
     378:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     37c:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     380:	86 e0       	ldi	r24, 0x06	; 6
     382:	95 e0       	ldi	r25, 0x05	; 5
     384:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     388:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
		button1_action = show_menu_actions;
     38c:	81 ec       	ldi	r24, 0xC1	; 193
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     394:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
		dim_display(1);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	fa de       	rcall	.-524    	; 0x192 <dim_display>
	}
	reset_idle_timer();
	show_menu();
     39e:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     3a2:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     3a6:	09 95       	icall
     3a8:	2f ef       	ldi	r18, 0xFF	; 255
     3aa:	80 e7       	ldi	r24, 0x70	; 112
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	80 40       	sbci	r24, 0x00	; 0
     3b2:	90 40       	sbci	r25, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <mainloop_display_on+0x50>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <mainloop_display_on+0x5a>
     3b8:	00 00       	nop
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
     3ba:	10 92 db 3e 	sts	0x3EDB, r1	; 0x803edb <menu_show_counter>
     3be:	10 92 dc 3e 	sts	0x3EDC, r1	; 0x803edc <menu_show_counter+0x1>
	while(!flag_button_0_pressed & !button_1_pressed()) {
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3c2:	0e e2       	ldi	r16, 0x2E	; 46
     3c4:	1c e9       	ldi	r17, 0x9C	; 156
     3c6:	c4 e7       	ldi	r28, 0x74	; 116
     3c8:	de e3       	ldi	r29, 0x3E	; 62
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     3ca:	2d c0       	rjmp	.+90     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3cc:	8f e1       	ldi	r24, 0x1F	; 31
     3ce:	9e e4       	ldi	r25, 0x4E	; 78
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <mainloop_display_on+0x72>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <mainloop_display_on+0x78>
     3d6:	00 00       	nop
		_delay_ms(10);
		sprintf(buffer,"menu counter: %d\n", menu_show_counter);
     3d8:	80 91 dc 3e 	lds	r24, 0x3EDC	; 0x803edc <menu_show_counter+0x1>
     3dc:	8f 93       	push	r24
     3de:	80 91 db 3e 	lds	r24, 0x3EDB	; 0x803edb <menu_show_counter>
     3e2:	8f 93       	push	r24
     3e4:	1f 93       	push	r17
     3e6:	0f 93       	push	r16
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	1f d9       	rcall	.-3522   	; 0xfffff62c <__eeprom_end+0xff7ef62c>
		USART0_sendString(buffer);
     3ee:	ce 01       	movw	r24, r28
     3f0:	94 d5       	rcall	.+2856   	; 0xf1a <USART0_sendString>
		menu_show_counter++;
     3f2:	80 91 db 3e 	lds	r24, 0x3EDB	; 0x803edb <menu_show_counter>
     3f6:	90 91 dc 3e 	lds	r25, 0x3EDC	; 0x803edc <menu_show_counter+0x1>
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	80 93 db 3e 	sts	0x3EDB, r24	; 0x803edb <menu_show_counter>
     400:	90 93 dc 3e 	sts	0x3EDC, r25	; 0x803edc <menu_show_counter+0x1>
		if (flag_wakeup_by_rtc) {
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	20 91 0c 3e 	lds	r18, 0x3E0C	; 0x803e0c <flag_wakeup_by_rtc>
     414:	21 11       	cpse	r18, r1
     416:	10 c0       	rjmp	.+32     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			break;
		}
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
     418:	8d 32       	cpi	r24, 0x2D	; 45
     41a:	91 40       	sbci	r25, 0x01	; 1
     41c:	20 f0       	brcs	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			flag_goto_sleep = true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_goto_sleep>
			break;
     424:	09 c0       	rjmp	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	}
	reset_idle_timer();
	show_menu();
	_delay_ms(100); //debouncing
	menu_show_counter = 0;
	while(!flag_button_0_pressed & !button_1_pressed()) {
     426:	f0 90 60 3e 	lds	r15, 0x3E60	; 0x803e60 <flag_button_0_pressed>
     42a:	a0 de       	rcall	.-704    	; 0x16c <button_1_pressed>
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	89 2b       	or	r24, r25
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	f2 16       	cp	r15, r18
     436:	50 f2       	brcs	.-108    	; 0x3cc <mainloop_display_on+0x6e>
		if (menu_show_counter > 300) { //should be 1000 without usart send statements
			flag_goto_sleep = true;
			break;
		}
	}
	USART0_sendString("out of loop");
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	9c e9       	ldi	r25, 0x9C	; 156
     43c:	6e d5       	rcall	.+2780   	; 0xf1a <USART0_sendString>
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     43e:	80 91 60 3e 	lds	r24, 0x3E60	; 0x803e60 <flag_button_0_pressed>
     442:	88 23       	and	r24, r24
     444:	39 f0       	breq	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		flag_button_0_pressed = false;
     446:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <flag_button_0_pressed>
		button0_action();
     44a:	e0 91 1b 3e 	lds	r30, 0x3E1B	; 0x803e1b <button0_action>
     44e:	f0 91 1c 3e 	lds	r31, 0x3E1C	; 0x803e1c <button0_action+0x1>
     452:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     454:	8b de       	rcall	.-746    	; 0x16c <button_1_pressed>
     456:	89 2b       	or	r24, r25
     458:	39 f0       	breq	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		flag_button_1_pressed = false;
     45a:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_1_pressed>
		button1_action();
     45e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <button1_action>
     462:	f0 91 1a 3e 	lds	r31, 0x3E1A	; 0x803e1a <button1_action+0x1>
     466:	09 95       	icall
	}
	
	if (flag_goto_sleep) {
     468:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_goto_sleep>
     46c:	88 23       	and	r24, r24
     46e:	49 f0       	breq	.+18     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		USART0_sendString("going to sleep ...\n");
     470:	8c e4       	ldi	r24, 0x4C	; 76
     472:	9c e9       	ldi	r25, 0x9C	; 156
     474:	52 d5       	rcall	.+2724   	; 0xf1a <USART0_sendString>
		flag_goto_sleep = false;
     476:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_goto_sleep>
		next_pwr_state = standby;
     47a:	10 92 da 3e 	sts	0x3EDA, r1	; 0x803eda <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	3a d4       	rcall	.+2164   	; 0xcf6 <transition_to_pwr_state>
	}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	08 95       	ret

0000048e <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     48e:	36 de       	rcall	.-916    	; 0xfc <init_flags>
	init_pins();
     490:	49 de       	rcall	.-878    	; 0x124 <init_pins>
	init_heatbeat_monitor();
     492:	36 df       	rcall	.-404    	; 0x300 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     494:	75 de       	rcall	.-790    	; 0x180 <set_interrupts_for_buttons>
	init_uart();
     496:	2e d5       	rcall	.+2652   	; 0xef4 <init_uart>
	init_display();
     498:	35 d1       	rcall	.+618    	; 0x704 <init_display>
	adc_init();
     49a:	f3 dd       	rcall	.-1050   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     49c:	81 e1       	ldi	r24, 0x11	; 17
     49e:	e0 e6       	ldi	r30, 0x60	; 96
     4a0:	fc e9       	ldi	r31, 0x9C	; 156
     4a2:	a4 ea       	ldi	r26, 0xA4	; 164
     4a4:	be e3       	ldi	r27, 0x3E	; 62
     4a6:	01 90       	ld	r0, Z+
     4a8:	0d 92       	st	X+, r0
     4aa:	8a 95       	dec	r24
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <init_sbu+0x18>
	dimmer_init();
     4ae:	fd d1       	rcall	.+1018   	; 0x8aa <dimmer_init>
	sei();
     4b0:	78 94       	sei
     4b2:	08 95       	ret

000004b4 <main>:
}

int main(void)
{
	init_sbu();
     4b4:	ec df       	rcall	.-40     	; 0x48e <init_sbu>

	display_write_string("Backup Server\nstarting up!");
     4b6:	81 e7       	ldi	r24, 0x71	; 113
     4b8:	9c e9       	ldi	r25, 0x9C	; 156
     4ba:	d4 d1       	rcall	.+936    	; 0x864 <display_write_string>
	USART0_sendString("I:STARTED");
     4bc:	8c e8       	ldi	r24, 0x8C	; 140
     4be:	9c e9       	ldi	r25, 0x9C	; 156
     4c0:	2c d5       	rcall	.+2648   	; 0xf1a <USART0_sendString>
	dim_display(1);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	65 de       	rcall	.-822    	; 0x192 <dim_display>
	
	current_pwr_state = active;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	80 93 63 3e 	sts	0x3E63, r24	; 0x803e63 <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4ce:	cf e8       	ldi	r28, 0x8F	; 143
     4d0:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4d2:	0f 2e       	mov	r0, r31
     4d4:	ff ea       	ldi	r31, 0xAF	; 175
     4d6:	cf 2e       	mov	r12, r31
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	df 2e       	mov	r13, r31
     4dc:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4de:	0f 2e       	mov	r0, r31
     4e0:	f5 e9       	ldi	r31, 0x95	; 149
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	ff 2e       	mov	r15, r31
     4e8:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4ea:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4ec:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <current_pwr_state>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	39 f0       	breq	.+14     	; 0x502 <main+0x4e>
     4f4:	20 f0       	brcs	.+8      	; 0x4fe <main+0x4a>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	29 f4       	brne	.+10     	; 0x504 <main+0x50>
			case active:
				mainloop = mainloop_active;
     4fa:	e8 01       	movw	r28, r16
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     4fe:	e7 01       	movw	r28, r14
				break;
     500:	01 c0       	rjmp	.+2      	; 0x504 <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     502:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     504:	fe 01       	movw	r30, r28
     506:	09 95       	icall
    }
     508:	f1 cf       	rjmp	.-30     	; 0x4ec <main+0x38>

0000050a <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     50a:	e0 e5       	ldi	r30, 0x50	; 80
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	82 60       	ori	r24, 0x02	; 2
     512:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     514:	80 81       	ld	r24, Z
     516:	81 60       	ori	r24, 0x01	; 1
     518:	80 83       	st	Z, r24
	sleep_cpu();
     51a:	88 95       	sleep
     51c:	08 95       	ret

0000051e <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	37 de       	rcall	.-914    	; 0x192 <dim_display>
	heartbeat_monitor();
     524:	f0 de       	rcall	.-544    	; 0x306 <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     526:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <flag_bpi_heartbeat_ok>
     52a:	81 11       	cpse	r24, r1
     52c:	01 c0       	rjmp	.+2      	; 0x530 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     52e:	6c de       	rcall	.-808    	; 0x208 <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     530:	80 91 60 3e 	lds	r24, 0x3E60	; 0x803e60 <flag_button_0_pressed>
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <mainloop_active+0x20>
		flag_button_0_pressed = false;
     538:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <flag_button_0_pressed>
		led_hmi_off();
     53c:	f8 d1       	rcall	.+1008   	; 0x92e <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     53e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_button_1_pressed>
     542:	88 23       	and	r24, r24
     544:	29 f0       	breq	.+10     	; 0x550 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     546:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     54a:	86 e9       	ldi	r24, 0x96	; 150
     54c:	9c e9       	ldi	r25, 0x9C	; 156
     54e:	e5 d4       	rcall	.+2506   	; 0xf1a <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     550:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <flag_usart_string_receive_complete>
     554:	88 23       	and	r24, r24
     556:	19 f0       	breq	.+6      	; 0x55e <mainloop_active+0x40>
		USART0_process_incoming_message();
     558:	59 d5       	rcall	.+2738   	; 0x100c <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     55a:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     55e:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <flag_string_for_display_received>
     562:	88 23       	and	r24, r24
     564:	59 f0       	breq	.+22     	; 0x57c <mainloop_active+0x5e>
		flag_string_for_display_received = false;
     566:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <flag_string_for_display_received>
		display_clear();
     56a:	8f d1       	rcall	.+798    	; 0x88a <display_clear>
		display_write_string(display_line1_content);
     56c:	8d ed       	ldi	r24, 0xDD	; 221
     56e:	9e e3       	ldi	r25, 0x3E	; 62
     570:	79 d1       	rcall	.+754    	; 0x864 <display_write_string>
		display_next_line();
     572:	6e d1       	rcall	.+732    	; 0x850 <display_next_line>
		display_write_string(display_line2_content);
     574:	85 ec       	ldi	r24, 0xC5	; 197
     576:	9e e3       	ldi	r25, 0x3E	; 62
     578:	75 d1       	rcall	.+746    	; 0x864 <display_write_string>
		USART0_send_ready();
     57a:	f6 d4       	rcall	.+2540   	; 0xf68 <USART0_send_ready>
	}
	
	if (flag_pwr_state_change_request == true) {
     57c:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <flag_pwr_state_change_request>
     580:	88 23       	and	r24, r24
     582:	61 f0       	breq	.+24     	; 0x59c <mainloop_active+0x7e>
		display_clear();
     584:	82 d1       	rcall	.+772    	; 0x88a <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     586:	80 ea       	ldi	r24, 0xA0	; 160
     588:	9c e9       	ldi	r25, 0x9C	; 156
     58a:	6c d1       	rcall	.+728    	; 0x864 <display_write_string>
		flag_pwr_state_change_request = false;
     58c:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     590:	80 91 da 3e 	lds	r24, 0x3EDA	; 0x803eda <next_pwr_state>
     594:	b0 d3       	rcall	.+1888   	; 0xcf6 <transition_to_pwr_state>
		flag_goto_sleep = true;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_goto_sleep>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     59c:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_human_readable_timestamp_next_bu_received>
     5a0:	88 23       	and	r24, r24
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <mainloop_active+0x94>
		display_clear();
     5a4:	72 d1       	rcall	.+740    	; 0x88a <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     5a6:	84 ea       	ldi	r24, 0xA4	; 164
     5a8:	9e e3       	ldi	r25, 0x3E	; 62
     5aa:	5c d1       	rcall	.+696    	; 0x864 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     5ac:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_human_readable_timestamp_next_bu_received>
		USART0_send_ready();
     5b0:	db d4       	rcall	.+2486   	; 0xf68 <USART0_send_ready>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     5b2:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_received_seconds_to_next_bu>
     5b6:	88 23       	and	r24, r24
     5b8:	11 f1       	breq	.+68     	; 0x5fe <mainloop_active+0xe0>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     5ba:	80 91 d9 3e 	lds	r24, 0x3ED9	; 0x803ed9 <seconds_to_next_bu+0x3>
     5be:	8f 93       	push	r24
     5c0:	80 91 d8 3e 	lds	r24, 0x3ED8	; 0x803ed8 <seconds_to_next_bu+0x2>
     5c4:	8f 93       	push	r24
     5c6:	80 91 d7 3e 	lds	r24, 0x3ED7	; 0x803ed7 <seconds_to_next_bu+0x1>
     5ca:	8f 93       	push	r24
     5cc:	80 91 d6 3e 	lds	r24, 0x3ED6	; 0x803ed6 <seconds_to_next_bu>
     5d0:	8f 93       	push	r24
     5d2:	8d eb       	ldi	r24, 0xBD	; 189
     5d4:	9c e9       	ldi	r25, 0x9C	; 156
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	84 e7       	ldi	r24, 0x74	; 116
     5dc:	9e e3       	ldi	r25, 0x3E	; 62
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	24 d8       	rcall	.-4024   	; 0xfffff62c <__eeprom_end+0xff7ef62c>
		USART0_sendString_w_newline_eol(buffer);
     5e4:	84 e7       	ldi	r24, 0x74	; 116
     5e6:	9e e3       	ldi	r25, 0x3E	; 62
     5e8:	b9 d4       	rcall	.+2418   	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_received_seconds_to_next_bu = false;
     5ea:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5ee:	09 d4       	rcall	.+2066   	; 0xe02 <rtc_write_seconds_to_cmp>
		rtc_setup();
     5f0:	fc d3       	rcall	.+2040   	; 0xdea <rtc_setup>
		USART0_send_ready();
     5f2:	ba d4       	rcall	.+2420   	; 0xf68 <USART0_send_ready>
     5f4:	8d b7       	in	r24, 0x3d	; 61
     5f6:	9e b7       	in	r25, 0x3e	; 62
     5f8:	08 96       	adiw	r24, 0x08	; 8
     5fa:	8d bf       	out	0x3d, r24	; 61
     5fc:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     5fe:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_goto_sleep>
     602:	88 23       	and	r24, r24
     604:	79 f0       	breq	.+30     	; 0x624 <mainloop_active+0x106>
		flag_goto_sleep = false;
     606:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_goto_sleep>
		USART0_sendString_w_newline_eol("going to sleep ...\n");
     60a:	8c e4       	ldi	r24, 0x4C	; 76
     60c:	9c e9       	ldi	r25, 0x9C	; 156
     60e:	a6 d4       	rcall	.+2380   	; 0xf5c <USART0_sendString_w_newline_eol>
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	20 e7       	ldi	r18, 0x70	; 112
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	91 50       	subi	r25, 0x01	; 1
     618:	20 40       	sbci	r18, 0x00	; 0
     61a:	80 40       	sbci	r24, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <mainloop_active+0xf8>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <mainloop_active+0x102>
     620:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     622:	73 df       	rcall	.-282    	; 0x50a <goto_sleep_standby>
	}
	
	if (flag_request_current_measurement == true) {
     624:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_request_current_measurement>
     628:	88 23       	and	r24, r24
     62a:	c1 f0       	breq	.+48     	; 0x65c <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     62c:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     630:	4d dd       	rcall	.-1382   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"CC:%d", input_current);
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	8a ed       	ldi	r24, 0xDA	; 218
     638:	9c e9       	ldi	r25, 0x9C	; 156
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	84 e7       	ldi	r24, 0x74	; 116
     640:	9e e3       	ldi	r25, 0x3E	; 62
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	f2 d7       	rcall	.+4068   	; 0x162c <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     648:	84 e7       	ldi	r24, 0x74	; 116
     64a:	9e e3       	ldi	r25, 0x3E	; 62
     64c:	87 d4       	rcall	.+2318   	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     64e:	8c d4       	rcall	.+2328   	; 0xf68 <USART0_send_ready>
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if	(flag_request_temperature_measurement == true) {
     65c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_request_temperature_measurement>
     660:	88 23       	and	r24, r24
     662:	c1 f0       	breq	.+48     	; 0x694 <mainloop_active+0x176>
		flag_request_temperature_measurement = false;
     664:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     668:	3d dd       	rcall	.-1414   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TP:%d", temperature);
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	80 ee       	ldi	r24, 0xE0	; 224
     670:	9c e9       	ldi	r25, 0x9C	; 156
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	84 e7       	ldi	r24, 0x74	; 116
     678:	9e e3       	ldi	r25, 0x3E	; 62
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	d6 d7       	rcall	.+4012   	; 0x162c <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     680:	84 e7       	ldi	r24, 0x74	; 116
     682:	9e e3       	ldi	r25, 0x3E	; 62
     684:	6b d4       	rcall	.+2262   	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     686:	70 d4       	rcall	.+2272   	; 0xf68 <USART0_send_ready>
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_request_3v3_measurement == true) {
     694:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_request_3v3_measurement>
     698:	88 23       	and	r24, r24
     69a:	c1 f0       	breq	.+48     	; 0x6cc <mainloop_active+0x1ae>
		flag_request_3v3_measurement = false;
     69c:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     6a0:	09 dd       	rcall	.-1518   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V:%d", voltage_3v3);
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	86 ee       	ldi	r24, 0xE6	; 230
     6a8:	9c e9       	ldi	r25, 0x9C	; 156
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	84 e7       	ldi	r24, 0x74	; 116
     6b0:	9e e3       	ldi	r25, 0x3E	; 62
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	ba d7       	rcall	.+3956   	; 0x162c <sprintf>
		USART0_sendString_w_newline_eol(buffer);
     6b8:	84 e7       	ldi	r24, 0x74	; 116
     6ba:	9e e3       	ldi	r25, 0x3E	; 62
     6bc:	4f d4       	rcall	.+2206   	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_send_ready();
     6be:	54 d4       	rcall	.+2216   	; 0xf68 <USART0_send_ready>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
		//display_clear();
		//display_write_string(buffer);
	}
	
	if (flag_dim_display) {
     6cc:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_dim_display>
     6d0:	81 11       	cpse	r24, r1
		//set_dimming_value_display_bl(dimming_value_display);		
		//display_clear();
		//sprintf(buffer,"%u", dimming_value_display);
		//display_write_string(buffer);
		//Todo: update_default_display_dimming_value_in_eeprom();
		flag_dim_display = false;
     6d2:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_dim_display>
		//USART0_send_ready();
	}
	
	if (flag_dim_hmi_led) {
     6d6:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_dim_hmi_led>
     6da:	88 23       	and	r24, r24
     6dc:	41 f0       	breq	.+16     	; 0x6ee <mainloop_active+0x1d0>
		flag_dim_hmi_led = false;
     6de:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_dim_hmi_led>
		set_hmi_led_dimming_value(dimming_value_hmi_led);
     6e2:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <dimming_value_hmi_led>
     6e6:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <dimming_value_hmi_led+0x1>
     6ea:	13 d1       	rcall	.+550    	; 0x912 <set_hmi_led_dimming_value>
		USART0_send_ready();
     6ec:	3d d4       	rcall	.+2170   	; 0xf68 <USART0_send_ready>
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	20 e7       	ldi	r18, 0x70	; 112
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	91 50       	subi	r25, 0x01	; 1
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <mainloop_active+0x1d6>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <mainloop_active+0x1e0>
     6fe:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     700:	1b d1       	rcall	.+566    	; 0x938 <toggle_hmi_led>
     702:	08 95       	ret

00000704 <init_display>:
void set_dimming_value_display_bl(uint16_t dimming_value) {
	TCA0.SINGLE.CMP0 = dimming_value;
}

void set_dimming_value_led(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     704:	2f e7       	ldi	r18, 0x7F	; 127
     706:	8a e1       	ldi	r24, 0x1A	; 26
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	21 50       	subi	r18, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <init_display+0x6>
     712:	00 c0       	rjmp	.+0      	; 0x714 <init_display+0x10>
     714:	00 00       	nop
     716:	68 dd       	rcall	.-1328   	; 0x1e8 <display_clear_rs_pin>
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	58 dd       	rcall	.-1360   	; 0x1cc <set_display_data_pins>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	48 dd       	rcall	.-1392   	; 0x1b0 <display_enable>
     720:	87 e8       	ldi	r24, 0x87	; 135
     722:	93 e1       	ldi	r25, 0x13	; 19
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <init_display+0x20>
     728:	00 c0       	rjmp	.+0      	; 0x72a <init_display+0x26>
     72a:	00 00       	nop
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	4e dd       	rcall	.-1380   	; 0x1cc <set_display_data_pins>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	3e dd       	rcall	.-1412   	; 0x1b0 <display_enable>
     734:	87 e8       	ldi	r24, 0x87	; 135
     736:	93 e1       	ldi	r25, 0x13	; 19
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <init_display+0x34>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <init_display+0x3a>
     73e:	00 00       	nop
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	44 dd       	rcall	.-1400   	; 0x1cc <set_display_data_pins>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	34 dd       	rcall	.-1432   	; 0x1b0 <display_enable>
     748:	87 e8       	ldi	r24, 0x87	; 135
     74a:	93 e1       	ldi	r25, 0x13	; 19
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <init_display+0x48>
     750:	00 c0       	rjmp	.+0      	; 0x752 <init_display+0x4e>
     752:	00 00       	nop
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	3a dd       	rcall	.-1420   	; 0x1cc <set_display_data_pins>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	2a dd       	rcall	.-1452   	; 0x1b0 <display_enable>
     75c:	87 e8       	ldi	r24, 0x87	; 135
     75e:	93 e1       	ldi	r25, 0x13	; 19
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <init_display+0x5c>
     764:	00 c0       	rjmp	.+0      	; 0x766 <init_display+0x62>
     766:	00 00       	nop
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	30 dd       	rcall	.-1440   	; 0x1cc <set_display_data_pins>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	20 dd       	rcall	.-1472   	; 0x1b0 <display_enable>
     770:	87 e8       	ldi	r24, 0x87	; 135
     772:	93 e1       	ldi	r25, 0x13	; 19
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <init_display+0x70>
     778:	00 c0       	rjmp	.+0      	; 0x77a <init_display+0x76>
     77a:	00 00       	nop
     77c:	88 e0       	ldi	r24, 0x08	; 8
     77e:	26 dd       	rcall	.-1460   	; 0x1cc <set_display_data_pins>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	16 dd       	rcall	.-1492   	; 0x1b0 <display_enable>
     784:	87 e8       	ldi	r24, 0x87	; 135
     786:	93 e1       	ldi	r25, 0x13	; 19
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <init_display+0x84>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <init_display+0x8a>
     78e:	00 00       	nop
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	1c dd       	rcall	.-1480   	; 0x1cc <set_display_data_pins>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0c dd       	rcall	.-1512   	; 0x1b0 <display_enable>
     798:	87 e8       	ldi	r24, 0x87	; 135
     79a:	93 e1       	ldi	r25, 0x13	; 19
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <init_display+0x98>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <init_display+0x9e>
     7a2:	00 00       	nop
     7a4:	8c e0       	ldi	r24, 0x0C	; 12
     7a6:	12 dd       	rcall	.-1500   	; 0x1cc <set_display_data_pins>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	02 dd       	rcall	.-1532   	; 0x1b0 <display_enable>
     7ac:	87 e8       	ldi	r24, 0x87	; 135
     7ae:	93 e1       	ldi	r25, 0x13	; 19
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <init_display+0xac>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <init_display+0xb2>
     7b6:	00 00       	nop
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 dd       	rcall	.-1520   	; 0x1cc <set_display_data_pins>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	f8 dc       	rcall	.-1552   	; 0x1b0 <display_enable>
     7c0:	87 e8       	ldi	r24, 0x87	; 135
     7c2:	93 e1       	ldi	r25, 0x13	; 19
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <init_display+0xc0>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <init_display+0xc6>
     7ca:	00 00       	nop
     7cc:	86 e0       	ldi	r24, 0x06	; 6
     7ce:	fe dc       	rcall	.-1540   	; 0x1cc <set_display_data_pins>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	ee dc       	rcall	.-1572   	; 0x1b0 <display_enable>
     7d4:	87 e8       	ldi	r24, 0x87	; 135
     7d6:	93 e1       	ldi	r25, 0x13	; 19
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <init_display+0xd4>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <init_display+0xda>
     7de:	00 00       	nop
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	f4 dc       	rcall	.-1560   	; 0x1cc <set_display_data_pins>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	e4 dc       	rcall	.-1592   	; 0x1b0 <display_enable>
     7e8:	87 e8       	ldi	r24, 0x87	; 135
     7ea:	93 e1       	ldi	r25, 0x13	; 19
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <init_display+0xe8>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <init_display+0xee>
     7f2:	00 00       	nop
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	ea dc       	rcall	.-1580   	; 0x1cc <set_display_data_pins>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	da dc       	rcall	.-1612   	; 0x1b0 <display_enable>
     7fc:	87 e8       	ldi	r24, 0x87	; 135
     7fe:	93 e1       	ldi	r25, 0x13	; 19
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <init_display+0xfc>
     804:	00 c0       	rjmp	.+0      	; 0x806 <init_display+0x102>
     806:	00 00       	nop
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	e0 dc       	rcall	.-1600   	; 0x1cc <set_display_data_pins>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	d0 dc       	rcall	.-1632   	; 0x1b0 <display_enable>
     810:	87 e8       	ldi	r24, 0x87	; 135
     812:	93 e1       	ldi	r25, 0x13	; 19
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <init_display+0x110>
     818:	00 c0       	rjmp	.+0      	; 0x81a <init_display+0x116>
     81a:	00 00       	nop
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	d6 dc       	rcall	.-1620   	; 0x1cc <set_display_data_pins>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	c6 dc       	rcall	.-1652   	; 0x1b0 <display_enable>
     824:	87 e8       	ldi	r24, 0x87	; 135
     826:	93 e1       	ldi	r25, 0x13	; 19
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <init_display+0x124>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <init_display+0x12a>
     82e:	00 00       	nop
     830:	08 95       	ret

00000832 <display_write_char>:
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
     836:	d4 dc       	rcall	.-1624   	; 0x1e0 <display_set_rs_pin>
     838:	8c 2f       	mov	r24, r28
     83a:	82 95       	swap	r24
     83c:	8f 70       	andi	r24, 0x0F	; 15
     83e:	c6 dc       	rcall	.-1652   	; 0x1cc <set_display_data_pins>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	b6 dc       	rcall	.-1684   	; 0x1b0 <display_enable>
     844:	8c 2f       	mov	r24, r28
     846:	c2 dc       	rcall	.-1660   	; 0x1cc <set_display_data_pins>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	b2 dc       	rcall	.-1692   	; 0x1b0 <display_enable>
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <display_next_line>:
     850:	cb dc       	rcall	.-1642   	; 0x1e8 <display_clear_rs_pin>
     852:	8c e0       	ldi	r24, 0x0C	; 12
     854:	bb dc       	rcall	.-1674   	; 0x1cc <set_display_data_pins>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	ab dc       	rcall	.-1706   	; 0x1b0 <display_enable>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	b7 dc       	rcall	.-1682   	; 0x1cc <set_display_data_pins>
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	a7 dc       	rcall	.-1714   	; 0x1b0 <display_enable>
     862:	08 95       	ret

00000864 <display_write_string>:
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	ba dc       	rcall	.-1676   	; 0x1e0 <display_set_rs_pin>
     86c:	88 81       	ld	r24, Y
     86e:	88 23       	and	r24, r24
     870:	49 f0       	breq	.+18     	; 0x884 <display_write_string+0x20>
     872:	21 96       	adiw	r28, 0x01	; 1
     874:	8a 30       	cpi	r24, 0x0A	; 10
     876:	11 f4       	brne	.+4      	; 0x87c <display_write_string+0x18>
     878:	eb df       	rcall	.-42     	; 0x850 <display_next_line>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <display_write_string+0x1a>
     87c:	da df       	rcall	.-76     	; 0x832 <display_write_char>
     87e:	89 91       	ld	r24, Y+
     880:	81 11       	cpse	r24, r1
     882:	f8 cf       	rjmp	.-16     	; 0x874 <display_write_string+0x10>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <display_clear>:
     88a:	ae dc       	rcall	.-1700   	; 0x1e8 <display_clear_rs_pin>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	9e dc       	rcall	.-1732   	; 0x1cc <set_display_data_pins>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	8e dc       	rcall	.-1764   	; 0x1b0 <display_enable>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	9a dc       	rcall	.-1740   	; 0x1cc <set_display_data_pins>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	8a dc       	rcall	.-1772   	; 0x1b0 <display_enable>
     89c:	87 ea       	ldi	r24, 0xA7	; 167
     89e:	91 e6       	ldi	r25, 0x61	; 97
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <display_clear+0x16>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <display_clear+0x1c>
     8a6:	00 00       	nop
     8a8:	08 95       	ret

000008aa <dimmer_init>:
     8aa:	e0 e0       	ldi	r30, 0x00	; 0
     8ac:	fa e0       	ldi	r31, 0x0A	; 10
     8ae:	82 85       	ldd	r24, Z+10	; 0x0a
     8b0:	8e 78       	andi	r24, 0x8E	; 142
     8b2:	82 87       	std	Z+10, r24	; 0x0a
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
     8b6:	83 60       	ori	r24, 0x03	; 3
     8b8:	81 83       	std	Z+1, r24	; 0x01
     8ba:	80 81       	ld	r24, Z
     8bc:	80 83       	st	Z, r24
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
     8c2:	86 ab       	std	Z+54, r24	; 0x36
     8c4:	97 ab       	std	Z+55, r25	; 0x37
     8c6:	21 85       	ldd	r18, Z+9	; 0x09
     8c8:	2e 7f       	andi	r18, 0xFE	; 254
     8ca:	21 87       	std	Z+9, r18	; 0x09
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b2 e0       	ldi	r27, 0x02	; 2
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	2c 91       	ld	r18, X
     8d4:	12 97       	sbiw	r26, 0x02	; 2
     8d6:	22 60       	ori	r18, 0x02	; 2
     8d8:	12 96       	adiw	r26, 0x02	; 2
     8da:	2c 93       	st	X, r18
     8dc:	21 81       	ldd	r18, Z+1	; 0x01
     8de:	20 61       	ori	r18, 0x10	; 16
     8e0:	21 83       	std	Z+1, r18	; 0x01
     8e2:	21 81       	ldd	r18, Z+1	; 0x01
     8e4:	20 62       	ori	r18, 0x20	; 32
     8e6:	21 83       	std	Z+1, r18	; 0x01
     8e8:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <dimming_value_display>
     8ec:	90 93 62 3e 	sts	0x3E62, r25	; 0x803e62 <dimming_value_display+0x1>
     8f0:	80 a7       	std	Z+40, r24	; 0x28
     8f2:	91 a7       	std	Z+41, r25	; 0x29
     8f4:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <dimming_value_hmi_led>
     8f8:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <dimming_value_hmi_led+0x1>
     8fc:	82 a7       	std	Z+42, r24	; 0x2a
     8fe:	93 a7       	std	Z+43, r25	; 0x2b
     900:	80 81       	ld	r24, Z
     902:	81 60       	ori	r24, 0x01	; 1
     904:	80 83       	st	Z, r24
     906:	08 95       	ret

00000908 <set_dimming_value_display_bl>:
     908:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
     90c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
     910:	08 95       	ret

00000912 <set_hmi_led_dimming_value>:
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     912:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     916:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     91a:	08 95       	ret

0000091c <led_hmi_on>:
}

void led_hmi_on(void) {
	set_hmi_led_dimming_value(dimming_value_hmi_led);
     91c:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <dimming_value_hmi_led>
     920:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <dimming_value_hmi_led+0x1>
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     924:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     928:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     92c:	08 95       	ret

0000092e <led_hmi_off>:
     92e:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     932:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     936:	08 95       	ret

00000938 <toggle_hmi_led>:
void led_hmi_off(void) {
	set_hmi_led_dimming_value(0);
}

void toggle_hmi_led(void) {
	if(TCA0.SINGLE.CMP1 == 0x0000) {
     938:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     93c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     940:	89 2b       	or	r24, r25
     942:	11 f4       	brne	.+4      	; 0x948 <toggle_hmi_led+0x10>
		led_hmi_on();
     944:	eb df       	rcall	.-42     	; 0x91c <led_hmi_on>
     946:	08 95       	ret
}

/* HMI LED */

void set_hmi_led_dimming_value(uint16_t dimming_value) {
	TCA0.SINGLE.CMP1 = dimming_value;
     948:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
     94c:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
     950:	08 95       	ret

00000952 <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     952:	80 eb       	ldi	r24, 0xB0	; 176
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     95a:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     95e:	08 95       	ret

00000960 <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     960:	94 df       	rcall	.-216    	; 0x88a <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     962:	8c ee       	ldi	r24, 0xEC	; 236
     964:	9c e9       	ldi	r25, 0x9C	; 156
     966:	7e df       	rcall	.-260    	; 0x864 <display_write_string>
	button0_action = show_menu_timestamp;
     968:	86 e0       	ldi	r24, 0x06	; 6
     96a:	95 e0       	ldi	r25, 0x05	; 5
     96c:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     970:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
	button1_action = show_menu_actions;
     974:	81 ec       	ldi	r24, 0xC1	; 193
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     97c:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
     980:	08 95       	ret

00000982 <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     982:	81 ec       	ldi	r24, 0xC1	; 193
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     98a:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     98e:	7d df       	rcall	.-262    	; 0x88a <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     990:	8e e0       	ldi	r24, 0x0E	; 14
     992:	9d e9       	ldi	r25, 0x9D	; 157
     994:	67 df       	rcall	.-306    	; 0x864 <display_write_string>
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
     996:	88 ed       	ldi	r24, 0xD8	; 216
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     99e:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
	button1_action = show_menu_sure_about_waking_bcu;
     9a2:	8f ee       	ldi	r24, 0xEF	; 239
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     9aa:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
     9ae:	08 95       	ret

000009b0 <show_menu_sure_about_waking_bcu_and_backup>:
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}

void show_menu_sure_about_waking_bcu_and_backup() {
	show_menu = show_menu_sure_about_waking_bcu_and_backup;
     9b0:	88 ed       	ldi	r24, 0xD8	; 216
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9b8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9bc:	66 df       	rcall	.-308    	; 0x88a <display_clear>
	display_write_string("Sure?       No >\n           Yes >");
     9be:	80 e3       	ldi	r24, 0x30	; 48
     9c0:	9d e9       	ldi	r25, 0x9D	; 157
     9c2:	50 df       	rcall	.-352    	; 0x864 <display_write_string>
	button0_action = back_to_main_menu;
     9c4:	89 ea       	ldi	r24, 0xA9	; 169
     9c6:	94 e0       	ldi	r25, 0x04	; 4
     9c8:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     9cc:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
	button1_action = wake_bcu_and_do_backup_now;
     9d0:	81 e3       	ldi	r24, 0x31	; 49
     9d2:	96 e0       	ldi	r25, 0x06	; 6
     9d4:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     9d8:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
     9dc:	08 95       	ret

000009de <show_menu_sure_about_waking_bcu>:
}

void show_menu_sure_about_waking_bcu() {
	show_menu = show_menu_sure_about_waking_bcu;
     9de:	8f ee       	ldi	r24, 0xEF	; 239
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     9e6:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     9ea:	4f df       	rcall	.-354    	; 0x88a <display_clear>
	display_write_string("Sure?      Yes >\n            No >");
     9ec:	82 e5       	ldi	r24, 0x52	; 82
     9ee:	9d e9       	ldi	r25, 0x9D	; 157
     9f0:	39 df       	rcall	.-398    	; 0x864 <display_write_string>
	button0_action = wake_bcu;
     9f2:	86 e4       	ldi	r24, 0x46	; 70
     9f4:	96 e0       	ldi	r25, 0x06	; 6
     9f6:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     9fa:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
	button1_action = back_to_main_menu;
     9fe:	89 ea       	ldi	r24, 0xA9	; 169
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     a06:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
     a0a:	08 95       	ret

00000a0c <show_menu_timestamp>:
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     a0c:	2f 92       	push	r2
     a0e:	3f 92       	push	r3
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <show_menu_timestamp+0x26>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <show_menu_timestamp+0x28>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
	show_menu = show_menu_timestamp;
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	95 e0       	ldi	r25, 0x05	; 5
     a3c:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     a40:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
     a44:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a48:	90 90 4d 01 	lds	r9, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a4c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a50:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a54:	88 1a       	sub	r8, r24
     a56:	99 0a       	sbc	r9, r25
     a58:	a1 2c       	mov	r10, r1
     a5a:	b1 2c       	mov	r11, r1
     a5c:	88 0c       	add	r8, r8
     a5e:	99 1c       	adc	r9, r9
     a60:	aa 1c       	adc	r10, r10
     a62:	bb 1c       	adc	r11, r11
     a64:	88 0c       	add	r8, r8
     a66:	99 1c       	adc	r9, r9
     a68:	aa 1c       	adc	r10, r10
     a6a:	bb 1c       	adc	r11, r11
     a6c:	88 0c       	add	r8, r8
     a6e:	99 1c       	adc	r9, r9
     a70:	aa 1c       	adc	r10, r10
     a72:	bb 1c       	adc	r11, r11
     a74:	88 0c       	add	r8, r8
     a76:	99 1c       	adc	r9, r9
     a78:	aa 1c       	adc	r10, r10
     a7a:	bb 1c       	adc	r11, r11
     a7c:	88 0c       	add	r8, r8
     a7e:	99 1c       	adc	r9, r9
     a80:	aa 1c       	adc	r10, r10
     a82:	bb 1c       	adc	r11, r11
	uint32_t days = seconds / 3600;
	days = days / 24;
     a84:	c5 01       	movw	r24, r10
     a86:	b4 01       	movw	r22, r8
     a88:	20 e8       	ldi	r18, 0x80	; 128
     a8a:	31 e5       	ldi	r19, 0x51	; 81
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	30 d4       	rcall	.+2144   	; 0x12f2 <__udivmodsi4>
     a92:	2b 83       	std	Y+3, r18	; 0x03
     a94:	3c 83       	std	Y+4, r19	; 0x04
     a96:	14 2f       	mov	r17, r20
     a98:	05 2f       	mov	r16, r21
     a9a:	c2 2e       	mov	r12, r18
     a9c:	d3 2e       	mov	r13, r19
     a9e:	e4 2e       	mov	r14, r20
     aa0:	f5 2e       	mov	r15, r21
	for(int i = 0; i < days ; i++) {
     aa2:	c1 14       	cp	r12, r1
     aa4:	d1 04       	cpc	r13, r1
     aa6:	e1 04       	cpc	r14, r1
     aa8:	f1 04       	cpc	r15, r1
     aaa:	b9 f4       	brne	.+46     	; 0xada <show_menu_timestamp+0xce>
     aac:	ab c0       	rjmp	.+342    	; 0xc04 <show_menu_timestamp+0x1f8>
     aae:	01 97       	sbiw	r24, 0x01	; 1
	   for(int j = 0; j < 24; j++) {
     ab0:	f1 f7       	brne	.-4      	; 0xaae <show_menu_timestamp+0xa2>
     ab2:	80 e8       	ldi	r24, 0x80	; 128
     ab4:	88 1a       	sub	r8, r24
     ab6:	81 e5       	ldi	r24, 0x51	; 81
     ab8:	98 0a       	sbc	r9, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	a8 0a       	sbc	r10, r24
     abe:	b1 08       	sbc	r11, r1
	
	/* there are simpler ways ... on a not 8bit mcu */
	uint32_t seconds = (uint32_t) (RTC_CMP - RTC_CNT) * 32;
	uint32_t days = seconds / 3600;
	days = days / 24;
	for(int i = 0; i < days ; i++) {
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	c9 01       	movw	r24, r18
     ac6:	03 2e       	mov	r0, r19
     ac8:	00 0c       	add	r0, r0
     aca:	aa 0b       	sbc	r26, r26
     acc:	bb 0b       	sbc	r27, r27
     ace:	8c 15       	cp	r24, r12
     ad0:	9d 05       	cpc	r25, r13
     ad2:	ae 05       	cpc	r26, r14
     ad4:	bf 05       	cpc	r27, r15
     ad6:	18 f0       	brcs	.+6      	; 0xade <show_menu_timestamp+0xd2>
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <show_menu_timestamp+0xd8>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
	display_write_string("Do Backup Now  >\nWake for config>");
	button0_action = show_menu_sure_about_waking_bcu_and_backup;
	button1_action = show_menu_sure_about_waking_bcu;
}

void show_menu_timestamp() {
     ade:	88 e1       	ldi	r24, 0x18	; 24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	e5 cf       	rjmp	.-54     	; 0xaae <show_menu_timestamp+0xa2>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     ae4:	c5 01       	movw	r24, r10
     ae6:	b4 01       	movw	r22, r8
     ae8:	20 e1       	ldi	r18, 0x10	; 16
     aea:	3e e0       	ldi	r19, 0x0E	; 14
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	00 d4       	rcall	.+2048   	; 0x12f2 <__udivmodsi4>
     af2:	b2 2e       	mov	r11, r18
     af4:	a3 2e       	mov	r10, r19
     af6:	94 2e       	mov	r9, r20
     af8:	85 2e       	mov	r8, r21
     afa:	42 2e       	mov	r4, r18
     afc:	53 2e       	mov	r5, r19
     afe:	64 2e       	mov	r6, r20
     b00:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     b02:	2c e3       	ldi	r18, 0x3C	; 60
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	f3 d3       	rcall	.+2022   	; 0x12f2 <__udivmodsi4>
     b0c:	22 2e       	mov	r2, r18
     b0e:	33 2e       	mov	r3, r19
     b10:	b4 2f       	mov	r27, r20
     b12:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     b14:	f6 2f       	mov	r31, r22
     b16:	79 83       	std	Y+1, r23	; 0x01
     b18:	8a 83       	std	Y+2, r24	; 0x02
     b1a:	e9 2f       	mov	r30, r25
	switch (days) {
     b1c:	c1 14       	cp	r12, r1
     b1e:	d1 04       	cpc	r13, r1
     b20:	e1 04       	cpc	r14, r1
     b22:	f1 04       	cpc	r15, r1
     b24:	39 f0       	breq	.+14     	; 0xb34 <show_menu_timestamp+0x128>
     b26:	ea e0       	ldi	r30, 0x0A	; 10
     b28:	ce 16       	cp	r12, r30
     b2a:	d1 04       	cpc	r13, r1
     b2c:	e1 04       	cpc	r14, r1
     b2e:	f1 04       	cpc	r15, r1
     b30:	c8 f5       	brcc	.+114    	; 0xba4 <show_menu_timestamp+0x198>
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <show_menu_timestamp+0x15c>
		case 0:
			sprintf(buffer, "ETA:    %02lu:%02lu:%02lu", hours, minutes, seconds);
     b34:	ef 93       	push	r30
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	8f 93       	push	r24
     b3a:	99 81       	ldd	r25, Y+1	; 0x01
     b3c:	9f 93       	push	r25
     b3e:	ff 93       	push	r31
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	3f 92       	push	r3
     b46:	2f 92       	push	r2
     b48:	7f 92       	push	r7
     b4a:	6f 92       	push	r6
     b4c:	5f 92       	push	r5
     b4e:	4f 92       	push	r4
     b50:	84 e7       	ldi	r24, 0x74	; 116
     b52:	9d e9       	ldi	r25, 0x9D	; 157
     b54:	9f 93       	push	r25
     b56:	8f 93       	push	r24
     b58:	84 e7       	ldi	r24, 0x74	; 116
     b5a:	9e e3       	ldi	r25, 0x3E	; 62
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	65 d5       	rcall	.+2762   	; 0x162c <sprintf>
			break;
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	3b c0       	rjmp	.+118    	; 0xbde <show_menu_timestamp+0x1d2>
		case 1 ... 9:
			sprintf(buffer, "ETA %lu  %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	7f 93       	push	r23
     b6e:	6f 93       	push	r22
     b70:	5f 93       	push	r21
     b72:	4f 93       	push	r20
     b74:	3f 93       	push	r19
     b76:	2f 93       	push	r18
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	9f 93       	push	r25
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	ef 93       	push	r30
     b8c:	8e e8       	ldi	r24, 0x8E	; 142
     b8e:	9d e9       	ldi	r25, 0x9D	; 157
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	84 e7       	ldi	r24, 0x74	; 116
     b96:	9e e3       	ldi	r25, 0x3E	; 62
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	47 d5       	rcall	.+2702   	; 0x162c <sprintf>
			break;
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	1d c0       	rjmp	.+58     	; 0xbde <show_menu_timestamp+0x1d2>
		default:
			sprintf(buffer, "ETA %lud %02lu:%02lu:%02lu", days, hours, minutes, seconds);
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	7f 93       	push	r23
     baa:	6f 93       	push	r22
     bac:	5f 93       	push	r21
     bae:	4f 93       	push	r20
     bb0:	3f 93       	push	r19
     bb2:	2f 93       	push	r18
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	9f 93       	push	r25
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	ef 93       	push	r30
     bc8:	89 ea       	ldi	r24, 0xA9	; 169
     bca:	9d e9       	ldi	r25, 0x9D	; 157
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	84 e7       	ldi	r24, 0x74	; 116
     bd2:	9e e3       	ldi	r25, 0x3E	; 62
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	29 d5       	rcall	.+2642   	; 0x162c <sprintf>
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	de bf       	out	0x3e, r29	; 62
	}
	
	display_clear();
     bde:	55 de       	rcall	.-854    	; 0x88a <display_clear>
	display_write_string(human_readable_timestamp_next_bu);
     be0:	84 ea       	ldi	r24, 0xA4	; 164
     be2:	9e e3       	ldi	r25, 0x3E	; 62
     be4:	3f de       	rcall	.-898    	; 0x864 <display_write_string>
	display_next_line();
     be6:	34 de       	rcall	.-920    	; 0x850 <display_next_line>
	display_write_string(buffer);
     be8:	84 e7       	ldi	r24, 0x74	; 116
     bea:	9e e3       	ldi	r25, 0x3E	; 62
     bec:	3b de       	rcall	.-906    	; 0x864 <display_write_string>
	button0_action = back_to_main_menu;
     bee:	89 ea       	ldi	r24, 0xA9	; 169
     bf0:	94 e0       	ldi	r25, 0x04	; 4
     bf2:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <button0_action>
     bf6:	90 93 1c 3e 	sts	0x3E1C, r25	; 0x803e1c <button0_action+0x1>
	button1_action = back_to_main_menu;
     bfa:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <button1_action>
     bfe:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <button1_action+0x1>
}
     c02:	19 c0       	rjmp	.+50     	; 0xc36 <show_menu_timestamp+0x22a>
	   for(int j = 0; j < 24; j++) {
		    seconds = seconds - 3600;
	    }
	}

	uint32_t hours = seconds / 3600;
     c04:	c5 01       	movw	r24, r10
     c06:	b4 01       	movw	r22, r8
     c08:	20 e1       	ldi	r18, 0x10	; 16
     c0a:	3e e0       	ldi	r19, 0x0E	; 14
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	70 d3       	rcall	.+1760   	; 0x12f2 <__udivmodsi4>
     c12:	42 2e       	mov	r4, r18
     c14:	53 2e       	mov	r5, r19
     c16:	64 2e       	mov	r6, r20
     c18:	75 2e       	mov	r7, r21
	seconds = seconds % 3600;

	uint32_t minutes = seconds / 60;
     c1a:	2c e3       	ldi	r18, 0x3C	; 60
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	67 d3       	rcall	.+1742   	; 0x12f2 <__udivmodsi4>
     c24:	22 2e       	mov	r2, r18
     c26:	33 2e       	mov	r3, r19
     c28:	b4 2f       	mov	r27, r20
     c2a:	a5 2f       	mov	r26, r21
	seconds = seconds % 60;
     c2c:	f6 2f       	mov	r31, r22
     c2e:	79 83       	std	Y+1, r23	; 0x01
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	e9 2f       	mov	r30, r25
     c34:	7f cf       	rjmp	.-258    	; 0xb34 <show_menu_timestamp+0x128>
	display_write_string(human_readable_timestamp_next_bu);
	display_next_line();
	display_write_string(buffer);
	button0_action = back_to_main_menu;
	button1_action = back_to_main_menu;
}
     c36:	24 96       	adiw	r28, 0x04	; 4
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	3f 90       	pop	r3
     c5e:	2f 90       	pop	r2
     c60:	08 95       	ret

00000c62 <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     c62:	13 de       	rcall	.-986    	; 0x88a <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     c64:	84 ec       	ldi	r24, 0xC4	; 196
     c66:	9d e9       	ldi	r25, 0x9D	; 157
     c68:	fd dd       	rcall	.-1030   	; 0x864 <display_write_string>
	flag_schedule_backup_now = true;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_schedule_backup_now>
	strcpy(wakeup_reason, "WR_BACKUP");
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	e4 ee       	ldi	r30, 0xE4	; 228
     c74:	fd e9       	ldi	r31, 0x9D	; 157
     c76:	a4 e6       	ldi	r26, 0x64	; 100
     c78:	be e3       	ldi	r27, 0x3E	; 62
     c7a:	01 90       	ld	r0, Z+
     c7c:	0d 92       	st	X+, r0
     c7e:	8a 95       	dec	r24
     c80:	e1 f7       	brne	.-8      	; 0xc7a <wake_bcu_and_do_backup_now+0x18>
	next_pwr_state = active;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	80 93 da 3e 	sts	0x3EDA, r24	; 0x803eda <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     c88:	36 d0       	rcall	.+108    	; 0xcf6 <transition_to_pwr_state>
     c8a:	08 95       	ret

00000c8c <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     c8c:	fe dd       	rcall	.-1028   	; 0x88a <display_clear>
	display_write_string("Waking BCU for\nConfiguration..");
     c8e:	8e ee       	ldi	r24, 0xEE	; 238
     c90:	9d e9       	ldi	r25, 0x9D	; 157
     c92:	e8 dd       	rcall	.-1072   	; 0x864 <display_write_string>
	next_pwr_state = active;
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 da 3e 	sts	0x3EDA, r24	; 0x803eda <next_pwr_state>
	strcpy(wakeup_reason, "WR_CONFIG");
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	ed e0       	ldi	r30, 0x0D	; 13
     c9e:	fe e9       	ldi	r31, 0x9E	; 158
     ca0:	a4 e6       	ldi	r26, 0x64	; 100
     ca2:	be e3       	ldi	r27, 0x3E	; 62
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	8a 95       	dec	r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <wake_bcu+0x18>
	transition_to_pwr_state(next_pwr_state);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	23 d0       	rcall	.+70     	; 0xcf6 <transition_to_pwr_state>
     cb0:	08 95       	ret

00000cb2 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     cb2:	e0 e0       	ldi	r30, 0x00	; 0
     cb4:	f4 e0       	ldi	r31, 0x04	; 4
     cb6:	84 81       	ldd	r24, Z+4	; 0x04
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     cc2:	08 95       	ret

00000cc4 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     cc4:	e0 e0       	ldi	r30, 0x00	; 0
     cc6:	f4 e0       	ldi	r31, 0x04	; 4
     cc8:	84 81       	ldd	r24, Z+4	; 0x04
     cca:	8f 7e       	andi	r24, 0xEF	; 239
     ccc:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     cce:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     cd2:	08 95       	ret

00000cd4 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     cd4:	e0 e2       	ldi	r30, 0x20	; 32
     cd6:	f4 e0       	ldi	r31, 0x04	; 4
     cd8:	84 81       	ldd	r24, Z+4	; 0x04
     cda:	8d 7f       	andi	r24, 0xFD	; 253
     cdc:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     ce4:	08 95       	ret

00000ce6 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     ce6:	e0 e2       	ldi	r30, 0x20	; 32
     ce8:	f4 e0       	ldi	r31, 0x04	; 4
     cea:	84 81       	ldd	r24, Z+4	; 0x04
     cec:	82 60       	ori	r24, 0x02	; 2
     cee:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     cf0:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     cf4:	08 95       	ret

00000cf6 <transition_to_pwr_state>:
}

uint8_t shutdownCounter = 20;
char _buffer[20];
void transition_to_pwr_state(enum pwr_states pwr_state) {
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
	switch(pwr_state) {
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	e1 f1       	breq	.+120    	; 0xd7a <transition_to_pwr_state+0x84>
     d02:	20 f0       	brcs	.+8      	; 0xd0c <transition_to_pwr_state+0x16>
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	09 f4       	brne	.+2      	; 0xd0a <transition_to_pwr_state+0x14>
     d08:	49 c0       	rjmp	.+146    	; 0xd9c <transition_to_pwr_state+0xa6>
     d0a:	5f c0       	rjmp	.+190    	; 0xdca <transition_to_pwr_state+0xd4>
		case standby:
			if (current_pwr_state == active) {
     d0c:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <current_pwr_state>
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	49 f5       	brne	.+82     	; 0xd66 <transition_to_pwr_state+0x70>
				while (shutdownCounter) {
     d14:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <shutdownCounter>
     d18:	88 23       	and	r24, r24
     d1a:	19 f1       	breq	.+70     	; 0xd62 <transition_to_pwr_state+0x6c>
					sprintf(_buffer, "SD in: %d", shutdownCounter);	
     d1c:	07 e1       	ldi	r16, 0x17	; 23
     d1e:	1e e9       	ldi	r17, 0x9E	; 158
     d20:	cf e0       	ldi	r28, 0x0F	; 15
     d22:	df e3       	ldi	r29, 0x3F	; 63
     d24:	1f 92       	push	r1
     d26:	8f 93       	push	r24
     d28:	1f 93       	push	r17
     d2a:	0f 93       	push	r16
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	7d d4       	rcall	.+2298   	; 0x162c <sprintf>
					display_clear();
     d32:	ab dd       	rcall	.-1194   	; 0x88a <display_clear>
					display_write_string(_buffer);
     d34:	ce 01       	movw	r24, r28
     d36:	96 dd       	rcall	.-1236   	; 0x864 <display_write_string>
     d38:	9a e2       	ldi	r25, 0x2A	; 42
     d3a:	2c e2       	ldi	r18, 0x2C	; 44
     d3c:	8a e0       	ldi	r24, 0x0A	; 10
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	20 40       	sbci	r18, 0x00	; 0
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <transition_to_pwr_state+0x48>
     d46:	00 00       	nop
					_delay_ms(1000);
					shutdownCounter--;
     d48:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <shutdownCounter>
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <shutdownCounter>
char _buffer[20];
void transition_to_pwr_state(enum pwr_states pwr_state) {
	switch(pwr_state) {
		case standby:
			if (current_pwr_state == active) {
				while (shutdownCounter) {
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	81 11       	cpse	r24, r1
     d60:	e1 cf       	rjmp	.-62     	; 0xd24 <transition_to_pwr_state+0x2e>
					display_clear();
					display_write_string(_buffer);
					_delay_ms(1000);
					shutdownCounter--;
				}
				shutdownCounter = 0;
     d62:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <shutdownCounter>
			}
			display_control_pins_low();
     d66:	44 da       	rcall	.-2936   	; 0x1f0 <display_control_pins_low>
			disable_bpi_sply();
     d68:	be df       	rcall	.-132    	; 0xce6 <disable_bpi_sply>
			dim_display(0);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	11 da       	rcall	.-3038   	; 0x192 <dim_display>
			led_hmi_off();
     d70:	de dd       	rcall	.-1092   	; 0x92e <led_hmi_off>
			disable_5v0_smps();
     d72:	a8 df       	rcall	.-176    	; 0xcc4 <disable_5v0_smps>
			//flag_goto_sleep = true; //why was that set true here??
			current_pwr_state = standby;
     d74:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <current_pwr_state>
			break;
     d78:	28 c0       	rjmp	.+80     	; 0xdca <transition_to_pwr_state+0xd4>
		
		case display_on:
			current_pwr_state = display_on;
     d7a:	c1 e0       	ldi	r28, 0x01	; 1
     d7c:	c0 93 63 3e 	sts	0x3E63, r28	; 0x803e63 <current_pwr_state>
			set_interrupts_for_buttons();
     d80:	ff d9       	rcall	.-3074   	; 0x180 <set_interrupts_for_buttons>
			enable_5v0_smps();
     d82:	97 df       	rcall	.-210    	; 0xcb2 <enable_5v0_smps>
     d84:	86 e4       	ldi	r24, 0x46	; 70
     d86:	90 e1       	ldi	r25, 0x10	; 16
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <transition_to_pwr_state+0x92>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <transition_to_pwr_state+0x98>
			_delay_ms(5);
			init_display();
     d8e:	ba dc       	rcall	.-1676   	; 0x704 <init_display>
			flag_entering_mainloop_display_on = true;
     d90:	c0 93 0a 3e 	sts	0x3E0A, r28	; 0x803e0a <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     d94:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_wakeup_by_rtc>
     d98:	88 23       	and	r24, r24
     d9a:	b9 f0       	breq	.+46     	; 0xdca <transition_to_pwr_state+0xd4>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     d9c:	80 e1       	ldi	r24, 0x10	; 16
     d9e:	e1 e2       	ldi	r30, 0x21	; 33
     da0:	fe e9       	ldi	r31, 0x9E	; 158
     da2:	ad ed       	ldi	r26, 0xDD	; 221
     da4:	be e3       	ldi	r27, 0x3E	; 62
     da6:	01 90       	ld	r0, Z+
     da8:	0d 92       	st	X+, r0
     daa:	8a 95       	dec	r24
     dac:	e1 f7       	brne	.-8      	; 0xda6 <transition_to_pwr_state+0xb0>
			strcpy(display_line2_content,"Please wait ...");
     dae:	80 e1       	ldi	r24, 0x10	; 16
     db0:	e1 e3       	ldi	r30, 0x31	; 49
     db2:	fe e9       	ldi	r31, 0x9E	; 158
     db4:	a5 ec       	ldi	r26, 0xC5	; 197
     db6:	be e3       	ldi	r27, 0x3E	; 62
     db8:	01 90       	ld	r0, Z+
     dba:	0d 92       	st	X+, r0
     dbc:	8a 95       	dec	r24
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <transition_to_pwr_state+0xc2>
			enable_5v0_smps();
     dc0:	78 df       	rcall	.-272    	; 0xcb2 <enable_5v0_smps>
			enable_bpi_sply();
     dc2:	88 df       	rcall	.-240    	; 0xcd4 <enable_bpi_sply>
			current_pwr_state = active;
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	80 93 63 3e 	sts	0x3E63, r24	; 0x803e63 <current_pwr_state>
			break;
	}
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     dd4:	e0 e4       	ldi	r30, 0x40	; 64
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	10 86       	std	Z+8, r1	; 0x08
     dda:	11 86       	std	Z+9, r1	; 0x09
     ddc:	08 95       	ret

00000dde <rtc_wait_for_all_status_bits_zero>:
     dde:	e0 e4       	ldi	r30, 0x40	; 64
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	81 11       	cpse	r24, r1
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <rtc_wait_for_all_status_bits_zero+0x4>
     de8:	08 95       	ret

00000dea <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     dea:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     dee:	f7 df       	rcall	.-18     	; 0xdde <rtc_wait_for_all_status_bits_zero>

void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc | RTC_RTCEN_bm; // <- one counter increment represents 32 seconds
     df0:	e0 e4       	ldi	r30, 0x40	; 64
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	89 ef       	ldi	r24, 0xF9	; 249
     df6:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	87 83       	std	Z+7, r24	; 0x07
     e00:	08 95       	ret

00000e02 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     e0a:	c0 90 d6 3e 	lds	r12, 0x3ED6	; 0x803ed6 <seconds_to_next_bu>
     e0e:	d0 90 d7 3e 	lds	r13, 0x3ED7	; 0x803ed7 <seconds_to_next_bu+0x1>
     e12:	e0 90 d8 3e 	lds	r14, 0x3ED8	; 0x803ed8 <seconds_to_next_bu+0x2>
     e16:	f0 90 d9 3e 	lds	r15, 0x3ED9	; 0x803ed9 <seconds_to_next_bu+0x3>
     e1a:	ff 20       	and	r15, r15
     e1c:	2c f4       	brge	.+10     	; 0xe28 <rtc_write_seconds_to_cmp+0x26>
     e1e:	8f e1       	ldi	r24, 0x1F	; 31
     e20:	c8 0e       	add	r12, r24
     e22:	d1 1c       	adc	r13, r1
     e24:	e1 1c       	adc	r14, r1
     e26:	f1 1c       	adc	r15, r1
     e28:	68 94       	set
     e2a:	14 f8       	bld	r1, 4
     e2c:	f5 94       	asr	r15
     e2e:	e7 94       	ror	r14
     e30:	d7 94       	ror	r13
     e32:	c7 94       	ror	r12
     e34:	16 94       	lsr	r1
     e36:	d1 f7       	brne	.-12     	; 0xe2c <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     e38:	ff 92       	push	r15
     e3a:	ef 92       	push	r14
     e3c:	df 92       	push	r13
     e3e:	cf 92       	push	r12
     e40:	86 e7       	ldi	r24, 0x76	; 118
     e42:	9e e9       	ldi	r25, 0x9E	; 158
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	84 e7       	ldi	r24, 0x74	; 116
     e4a:	9e e3       	ldi	r25, 0x3E	; 62
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	ed d3       	rcall	.+2010   	; 0x162c <sprintf>
	USART0_sendString_w_newline_eol(buffer);
     e52:	84 e7       	ldi	r24, 0x74	; 116
     e54:	9e e3       	ldi	r25, 0x3E	; 62
     e56:	82 d0       	rcall	.+260    	; 0xf5c <USART0_sendString_w_newline_eol>
	rtc_reset_counter();
     e58:	bd df       	rcall	.-134    	; 0xdd4 <rtc_reset_counter>
	if (register_value_next_bu == 0) {
     e5a:	8d b7       	in	r24, 0x3d	; 61
     e5c:	9e b7       	in	r25, 0x3e	; 62
     e5e:	08 96       	adiw	r24, 0x08	; 8
     e60:	8d bf       	out	0x3d, r24	; 61
     e62:	9e bf       	out	0x3e, r25	; 62
     e64:	c1 14       	cp	r12, r1
     e66:	d1 04       	cpc	r13, r1
     e68:	e1 04       	cpc	r14, r1
     e6a:	f1 04       	cpc	r15, r1
     e6c:	21 f4       	brne	.+8      	; 0xe76 <rtc_write_seconds_to_cmp+0x74>
		register_value_next_bu = 1;
     e6e:	c1 2c       	mov	r12, r1
     e70:	d1 2c       	mov	r13, r1
     e72:	76 01       	movw	r14, r12
     e74:	c3 94       	inc	r12
	}
	RTC.CMP = register_value_next_bu;
     e76:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e7a:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	08 95       	ret

00000e88 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     eb4:	83 e9       	ldi	r24, 0x93	; 147
     eb6:	9e e9       	ldi	r25, 0x9E	; 158
     eb8:	30 d0       	rcall	.+96     	; 0xf1a <USART0_sendString>
	flag_wakeup_by_rtc = true;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     ec0:	80 93 da 3e 	sts	0x3EDA, r24	; 0x803eda <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     ec4:	18 df       	rcall	.-464    	; 0xcf6 <transition_to_pwr_state>
}
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     ee8:	e0 e0       	ldi	r30, 0x00	; 0
     eea:	f8 e0       	ldi	r31, 0x08	; 8
     eec:	85 81       	ldd	r24, Z+5	; 0x05
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	85 83       	std	Z+5, r24	; 0x05
     ef2:	08 95       	ret

00000ef4 <init_uart>:
     ef4:	83 d9       	rcall	.-3322   	; 0x1fc <set_pb2_txd_and_pb3_rxd>
     ef6:	e0 e0       	ldi	r30, 0x00	; 0
     ef8:	f8 e0       	ldi	r31, 0x08	; 8
     efa:	8c e6       	ldi	r24, 0x6C	; 108
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	80 87       	std	Z+8, r24	; 0x08
     f00:	91 87       	std	Z+9, r25	; 0x09
     f02:	80 ec       	ldi	r24, 0xC0	; 192
     f04:	86 83       	std	Z+6, r24	; 0x06
     f06:	f0 df       	rcall	.-32     	; 0xee8 <USART0_enable_rx_complete_interrupt>
     f08:	08 95       	ret

00000f0a <USART0_sendChar>:
     f0a:	e0 e0       	ldi	r30, 0x00	; 0
     f0c:	f8 e0       	ldi	r31, 0x08	; 8
     f0e:	94 81       	ldd	r25, Z+4	; 0x04
     f10:	95 ff       	sbrs	r25, 5
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <USART0_sendChar+0x4>
     f14:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     f18:	08 95       	ret

00000f1a <USART0_sendString>:
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	8c 01       	movw	r16, r24
     f28:	7c 01       	movw	r14, r24
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
     f2c:	d0 e0       	ldi	r29, 0x00	; 0
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <USART0_sendString+0x20>
     f30:	f7 01       	movw	r30, r14
     f32:	81 91       	ld	r24, Z+
     f34:	7f 01       	movw	r14, r30
     f36:	e9 df       	rcall	.-46     	; 0xf0a <USART0_sendChar>
     f38:	21 96       	adiw	r28, 0x01	; 1
     f3a:	f8 01       	movw	r30, r16
     f3c:	01 90       	ld	r0, Z+
     f3e:	00 20       	and	r0, r0
     f40:	e9 f7       	brne	.-6      	; 0xf3c <USART0_sendString+0x22>
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	e0 1b       	sub	r30, r16
     f46:	f1 0b       	sbc	r31, r17
     f48:	ce 17       	cp	r28, r30
     f4a:	df 07       	cpc	r29, r31
     f4c:	88 f3       	brcs	.-30     	; 0xf30 <USART0_sendString+0x16>
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <USART0_sendString_w_newline_eol>:
     f5c:	de df       	rcall	.-68     	; 0xf1a <USART0_sendString>
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	d4 df       	rcall	.-88     	; 0xf0a <USART0_sendChar>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	d2 df       	rcall	.-92     	; 0xf0a <USART0_sendChar>
     f66:	08 95       	ret

00000f68 <USART0_send_ready>:
     f68:	88 e9       	ldi	r24, 0x98	; 152
     f6a:	9e e9       	ldi	r25, 0x9E	; 158
     f6c:	f7 df       	rcall	.-18     	; 0xf5c <USART0_sendString_w_newline_eol>
     f6e:	08 95       	ret

00000f70 <USART0_read>:
     f70:	e0 e0       	ldi	r30, 0x00	; 0
     f72:	f8 e0       	ldi	r31, 0x08	; 8
     f74:	84 81       	ldd	r24, Z+4	; 0x04
     f76:	88 23       	and	r24, r24
     f78:	ec f7       	brge	.-6      	; 0xf74 <USART0_read+0x4>
     f7a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     f7e:	08 95       	ret

00000f80 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	7c 01       	movw	r14, r24
     f92:	6b 01       	movw	r12, r22
     f94:	61 32       	cpi	r22, 0x21	; 33
     f96:	71 05       	cpc	r23, r1
     f98:	24 f0       	brlt	.+8      	; 0xfa2 <USART0_read_string+0x22>
     f9a:	68 94       	set
     f9c:	cc 24       	eor	r12, r12
     f9e:	c5 f8       	bld	r12, 5
     fa0:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     fa2:	dd 20       	and	r13, r13
     fa4:	c4 f0       	brlt	.+48     	; 0xfd6 <USART0_read_string+0x56>
     fa6:	e7 01       	movw	r28, r14
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	7e 01       	movw	r14, r28
		i++;
     fae:	0f 5f       	subi	r16, 0xFF	; 255
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     fb2:	de df       	rcall	.-68     	; 0xf70 <USART0_read>
     fb4:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     fb6:	8a 30       	cpi	r24, 0x0A	; 10
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <USART0_read_string+0x42>
     fba:	88 23       	and	r24, r24
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <USART0_read_string+0x42>
     fbe:	8d 30       	cpi	r24, 0x0D	; 13
     fc0:	31 f4       	brne	.+12     	; 0xfce <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     fc2:	f7 01       	movw	r30, r14
     fc4:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     fc6:	c0 16       	cp	r12, r16
     fc8:	d1 06       	cpc	r13, r17
     fca:	3c f4       	brge	.+14     	; 0xfda <USART0_read_string+0x5a>
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     fce:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     fd0:	c0 16       	cp	r12, r16
     fd2:	d1 06       	cpc	r13, r17
     fd4:	5c f7       	brge	.-42     	; 0xfac <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     fd6:	f7 01       	movw	r30, r14
     fd8:	10 82       	st	Z, r1
	}
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	08 95       	ret

00000fec <convert_str_to_long>:
		strcpy(wakeup_reason, payload);
		USART0_send_ready();
	}
}

long convert_str_to_long(char *str) {
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <convert_str_to_long+0x6>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	char *ptr;
	long ret;

	ret = strtol(str, &ptr, 10);
     ff6:	4a e0       	ldi	r20, 0x0A	; 10
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	be 01       	movw	r22, r28
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	9a d1       	rcall	.+820    	; 0x1336 <strtol>
	return ret;
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
	char *message_code, *payload;
	
	strcpy(usart_receive_copy, usart_receive_buffer);
    1014:	6e ee       	ldi	r22, 0xEE	; 238
    1016:	7e e3       	ldi	r23, 0x3E	; 62
    1018:	8d e1       	ldi	r24, 0x1D	; 29
    101a:	9e e3       	ldi	r25, 0x3E	; 62
    101c:	d1 d2       	rcall	.+1442   	; 0x15c0 <strcpy>
		
    message_code = strtok(usart_receive_buffer, ":");
    101e:	6e e9       	ldi	r22, 0x9E	; 158
    1020:	7e e9       	ldi	r23, 0x9E	; 158
    1022:	8e ee       	ldi	r24, 0xEE	; 238
    1024:	9e e3       	ldi	r25, 0x3E	; 62
    1026:	bf d2       	rcall	.+1406   	; 0x15a6 <strtok>
    1028:	d8 2f       	mov	r29, r24
    102a:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
    102c:	64 e2       	ldi	r22, 0x24	; 36
    102e:	7c e9       	ldi	r23, 0x9C	; 156
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b8 d2       	rcall	.+1392   	; 0x15a6 <strtok>
    1036:	08 2f       	mov	r16, r24
    1038:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	80 ea       	ldi	r24, 0xA0	; 160
    1044:	9e e9       	ldi	r25, 0x9E	; 158
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	84 e7       	ldi	r24, 0x74	; 116
    104c:	9e e3       	ldi	r25, 0x3E	; 62
    104e:	9f 93       	push	r25
    1050:	8f 93       	push	r24
    1052:	ec d2       	rcall	.+1496   	; 0x162c <sprintf>
	
	if (strcmp(message_code, "Test") == 0) {
    1054:	64 eb       	ldi	r22, 0xB4	; 180
    1056:	7e e9       	ldi	r23, 0x9E	; 158
    1058:	8d 2f       	mov	r24, r29
    105a:	9c 2f       	mov	r25, r28
    105c:	a8 d2       	rcall	.+1360   	; 0x15ae <strcmp>
    105e:	2d b7       	in	r18, 0x3d	; 61
    1060:	3e b7       	in	r19, 0x3e	; 62
    1062:	28 5f       	subi	r18, 0xF8	; 248
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	2d bf       	out	0x3d, r18	; 61
    1068:	3e bf       	out	0x3e, r19	; 62
    106a:	89 2b       	or	r24, r25
    106c:	39 f4       	brne	.+14     	; 0x107c <USART0_process_incoming_message+0x70>
		USART0_sendString_w_newline_eol("ACK:Test");
    106e:	80 eb       	ldi	r24, 0xB0	; 176
    1070:	9e e9       	ldi	r25, 0x9E	; 158
    1072:	74 df       	rcall	.-280    	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_sendString_w_newline_eol("Echo");
    1074:	89 eb       	ldi	r24, 0xB9	; 185
    1076:	9e e9       	ldi	r25, 0x9E	; 158
    1078:	71 df       	rcall	.-286    	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_send_ready();
    107a:	76 df       	rcall	.-276    	; 0xf68 <USART0_send_ready>
	}
	
	if (strcmp(message_code, "D1") == 0) {
    107c:	62 ec       	ldi	r22, 0xC2	; 194
    107e:	7e e9       	ldi	r23, 0x9E	; 158
    1080:	8d 2f       	mov	r24, r29
    1082:	9c 2f       	mov	r25, r28
    1084:	94 d2       	rcall	.+1320   	; 0x15ae <strcmp>
    1086:	89 2b       	or	r24, r25
    1088:	49 f4       	brne	.+18     	; 0x109c <USART0_process_incoming_message+0x90>
		USART0_sendString_w_newline_eol("ACK:D1");
    108a:	8e eb       	ldi	r24, 0xBE	; 190
    108c:	9e e9       	ldi	r25, 0x9E	; 158
    108e:	66 df       	rcall	.-308    	; 0xf5c <USART0_sendString_w_newline_eol>
		strcpy(display_line1_content, payload);
    1090:	60 2f       	mov	r22, r16
    1092:	71 2f       	mov	r23, r17
    1094:	8d ed       	ldi	r24, 0xDD	; 221
    1096:	9e e3       	ldi	r25, 0x3E	; 62
    1098:	93 d2       	rcall	.+1318   	; 0x15c0 <strcpy>
		USART0_send_ready();
    109a:	66 df       	rcall	.-308    	; 0xf68 <USART0_send_ready>
	}
	
	if (strcmp(message_code, "D2") == 0) {
    109c:	69 ec       	ldi	r22, 0xC9	; 201
    109e:	7e e9       	ldi	r23, 0x9E	; 158
    10a0:	8d 2f       	mov	r24, r29
    10a2:	9c 2f       	mov	r25, r28
    10a4:	84 d2       	rcall	.+1288   	; 0x15ae <strcmp>
    10a6:	89 2b       	or	r24, r25
    10a8:	59 f4       	brne	.+22     	; 0x10c0 <USART0_process_incoming_message+0xb4>
		USART0_sendString_w_newline_eol("ACK:D2");
    10aa:	85 ec       	ldi	r24, 0xC5	; 197
    10ac:	9e e9       	ldi	r25, 0x9E	; 158
    10ae:	56 df       	rcall	.-340    	; 0xf5c <USART0_sendString_w_newline_eol>
		strcpy(display_line2_content, payload);
    10b0:	60 2f       	mov	r22, r16
    10b2:	71 2f       	mov	r23, r17
    10b4:	85 ec       	ldi	r24, 0xC5	; 197
    10b6:	9e e3       	ldi	r25, 0x3E	; 62
    10b8:	83 d2       	rcall	.+1286   	; 0x15c0 <strcpy>
		flag_string_for_display_received = true;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
    10c0:	60 ed       	ldi	r22, 0xD0	; 208
    10c2:	7e e9       	ldi	r23, 0x9E	; 158
    10c4:	8d 2f       	mov	r24, r29
    10c6:	9c 2f       	mov	r25, r28
    10c8:	72 d2       	rcall	.+1252   	; 0x15ae <strcmp>
    10ca:	89 2b       	or	r24, r25
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <USART0_process_incoming_message+0xd4>
		USART0_sendString_w_newline_eol("ACK:SR");
    10ce:	8c ec       	ldi	r24, 0xCC	; 204
    10d0:	9e e9       	ldi	r25, 0x9E	; 158
    10d2:	44 df       	rcall	.-376    	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_pwr_state_change_request = true;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <flag_pwr_state_change_request>
		next_pwr_state = standby;
    10da:	10 92 da 3e 	sts	0x3EDA, r1	; 0x803eda <next_pwr_state>
		USART0_send_ready();
    10de:	44 df       	rcall	.-376    	; 0xf68 <USART0_send_ready>
	}
	
	if (strcmp(message_code, "SA") == 0) {
    10e0:	67 ed       	ldi	r22, 0xD7	; 215
    10e2:	7e e9       	ldi	r23, 0x9E	; 158
    10e4:	8d 2f       	mov	r24, r29
    10e6:	9c 2f       	mov	r25, r28
    10e8:	62 d2       	rcall	.+1220   	; 0x15ae <strcmp>
    10ea:	89 2b       	or	r24, r25
    10ec:	39 f4       	brne	.+14     	; 0x10fc <USART0_process_incoming_message+0xf0>
		USART0_sendString_w_newline_eol("ACK:SA");
    10ee:	83 ed       	ldi	r24, 0xD3	; 211
    10f0:	9e e9       	ldi	r25, 0x9E	; 158
    10f2:	34 df       	rcall	.-408    	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_abort_shutdown = true;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_abort_shutdown>
		USART0_send_ready();
    10fa:	36 df       	rcall	.-404    	; 0xf68 <USART0_send_ready>
	}
	
	if (strcmp(message_code, "BU") == 0) {
    10fc:	6a ed       	ldi	r22, 0xDA	; 218
    10fe:	7e e9       	ldi	r23, 0x9E	; 158
    1100:	8d 2f       	mov	r24, r29
    1102:	9c 2f       	mov	r25, r28
    1104:	54 d2       	rcall	.+1192   	; 0x15ae <strcmp>
    1106:	89 2b       	or	r24, r25
    1108:	11 f5       	brne	.+68     	; 0x114e <USART0_process_incoming_message+0x142>
		sprintf(buffer,"ACK:BU:%s\n", payload);
    110a:	1f 93       	push	r17
    110c:	0f 93       	push	r16
    110e:	8d ed       	ldi	r24, 0xDD	; 221
    1110:	9e e9       	ldi	r25, 0x9E	; 158
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	84 e7       	ldi	r24, 0x74	; 116
    1118:	9e e3       	ldi	r25, 0x3E	; 62
    111a:	9f 93       	push	r25
    111c:	8f 93       	push	r24
    111e:	86 d2       	rcall	.+1292   	; 0x162c <sprintf>
		USART0_sendString_w_newline_eol(buffer);
    1120:	84 e7       	ldi	r24, 0x74	; 116
    1122:	9e e3       	ldi	r25, 0x3E	; 62
    1124:	1b df       	rcall	.-458    	; 0xf5c <USART0_sendString_w_newline_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
    1126:	80 2f       	mov	r24, r16
    1128:	91 2f       	mov	r25, r17
    112a:	60 df       	rcall	.-320    	; 0xfec <convert_str_to_long>
    112c:	60 93 d6 3e 	sts	0x3ED6, r22	; 0x803ed6 <seconds_to_next_bu>
    1130:	70 93 d7 3e 	sts	0x3ED7, r23	; 0x803ed7 <seconds_to_next_bu+0x1>
    1134:	80 93 d8 3e 	sts	0x3ED8, r24	; 0x803ed8 <seconds_to_next_bu+0x2>
    1138:	90 93 d9 3e 	sts	0x3ED9, r25	; 0x803ed9 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_received_seconds_to_next_bu>
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
    114e:	6c ee       	ldi	r22, 0xEC	; 236
    1150:	7e e9       	ldi	r23, 0x9E	; 158
    1152:	8d 2f       	mov	r24, r29
    1154:	9c 2f       	mov	r25, r28
    1156:	2b d2       	rcall	.+1110   	; 0x15ae <strcmp>
    1158:	89 2b       	or	r24, r25
    115a:	71 f4       	brne	.+28     	; 0x1178 <USART0_process_incoming_message+0x16c>
		USART0_sendString_w_newline_eol("ACK:BR");
    115c:	88 ee       	ldi	r24, 0xE8	; 232
    115e:	9e e9       	ldi	r25, 0x9E	; 158
    1160:	fd de       	rcall	.-518    	; 0xf5c <USART0_sendString_w_newline_eol>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
    1162:	60 2f       	mov	r22, r16
    1164:	71 2f       	mov	r23, r17
    1166:	84 ea       	ldi	r24, 0xA4	; 164
    1168:	9e e3       	ldi	r25, 0x3E	; 62
    116a:	2a d2       	rcall	.+1108   	; 0x15c0 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
    116c:	8a e0       	ldi	r24, 0x0A	; 10
    116e:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
    1178:	6f ee       	ldi	r22, 0xEF	; 239
    117a:	7e e9       	ldi	r23, 0x9E	; 158
    117c:	8d 2f       	mov	r24, r29
    117e:	9c 2f       	mov	r25, r28
    1180:	16 d2       	rcall	.+1068   	; 0x15ae <strcmp>
    1182:	89 2b       	or	r24, r25
    1184:	19 f4       	brne	.+6      	; 0x118c <USART0_process_incoming_message+0x180>
		flag_goto_sleep = true;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
    118c:	66 ef       	ldi	r22, 0xF6	; 246
    118e:	7e e9       	ldi	r23, 0x9E	; 158
    1190:	8d 2f       	mov	r24, r29
    1192:	9c 2f       	mov	r25, r28
    1194:	0c d2       	rcall	.+1048   	; 0x15ae <strcmp>
    1196:	89 2b       	or	r24, r25
    1198:	31 f4       	brne	.+12     	; 0x11a6 <USART0_process_incoming_message+0x19a>
		USART0_sendString_w_newline_eol("ACK:CC");
    119a:	82 ef       	ldi	r24, 0xF2	; 242
    119c:	9e e9       	ldi	r25, 0x9E	; 158
    119e:	de de       	rcall	.-580    	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_request_current_measurement = true;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
    11a6:	6d ef       	ldi	r22, 0xFD	; 253
    11a8:	7e e9       	ldi	r23, 0x9E	; 158
    11aa:	8d 2f       	mov	r24, r29
    11ac:	9c 2f       	mov	r25, r28
    11ae:	ff d1       	rcall	.+1022   	; 0x15ae <strcmp>
    11b0:	89 2b       	or	r24, r25
    11b2:	31 f4       	brne	.+12     	; 0x11c0 <USART0_process_incoming_message+0x1b4>
		USART0_sendString_w_newline_eol("ACK:TP");
    11b4:	89 ef       	ldi	r24, 0xF9	; 249
    11b6:	9e e9       	ldi	r25, 0x9E	; 158
    11b8:	d1 de       	rcall	.-606    	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_request_temperature_measurement = true;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
    11c0:	64 e0       	ldi	r22, 0x04	; 4
    11c2:	7f e9       	ldi	r23, 0x9F	; 159
    11c4:	8d 2f       	mov	r24, r29
    11c6:	9c 2f       	mov	r25, r28
    11c8:	f2 d1       	rcall	.+996    	; 0x15ae <strcmp>
    11ca:	89 2b       	or	r24, r25
    11cc:	31 f4       	brne	.+12     	; 0x11da <USART0_process_incoming_message+0x1ce>
		USART0_sendString_w_newline_eol("ACK:3V");
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	9f e9       	ldi	r25, 0x9F	; 159
    11d2:	c4 de       	rcall	.-632    	; 0xf5c <USART0_sendString_w_newline_eol>
		flag_request_3v3_measurement = true;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
    11da:	6b e0       	ldi	r22, 0x0B	; 11
    11dc:	7f e9       	ldi	r23, 0x9F	; 159
    11de:	8d 2f       	mov	r24, r29
    11e0:	9c 2f       	mov	r25, r28
    11e2:	e5 d1       	rcall	.+970    	; 0x15ae <strcmp>
    11e4:	89 2b       	or	r24, r25
    11e6:	61 f4       	brne	.+24     	; 0x1200 <USART0_process_incoming_message+0x1f4>
		USART0_sendString_w_newline_eol("ACK:ON");
    11e8:	87 e0       	ldi	r24, 0x07	; 7
    11ea:	9f e9       	ldi	r25, 0x9F	; 159
    11ec:	b7 de       	rcall	.-658    	; 0xf5c <USART0_sendString_w_newline_eol>
		if(flag_schedule_backup_now) {
    11ee:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_schedule_backup_now>
    11f2:	88 23       	and	r24, r24
    11f4:	29 f0       	breq	.+10     	; 0x1200 <USART0_process_incoming_message+0x1f4>
			flag_schedule_backup_now = false;
    11f6:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_schedule_backup_now>
			USART0_sendString_w_newline_eol("User Backup");
    11fa:	8e e0       	ldi	r24, 0x0E	; 14
    11fc:	9f e9       	ldi	r25, 0x9F	; 159
    11fe:	ae de       	rcall	.-676    	; 0xf5c <USART0_sendString_w_newline_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
    1200:	6e e1       	ldi	r22, 0x1E	; 30
    1202:	7f e9       	ldi	r23, 0x9F	; 159
    1204:	8d 2f       	mov	r24, r29
    1206:	9c 2f       	mov	r25, r28
    1208:	d2 d1       	rcall	.+932    	; 0x15ae <strcmp>
    120a:	89 2b       	or	r24, r25
    120c:	79 f4       	brne	.+30     	; 0x122c <USART0_process_incoming_message+0x220>
		USART0_sendString_w_newline_eol("ACK:DB");
    120e:	8a e1       	ldi	r24, 0x1A	; 26
    1210:	9f e9       	ldi	r25, 0x9F	; 159
    1212:	a4 de       	rcall	.-696    	; 0xf5c <USART0_sendString_w_newline_eol>
		dimming_value_display = atoi(payload);
    1214:	80 2f       	mov	r24, r16
    1216:	91 2f       	mov	r25, r17
    1218:	9f d1       	rcall	.+830    	; 0x1558 <atoi>
    121a:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <dimming_value_display>
    121e:	90 93 62 3e 	sts	0x3E62, r25	; 0x803e62 <dimming_value_display+0x1>
		set_dimming_value_display_bl(dimming_value_display);
    1222:	72 db       	rcall	.-2332   	; 0x908 <set_dimming_value_display_bl>
		flag_dim_display = true;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_dim_display>
		USART0_send_ready();
    122a:	9e de       	rcall	.-708    	; 0xf68 <USART0_send_ready>
	}
	
	if(strcmp(message_code, "DL") == 0) {
    122c:	65 e2       	ldi	r22, 0x25	; 37
    122e:	7f e9       	ldi	r23, 0x9F	; 159
    1230:	8d 2f       	mov	r24, r29
    1232:	9c 2f       	mov	r25, r28
    1234:	bc d1       	rcall	.+888    	; 0x15ae <strcmp>
    1236:	89 2b       	or	r24, r25
    1238:	69 f4       	brne	.+26     	; 0x1254 <USART0_process_incoming_message+0x248>
		USART0_sendString_w_newline_eol("ACK:DL");
    123a:	81 e2       	ldi	r24, 0x21	; 33
    123c:	9f e9       	ldi	r25, 0x9F	; 159
    123e:	8e de       	rcall	.-740    	; 0xf5c <USART0_sendString_w_newline_eol>
		dimming_value_hmi_led = atoi(payload);
    1240:	80 2f       	mov	r24, r16
    1242:	91 2f       	mov	r25, r17
    1244:	89 d1       	rcall	.+786    	; 0x1558 <atoi>
    1246:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <dimming_value_hmi_led>
    124a:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <dimming_value_hmi_led+0x1>
		flag_dim_hmi_led = true;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_dim_hmi_led>
	}
	
	if(strcmp(message_code, "WR") == 0) {
    1254:	6c e2       	ldi	r22, 0x2C	; 44
    1256:	7f e9       	ldi	r23, 0x9F	; 159
    1258:	8d 2f       	mov	r24, r29
    125a:	9c 2f       	mov	r25, r28
    125c:	a8 d1       	rcall	.+848    	; 0x15ae <strcmp>
    125e:	89 2b       	or	r24, r25
    1260:	49 f4       	brne	.+18     	; 0x1274 <USART0_process_incoming_message+0x268>
		USART0_sendString_w_newline_eol("ACK:WR");
    1262:	88 e2       	ldi	r24, 0x28	; 40
    1264:	9f e9       	ldi	r25, 0x9F	; 159
    1266:	7a de       	rcall	.-780    	; 0xf5c <USART0_sendString_w_newline_eol>
		USART0_sendString_w_newline_eol(wakeup_reason);
    1268:	84 e6       	ldi	r24, 0x64	; 100
    126a:	9e e3       	ldi	r25, 0x3E	; 62
    126c:	77 de       	rcall	.-786    	; 0xf5c <USART0_sendString_w_newline_eol>
		strcpy(wakeup_reason, "");
    126e:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <wakeup_reason>
		USART0_send_ready();
    1272:	7a de       	rcall	.-780    	; 0xf68 <USART0_send_ready>
	}
	
	if(strcmp(message_code, "WD") == 0) {
    1274:	63 e3       	ldi	r22, 0x33	; 51
    1276:	7f e9       	ldi	r23, 0x9F	; 159
    1278:	8d 2f       	mov	r24, r29
    127a:	9c 2f       	mov	r25, r28
    127c:	98 d1       	rcall	.+816    	; 0x15ae <strcmp>
    127e:	89 2b       	or	r24, r25
    1280:	49 f4       	brne	.+18     	; 0x1294 <USART0_process_incoming_message+0x288>
		USART0_sendString_w_newline_eol("ACK:WD");
    1282:	8f e2       	ldi	r24, 0x2F	; 47
    1284:	9f e9       	ldi	r25, 0x9F	; 159
    1286:	6a de       	rcall	.-812    	; 0xf5c <USART0_sendString_w_newline_eol>
		strcpy(wakeup_reason, payload);
    1288:	60 2f       	mov	r22, r16
    128a:	71 2f       	mov	r23, r17
    128c:	84 e6       	ldi	r24, 0x64	; 100
    128e:	9e e3       	ldi	r25, 0x3E	; 62
    1290:	97 d1       	rcall	.+814    	; 0x15c0 <strcpy>
		USART0_send_ready();
    1292:	6a de       	rcall	.-812    	; 0xf68 <USART0_send_ready>
	}
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
    12c0:	60 e2       	ldi	r22, 0x20	; 32
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	8e ee       	ldi	r24, 0xEE	; 238
    12c6:	9e e3       	ldi	r25, 0x3E	; 62
    12c8:	5b de       	rcall	.-842    	; 0xf80 <USART0_read_string>
	flag_usart_string_receive_complete = true;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <flag_usart_string_receive_complete>
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	bf 91       	pop	r27
    12d6:	af 91       	pop	r26
    12d8:	9f 91       	pop	r25
    12da:	8f 91       	pop	r24
    12dc:	7f 91       	pop	r23
    12de:	6f 91       	pop	r22
    12e0:	5f 91       	pop	r21
    12e2:	4f 91       	pop	r20
    12e4:	3f 91       	pop	r19
    12e6:	2f 91       	pop	r18
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__udivmodsi4>:
    12f2:	a1 e2       	ldi	r26, 0x21	; 33
    12f4:	1a 2e       	mov	r1, r26
    12f6:	aa 1b       	sub	r26, r26
    12f8:	bb 1b       	sub	r27, r27
    12fa:	fd 01       	movw	r30, r26
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <__udivmodsi4_ep>

000012fe <__udivmodsi4_loop>:
    12fe:	aa 1f       	adc	r26, r26
    1300:	bb 1f       	adc	r27, r27
    1302:	ee 1f       	adc	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	a2 17       	cp	r26, r18
    1308:	b3 07       	cpc	r27, r19
    130a:	e4 07       	cpc	r30, r20
    130c:	f5 07       	cpc	r31, r21
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__udivmodsi4_ep>
    1310:	a2 1b       	sub	r26, r18
    1312:	b3 0b       	sbc	r27, r19
    1314:	e4 0b       	sbc	r30, r20
    1316:	f5 0b       	sbc	r31, r21

00001318 <__udivmodsi4_ep>:
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	1a 94       	dec	r1
    1322:	69 f7       	brne	.-38     	; 0x12fe <__udivmodsi4_loop>
    1324:	60 95       	com	r22
    1326:	70 95       	com	r23
    1328:	80 95       	com	r24
    132a:	90 95       	com	r25
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	bd 01       	movw	r22, r26
    1332:	cf 01       	movw	r24, r30
    1334:	08 95       	ret

00001336 <strtol>:
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e0 ea       	ldi	r30, 0xA0	; 160
    133c:	f9 e0       	ldi	r31, 0x09	; 9
    133e:	34 c4       	rjmp	.+2152   	; 0x1ba8 <__prologue_saves__+0x2>
    1340:	5c 01       	movw	r10, r24
    1342:	6b 01       	movw	r12, r22
    1344:	7a 01       	movw	r14, r20
    1346:	61 15       	cp	r22, r1
    1348:	71 05       	cpc	r23, r1
    134a:	19 f0       	breq	.+6      	; 0x1352 <strtol+0x1c>
    134c:	fb 01       	movw	r30, r22
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	e1 14       	cp	r14, r1
    1354:	f1 04       	cpc	r15, r1
    1356:	29 f0       	breq	.+10     	; 0x1362 <strtol+0x2c>
    1358:	c7 01       	movw	r24, r14
    135a:	02 97       	sbiw	r24, 0x02	; 2
    135c:	83 97       	sbiw	r24, 0x23	; 35
    135e:	08 f0       	brcs	.+2      	; 0x1362 <strtol+0x2c>
    1360:	e2 c0       	rjmp	.+452    	; 0x1526 <strtol+0x1f0>
    1362:	e5 01       	movw	r28, r10
    1364:	21 96       	adiw	r28, 0x01	; 1
    1366:	f5 01       	movw	r30, r10
    1368:	10 81       	ld	r17, Z
    136a:	81 2f       	mov	r24, r17
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	12 d1       	rcall	.+548    	; 0x1594 <isspace>
    1370:	89 2b       	or	r24, r25
    1372:	11 f0       	breq	.+4      	; 0x1378 <strtol+0x42>
    1374:	5e 01       	movw	r10, r28
    1376:	f5 cf       	rjmp	.-22     	; 0x1362 <strtol+0x2c>
    1378:	1d 32       	cpi	r17, 0x2D	; 45
    137a:	29 f4       	brne	.+10     	; 0x1386 <strtol+0x50>
    137c:	21 96       	adiw	r28, 0x01	; 1
    137e:	f5 01       	movw	r30, r10
    1380:	11 81       	ldd	r17, Z+1	; 0x01
    1382:	01 e0       	ldi	r16, 0x01	; 1
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <strtol+0x5e>
    1386:	1b 32       	cpi	r17, 0x2B	; 43
    1388:	21 f4       	brne	.+8      	; 0x1392 <strtol+0x5c>
    138a:	e5 01       	movw	r28, r10
    138c:	22 96       	adiw	r28, 0x02	; 2
    138e:	f5 01       	movw	r30, r10
    1390:	11 81       	ldd	r17, Z+1	; 0x01
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	e1 14       	cp	r14, r1
    1396:	f1 04       	cpc	r15, r1
    1398:	09 f1       	breq	.+66     	; 0x13dc <strtol+0xa6>
    139a:	f0 e1       	ldi	r31, 0x10	; 16
    139c:	ef 16       	cp	r14, r31
    139e:	f1 04       	cpc	r15, r1
    13a0:	29 f4       	brne	.+10     	; 0x13ac <strtol+0x76>
    13a2:	3e c0       	rjmp	.+124    	; 0x1420 <strtol+0xea>
    13a4:	10 e3       	ldi	r17, 0x30	; 48
    13a6:	e1 14       	cp	r14, r1
    13a8:	f1 04       	cpc	r15, r1
    13aa:	21 f1       	breq	.+72     	; 0x13f4 <strtol+0xbe>
    13ac:	28 e0       	ldi	r18, 0x08	; 8
    13ae:	e2 16       	cp	r14, r18
    13b0:	f1 04       	cpc	r15, r1
    13b2:	01 f1       	breq	.+64     	; 0x13f4 <strtol+0xbe>
    13b4:	54 f4       	brge	.+20     	; 0x13ca <strtol+0x94>
    13b6:	e2 e0       	ldi	r30, 0x02	; 2
    13b8:	ee 16       	cp	r14, r30
    13ba:	f1 04       	cpc	r15, r1
    13bc:	21 f5       	brne	.+72     	; 0x1406 <strtol+0xd0>
    13be:	81 2c       	mov	r8, r1
    13c0:	91 2c       	mov	r9, r1
    13c2:	a1 2c       	mov	r10, r1
    13c4:	b0 e4       	ldi	r27, 0x40	; 64
    13c6:	bb 2e       	mov	r11, r27
    13c8:	3d c0       	rjmp	.+122    	; 0x1444 <strtol+0x10e>
    13ca:	fa e0       	ldi	r31, 0x0A	; 10
    13cc:	ef 16       	cp	r14, r31
    13ce:	f1 04       	cpc	r15, r1
    13d0:	39 f0       	breq	.+14     	; 0x13e0 <strtol+0xaa>
    13d2:	20 e1       	ldi	r18, 0x10	; 16
    13d4:	e2 16       	cp	r14, r18
    13d6:	f1 04       	cpc	r15, r1
    13d8:	b1 f4       	brne	.+44     	; 0x1406 <strtol+0xd0>
    13da:	2f c0       	rjmp	.+94     	; 0x143a <strtol+0x104>
    13dc:	10 33       	cpi	r17, 0x30	; 48
    13de:	11 f1       	breq	.+68     	; 0x1424 <strtol+0xee>
    13e0:	fa e0       	ldi	r31, 0x0A	; 10
    13e2:	ef 2e       	mov	r14, r31
    13e4:	f1 2c       	mov	r15, r1
    13e6:	ac ec       	ldi	r26, 0xCC	; 204
    13e8:	8a 2e       	mov	r8, r26
    13ea:	98 2c       	mov	r9, r8
    13ec:	a8 2c       	mov	r10, r8
    13ee:	ac e0       	ldi	r26, 0x0C	; 12
    13f0:	ba 2e       	mov	r11, r26
    13f2:	28 c0       	rjmp	.+80     	; 0x1444 <strtol+0x10e>
    13f4:	78 e0       	ldi	r23, 0x08	; 8
    13f6:	e7 2e       	mov	r14, r23
    13f8:	f1 2c       	mov	r15, r1
    13fa:	81 2c       	mov	r8, r1
    13fc:	91 2c       	mov	r9, r1
    13fe:	a1 2c       	mov	r10, r1
    1400:	e0 e1       	ldi	r30, 0x10	; 16
    1402:	be 2e       	mov	r11, r30
    1404:	1f c0       	rjmp	.+62     	; 0x1444 <strtol+0x10e>
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e8       	ldi	r25, 0x80	; 128
    140e:	97 01       	movw	r18, r14
    1410:	0f 2c       	mov	r0, r15
    1412:	00 0c       	add	r0, r0
    1414:	44 0b       	sbc	r20, r20
    1416:	55 0b       	sbc	r21, r21
    1418:	6c df       	rcall	.-296    	; 0x12f2 <__udivmodsi4>
    141a:	49 01       	movw	r8, r18
    141c:	5a 01       	movw	r10, r20
    141e:	12 c0       	rjmp	.+36     	; 0x1444 <strtol+0x10e>
    1420:	10 33       	cpi	r17, 0x30	; 48
    1422:	59 f4       	brne	.+22     	; 0x143a <strtol+0x104>
    1424:	88 81       	ld	r24, Y
    1426:	8f 7d       	andi	r24, 0xDF	; 223
    1428:	88 35       	cpi	r24, 0x58	; 88
    142a:	09 f0       	breq	.+2      	; 0x142e <strtol+0xf8>
    142c:	bb cf       	rjmp	.-138    	; 0x13a4 <strtol+0x6e>
    142e:	19 81       	ldd	r17, Y+1	; 0x01
    1430:	22 96       	adiw	r28, 0x02	; 2
    1432:	02 60       	ori	r16, 0x02	; 2
    1434:	80 e1       	ldi	r24, 0x10	; 16
    1436:	e8 2e       	mov	r14, r24
    1438:	f1 2c       	mov	r15, r1
    143a:	81 2c       	mov	r8, r1
    143c:	91 2c       	mov	r9, r1
    143e:	a1 2c       	mov	r10, r1
    1440:	68 e0       	ldi	r22, 0x08	; 8
    1442:	b6 2e       	mov	r11, r22
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	cb 01       	movw	r24, r22
    144c:	27 01       	movw	r4, r14
    144e:	0f 2c       	mov	r0, r15
    1450:	00 0c       	add	r0, r0
    1452:	66 08       	sbc	r6, r6
    1454:	77 08       	sbc	r7, r7
    1456:	fe 01       	movw	r30, r28
    1458:	50 ed       	ldi	r21, 0xD0	; 208
    145a:	35 2e       	mov	r3, r21
    145c:	31 0e       	add	r3, r17
    145e:	29 e0       	ldi	r18, 0x09	; 9
    1460:	23 15       	cp	r18, r3
    1462:	70 f4       	brcc	.+28     	; 0x1480 <strtol+0x14a>
    1464:	2f eb       	ldi	r18, 0xBF	; 191
    1466:	21 0f       	add	r18, r17
    1468:	2a 31       	cpi	r18, 0x1A	; 26
    146a:	18 f4       	brcc	.+6      	; 0x1472 <strtol+0x13c>
    146c:	39 ec       	ldi	r19, 0xC9	; 201
    146e:	33 2e       	mov	r3, r19
    1470:	06 c0       	rjmp	.+12     	; 0x147e <strtol+0x148>
    1472:	2f e9       	ldi	r18, 0x9F	; 159
    1474:	21 0f       	add	r18, r17
    1476:	2a 31       	cpi	r18, 0x1A	; 26
    1478:	10 f5       	brcc	.+68     	; 0x14be <strtol+0x188>
    147a:	29 ea       	ldi	r18, 0xA9	; 169
    147c:	32 2e       	mov	r3, r18
    147e:	31 0e       	add	r3, r17
    1480:	23 2d       	mov	r18, r3
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	2e 15       	cp	r18, r14
    1486:	3f 05       	cpc	r19, r15
    1488:	d4 f4       	brge	.+52     	; 0x14be <strtol+0x188>
    148a:	47 fd       	sbrc	r20, 7
    148c:	15 c0       	rjmp	.+42     	; 0x14b8 <strtol+0x182>
    148e:	86 16       	cp	r8, r22
    1490:	97 06       	cpc	r9, r23
    1492:	a8 06       	cpc	r10, r24
    1494:	b9 06       	cpc	r11, r25
    1496:	68 f0       	brcs	.+26     	; 0x14b2 <strtol+0x17c>
    1498:	a3 01       	movw	r20, r6
    149a:	92 01       	movw	r18, r4
    149c:	6b d3       	rcall	.+1750   	; 0x1b74 <__mulsi3>
    149e:	63 0d       	add	r22, r3
    14a0:	71 1d       	adc	r23, r1
    14a2:	81 1d       	adc	r24, r1
    14a4:	91 1d       	adc	r25, r1
    14a6:	61 30       	cpi	r22, 0x01	; 1
    14a8:	71 05       	cpc	r23, r1
    14aa:	81 05       	cpc	r24, r1
    14ac:	20 e8       	ldi	r18, 0x80	; 128
    14ae:	92 07       	cpc	r25, r18
    14b0:	10 f0       	brcs	.+4      	; 0x14b6 <strtol+0x180>
    14b2:	4f ef       	ldi	r20, 0xFF	; 255
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <strtol+0x182>
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	21 96       	adiw	r28, 0x01	; 1
    14ba:	10 81       	ld	r17, Z
    14bc:	cc cf       	rjmp	.-104    	; 0x1456 <strtol+0x120>
    14be:	20 2f       	mov	r18, r16
    14c0:	21 70       	andi	r18, 0x01	; 1
    14c2:	c1 14       	cp	r12, r1
    14c4:	d1 04       	cpc	r13, r1
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <strtol+0x1ae>
    14c8:	44 23       	and	r20, r20
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <strtol+0x1a0>
    14cc:	21 97       	sbiw	r28, 0x01	; 1
    14ce:	f6 01       	movw	r30, r12
    14d0:	c0 83       	st	Z, r28
    14d2:	d1 83       	std	Z+1, r29	; 0x01
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <strtol+0x1ae>
    14d6:	01 ff       	sbrs	r16, 1
    14d8:	19 c0       	rjmp	.+50     	; 0x150c <strtol+0x1d6>
    14da:	22 97       	sbiw	r28, 0x02	; 2
    14dc:	f6 01       	movw	r30, r12
    14de:	c0 83       	st	Z, r28
    14e0:	d1 83       	std	Z+1, r29	; 0x01
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <strtol+0x1d6>
    14e4:	47 ff       	sbrs	r20, 7
    14e6:	12 c0       	rjmp	.+36     	; 0x150c <strtol+0x1d6>
    14e8:	22 23       	and	r18, r18
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <strtol+0x1c0>
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e8       	ldi	r25, 0x80	; 128
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <strtol+0x1c8>
    14f6:	6f ef       	ldi	r22, 0xFF	; 255
    14f8:	7f ef       	ldi	r23, 0xFF	; 255
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f e7       	ldi	r25, 0x7F	; 127
    14fe:	22 e2       	ldi	r18, 0x22	; 34
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	20 93 23 3f 	sts	0x3F23, r18	; 0x803f23 <errno>
    1506:	30 93 24 3f 	sts	0x3F24, r19	; 0x803f24 <errno+0x1>
    150a:	09 c0       	rjmp	.+18     	; 0x151e <strtol+0x1e8>
    150c:	22 23       	and	r18, r18
    150e:	81 f0       	breq	.+32     	; 0x1530 <strtol+0x1fa>
    1510:	90 95       	com	r25
    1512:	80 95       	com	r24
    1514:	70 95       	com	r23
    1516:	61 95       	neg	r22
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	8f 4f       	sbci	r24, 0xFF	; 255
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	46 2f       	mov	r20, r22
    1520:	37 2f       	mov	r19, r23
    1522:	28 2f       	mov	r18, r24
    1524:	12 c0       	rjmp	.+36     	; 0x154a <strtol+0x214>
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0d c0       	rjmp	.+26     	; 0x154a <strtol+0x214>
    1530:	97 ff       	sbrs	r25, 7
    1532:	f5 cf       	rjmp	.-22     	; 0x151e <strtol+0x1e8>
    1534:	82 e2       	ldi	r24, 0x22	; 34
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	80 93 23 3f 	sts	0x3F23, r24	; 0x803f23 <errno>
    153c:	90 93 24 3f 	sts	0x3F24, r25	; 0x803f24 <errno+0x1>
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	7f ef       	ldi	r23, 0xFF	; 255
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f e7       	ldi	r25, 0x7F	; 127
    1548:	ea cf       	rjmp	.-44     	; 0x151e <strtol+0x1e8>
    154a:	64 2f       	mov	r22, r20
    154c:	73 2f       	mov	r23, r19
    154e:	82 2f       	mov	r24, r18
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	e1 e1       	ldi	r30, 0x11	; 17
    1556:	41 c3       	rjmp	.+1666   	; 0x1bda <__epilogue_restores__+0x2>

00001558 <atoi>:
    1558:	fc 01       	movw	r30, r24
    155a:	88 27       	eor	r24, r24
    155c:	99 27       	eor	r25, r25
    155e:	e8 94       	clt
    1560:	21 91       	ld	r18, Z+
    1562:	20 32       	cpi	r18, 0x20	; 32
    1564:	e9 f3       	breq	.-6      	; 0x1560 <atoi+0x8>
    1566:	29 30       	cpi	r18, 0x09	; 9
    1568:	10 f0       	brcs	.+4      	; 0x156e <atoi+0x16>
    156a:	2e 30       	cpi	r18, 0x0E	; 14
    156c:	c8 f3       	brcs	.-14     	; 0x1560 <atoi+0x8>
    156e:	2b 32       	cpi	r18, 0x2B	; 43
    1570:	41 f0       	breq	.+16     	; 0x1582 <atoi+0x2a>
    1572:	2d 32       	cpi	r18, 0x2D	; 45
    1574:	39 f4       	brne	.+14     	; 0x1584 <atoi+0x2c>
    1576:	68 94       	set
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <atoi+0x2a>
    157a:	0e 94 0e 0b 	call	0x161c	; 0x161c <__mulhi_const_10>
    157e:	82 0f       	add	r24, r18
    1580:	91 1d       	adc	r25, r1
    1582:	21 91       	ld	r18, Z+
    1584:	20 53       	subi	r18, 0x30	; 48
    1586:	2a 30       	cpi	r18, 0x0A	; 10
    1588:	c0 f3       	brcs	.-16     	; 0x157a <atoi+0x22>
    158a:	1e f4       	brtc	.+6      	; 0x1592 <atoi+0x3a>
    158c:	90 95       	com	r25
    158e:	81 95       	neg	r24
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	08 95       	ret

00001594 <isspace>:
    1594:	91 11       	cpse	r25, r1
    1596:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__ctype_isfalse>
    159a:	80 32       	cpi	r24, 0x20	; 32
    159c:	19 f0       	breq	.+6      	; 0x15a4 <isspace+0x10>
    159e:	89 50       	subi	r24, 0x09	; 9
    15a0:	85 50       	subi	r24, 0x05	; 5
    15a2:	c8 f7       	brcc	.-14     	; 0x1596 <isspace+0x2>
    15a4:	08 95       	ret

000015a6 <strtok>:
    15a6:	46 e0       	ldi	r20, 0x06	; 6
    15a8:	5e e3       	ldi	r21, 0x3E	; 62
    15aa:	11 d0       	rcall	.+34     	; 0x15ce <strtok_r>
    15ac:	08 95       	ret

000015ae <strcmp>:
    15ae:	fb 01       	movw	r30, r22
    15b0:	dc 01       	movw	r26, r24
    15b2:	8d 91       	ld	r24, X+
    15b4:	01 90       	ld	r0, Z+
    15b6:	80 19       	sub	r24, r0
    15b8:	01 10       	cpse	r0, r1
    15ba:	d9 f3       	breq	.-10     	; 0x15b2 <strcmp+0x4>
    15bc:	99 0b       	sbc	r25, r25
    15be:	08 95       	ret

000015c0 <strcpy>:
    15c0:	fb 01       	movw	r30, r22
    15c2:	dc 01       	movw	r26, r24
    15c4:	01 90       	ld	r0, Z+
    15c6:	0d 92       	st	X+, r0
    15c8:	00 20       	and	r0, r0
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <strcpy+0x4>
    15cc:	08 95       	ret

000015ce <strtok_r>:
    15ce:	fa 01       	movw	r30, r20
    15d0:	a1 91       	ld	r26, Z+
    15d2:	b0 81       	ld	r27, Z
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	19 f4       	brne	.+6      	; 0x15de <strtok_r+0x10>
    15d8:	10 97       	sbiw	r26, 0x00	; 0
    15da:	e1 f0       	breq	.+56     	; 0x1614 <strtok_r+0x46>
    15dc:	cd 01       	movw	r24, r26
    15de:	dc 01       	movw	r26, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0d 90       	ld	r0, X+
    15e4:	00 20       	and	r0, r0
    15e6:	11 f4       	brne	.+4      	; 0x15ec <strtok_r+0x1e>
    15e8:	c0 01       	movw	r24, r0
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <strtok_r+0x44>
    15ec:	fb 01       	movw	r30, r22
    15ee:	21 91       	ld	r18, Z+
    15f0:	22 23       	and	r18, r18
    15f2:	19 f0       	breq	.+6      	; 0x15fa <strtok_r+0x2c>
    15f4:	20 15       	cp	r18, r0
    15f6:	d9 f7       	brne	.-10     	; 0x15ee <strtok_r+0x20>
    15f8:	f3 cf       	rjmp	.-26     	; 0x15e0 <strtok_r+0x12>
    15fa:	fb 01       	movw	r30, r22
    15fc:	21 91       	ld	r18, Z+
    15fe:	20 15       	cp	r18, r0
    1600:	19 f4       	brne	.+6      	; 0x1608 <strtok_r+0x3a>
    1602:	1e 92       	st	-X, r1
    1604:	11 96       	adiw	r26, 0x01	; 1
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <strtok_r+0x46>
    1608:	22 23       	and	r18, r18
    160a:	c1 f7       	brne	.-16     	; 0x15fc <strtok_r+0x2e>
    160c:	0d 90       	ld	r0, X+
    160e:	00 20       	and	r0, r0
    1610:	a1 f7       	brne	.-24     	; 0x15fa <strtok_r+0x2c>
    1612:	d0 01       	movw	r26, r0
    1614:	fa 01       	movw	r30, r20
    1616:	a1 93       	st	Z+, r26
    1618:	b0 83       	st	Z, r27
    161a:	08 95       	ret

0000161c <__mulhi_const_10>:
    161c:	7a e0       	ldi	r23, 0x0A	; 10
    161e:	97 9f       	mul	r25, r23
    1620:	90 2d       	mov	r25, r0
    1622:	87 9f       	mul	r24, r23
    1624:	80 2d       	mov	r24, r0
    1626:	91 0d       	add	r25, r1
    1628:	11 24       	eor	r1, r1
    162a:	08 95       	ret

0000162c <sprintf>:
    162c:	ae e0       	ldi	r26, 0x0E	; 14
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e1       	ldi	r30, 0x1B	; 27
    1632:	fb e0       	ldi	r31, 0x0B	; 11
    1634:	c6 c2       	rjmp	.+1420   	; 0x1bc2 <__prologue_saves__+0x1c>
    1636:	0d 89       	ldd	r16, Y+21	; 0x15
    1638:	1e 89       	ldd	r17, Y+22	; 0x16
    163a:	86 e0       	ldi	r24, 0x06	; 6
    163c:	8c 83       	std	Y+4, r24	; 0x04
    163e:	09 83       	std	Y+1, r16	; 0x01
    1640:	1a 83       	std	Y+2, r17	; 0x02
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f e7       	ldi	r25, 0x7F	; 127
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	ae 01       	movw	r20, r28
    164c:	47 5e       	subi	r20, 0xE7	; 231
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	6f 89       	ldd	r22, Y+23	; 0x17
    1652:	78 8d       	ldd	r23, Y+24	; 0x18
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	08 d0       	rcall	.+16     	; 0x166a <vfprintf>
    165a:	ef 81       	ldd	r30, Y+7	; 0x07
    165c:	f8 85       	ldd	r31, Y+8	; 0x08
    165e:	e0 0f       	add	r30, r16
    1660:	f1 1f       	adc	r31, r17
    1662:	10 82       	st	Z, r1
    1664:	2e 96       	adiw	r28, 0x0e	; 14
    1666:	e4 e0       	ldi	r30, 0x04	; 4
    1668:	c5 c2       	rjmp	.+1418   	; 0x1bf4 <__epilogue_restores__+0x1c>

0000166a <vfprintf>:
    166a:	ab e0       	ldi	r26, 0x0B	; 11
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ea e3       	ldi	r30, 0x3A	; 58
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	99 c2       	rjmp	.+1330   	; 0x1ba6 <__prologue_saves__>
    1674:	6c 01       	movw	r12, r24
    1676:	7b 01       	movw	r14, r22
    1678:	8a 01       	movw	r16, r20
    167a:	fc 01       	movw	r30, r24
    167c:	16 82       	std	Z+6, r1	; 0x06
    167e:	17 82       	std	Z+7, r1	; 0x07
    1680:	83 81       	ldd	r24, Z+3	; 0x03
    1682:	81 ff       	sbrs	r24, 1
    1684:	bf c1       	rjmp	.+894    	; 0x1a04 <vfprintf+0x39a>
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	3c 01       	movw	r6, r24
    168c:	f6 01       	movw	r30, r12
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	f7 01       	movw	r30, r14
    1692:	93 fd       	sbrc	r25, 3
    1694:	85 91       	lpm	r24, Z+
    1696:	93 ff       	sbrs	r25, 3
    1698:	81 91       	ld	r24, Z+
    169a:	7f 01       	movw	r14, r30
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <vfprintf+0x38>
    16a0:	ad c1       	rjmp	.+858    	; 0x19fc <vfprintf+0x392>
    16a2:	85 32       	cpi	r24, 0x25	; 37
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <vfprintf+0x4a>
    16a6:	93 fd       	sbrc	r25, 3
    16a8:	85 91       	lpm	r24, Z+
    16aa:	93 ff       	sbrs	r25, 3
    16ac:	81 91       	ld	r24, Z+
    16ae:	7f 01       	movw	r14, r30
    16b0:	85 32       	cpi	r24, 0x25	; 37
    16b2:	21 f4       	brne	.+8      	; 0x16bc <vfprintf+0x52>
    16b4:	b6 01       	movw	r22, r12
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	c3 d1       	rcall	.+902    	; 0x1a40 <fputc>
    16ba:	e8 cf       	rjmp	.-48     	; 0x168c <vfprintf+0x22>
    16bc:	91 2c       	mov	r9, r1
    16be:	21 2c       	mov	r2, r1
    16c0:	31 2c       	mov	r3, r1
    16c2:	ff e1       	ldi	r31, 0x1F	; 31
    16c4:	f3 15       	cp	r31, r3
    16c6:	d8 f0       	brcs	.+54     	; 0x16fe <vfprintf+0x94>
    16c8:	8b 32       	cpi	r24, 0x2B	; 43
    16ca:	79 f0       	breq	.+30     	; 0x16ea <vfprintf+0x80>
    16cc:	38 f4       	brcc	.+14     	; 0x16dc <vfprintf+0x72>
    16ce:	80 32       	cpi	r24, 0x20	; 32
    16d0:	79 f0       	breq	.+30     	; 0x16f0 <vfprintf+0x86>
    16d2:	83 32       	cpi	r24, 0x23	; 35
    16d4:	a1 f4       	brne	.+40     	; 0x16fe <vfprintf+0x94>
    16d6:	23 2d       	mov	r18, r3
    16d8:	20 61       	ori	r18, 0x10	; 16
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <vfprintf+0xac>
    16dc:	8d 32       	cpi	r24, 0x2D	; 45
    16de:	61 f0       	breq	.+24     	; 0x16f8 <vfprintf+0x8e>
    16e0:	80 33       	cpi	r24, 0x30	; 48
    16e2:	69 f4       	brne	.+26     	; 0x16fe <vfprintf+0x94>
    16e4:	23 2d       	mov	r18, r3
    16e6:	21 60       	ori	r18, 0x01	; 1
    16e8:	16 c0       	rjmp	.+44     	; 0x1716 <vfprintf+0xac>
    16ea:	83 2d       	mov	r24, r3
    16ec:	82 60       	ori	r24, 0x02	; 2
    16ee:	38 2e       	mov	r3, r24
    16f0:	e3 2d       	mov	r30, r3
    16f2:	e4 60       	ori	r30, 0x04	; 4
    16f4:	3e 2e       	mov	r3, r30
    16f6:	2a c0       	rjmp	.+84     	; 0x174c <vfprintf+0xe2>
    16f8:	f3 2d       	mov	r31, r3
    16fa:	f8 60       	ori	r31, 0x08	; 8
    16fc:	1d c0       	rjmp	.+58     	; 0x1738 <vfprintf+0xce>
    16fe:	37 fc       	sbrc	r3, 7
    1700:	2d c0       	rjmp	.+90     	; 0x175c <vfprintf+0xf2>
    1702:	20 ed       	ldi	r18, 0xD0	; 208
    1704:	28 0f       	add	r18, r24
    1706:	2a 30       	cpi	r18, 0x0A	; 10
    1708:	40 f0       	brcs	.+16     	; 0x171a <vfprintf+0xb0>
    170a:	8e 32       	cpi	r24, 0x2E	; 46
    170c:	b9 f4       	brne	.+46     	; 0x173c <vfprintf+0xd2>
    170e:	36 fc       	sbrc	r3, 6
    1710:	75 c1       	rjmp	.+746    	; 0x19fc <vfprintf+0x392>
    1712:	23 2d       	mov	r18, r3
    1714:	20 64       	ori	r18, 0x40	; 64
    1716:	32 2e       	mov	r3, r18
    1718:	19 c0       	rjmp	.+50     	; 0x174c <vfprintf+0xe2>
    171a:	36 fe       	sbrs	r3, 6
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0xc0>
    171e:	8a e0       	ldi	r24, 0x0A	; 10
    1720:	98 9e       	mul	r9, r24
    1722:	20 0d       	add	r18, r0
    1724:	11 24       	eor	r1, r1
    1726:	92 2e       	mov	r9, r18
    1728:	11 c0       	rjmp	.+34     	; 0x174c <vfprintf+0xe2>
    172a:	ea e0       	ldi	r30, 0x0A	; 10
    172c:	2e 9e       	mul	r2, r30
    172e:	20 0d       	add	r18, r0
    1730:	11 24       	eor	r1, r1
    1732:	22 2e       	mov	r2, r18
    1734:	f3 2d       	mov	r31, r3
    1736:	f0 62       	ori	r31, 0x20	; 32
    1738:	3f 2e       	mov	r3, r31
    173a:	08 c0       	rjmp	.+16     	; 0x174c <vfprintf+0xe2>
    173c:	8c 36       	cpi	r24, 0x6C	; 108
    173e:	21 f4       	brne	.+8      	; 0x1748 <vfprintf+0xde>
    1740:	83 2d       	mov	r24, r3
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	38 2e       	mov	r3, r24
    1746:	02 c0       	rjmp	.+4      	; 0x174c <vfprintf+0xe2>
    1748:	88 36       	cpi	r24, 0x68	; 104
    174a:	41 f4       	brne	.+16     	; 0x175c <vfprintf+0xf2>
    174c:	f7 01       	movw	r30, r14
    174e:	93 fd       	sbrc	r25, 3
    1750:	85 91       	lpm	r24, Z+
    1752:	93 ff       	sbrs	r25, 3
    1754:	81 91       	ld	r24, Z+
    1756:	7f 01       	movw	r14, r30
    1758:	81 11       	cpse	r24, r1
    175a:	b3 cf       	rjmp	.-154    	; 0x16c2 <vfprintf+0x58>
    175c:	98 2f       	mov	r25, r24
    175e:	9f 7d       	andi	r25, 0xDF	; 223
    1760:	95 54       	subi	r25, 0x45	; 69
    1762:	93 30       	cpi	r25, 0x03	; 3
    1764:	28 f4       	brcc	.+10     	; 0x1770 <vfprintf+0x106>
    1766:	0c 5f       	subi	r16, 0xFC	; 252
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	9f e3       	ldi	r25, 0x3F	; 63
    176c:	99 83       	std	Y+1, r25	; 0x01
    176e:	0d c0       	rjmp	.+26     	; 0x178a <vfprintf+0x120>
    1770:	83 36       	cpi	r24, 0x63	; 99
    1772:	31 f0       	breq	.+12     	; 0x1780 <vfprintf+0x116>
    1774:	83 37       	cpi	r24, 0x73	; 115
    1776:	71 f0       	breq	.+28     	; 0x1794 <vfprintf+0x12a>
    1778:	83 35       	cpi	r24, 0x53	; 83
    177a:	09 f0       	breq	.+2      	; 0x177e <vfprintf+0x114>
    177c:	55 c0       	rjmp	.+170    	; 0x1828 <vfprintf+0x1be>
    177e:	20 c0       	rjmp	.+64     	; 0x17c0 <vfprintf+0x156>
    1780:	f8 01       	movw	r30, r16
    1782:	80 81       	ld	r24, Z
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	0e 5f       	subi	r16, 0xFE	; 254
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	88 24       	eor	r8, r8
    178c:	83 94       	inc	r8
    178e:	91 2c       	mov	r9, r1
    1790:	53 01       	movw	r10, r6
    1792:	12 c0       	rjmp	.+36     	; 0x17b8 <vfprintf+0x14e>
    1794:	28 01       	movw	r4, r16
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	4f 0e       	add	r4, r31
    179a:	51 1c       	adc	r5, r1
    179c:	f8 01       	movw	r30, r16
    179e:	a0 80       	ld	r10, Z
    17a0:	b1 80       	ldd	r11, Z+1	; 0x01
    17a2:	36 fe       	sbrs	r3, 6
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <vfprintf+0x142>
    17a6:	69 2d       	mov	r22, r9
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0x146>
    17ac:	6f ef       	ldi	r22, 0xFF	; 255
    17ae:	7f ef       	ldi	r23, 0xFF	; 255
    17b0:	c5 01       	movw	r24, r10
    17b2:	3b d1       	rcall	.+630    	; 0x1a2a <strnlen>
    17b4:	4c 01       	movw	r8, r24
    17b6:	82 01       	movw	r16, r4
    17b8:	f3 2d       	mov	r31, r3
    17ba:	ff 77       	andi	r31, 0x7F	; 127
    17bc:	3f 2e       	mov	r3, r31
    17be:	15 c0       	rjmp	.+42     	; 0x17ea <vfprintf+0x180>
    17c0:	28 01       	movw	r4, r16
    17c2:	22 e0       	ldi	r18, 0x02	; 2
    17c4:	42 0e       	add	r4, r18
    17c6:	51 1c       	adc	r5, r1
    17c8:	f8 01       	movw	r30, r16
    17ca:	a0 80       	ld	r10, Z
    17cc:	b1 80       	ldd	r11, Z+1	; 0x01
    17ce:	36 fe       	sbrs	r3, 6
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <vfprintf+0x16e>
    17d2:	69 2d       	mov	r22, r9
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x172>
    17d8:	6f ef       	ldi	r22, 0xFF	; 255
    17da:	7f ef       	ldi	r23, 0xFF	; 255
    17dc:	c5 01       	movw	r24, r10
    17de:	1a d1       	rcall	.+564    	; 0x1a14 <strnlen_P>
    17e0:	4c 01       	movw	r8, r24
    17e2:	f3 2d       	mov	r31, r3
    17e4:	f0 68       	ori	r31, 0x80	; 128
    17e6:	3f 2e       	mov	r3, r31
    17e8:	82 01       	movw	r16, r4
    17ea:	33 fc       	sbrc	r3, 3
    17ec:	19 c0       	rjmp	.+50     	; 0x1820 <vfprintf+0x1b6>
    17ee:	82 2d       	mov	r24, r2
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	88 16       	cp	r8, r24
    17f4:	99 06       	cpc	r9, r25
    17f6:	a0 f4       	brcc	.+40     	; 0x1820 <vfprintf+0x1b6>
    17f8:	b6 01       	movw	r22, r12
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	20 d1       	rcall	.+576    	; 0x1a40 <fputc>
    1800:	2a 94       	dec	r2
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <vfprintf+0x184>
    1804:	f5 01       	movw	r30, r10
    1806:	37 fc       	sbrc	r3, 7
    1808:	85 91       	lpm	r24, Z+
    180a:	37 fe       	sbrs	r3, 7
    180c:	81 91       	ld	r24, Z+
    180e:	5f 01       	movw	r10, r30
    1810:	b6 01       	movw	r22, r12
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	15 d1       	rcall	.+554    	; 0x1a40 <fputc>
    1816:	21 10       	cpse	r2, r1
    1818:	2a 94       	dec	r2
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	82 1a       	sub	r8, r18
    181e:	91 08       	sbc	r9, r1
    1820:	81 14       	cp	r8, r1
    1822:	91 04       	cpc	r9, r1
    1824:	79 f7       	brne	.-34     	; 0x1804 <vfprintf+0x19a>
    1826:	e1 c0       	rjmp	.+450    	; 0x19ea <vfprintf+0x380>
    1828:	84 36       	cpi	r24, 0x64	; 100
    182a:	11 f0       	breq	.+4      	; 0x1830 <vfprintf+0x1c6>
    182c:	89 36       	cpi	r24, 0x69	; 105
    182e:	39 f5       	brne	.+78     	; 0x187e <vfprintf+0x214>
    1830:	f8 01       	movw	r30, r16
    1832:	37 fe       	sbrs	r3, 7
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <vfprintf+0x1da>
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	0c 5f       	subi	r16, 0xFC	; 252
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <vfprintf+0x1ea>
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	07 2e       	mov	r0, r23
    184a:	00 0c       	add	r0, r0
    184c:	88 0b       	sbc	r24, r24
    184e:	99 0b       	sbc	r25, r25
    1850:	0e 5f       	subi	r16, 0xFE	; 254
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	f3 2d       	mov	r31, r3
    1856:	ff 76       	andi	r31, 0x6F	; 111
    1858:	3f 2e       	mov	r3, r31
    185a:	97 ff       	sbrs	r25, 7
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <vfprintf+0x206>
    185e:	90 95       	com	r25
    1860:	80 95       	com	r24
    1862:	70 95       	com	r23
    1864:	61 95       	neg	r22
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	f0 68       	ori	r31, 0x80	; 128
    186e:	3f 2e       	mov	r3, r31
    1870:	2a e0       	ldi	r18, 0x0A	; 10
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	a3 01       	movw	r20, r6
    1876:	20 d1       	rcall	.+576    	; 0x1ab8 <__ultoa_invert>
    1878:	88 2e       	mov	r8, r24
    187a:	86 18       	sub	r8, r6
    187c:	44 c0       	rjmp	.+136    	; 0x1906 <vfprintf+0x29c>
    187e:	85 37       	cpi	r24, 0x75	; 117
    1880:	31 f4       	brne	.+12     	; 0x188e <vfprintf+0x224>
    1882:	23 2d       	mov	r18, r3
    1884:	2f 7e       	andi	r18, 0xEF	; 239
    1886:	b2 2e       	mov	r11, r18
    1888:	2a e0       	ldi	r18, 0x0A	; 10
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	25 c0       	rjmp	.+74     	; 0x18d8 <vfprintf+0x26e>
    188e:	93 2d       	mov	r25, r3
    1890:	99 7f       	andi	r25, 0xF9	; 249
    1892:	b9 2e       	mov	r11, r25
    1894:	8f 36       	cpi	r24, 0x6F	; 111
    1896:	c1 f0       	breq	.+48     	; 0x18c8 <vfprintf+0x25e>
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <vfprintf+0x236>
    189a:	88 35       	cpi	r24, 0x58	; 88
    189c:	79 f0       	breq	.+30     	; 0x18bc <vfprintf+0x252>
    189e:	ae c0       	rjmp	.+348    	; 0x19fc <vfprintf+0x392>
    18a0:	80 37       	cpi	r24, 0x70	; 112
    18a2:	19 f0       	breq	.+6      	; 0x18aa <vfprintf+0x240>
    18a4:	88 37       	cpi	r24, 0x78	; 120
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <vfprintf+0x246>
    18a8:	a9 c0       	rjmp	.+338    	; 0x19fc <vfprintf+0x392>
    18aa:	e9 2f       	mov	r30, r25
    18ac:	e0 61       	ori	r30, 0x10	; 16
    18ae:	be 2e       	mov	r11, r30
    18b0:	b4 fe       	sbrs	r11, 4
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <vfprintf+0x264>
    18b4:	fb 2d       	mov	r31, r11
    18b6:	f4 60       	ori	r31, 0x04	; 4
    18b8:	bf 2e       	mov	r11, r31
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <vfprintf+0x264>
    18bc:	34 fe       	sbrs	r3, 4
    18be:	0a c0       	rjmp	.+20     	; 0x18d4 <vfprintf+0x26a>
    18c0:	29 2f       	mov	r18, r25
    18c2:	26 60       	ori	r18, 0x06	; 6
    18c4:	b2 2e       	mov	r11, r18
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0x26a>
    18c8:	28 e0       	ldi	r18, 0x08	; 8
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x26e>
    18ce:	20 e1       	ldi	r18, 0x10	; 16
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x26e>
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	32 e0       	ldi	r19, 0x02	; 2
    18d8:	f8 01       	movw	r30, r16
    18da:	b7 fe       	sbrs	r11, 7
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <vfprintf+0x282>
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0c 5f       	subi	r16, 0xFC	; 252
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <vfprintf+0x28e>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	a3 01       	movw	r20, r6
    18fa:	de d0       	rcall	.+444    	; 0x1ab8 <__ultoa_invert>
    18fc:	88 2e       	mov	r8, r24
    18fe:	86 18       	sub	r8, r6
    1900:	fb 2d       	mov	r31, r11
    1902:	ff 77       	andi	r31, 0x7F	; 127
    1904:	3f 2e       	mov	r3, r31
    1906:	36 fe       	sbrs	r3, 6
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <vfprintf+0x2ba>
    190a:	23 2d       	mov	r18, r3
    190c:	2e 7f       	andi	r18, 0xFE	; 254
    190e:	a2 2e       	mov	r10, r18
    1910:	89 14       	cp	r8, r9
    1912:	58 f4       	brcc	.+22     	; 0x192a <vfprintf+0x2c0>
    1914:	34 fe       	sbrs	r3, 4
    1916:	0b c0       	rjmp	.+22     	; 0x192e <vfprintf+0x2c4>
    1918:	32 fc       	sbrc	r3, 2
    191a:	09 c0       	rjmp	.+18     	; 0x192e <vfprintf+0x2c4>
    191c:	83 2d       	mov	r24, r3
    191e:	8e 7e       	andi	r24, 0xEE	; 238
    1920:	a8 2e       	mov	r10, r24
    1922:	05 c0       	rjmp	.+10     	; 0x192e <vfprintf+0x2c4>
    1924:	b8 2c       	mov	r11, r8
    1926:	a3 2c       	mov	r10, r3
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <vfprintf+0x2c6>
    192a:	b8 2c       	mov	r11, r8
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x2c6>
    192e:	b9 2c       	mov	r11, r9
    1930:	a4 fe       	sbrs	r10, 4
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <vfprintf+0x2e8>
    1934:	fe 01       	movw	r30, r28
    1936:	e8 0d       	add	r30, r8
    1938:	f1 1d       	adc	r31, r1
    193a:	80 81       	ld	r24, Z
    193c:	80 33       	cpi	r24, 0x30	; 48
    193e:	21 f4       	brne	.+8      	; 0x1948 <vfprintf+0x2de>
    1940:	9a 2d       	mov	r25, r10
    1942:	99 7e       	andi	r25, 0xE9	; 233
    1944:	a9 2e       	mov	r10, r25
    1946:	09 c0       	rjmp	.+18     	; 0x195a <vfprintf+0x2f0>
    1948:	a2 fe       	sbrs	r10, 2
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0x2ee>
    194c:	b3 94       	inc	r11
    194e:	b3 94       	inc	r11
    1950:	04 c0       	rjmp	.+8      	; 0x195a <vfprintf+0x2f0>
    1952:	8a 2d       	mov	r24, r10
    1954:	86 78       	andi	r24, 0x86	; 134
    1956:	09 f0       	breq	.+2      	; 0x195a <vfprintf+0x2f0>
    1958:	b3 94       	inc	r11
    195a:	a3 fc       	sbrc	r10, 3
    195c:	10 c0       	rjmp	.+32     	; 0x197e <vfprintf+0x314>
    195e:	a0 fe       	sbrs	r10, 0
    1960:	06 c0       	rjmp	.+12     	; 0x196e <vfprintf+0x304>
    1962:	b2 14       	cp	r11, r2
    1964:	80 f4       	brcc	.+32     	; 0x1986 <vfprintf+0x31c>
    1966:	28 0c       	add	r2, r8
    1968:	92 2c       	mov	r9, r2
    196a:	9b 18       	sub	r9, r11
    196c:	0d c0       	rjmp	.+26     	; 0x1988 <vfprintf+0x31e>
    196e:	b2 14       	cp	r11, r2
    1970:	58 f4       	brcc	.+22     	; 0x1988 <vfprintf+0x31e>
    1972:	b6 01       	movw	r22, r12
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	63 d0       	rcall	.+198    	; 0x1a40 <fputc>
    197a:	b3 94       	inc	r11
    197c:	f8 cf       	rjmp	.-16     	; 0x196e <vfprintf+0x304>
    197e:	b2 14       	cp	r11, r2
    1980:	18 f4       	brcc	.+6      	; 0x1988 <vfprintf+0x31e>
    1982:	2b 18       	sub	r2, r11
    1984:	02 c0       	rjmp	.+4      	; 0x198a <vfprintf+0x320>
    1986:	98 2c       	mov	r9, r8
    1988:	21 2c       	mov	r2, r1
    198a:	a4 fe       	sbrs	r10, 4
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <vfprintf+0x342>
    198e:	b6 01       	movw	r22, r12
    1990:	80 e3       	ldi	r24, 0x30	; 48
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	55 d0       	rcall	.+170    	; 0x1a40 <fputc>
    1996:	a2 fe       	sbrs	r10, 2
    1998:	16 c0       	rjmp	.+44     	; 0x19c6 <vfprintf+0x35c>
    199a:	a1 fc       	sbrc	r10, 1
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <vfprintf+0x33a>
    199e:	88 e7       	ldi	r24, 0x78	; 120
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vfprintf+0x33e>
    19a4:	88 e5       	ldi	r24, 0x58	; 88
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	b6 01       	movw	r22, r12
    19aa:	0c c0       	rjmp	.+24     	; 0x19c4 <vfprintf+0x35a>
    19ac:	8a 2d       	mov	r24, r10
    19ae:	86 78       	andi	r24, 0x86	; 134
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <vfprintf+0x35c>
    19b2:	a1 fe       	sbrs	r10, 1
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x350>
    19b6:	8b e2       	ldi	r24, 0x2B	; 43
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <vfprintf+0x352>
    19ba:	80 e2       	ldi	r24, 0x20	; 32
    19bc:	a7 fc       	sbrc	r10, 7
    19be:	8d e2       	ldi	r24, 0x2D	; 45
    19c0:	b6 01       	movw	r22, r12
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	3d d0       	rcall	.+122    	; 0x1a40 <fputc>
    19c6:	89 14       	cp	r8, r9
    19c8:	30 f4       	brcc	.+12     	; 0x19d6 <vfprintf+0x36c>
    19ca:	b6 01       	movw	r22, r12
    19cc:	80 e3       	ldi	r24, 0x30	; 48
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	37 d0       	rcall	.+110    	; 0x1a40 <fputc>
    19d2:	9a 94       	dec	r9
    19d4:	f8 cf       	rjmp	.-16     	; 0x19c6 <vfprintf+0x35c>
    19d6:	8a 94       	dec	r8
    19d8:	f3 01       	movw	r30, r6
    19da:	e8 0d       	add	r30, r8
    19dc:	f1 1d       	adc	r31, r1
    19de:	80 81       	ld	r24, Z
    19e0:	b6 01       	movw	r22, r12
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	2d d0       	rcall	.+90     	; 0x1a40 <fputc>
    19e6:	81 10       	cpse	r8, r1
    19e8:	f6 cf       	rjmp	.-20     	; 0x19d6 <vfprintf+0x36c>
    19ea:	22 20       	and	r2, r2
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <vfprintf+0x386>
    19ee:	4e ce       	rjmp	.-868    	; 0x168c <vfprintf+0x22>
    19f0:	b6 01       	movw	r22, r12
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	24 d0       	rcall	.+72     	; 0x1a40 <fputc>
    19f8:	2a 94       	dec	r2
    19fa:	f7 cf       	rjmp	.-18     	; 0x19ea <vfprintf+0x380>
    19fc:	f6 01       	movw	r30, r12
    19fe:	86 81       	ldd	r24, Z+6	; 0x06
    1a00:	97 81       	ldd	r25, Z+7	; 0x07
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <vfprintf+0x39e>
    1a04:	8f ef       	ldi	r24, 0xFF	; 255
    1a06:	9f ef       	ldi	r25, 0xFF	; 255
    1a08:	2b 96       	adiw	r28, 0x0b	; 11
    1a0a:	e2 e1       	ldi	r30, 0x12	; 18
    1a0c:	e5 c0       	rjmp	.+458    	; 0x1bd8 <__epilogue_restores__>

00001a0e <__ctype_isfalse>:
    1a0e:	99 27       	eor	r25, r25
    1a10:	88 27       	eor	r24, r24

00001a12 <__ctype_istrue>:
    1a12:	08 95       	ret

00001a14 <strnlen_P>:
    1a14:	fc 01       	movw	r30, r24
    1a16:	05 90       	lpm	r0, Z+
    1a18:	61 50       	subi	r22, 0x01	; 1
    1a1a:	70 40       	sbci	r23, 0x00	; 0
    1a1c:	01 10       	cpse	r0, r1
    1a1e:	d8 f7       	brcc	.-10     	; 0x1a16 <strnlen_P+0x2>
    1a20:	80 95       	com	r24
    1a22:	90 95       	com	r25
    1a24:	8e 0f       	add	r24, r30
    1a26:	9f 1f       	adc	r25, r31
    1a28:	08 95       	ret

00001a2a <strnlen>:
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	61 50       	subi	r22, 0x01	; 1
    1a2e:	70 40       	sbci	r23, 0x00	; 0
    1a30:	01 90       	ld	r0, Z+
    1a32:	01 10       	cpse	r0, r1
    1a34:	d8 f7       	brcc	.-10     	; 0x1a2c <strnlen+0x2>
    1a36:	80 95       	com	r24
    1a38:	90 95       	com	r25
    1a3a:	8e 0f       	add	r24, r30
    1a3c:	9f 1f       	adc	r25, r31
    1a3e:	08 95       	ret

00001a40 <fputc>:
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	fb 01       	movw	r30, r22
    1a4a:	23 81       	ldd	r18, Z+3	; 0x03
    1a4c:	21 fd       	sbrc	r18, 1
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <fputc+0x16>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	9f ef       	ldi	r25, 0xFF	; 255
    1a54:	2c c0       	rjmp	.+88     	; 0x1aae <fputc+0x6e>
    1a56:	22 ff       	sbrs	r18, 2
    1a58:	16 c0       	rjmp	.+44     	; 0x1a86 <fputc+0x46>
    1a5a:	46 81       	ldd	r20, Z+6	; 0x06
    1a5c:	57 81       	ldd	r21, Z+7	; 0x07
    1a5e:	24 81       	ldd	r18, Z+4	; 0x04
    1a60:	35 81       	ldd	r19, Z+5	; 0x05
    1a62:	42 17       	cp	r20, r18
    1a64:	53 07       	cpc	r21, r19
    1a66:	44 f4       	brge	.+16     	; 0x1a78 <fputc+0x38>
    1a68:	a0 81       	ld	r26, Z
    1a6a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a6c:	9d 01       	movw	r18, r26
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	20 83       	st	Z, r18
    1a74:	31 83       	std	Z+1, r19	; 0x01
    1a76:	8c 93       	st	X, r24
    1a78:	26 81       	ldd	r18, Z+6	; 0x06
    1a7a:	37 81       	ldd	r19, Z+7	; 0x07
    1a7c:	2f 5f       	subi	r18, 0xFF	; 255
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	26 83       	std	Z+6, r18	; 0x06
    1a82:	37 83       	std	Z+7, r19	; 0x07
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <fputc+0x6e>
    1a86:	8b 01       	movw	r16, r22
    1a88:	ec 01       	movw	r28, r24
    1a8a:	fb 01       	movw	r30, r22
    1a8c:	00 84       	ldd	r0, Z+8	; 0x08
    1a8e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a90:	e0 2d       	mov	r30, r0
    1a92:	09 95       	icall
    1a94:	89 2b       	or	r24, r25
    1a96:	e1 f6       	brne	.-72     	; 0x1a50 <fputc+0x10>
    1a98:	d8 01       	movw	r26, r16
    1a9a:	16 96       	adiw	r26, 0x06	; 6
    1a9c:	8d 91       	ld	r24, X+
    1a9e:	9c 91       	ld	r25, X
    1aa0:	17 97       	sbiw	r26, 0x07	; 7
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	8d 93       	st	X+, r24
    1aa8:	9c 93       	st	X, r25
    1aaa:	17 97       	sbiw	r26, 0x07	; 7
    1aac:	ce 01       	movw	r24, r28
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <__ultoa_invert>:
    1ab8:	fa 01       	movw	r30, r20
    1aba:	aa 27       	eor	r26, r26
    1abc:	28 30       	cpi	r18, 0x08	; 8
    1abe:	51 f1       	breq	.+84     	; 0x1b14 <__ultoa_invert+0x5c>
    1ac0:	20 31       	cpi	r18, 0x10	; 16
    1ac2:	81 f1       	breq	.+96     	; 0x1b24 <__ultoa_invert+0x6c>
    1ac4:	e8 94       	clt
    1ac6:	6f 93       	push	r22
    1ac8:	6e 7f       	andi	r22, 0xFE	; 254
    1aca:	6e 5f       	subi	r22, 0xFE	; 254
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	af 4f       	sbci	r26, 0xFF	; 255
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	3e d0       	rcall	.+124    	; 0x1b54 <__ultoa_invert+0x9c>
    1ad8:	b4 e0       	ldi	r27, 0x04	; 4
    1ada:	3c d0       	rcall	.+120    	; 0x1b54 <__ultoa_invert+0x9c>
    1adc:	67 0f       	add	r22, r23
    1ade:	78 1f       	adc	r23, r24
    1ae0:	89 1f       	adc	r24, r25
    1ae2:	9a 1f       	adc	r25, r26
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	68 0f       	add	r22, r24
    1ae8:	79 1f       	adc	r23, r25
    1aea:	8a 1f       	adc	r24, r26
    1aec:	91 1d       	adc	r25, r1
    1aee:	a1 1d       	adc	r26, r1
    1af0:	6a 0f       	add	r22, r26
    1af2:	71 1d       	adc	r23, r1
    1af4:	81 1d       	adc	r24, r1
    1af6:	91 1d       	adc	r25, r1
    1af8:	a1 1d       	adc	r26, r1
    1afa:	20 d0       	rcall	.+64     	; 0x1b3c <__ultoa_invert+0x84>
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__ultoa_invert+0x48>
    1afe:	68 94       	set
    1b00:	3f 91       	pop	r19
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	26 9f       	mul	r18, r22
    1b06:	11 24       	eor	r1, r1
    1b08:	30 19       	sub	r19, r0
    1b0a:	30 5d       	subi	r19, 0xD0	; 208
    1b0c:	31 93       	st	Z+, r19
    1b0e:	de f6       	brtc	.-74     	; 0x1ac6 <__ultoa_invert+0xe>
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret
    1b14:	46 2f       	mov	r20, r22
    1b16:	47 70       	andi	r20, 0x07	; 7
    1b18:	40 5d       	subi	r20, 0xD0	; 208
    1b1a:	41 93       	st	Z+, r20
    1b1c:	b3 e0       	ldi	r27, 0x03	; 3
    1b1e:	0f d0       	rcall	.+30     	; 0x1b3e <__ultoa_invert+0x86>
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0x5c>
    1b22:	f6 cf       	rjmp	.-20     	; 0x1b10 <__ultoa_invert+0x58>
    1b24:	46 2f       	mov	r20, r22
    1b26:	4f 70       	andi	r20, 0x0F	; 15
    1b28:	40 5d       	subi	r20, 0xD0	; 208
    1b2a:	4a 33       	cpi	r20, 0x3A	; 58
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__ultoa_invert+0x7c>
    1b2e:	49 5d       	subi	r20, 0xD9	; 217
    1b30:	31 fd       	sbrc	r19, 1
    1b32:	40 52       	subi	r20, 0x20	; 32
    1b34:	41 93       	st	Z+, r20
    1b36:	02 d0       	rcall	.+4      	; 0x1b3c <__ultoa_invert+0x84>
    1b38:	a9 f7       	brne	.-22     	; 0x1b24 <__ultoa_invert+0x6c>
    1b3a:	ea cf       	rjmp	.-44     	; 0x1b10 <__ultoa_invert+0x58>
    1b3c:	b4 e0       	ldi	r27, 0x04	; 4
    1b3e:	a6 95       	lsr	r26
    1b40:	97 95       	ror	r25
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	ba 95       	dec	r27
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x86>
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 05       	cpc	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	08 95       	ret
    1b54:	9b 01       	movw	r18, r22
    1b56:	ac 01       	movw	r20, r24
    1b58:	0a 2e       	mov	r0, r26
    1b5a:	06 94       	lsr	r0
    1b5c:	57 95       	ror	r21
    1b5e:	47 95       	ror	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	ba 95       	dec	r27
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <__ultoa_invert+0xa2>
    1b68:	62 0f       	add	r22, r18
    1b6a:	73 1f       	adc	r23, r19
    1b6c:	84 1f       	adc	r24, r20
    1b6e:	95 1f       	adc	r25, r21
    1b70:	a0 1d       	adc	r26, r0
    1b72:	08 95       	ret

00001b74 <__mulsi3>:
    1b74:	db 01       	movw	r26, r22
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	0b d0       	rcall	.+22     	; 0x1b92 <__muluhisi3>
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	a2 9f       	mul	r26, r18
    1b82:	80 0d       	add	r24, r0
    1b84:	91 1d       	adc	r25, r1
    1b86:	a3 9f       	mul	r26, r19
    1b88:	90 0d       	add	r25, r0
    1b8a:	b2 9f       	mul	r27, r18
    1b8c:	90 0d       	add	r25, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	08 95       	ret

00001b92 <__muluhisi3>:
    1b92:	3a d0       	rcall	.+116    	; 0x1c08 <__umulhisi3>
    1b94:	a5 9f       	mul	r26, r21
    1b96:	90 0d       	add	r25, r0
    1b98:	b4 9f       	mul	r27, r20
    1b9a:	90 0d       	add	r25, r0
    1b9c:	a4 9f       	mul	r26, r20
    1b9e:	80 0d       	add	r24, r0
    1ba0:	91 1d       	adc	r25, r1
    1ba2:	11 24       	eor	r1, r1
    1ba4:	08 95       	ret

00001ba6 <__prologue_saves__>:
    1ba6:	2f 92       	push	r2
    1ba8:	3f 92       	push	r3
    1baa:	4f 92       	push	r4
    1bac:	5f 92       	push	r5
    1bae:	6f 92       	push	r6
    1bb0:	7f 92       	push	r7
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	ca 1b       	sub	r28, r26
    1bd0:	db 0b       	sbc	r29, r27
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	09 94       	ijmp

00001bd8 <__epilogue_restores__>:
    1bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    1bda:	39 88       	ldd	r3, Y+17	; 0x11
    1bdc:	48 88       	ldd	r4, Y+16	; 0x10
    1bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    1be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bea:	b9 84       	ldd	r11, Y+9	; 0x09
    1bec:	c8 84       	ldd	r12, Y+8	; 0x08
    1bee:	df 80       	ldd	r13, Y+7	; 0x07
    1bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    1bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfc:	ce 0f       	add	r28, r30
    1bfe:	d1 1d       	adc	r29, r1
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	ed 01       	movw	r28, r26
    1c06:	08 95       	ret

00001c08 <__umulhisi3>:
    1c08:	a2 9f       	mul	r26, r18
    1c0a:	b0 01       	movw	r22, r0
    1c0c:	b3 9f       	mul	r27, r19
    1c0e:	c0 01       	movw	r24, r0
    1c10:	a3 9f       	mul	r26, r19
    1c12:	01 d0       	rcall	.+2      	; 0x1c16 <__umulhisi3+0xe>
    1c14:	b2 9f       	mul	r27, r18
    1c16:	70 0d       	add	r23, r0
    1c18:	81 1d       	adc	r24, r1
    1c1a:	11 24       	eor	r1, r1
    1c1c:	91 1d       	adc	r25, r1
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
