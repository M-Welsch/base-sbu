
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00001353  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bd  00009202  00001202  00001296  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000af  00803e00  00803e00  00001353  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001353  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000056b8  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000219d  00000000  00000000  00006d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001776  00000000  00000000  00008f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000068c  00000000  00000000  0000a678  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001b89  00000000  00000000  0000ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001237  00000000  00000000  0000c88d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0000dac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	a0 c0       	rjmp	.+320    	; 0x148 <__vector_3>
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	e5 c2       	rjmp	.+1482   	; 0x5d8 <__vector_6>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	20 c1       	rjmp	.+576    	; 0x256 <__vector_10>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	3a c4       	rjmp	.+2164   	; 0x8a2 <__vector_22>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
      40:	2e e3       	ldi	r18, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	af 3a       	cpi	r26, 0xAF	; 175
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	0e d1       	rcall	.+540    	; 0x26e <main>
      52:	d5 c8       	rjmp	.-3670   	; 0xfffff1fe <__eeprom_end+0xff7ef1fe>

00000054 <__bad_interrupt>:
      54:	bd c0       	rjmp	.+378    	; 0x1d0 <__vector_default>

00000056 <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
      56:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_button_0_pressed>
	flag_heartbeat = false;
      5a:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_heartbeat>
      5e:	08 95       	ret

00000060 <init_pins>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      60:	e0 e0       	ldi	r30, 0x00	; 0
      62:	f4 e0       	ldi	r31, 0x04	; 4
      64:	80 e8       	ldi	r24, 0x80	; 128
      66:	86 83       	std	Z+6, r24	; 0x06
      68:	81 83       	std	Z+1, r24	; 0x01
      6a:	80 e4       	ldi	r24, 0x40	; 64
      6c:	81 83       	std	Z+1, r24	; 0x01
      6e:	80 e1       	ldi	r24, 0x10	; 16
      70:	85 83       	std	Z+5, r24	; 0x05
      72:	81 83       	std	Z+1, r24	; 0x01
      74:	8c e0       	ldi	r24, 0x0C	; 12
      76:	82 83       	std	Z+2, r24	; 0x02
      78:	82 89       	ldd	r24, Z+18	; 0x12
      7a:	88 60       	ori	r24, 0x08	; 8
      7c:	82 8b       	std	Z+18, r24	; 0x12
      7e:	83 89       	ldd	r24, Z+19	; 0x13
      80:	88 60       	ori	r24, 0x08	; 8
      82:	83 8b       	std	Z+19, r24	; 0x13
      84:	e0 e2       	ldi	r30, 0x20	; 32
      86:	f4 e0       	ldi	r31, 0x04	; 4
      88:	83 e1       	ldi	r24, 0x13	; 19
      8a:	81 83       	std	Z+1, r24	; 0x01
      8c:	80 e2       	ldi	r24, 0x20	; 32
      8e:	82 83       	std	Z+2, r24	; 0x02
      90:	e0 e4       	ldi	r30, 0x40	; 64
      92:	f4 e0       	ldi	r31, 0x04	; 4
      94:	8f e0       	ldi	r24, 0x0F	; 15
      96:	81 83       	std	Z+1, r24	; 0x01
      98:	15 82       	std	Z+5, r1	; 0x05
      9a:	08 95       	ret

0000009c <button_1_pressed>:
      9c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
      a0:	86 95       	lsr	r24
      a2:	86 95       	lsr	r24
      a4:	86 95       	lsr	r24
      a6:	91 e0       	ldi	r25, 0x01	; 1
      a8:	89 27       	eor	r24, r25
      aa:	81 70       	andi	r24, 0x01	; 1
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	08 95       	ret

000000b0 <set_interrupts_for_buttons>:
      b0:	e0 e0       	ldi	r30, 0x00	; 0
      b2:	f4 e0       	ldi	r31, 0x04	; 4
      b4:	82 89       	ldd	r24, Z+18	; 0x12
      b6:	83 60       	ori	r24, 0x03	; 3
      b8:	82 8b       	std	Z+18, r24	; 0x12
      ba:	83 89       	ldd	r24, Z+19	; 0x13
      bc:	83 60       	ori	r24, 0x03	; 3
      be:	83 8b       	std	Z+19, r24	; 0x13
      c0:	08 95       	ret

000000c2 <led_hmi_off>:
      c2:	80 e1       	ldi	r24, 0x10	; 16
      c4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
      c8:	08 95       	ret

000000ca <toggle_hmi_led>:
      ca:	80 e1       	ldi	r24, 0x10	; 16
      cc:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
      d0:	08 95       	ret

000000d2 <dim_display>:
      d2:	18 16       	cp	r1, r24
      d4:	19 06       	cpc	r1, r25
      d6:	24 f4       	brge	.+8      	; 0xe0 <dim_display+0xe>
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
      de:	08 95       	ret
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
      e6:	08 95       	ret

000000e8 <display_enable>:
      e8:	e0 e0       	ldi	r30, 0x00	; 0
      ea:	f4 e0       	ldi	r31, 0x04	; 4
      ec:	80 e8       	ldi	r24, 0x80	; 128
      ee:	85 83       	std	Z+5, r24	; 0x05
      f0:	92 e4       	ldi	r25, 0x42	; 66
      f2:	9a 95       	dec	r25
      f4:	f1 f7       	brne	.-4      	; 0xf2 <display_enable+0xa>
      f6:	00 c0       	rjmp	.+0      	; 0xf8 <display_enable+0x10>
      f8:	86 83       	std	Z+6, r24	; 0x06
      fa:	82 e4       	ldi	r24, 0x42	; 66
      fc:	8a 95       	dec	r24
      fe:	f1 f7       	brne	.-4      	; 0xfc <display_enable+0x14>
     100:	00 c0       	rjmp	.+0      	; 0x102 <display_enable+0x1a>
     102:	08 95       	ret

00000104 <set_display_data_pins>:
     104:	e0 e4       	ldi	r30, 0x40	; 64
     106:	f4 e0       	ldi	r31, 0x04	; 4
     108:	94 81       	ldd	r25, Z+4	; 0x04
     10a:	90 7f       	andi	r25, 0xF0	; 240
     10c:	94 83       	std	Z+4, r25	; 0x04
     10e:	94 81       	ldd	r25, Z+4	; 0x04
     110:	8f 70       	andi	r24, 0x0F	; 15
     112:	98 2b       	or	r25, r24
     114:	94 83       	std	Z+4, r25	; 0x04
     116:	08 95       	ret

00000118 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     11e:	08 95       	ret

00000120 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     120:	80 e4       	ldi	r24, 0x40	; 64
     122:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     126:	08 95       	ret

00000128 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     128:	e0 e2       	ldi	r30, 0x20	; 32
     12a:	f4 e0       	ldi	r31, 0x04	; 4
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     130:	81 83       	std	Z+1, r24	; 0x01
     132:	08 95       	ret

00000134 <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     13a:	08 95       	ret

0000013c <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     13c:	e0 e2       	ldi	r30, 0x20	; 32
     13e:	f4 e0       	ldi	r31, 0x04	; 4
     140:	85 89       	ldd	r24, Z+21	; 0x15
     142:	89 60       	ori	r24, 0x09	; 9
     144:	85 8b       	std	Z+21, r24	; 0x15
     146:	08 95       	ret

00000148 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	8f 93       	push	r24
     154:	ef 93       	push	r30
     156:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	/* EDIT: still true?? */
	if(PORTA_INTFLAGS & button_0) {
     158:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     15c:	82 ff       	sbrs	r24, 2
     15e:	08 c0       	rjmp	.+16     	; 0x170 <__vector_3+0x28>
		flag_button_0_pressed = true;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     166:	e9 e0       	ldi	r30, 0x09	; 9
     168:	f4 e0       	ldi	r31, 0x04	; 4
     16a:	80 81       	ld	r24, Z
     16c:	84 70       	andi	r24, 0x04	; 4
     16e:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     170:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     174:	83 ff       	sbrs	r24, 3
     176:	08 c0       	rjmp	.+16     	; 0x188 <__vector_3+0x40>
		flag_button_1_pressed = true;
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     17e:	e9 e0       	ldi	r30, 0x09	; 9
     180:	f4 e0       	ldi	r31, 0x04	; 4
     182:	80 81       	ld	r24, Z
     184:	88 70       	andi	r24, 0x08	; 8
     186:	80 83       	st	Z, r24
	}
}
     188:	ff 91       	pop	r31
     18a:	ef 91       	pop	r30
     18c:	8f 91       	pop	r24
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	8f 93       	push	r24
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     1a8:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     1ac:	85 ff       	sbrs	r24, 5
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <__vector_4+0x28>
		flag_heartbeat = true;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     1b6:	e9 e2       	ldi	r30, 0x29	; 41
     1b8:	f4 e0       	ldi	r31, 0x04	; 4
     1ba:	80 81       	ld	r24, Z
     1bc:	80 72       	andi	r24, 0x20	; 32
     1be:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	8f 91       	pop	r24
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <__vector_default>:

ISR(BADISR_vect)
{
     1d0:	1f 92       	push	r1
     1d2:	0f 92       	push	r0
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	0f 92       	push	r0
     1d8:	11 24       	eor	r1, r1
     1da:	2f 93       	push	r18
     1dc:	8f 93       	push	r24
     1de:	9f 93       	push	r25
     1e0:	af 93       	push	r26
     1e2:	bf 93       	push	r27
     1e4:	ef 93       	push	r30
     1e6:	ff 93       	push	r31
     1e8:	84 e1       	ldi	r24, 0x14	; 20
     1ea:	90 e0       	ldi	r25, 0x00	; 0
}

/* HMI LED */

void led_hmi_on(void) {
	PORTB.OUTSET = led_hmi;
     1ec:	e0 e2       	ldi	r30, 0x20	; 32
     1ee:	f4 e0       	ldi	r31, 0x04	; 4
     1f0:	20 e1       	ldi	r18, 0x10	; 16
     1f2:	25 83       	std	Z+5, r18	; 0x05
     1f4:	af e4       	ldi	r26, 0x4F	; 79
     1f6:	b3 ec       	ldi	r27, 0xC3	; 195
     1f8:	11 97       	sbiw	r26, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_default+0x28>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_default+0x2e>
     1fe:	00 00       	nop
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     200:	26 83       	std	Z+6, r18	; 0x06
     202:	af e4       	ldi	r26, 0x4F	; 79
     204:	b3 ec       	ldi	r27, 0xC3	; 195
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <__vector_default+0x36>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <__vector_default+0x3c>
     20c:	00 00       	nop
     20e:	01 97       	sbiw	r24, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     210:	81 f7       	brne	.-32     	; 0x1f2 <__vector_default+0x22>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	fa e0       	ldi	r31, 0x0A	; 10
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	9a e0       	ldi	r25, 0x0A	; 10
     232:	86 a3       	std	Z+38, r24	; 0x26
     234:	97 a3       	std	Z+39, r25	; 0x27
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	82 87       	std	Z+10, r24	; 0x0a
     23a:	08 95       	ret

0000023c <init_heatbeat_monitor>:
     23c:	7f df       	rcall	.-258    	; 0x13c <setup_interrupt_for_hb_edge_detection>
     23e:	f5 df       	rcall	.-22     	; 0x22a <setup_interrupt_timeout_detection>
     240:	08 95       	ret

00000242 <heartbeat_monitor>:
     242:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_heartbeat>
     246:	88 23       	and	r24, r24
     248:	29 f0       	breq	.+10     	; 0x254 <heartbeat_monitor+0x12>
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	41 df       	rcall	.-382    	; 0xd2 <dim_display>
     250:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_heartbeat>
     254:	08 95       	ret

00000256 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     260:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_bpi_heartbeat_ok>
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <main>:
#include "rtc.h"


int main(void)
{
	init_flags();
     26e:	f3 de       	rcall	.-538    	; 0x56 <init_flags>
	init_pins();
     270:	f7 de       	rcall	.-530    	; 0x60 <init_pins>
	init_heatbeat_monitor();
     272:	e4 df       	rcall	.-56     	; 0x23c <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     274:	1d df       	rcall	.-454    	; 0xb0 <set_interrupts_for_buttons>
	init_uart();
     276:	e0 d1       	rcall	.+960    	; 0x638 <init_uart>
	init_display();
     278:	77 d0       	rcall	.+238    	; 0x368 <init_display>
	sei();
     27a:	78 94       	sei
	
	display_write_string("Standby Unit\nready!");
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	92 e9       	ldi	r25, 0x92	; 146
     280:	23 d1       	rcall	.+582    	; 0x4c8 <display_write_string>
	USART0_sendString("I:STARTED");
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	92 e9       	ldi	r25, 0x92	; 146
     286:	eb d1       	rcall	.+982    	; 0x65e <USART0_sendString>
		
		if (flag_goto_sleep == true) {
			flag_goto_sleep = false;
			USART0_sendString_w_eol("going to sleep ...\n");
			_delay_ms(100);
			SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     288:	c0 e5       	ldi	r28, 0x50	; 80
     28a:	d0 e0       	ldi	r29, 0x00	; 0
	display_write_string("Standby Unit\nready!");
	USART0_sendString("I:STARTED");
	
    while (1) 
    {
		heartbeat_monitor();
     28c:	da df       	rcall	.-76     	; 0x242 <heartbeat_monitor>
		if(!flag_bpi_heartbeat_ok) {
     28e:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_bpi_heartbeat_ok>
     292:	81 11       	cpse	r24, r1
     294:	01 c0       	rjmp	.+2      	; 0x298 <main+0x2a>
			/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
			disable_usart_tx();
     296:	4e df       	rcall	.-356    	; 0x134 <disable_usart_tx>
		}
		
		if (flag_button_0_pressed == true) {
     298:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_button_0_pressed>
     29c:	88 23       	and	r24, r24
     29e:	19 f0       	breq	.+6      	; 0x2a6 <main+0x38>
			led_hmi_off();
     2a0:	10 df       	rcall	.-480    	; 0xc2 <led_hmi_off>
			flag_button_0_pressed = false;
     2a2:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_button_0_pressed>
		}
		if (button_1_pressed() == 1) {
     2a6:	fa de       	rcall	.-524    	; 0x9c <button_1_pressed>
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <main+0x44>
			USART0_sendString("C:Hello\r\n");
     2ac:	82 e2       	ldi	r24, 0x22	; 34
     2ae:	92 e9       	ldi	r25, 0x92	; 146
     2b0:	d6 d1       	rcall	.+940    	; 0x65e <USART0_sendString>
		}
		
		if (flag_usart_string_receive_complete == true) {
     2b2:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_usart_string_receive_complete>
     2b6:	88 23       	and	r24, r24
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <main+0x52>
			USART0_process_incoming_message(); //this leads to the display being dark all the time
     2ba:	57 d2       	rcall	.+1198   	; 0x76a <USART0_process_incoming_message>
			flag_usart_string_receive_complete = false;
     2bc:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_usart_string_receive_complete>
			//display_write_string("Received TS\nBaSe Ready.");
			//display_write_string(usart_receive_buffer);
			
		}
		
		if (flag_string_for_display_received == true) {
     2c0:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_string_for_display_received>
     2c4:	88 23       	and	r24, r24
     2c6:	69 f0       	breq	.+26     	; 0x2e2 <main+0x74>
			flag_string_for_display_received = false;
     2c8:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_string_for_display_received>
			display_clear();
     2cc:	10 d1       	rcall	.+544    	; 0x4ee <display_clear>
			display_write_string(display_line1_content_from_bcu);
     2ce:	84 e9       	ldi	r24, 0x94	; 148
     2d0:	9e e3       	ldi	r25, 0x3E	; 62
     2d2:	fa d0       	rcall	.+500    	; 0x4c8 <display_write_string>
			display_next_line();
     2d4:	ef d0       	rcall	.+478    	; 0x4b4 <display_next_line>
			display_write_string(display_line2_content_from_bcu);
     2d6:	82 e1       	ldi	r24, 0x12	; 18
     2d8:	9e e3       	ldi	r25, 0x3E	; 62
     2da:	f6 d0       	rcall	.+492    	; 0x4c8 <display_write_string>
			USART0_sendString_w_eol("New Display\n");
     2dc:	8c e2       	ldi	r24, 0x2C	; 44
     2de:	92 e9       	ldi	r25, 0x92	; 146
     2e0:	df d1       	rcall	.+958    	; 0x6a0 <USART0_sendString_w_eol>
		}
		
		if (flag_pwr_state_change_request == true) {
     2e2:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <flag_pwr_state_change_request>
     2e6:	88 23       	and	r24, r24
     2e8:	49 f0       	breq	.+18     	; 0x2fc <main+0x8e>
			display_clear();
     2ea:	01 d1       	rcall	.+514    	; 0x4ee <display_clear>
			display_write_string("Received Shut-\ndown Request!");
     2ec:	89 e3       	ldi	r24, 0x39	; 57
     2ee:	92 e9       	ldi	r25, 0x92	; 146
     2f0:	eb d0       	rcall	.+470    	; 0x4c8 <display_write_string>
			flag_pwr_state_change_request = false;
     2f2:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <flag_pwr_state_change_request>
			goto_pwr_state(next_pwr_state);
     2f6:	80 91 a6 3e 	lds	r24, 0x3EA6	; 0x803ea6 <next_pwr_state>
     2fa:	21 d1       	rcall	.+578    	; 0x53e <goto_pwr_state>
		}
		
		if (flag_human_readable_timestamp_next_bu_received == true) {
     2fc:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <flag_human_readable_timestamp_next_bu_received>
     300:	88 23       	and	r24, r24
     302:	31 f0       	breq	.+12     	; 0x310 <main+0xa2>
			display_clear();
     304:	f4 d0       	rcall	.+488    	; 0x4ee <display_clear>
			display_write_string(human_readable_timestamp_next_bu);
     306:	83 e7       	ldi	r24, 0x73	; 115
     308:	9e e3       	ldi	r25, 0x3E	; 62
     30a:	de d0       	rcall	.+444    	; 0x4c8 <display_write_string>
			flag_human_readable_timestamp_next_bu_received = false;
     30c:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <flag_human_readable_timestamp_next_bu_received>
		}
		
		if (flag_received_seconds_to_next_bu == true) {
     310:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <flag_received_seconds_to_next_bu>
     314:	88 23       	and	r24, r24
     316:	21 f0       	breq	.+8      	; 0x320 <main+0xb2>
			//Todo: acknowledge to bcu
			flag_received_seconds_to_next_bu = false;
     318:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <flag_received_seconds_to_next_bu>
			rtc_write_seconds_to_cmp();
     31c:	38 d1       	rcall	.+624    	; 0x58e <rtc_write_seconds_to_cmp>
			rtc_setup();
     31e:	2d d1       	rcall	.+602    	; 0x57a <rtc_setup>
		}
		
		if (flag_goto_sleep == true) {
     320:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <flag_goto_sleep>
     324:	88 23       	and	r24, r24
     326:	a9 f0       	breq	.+42     	; 0x352 <main+0xe4>
			flag_goto_sleep = false;
     328:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <flag_goto_sleep>
			USART0_sendString_w_eol("going to sleep ...\n");
     32c:	86 e5       	ldi	r24, 0x56	; 86
     32e:	92 e9       	ldi	r25, 0x92	; 146
     330:	b7 d1       	rcall	.+878    	; 0x6a0 <USART0_sendString_w_eol>
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	80 e7       	ldi	r24, 0x70	; 112
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	80 40       	sbci	r24, 0x00	; 0
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xca>
     340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xd4>
     342:	00 00       	nop
			_delay_ms(100);
			SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     344:	88 81       	ld	r24, Y
     346:	82 60       	ori	r24, 0x02	; 2
     348:	88 83       	st	Y, r24
			SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     34a:	88 81       	ld	r24, Y
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	88 83       	st	Y, r24
			sleep_cpu();
     350:	88 95       	sleep
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	80 e7       	ldi	r24, 0x70	; 112
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	21 50       	subi	r18, 0x01	; 1
     35a:	80 40       	sbci	r24, 0x00	; 0
     35c:	90 40       	sbci	r25, 0x00	; 0
     35e:	e1 f7       	brne	.-8      	; 0x358 <main+0xea>
     360:	00 c0       	rjmp	.+0      	; 0x362 <main+0xf4>
     362:	00 00       	nop
		}	
		
		_delay_ms(100);
		
		/* let hmi led toggle as a sbc heartbeat */		
		toggle_hmi_led();
     364:	b2 de       	rcall	.-668    	; 0xca <toggle_hmi_led>
		// send_sbc_heartbeat_count_to_bpi();
    }
     366:	92 cf       	rjmp	.-220    	; 0x28c <main+0x1e>

00000368 <init_display>:
     368:	2f e7       	ldi	r18, 0x7F	; 127
     36a:	8a e1       	ldi	r24, 0x1A	; 26
     36c:	96 e0       	ldi	r25, 0x06	; 6
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	80 40       	sbci	r24, 0x00	; 0
     372:	90 40       	sbci	r25, 0x00	; 0
     374:	e1 f7       	brne	.-8      	; 0x36e <init_display+0x6>
     376:	00 c0       	rjmp	.+0      	; 0x378 <init_display+0x10>
     378:	00 00       	nop
     37a:	d2 de       	rcall	.-604    	; 0x120 <display_clear_rs_pin>
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	c2 de       	rcall	.-636    	; 0x104 <set_display_data_pins>
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	b2 de       	rcall	.-668    	; 0xe8 <display_enable>
     384:	87 e8       	ldi	r24, 0x87	; 135
     386:	93 e1       	ldi	r25, 0x13	; 19
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <init_display+0x20>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <init_display+0x26>
     38e:	00 00       	nop
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	b8 de       	rcall	.-656    	; 0x104 <set_display_data_pins>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	a8 de       	rcall	.-688    	; 0xe8 <display_enable>
     398:	87 e8       	ldi	r24, 0x87	; 135
     39a:	93 e1       	ldi	r25, 0x13	; 19
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <init_display+0x34>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <init_display+0x3a>
     3a2:	00 00       	nop
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	ae de       	rcall	.-676    	; 0x104 <set_display_data_pins>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	9e de       	rcall	.-708    	; 0xe8 <display_enable>
     3ac:	87 e8       	ldi	r24, 0x87	; 135
     3ae:	93 e1       	ldi	r25, 0x13	; 19
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <init_display+0x48>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <init_display+0x4e>
     3b6:	00 00       	nop
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	a4 de       	rcall	.-696    	; 0x104 <set_display_data_pins>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	94 de       	rcall	.-728    	; 0xe8 <display_enable>
     3c0:	87 e8       	ldi	r24, 0x87	; 135
     3c2:	93 e1       	ldi	r25, 0x13	; 19
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <init_display+0x5c>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <init_display+0x62>
     3ca:	00 00       	nop
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	9a de       	rcall	.-716    	; 0x104 <set_display_data_pins>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	8a de       	rcall	.-748    	; 0xe8 <display_enable>
     3d4:	87 e8       	ldi	r24, 0x87	; 135
     3d6:	93 e1       	ldi	r25, 0x13	; 19
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <init_display+0x70>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <init_display+0x76>
     3de:	00 00       	nop
     3e0:	88 e0       	ldi	r24, 0x08	; 8
     3e2:	90 de       	rcall	.-736    	; 0x104 <set_display_data_pins>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 de       	rcall	.-768    	; 0xe8 <display_enable>
     3e8:	87 e8       	ldi	r24, 0x87	; 135
     3ea:	93 e1       	ldi	r25, 0x13	; 19
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <init_display+0x84>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <init_display+0x8a>
     3f2:	00 00       	nop
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	86 de       	rcall	.-756    	; 0x104 <set_display_data_pins>
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	76 de       	rcall	.-788    	; 0xe8 <display_enable>
     3fc:	87 e8       	ldi	r24, 0x87	; 135
     3fe:	93 e1       	ldi	r25, 0x13	; 19
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	8c e0       	ldi	r24, 0x0C	; 12
     40a:	7c de       	rcall	.-776    	; 0x104 <set_display_data_pins>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	6c de       	rcall	.-808    	; 0xe8 <display_enable>
     410:	87 e8       	ldi	r24, 0x87	; 135
     412:	93 e1       	ldi	r25, 0x13	; 19
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	72 de       	rcall	.-796    	; 0x104 <set_display_data_pins>
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	62 de       	rcall	.-828    	; 0xe8 <display_enable>
     424:	87 e8       	ldi	r24, 0x87	; 135
     426:	93 e1       	ldi	r25, 0x13	; 19
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
     430:	86 e0       	ldi	r24, 0x06	; 6
     432:	68 de       	rcall	.-816    	; 0x104 <set_display_data_pins>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	58 de       	rcall	.-848    	; 0xe8 <display_enable>
     438:	87 e8       	ldi	r24, 0x87	; 135
     43a:	93 e1       	ldi	r25, 0x13	; 19
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	5e de       	rcall	.-836    	; 0x104 <set_display_data_pins>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	4e de       	rcall	.-868    	; 0xe8 <display_enable>
     44c:	87 e8       	ldi	r24, 0x87	; 135
     44e:	93 e1       	ldi	r25, 0x13	; 19
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     456:	00 00       	nop
     458:	86 e0       	ldi	r24, 0x06	; 6
     45a:	54 de       	rcall	.-856    	; 0x104 <set_display_data_pins>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	44 de       	rcall	.-888    	; 0xe8 <display_enable>
     460:	87 e8       	ldi	r24, 0x87	; 135
     462:	93 e1       	ldi	r25, 0x13	; 19
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	4a de       	rcall	.-876    	; 0x104 <set_display_data_pins>
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	3a de       	rcall	.-908    	; 0xe8 <display_enable>
     474:	87 e8       	ldi	r24, 0x87	; 135
     476:	93 e1       	ldi	r25, 0x13	; 19
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47e:	00 00       	nop
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	40 de       	rcall	.-896    	; 0x104 <set_display_data_pins>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	30 de       	rcall	.-928    	; 0xe8 <display_enable>
     488:	87 e8       	ldi	r24, 0x87	; 135
     48a:	93 e1       	ldi	r25, 0x13	; 19
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <display_write_char>:
     496:	cf 93       	push	r28
     498:	c8 2f       	mov	r28, r24
     49a:	3e de       	rcall	.-900    	; 0x118 <display_set_rs_pin>
     49c:	8c 2f       	mov	r24, r28
     49e:	82 95       	swap	r24
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	30 de       	rcall	.-928    	; 0x104 <set_display_data_pins>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	20 de       	rcall	.-960    	; 0xe8 <display_enable>
     4a8:	8c 2f       	mov	r24, r28
     4aa:	2c de       	rcall	.-936    	; 0x104 <set_display_data_pins>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	1c de       	rcall	.-968    	; 0xe8 <display_enable>
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <display_next_line>:
     4b4:	35 de       	rcall	.-918    	; 0x120 <display_clear_rs_pin>
     4b6:	8c e0       	ldi	r24, 0x0C	; 12
     4b8:	25 de       	rcall	.-950    	; 0x104 <set_display_data_pins>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	15 de       	rcall	.-982    	; 0xe8 <display_enable>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	21 de       	rcall	.-958    	; 0x104 <set_display_data_pins>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	11 de       	rcall	.-990    	; 0xe8 <display_enable>
     4c6:	08 95       	ret

000004c8 <display_write_string>:
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	24 de       	rcall	.-952    	; 0x118 <display_set_rs_pin>
     4d0:	88 81       	ld	r24, Y
     4d2:	88 23       	and	r24, r24
     4d4:	49 f0       	breq	.+18     	; 0x4e8 <display_write_string+0x20>
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	8a 30       	cpi	r24, 0x0A	; 10
     4da:	11 f4       	brne	.+4      	; 0x4e0 <display_write_string+0x18>
     4dc:	eb df       	rcall	.-42     	; 0x4b4 <display_next_line>
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <display_write_string+0x1a>
     4e0:	da df       	rcall	.-76     	; 0x496 <display_write_char>
     4e2:	89 91       	ld	r24, Y+
     4e4:	81 11       	cpse	r24, r1
     4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <display_write_string+0x10>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     4ee:	18 de       	rcall	.-976    	; 0x120 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	08 de       	rcall	.-1008   	; 0x104 <set_display_data_pins>
	display_enable(1);
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	f8 dd       	rcall	.-1040   	; 0xe8 <display_enable>
	set_display_data_pins(0x01);
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	04 de       	rcall	.-1016   	; 0x104 <set_display_data_pins>
	display_enable(1);
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	f4 dd       	rcall	.-1048   	; 0xe8 <display_enable>
     500:	87 ea       	ldi	r24, 0xA7	; 167
     502:	91 e6       	ldi	r25, 0x61	; 97
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <display_clear+0x16>
     508:	00 c0       	rjmp	.+0      	; 0x50a <display_clear+0x1c>
     50a:	00 00       	nop
     50c:	08 95       	ret

0000050e <enable_5v0_smps>:
#include "flags.h"
#include "gpio_interface.h"
#include "powerpath_control.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     50e:	e0 e0       	ldi	r30, 0x00	; 0
     510:	f4 e0       	ldi	r31, 0x04	; 4
     512:	84 81       	ldd	r24, Z+4	; 0x04
     514:	80 61       	ori	r24, 0x10	; 16
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	08 95       	ret

0000051a <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     51a:	e0 e0       	ldi	r30, 0x00	; 0
     51c:	f4 e0       	ldi	r31, 0x04	; 4
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	8f 7e       	andi	r24, 0xEF	; 239
     522:	84 83       	std	Z+4, r24	; 0x04
     524:	08 95       	ret

00000526 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     526:	e0 e2       	ldi	r30, 0x20	; 32
     528:	f4 e0       	ldi	r31, 0x04	; 4
     52a:	84 81       	ldd	r24, Z+4	; 0x04
     52c:	8d 7f       	andi	r24, 0xFD	; 253
     52e:	84 83       	std	Z+4, r24	; 0x04
     530:	08 95       	ret

00000532 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     532:	e0 e2       	ldi	r30, 0x20	; 32
     534:	f4 e0       	ldi	r31, 0x04	; 4
     536:	84 81       	ldd	r24, Z+4	; 0x04
     538:	82 60       	ori	r24, 0x02	; 2
     53a:	84 83       	std	Z+4, r24	; 0x04
     53c:	08 95       	ret

0000053e <goto_pwr_state>:
}

void goto_pwr_state(enum pwr_states pwr_state) {
	switch(pwr_state) {
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <goto_pwr_state+0xa>
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	61 f0       	breq	.+24     	; 0x55e <goto_pwr_state+0x20>
     546:	08 95       	ret
		case standby:
			
		if (flag_bpi_ready_for_shutdown == true && flag_bpi_shutdown_timer_elapsed == true) {
     548:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_bpi_ready_for_shutdown>
     54c:	88 23       	and	r24, r24
     54e:	49 f0       	breq	.+18     	; 0x562 <goto_pwr_state+0x24>
     550:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_bpi_shutdown_timer_elapsed>
     554:	88 23       	and	r24, r24
     556:	29 f0       	breq	.+10     	; 0x562 <goto_pwr_state+0x24>
			disable_bpi_sply();
     558:	ec df       	rcall	.-40     	; 0x532 <disable_bpi_sply>
			disable_5v0_smps();
     55a:	df df       	rcall	.-66     	; 0x51a <disable_5v0_smps>
     55c:	08 95       	ret
		case display_on:
		
		break;
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			enable_5v0_smps();
     55e:	d7 df       	rcall	.-82     	; 0x50e <enable_5v0_smps>
			enable_bpi_sply();
     560:	e2 df       	rcall	.-60     	; 0x526 <enable_bpi_sply>
     562:	08 95       	ret

00000564 <rtc_reset_counter>:
	rtc_set_compare_interrupt();
	rtc_use_internal_1k024_oscillator();
}

void rtc_set_compare_value(void) {
	RTC.CMP = 0x0001;
     564:	e0 e4       	ldi	r30, 0x40	; 64
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	10 86       	std	Z+8, r1	; 0x08
     56a:	11 86       	std	Z+9, r1	; 0x09
     56c:	08 95       	ret

0000056e <rtc_wait_for_all_status_bits_zero>:
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f1 e0       	ldi	r31, 0x01	; 1
     572:	81 81       	ldd	r24, Z+1	; 0x01
     574:	81 11       	cpse	r24, r1
     576:	fd cf       	rjmp	.-6      	; 0x572 <rtc_wait_for_all_status_bits_zero+0x4>
     578:	08 95       	ret

0000057a <rtc_setup>:
     57a:	f9 df       	rcall	.-14     	; 0x56e <rtc_wait_for_all_status_bits_zero>
     57c:	e0 e4       	ldi	r30, 0x40	; 64
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	81 ed       	ldi	r24, 0xD1	; 209
     582:	80 83       	st	Z, r24
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	82 83       	std	Z+2, r24	; 0x02
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	87 83       	std	Z+7, r24	; 0x07
     58c:	08 95       	ret

0000058e <rtc_write_seconds_to_cmp>:
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     596:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <seconds_to_next_bu>
     59a:	90 91 0f 3e 	lds	r25, 0x3E0F	; 0x803e0f <seconds_to_next_bu+0x1>
     59e:	a0 91 10 3e 	lds	r26, 0x3E10	; 0x803e10 <seconds_to_next_bu+0x2>
     5a2:	b0 91 11 3e 	lds	r27, 0x3E11	; 0x803e11 <seconds_to_next_bu+0x3>
     5a6:	bb 23       	and	r27, r27
     5a8:	1c f4       	brge	.+6      	; 0x5b0 <rtc_write_seconds_to_cmp+0x22>
     5aa:	4f 96       	adiw	r24, 0x1f	; 31
     5ac:	a1 1d       	adc	r26, r1
     5ae:	b1 1d       	adc	r27, r1
     5b0:	6c 01       	movw	r12, r24
     5b2:	7d 01       	movw	r14, r26
     5b4:	68 94       	set
     5b6:	14 f8       	bld	r1, 4
     5b8:	f5 94       	asr	r15
     5ba:	e7 94       	ror	r14
     5bc:	d7 94       	ror	r13
     5be:	c7 94       	ror	r12
     5c0:	16 94       	lsr	r1
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <rtc_write_seconds_to_cmp+0x2a>
	rtc_reset_counter();
     5c4:	cf df       	rcall	.-98     	; 0x564 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     5c6:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     5ca:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	2f 93       	push	r18
     5e4:	3f 93       	push	r19
     5e6:	4f 93       	push	r20
     5e8:	5f 93       	push	r21
     5ea:	6f 93       	push	r22
     5ec:	7f 93       	push	r23
     5ee:	8f 93       	push	r24
     5f0:	9f 93       	push	r25
     5f2:	af 93       	push	r26
     5f4:	bf 93       	push	r27
     5f6:	ef 93       	push	r30
     5f8:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     5fa:	e0 e4       	ldi	r30, 0x40	; 64
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	83 81       	ldd	r24, Z+3	; 0x03
     600:	82 60       	ori	r24, 0x02	; 2
     602:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     604:	8a e6       	ldi	r24, 0x6A	; 106
     606:	92 e9       	ldi	r25, 0x92	; 146
     608:	2a d0       	rcall	.+84     	; 0x65e <USART0_sendString>
     60a:	ff 91       	pop	r31
     60c:	ef 91       	pop	r30
     60e:	bf 91       	pop	r27
     610:	af 91       	pop	r26
     612:	9f 91       	pop	r25
     614:	8f 91       	pop	r24
     616:	7f 91       	pop	r23
     618:	6f 91       	pop	r22
     61a:	5f 91       	pop	r21
     61c:	4f 91       	pop	r20
     61e:	3f 91       	pop	r19
     620:	2f 91       	pop	r18
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     62c:	e0 e0       	ldi	r30, 0x00	; 0
     62e:	f8 e0       	ldi	r31, 0x08	; 8
     630:	85 81       	ldd	r24, Z+5	; 0x05
     632:	80 68       	ori	r24, 0x80	; 128
     634:	85 83       	std	Z+5, r24	; 0x05
     636:	08 95       	ret

00000638 <init_uart>:
     638:	77 dd       	rcall	.-1298   	; 0x128 <set_pb2_txd_and_pb3_rxd>
     63a:	e0 e0       	ldi	r30, 0x00	; 0
     63c:	f8 e0       	ldi	r31, 0x08	; 8
     63e:	8c e6       	ldi	r24, 0x6C	; 108
     640:	95 e0       	ldi	r25, 0x05	; 5
     642:	80 87       	std	Z+8, r24	; 0x08
     644:	91 87       	std	Z+9, r25	; 0x09
     646:	80 ec       	ldi	r24, 0xC0	; 192
     648:	86 83       	std	Z+6, r24	; 0x06
     64a:	f0 df       	rcall	.-32     	; 0x62c <USART0_enable_rx_complete_interrupt>
     64c:	08 95       	ret

0000064e <USART0_sendChar>:
     64e:	e0 e0       	ldi	r30, 0x00	; 0
     650:	f8 e0       	ldi	r31, 0x08	; 8
     652:	94 81       	ldd	r25, Z+4	; 0x04
     654:	95 ff       	sbrs	r25, 5
     656:	fd cf       	rjmp	.-6      	; 0x652 <USART0_sendChar+0x4>
     658:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     65c:	08 95       	ret

0000065e <USART0_sendString>:
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	8c 01       	movw	r16, r24
     66c:	7c 01       	movw	r14, r24
     66e:	c0 e0       	ldi	r28, 0x00	; 0
     670:	d0 e0       	ldi	r29, 0x00	; 0
     672:	05 c0       	rjmp	.+10     	; 0x67e <USART0_sendString+0x20>
     674:	f7 01       	movw	r30, r14
     676:	81 91       	ld	r24, Z+
     678:	7f 01       	movw	r14, r30
     67a:	e9 df       	rcall	.-46     	; 0x64e <USART0_sendChar>
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	f8 01       	movw	r30, r16
     680:	01 90       	ld	r0, Z+
     682:	00 20       	and	r0, r0
     684:	e9 f7       	brne	.-6      	; 0x680 <USART0_sendString+0x22>
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	e0 1b       	sub	r30, r16
     68a:	f1 0b       	sbc	r31, r17
     68c:	ce 17       	cp	r28, r30
     68e:	df 07       	cpc	r29, r31
     690:	88 f3       	brcs	.-30     	; 0x674 <USART0_sendString+0x16>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	08 95       	ret

000006a0 <USART0_sendString_w_eol>:
     6a0:	de df       	rcall	.-68     	; 0x65e <USART0_sendString>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	d4 df       	rcall	.-88     	; 0x64e <USART0_sendChar>
     6a6:	08 95       	ret

000006a8 <USART0_read>:
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f8 e0       	ldi	r31, 0x08	; 8
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	88 23       	and	r24, r24
     6b0:	ec f7       	brge	.-6      	; 0x6ac <USART0_read+0x4>
     6b2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     6b6:	08 95       	ret

000006b8 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	7c 01       	movw	r14, r24
     6ca:	6b 01       	movw	r12, r22
     6cc:	61 32       	cpi	r22, 0x21	; 33
     6ce:	71 05       	cpc	r23, r1
     6d0:	24 f0       	brlt	.+8      	; 0x6da <USART0_read_string+0x22>
     6d2:	68 94       	set
     6d4:	cc 24       	eor	r12, r12
     6d6:	c5 f8       	bld	r12, 5
     6d8:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     6da:	dd 20       	and	r13, r13
     6dc:	c4 f0       	brlt	.+48     	; 0x70e <USART0_read_string+0x56>
     6de:	e7 01       	movw	r28, r14
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	7e 01       	movw	r14, r28
		i++;
     6e6:	0f 5f       	subi	r16, 0xFF	; 255
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     6ea:	de df       	rcall	.-68     	; 0x6a8 <USART0_read>
     6ec:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     6ee:	8a 30       	cpi	r24, 0x0A	; 10
     6f0:	21 f0       	breq	.+8      	; 0x6fa <USART0_read_string+0x42>
     6f2:	88 23       	and	r24, r24
     6f4:	11 f0       	breq	.+4      	; 0x6fa <USART0_read_string+0x42>
     6f6:	8d 30       	cpi	r24, 0x0D	; 13
     6f8:	31 f4       	brne	.+12     	; 0x706 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     6fa:	f7 01       	movw	r30, r14
     6fc:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     6fe:	c0 16       	cp	r12, r16
     700:	d1 06       	cpc	r13, r17
     702:	3c f4       	brge	.+14     	; 0x712 <USART0_read_string+0x5a>
     704:	04 c0       	rjmp	.+8      	; 0x70e <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     706:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     708:	c0 16       	cp	r12, r16
     70a:	d1 06       	cpc	r13, r17
     70c:	5c f7       	brge	.-42     	; 0x6e4 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     70e:	f7 01       	movw	r30, r14
     710:	10 82       	st	Z, r1
	}
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	08 95       	ret

00000724 <convert_str_to_long>:
	}
	*message_code = '\0';
	*payload = '\0';
}

long convert_str_to_long(char *str) {
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	00 d0       	rcall	.+0      	; 0x72e <convert_str_to_long+0xa>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	08 2f       	mov	r16, r24
     734:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	8f e6       	ldi	r24, 0x6F	; 111
     73c:	92 e9       	ldi	r25, 0x92	; 146
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	2e d2       	rcall	.+1116   	; 0xba0 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     744:	4a e0       	ldi	r20, 0x0A	; 10
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	80 2f       	mov	r24, r16
     750:	91 2f       	mov	r25, r17
     752:	d1 d0       	rcall	.+418    	; 0x8f6 <strtol>
	return ret;
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     772:	6e e7       	ldi	r22, 0x7E	; 126
     774:	72 e9       	ldi	r23, 0x92	; 146
     776:	83 e2       	ldi	r24, 0x23	; 35
     778:	9e e3       	ldi	r25, 0x3E	; 62
     77a:	db d1       	rcall	.+950    	; 0xb32 <strcmp>
     77c:	89 2b       	or	r24, r25
     77e:	19 f4       	brne	.+6      	; 0x786 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     780:	83 e8       	ldi	r24, 0x83	; 131
     782:	92 e9       	ldi	r25, 0x92	; 146
     784:	8d df       	rcall	.-230    	; 0x6a0 <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     786:	68 e8       	ldi	r22, 0x88	; 136
     788:	72 e9       	ldi	r23, 0x92	; 146
     78a:	83 e2       	ldi	r24, 0x23	; 35
     78c:	9e e3       	ldi	r25, 0x3E	; 62
     78e:	cd d1       	rcall	.+922    	; 0xb2a <strtok>
     790:	ec 01       	movw	r28, r24
    payload = strtok(NULL,"\0");
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	72 e9       	ldi	r23, 0x92	; 146
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	c7 d1       	rcall	.+910    	; 0xb2a <strtok>
     79c:	8c 01       	movw	r16, r24
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     79e:	1f 93       	push	r17
     7a0:	8f 93       	push	r24
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	8a e8       	ldi	r24, 0x8A	; 138
     7a8:	92 e9       	ldi	r25, 0x92	; 146
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	83 e4       	ldi	r24, 0x43	; 67
     7b0:	9e e3       	ldi	r25, 0x3E	; 62
     7b2:	9f 93       	push	r25
     7b4:	8f 93       	push	r24
     7b6:	07 d2       	rcall	.+1038   	; 0xbc6 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     7b8:	6e e9       	ldi	r22, 0x9E	; 158
     7ba:	72 e9       	ldi	r23, 0x92	; 146
     7bc:	ce 01       	movw	r24, r28
     7be:	b9 d1       	rcall	.+882    	; 0xb32 <strcmp>
     7c0:	ed b7       	in	r30, 0x3d	; 61
     7c2:	fe b7       	in	r31, 0x3e	; 62
     7c4:	38 96       	adiw	r30, 0x08	; 8
     7c6:	ed bf       	out	0x3d, r30	; 61
     7c8:	fe bf       	out	0x3e, r31	; 62
     7ca:	89 2b       	or	r24, r25
     7cc:	39 f4       	brne	.+14     	; 0x7dc <USART0_process_incoming_message+0x72>
		USART0_sendString_w_eol("ACK_D1");
     7ce:	8a e9       	ldi	r24, 0x9A	; 154
     7d0:	92 e9       	ldi	r25, 0x92	; 146
     7d2:	66 df       	rcall	.-308    	; 0x6a0 <USART0_sendString_w_eol>
		strcpy(display_line1_content_from_bcu, payload);
     7d4:	b8 01       	movw	r22, r16
     7d6:	84 e9       	ldi	r24, 0x94	; 148
     7d8:	9e e3       	ldi	r25, 0x3E	; 62
     7da:	b4 d1       	rcall	.+872    	; 0xb44 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     7dc:	65 ea       	ldi	r22, 0xA5	; 165
     7de:	72 e9       	ldi	r23, 0x92	; 146
     7e0:	ce 01       	movw	r24, r28
     7e2:	a7 d1       	rcall	.+846    	; 0xb32 <strcmp>
     7e4:	89 2b       	or	r24, r25
     7e6:	51 f4       	brne	.+20     	; 0x7fc <USART0_process_incoming_message+0x92>
		USART0_sendString_w_eol("ACK_D2");
     7e8:	81 ea       	ldi	r24, 0xA1	; 161
     7ea:	92 e9       	ldi	r25, 0x92	; 146
     7ec:	59 df       	rcall	.-334    	; 0x6a0 <USART0_sendString_w_eol>
		strcpy(display_line2_content_from_bcu, payload);
     7ee:	b8 01       	movw	r22, r16
     7f0:	82 e1       	ldi	r24, 0x12	; 18
     7f2:	9e e3       	ldi	r25, 0x3E	; 62
     7f4:	a7 d1       	rcall	.+846    	; 0xb44 <strcpy>
		flag_string_for_display_received = true;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     7fc:	68 ea       	ldi	r22, 0xA8	; 168
     7fe:	72 e9       	ldi	r23, 0x92	; 146
     800:	ce 01       	movw	r24, r28
     802:	97 d1       	rcall	.+814    	; 0xb32 <strcmp>
     804:	89 2b       	or	r24, r25
     806:	29 f4       	brne	.+10     	; 0x812 <USART0_process_incoming_message+0xa8>
		flag_pwr_state_change_request = true;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <flag_pwr_state_change_request>
		next_pwr_state = standby;
     80e:	10 92 a6 3e 	sts	0x3EA6, r1	; 0x803ea6 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     812:	6b ea       	ldi	r22, 0xAB	; 171
     814:	72 e9       	ldi	r23, 0x92	; 146
     816:	ce 01       	movw	r24, r28
     818:	8c d1       	rcall	.+792    	; 0xb32 <strcmp>
     81a:	89 2b       	or	r24, r25
     81c:	09 f5       	brne	.+66     	; 0x860 <USART0_process_incoming_message+0xf6>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     81e:	1f 93       	push	r17
     820:	0f 93       	push	r16
     822:	8e ea       	ldi	r24, 0xAE	; 174
     824:	92 e9       	ldi	r25, 0x92	; 146
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	83 e4       	ldi	r24, 0x43	; 67
     82c:	9e e3       	ldi	r25, 0x3E	; 62
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	c9 d1       	rcall	.+914    	; 0xbc6 <sprintf>
		USART0_sendString_w_eol(buffer);
     834:	83 e4       	ldi	r24, 0x43	; 67
     836:	9e e3       	ldi	r25, 0x3E	; 62
     838:	33 df       	rcall	.-410    	; 0x6a0 <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     83a:	c8 01       	movw	r24, r16
     83c:	73 df       	rcall	.-282    	; 0x724 <convert_str_to_long>
     83e:	60 93 0e 3e 	sts	0x3E0E, r22	; 0x803e0e <seconds_to_next_bu>
     842:	70 93 0f 3e 	sts	0x3E0F, r23	; 0x803e0f <seconds_to_next_bu+0x1>
     846:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <seconds_to_next_bu+0x2>
     84a:	90 93 11 3e 	sts	0x3E11, r25	; 0x803e11 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <flag_received_seconds_to_next_bu>
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     860:	69 eb       	ldi	r22, 0xB9	; 185
     862:	72 e9       	ldi	r23, 0x92	; 146
     864:	ce 01       	movw	r24, r28
     866:	65 d1       	rcall	.+714    	; 0xb32 <strcmp>
     868:	89 2b       	or	r24, r25
     86a:	51 f4       	brne	.+20     	; 0x880 <USART0_process_incoming_message+0x116>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     86c:	b8 01       	movw	r22, r16
     86e:	83 e7       	ldi	r24, 0x73	; 115
     870:	9e e3       	ldi	r25, 0x3E	; 62
     872:	68 d1       	rcall	.+720    	; 0xb44 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	80 93 83 3e 	sts	0x3E83, r24	; 0x803e83 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     880:	6c eb       	ldi	r22, 0xBC	; 188
     882:	72 e9       	ldi	r23, 0x92	; 146
     884:	ce 01       	movw	r24, r28
     886:	55 d1       	rcall	.+682    	; 0xb32 <strcmp>
     888:	89 2b       	or	r24, r25
     88a:	19 f4       	brne	.+6      	; 0x892 <USART0_process_incoming_message+0x128>
		flag_goto_sleep = true;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <flag_goto_sleep>
	
	if (strcmp(message_code, "CC") == 0) {
		/* received request for current measurement result */
		;
	}
	*message_code = '\0';
     892:	18 82       	st	Y, r1
	*payload = '\0';
     894:	f8 01       	movw	r30, r16
     896:	10 82       	st	Z, r1
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret

000008a2 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     8c4:	60 e2       	ldi	r22, 0x20	; 32
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	83 e2       	ldi	r24, 0x23	; 35
     8ca:	9e e3       	ldi	r25, 0x3E	; 62
     8cc:	f5 de       	rcall	.-534    	; 0x6b8 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_usart_string_receive_complete>
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <strtol>:
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e0 e8       	ldi	r30, 0x80	; 128
     8fc:	f4 e0       	ldi	r31, 0x04	; 4
     8fe:	43 c4       	rjmp	.+2182   	; 0x1186 <__prologue_saves__+0x2>
     900:	5c 01       	movw	r10, r24
     902:	6b 01       	movw	r12, r22
     904:	7a 01       	movw	r14, r20
     906:	61 15       	cp	r22, r1
     908:	71 05       	cpc	r23, r1
     90a:	19 f0       	breq	.+6      	; 0x912 <strtol+0x1c>
     90c:	fb 01       	movw	r30, r22
     90e:	80 83       	st	Z, r24
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	29 f0       	breq	.+10     	; 0x922 <strtol+0x2c>
     918:	c7 01       	movw	r24, r14
     91a:	02 97       	sbiw	r24, 0x02	; 2
     91c:	83 97       	sbiw	r24, 0x23	; 35
     91e:	08 f0       	brcs	.+2      	; 0x922 <strtol+0x2c>
     920:	e2 c0       	rjmp	.+452    	; 0xae6 <strtol+0x1f0>
     922:	e5 01       	movw	r28, r10
     924:	21 96       	adiw	r28, 0x01	; 1
     926:	f5 01       	movw	r30, r10
     928:	10 81       	ld	r17, Z
     92a:	81 2f       	mov	r24, r17
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	f4 d0       	rcall	.+488    	; 0xb18 <isspace>
     930:	89 2b       	or	r24, r25
     932:	11 f0       	breq	.+4      	; 0x938 <strtol+0x42>
     934:	5e 01       	movw	r10, r28
     936:	f5 cf       	rjmp	.-22     	; 0x922 <strtol+0x2c>
     938:	1d 32       	cpi	r17, 0x2D	; 45
     93a:	29 f4       	brne	.+10     	; 0x946 <strtol+0x50>
     93c:	21 96       	adiw	r28, 0x01	; 1
     93e:	f5 01       	movw	r30, r10
     940:	11 81       	ldd	r17, Z+1	; 0x01
     942:	01 e0       	ldi	r16, 0x01	; 1
     944:	07 c0       	rjmp	.+14     	; 0x954 <strtol+0x5e>
     946:	1b 32       	cpi	r17, 0x2B	; 43
     948:	21 f4       	brne	.+8      	; 0x952 <strtol+0x5c>
     94a:	e5 01       	movw	r28, r10
     94c:	22 96       	adiw	r28, 0x02	; 2
     94e:	f5 01       	movw	r30, r10
     950:	11 81       	ldd	r17, Z+1	; 0x01
     952:	00 e0       	ldi	r16, 0x00	; 0
     954:	e1 14       	cp	r14, r1
     956:	f1 04       	cpc	r15, r1
     958:	09 f1       	breq	.+66     	; 0x99c <strtol+0xa6>
     95a:	f0 e1       	ldi	r31, 0x10	; 16
     95c:	ef 16       	cp	r14, r31
     95e:	f1 04       	cpc	r15, r1
     960:	29 f4       	brne	.+10     	; 0x96c <strtol+0x76>
     962:	3e c0       	rjmp	.+124    	; 0x9e0 <strtol+0xea>
     964:	10 e3       	ldi	r17, 0x30	; 48
     966:	e1 14       	cp	r14, r1
     968:	f1 04       	cpc	r15, r1
     96a:	21 f1       	breq	.+72     	; 0x9b4 <strtol+0xbe>
     96c:	28 e0       	ldi	r18, 0x08	; 8
     96e:	e2 16       	cp	r14, r18
     970:	f1 04       	cpc	r15, r1
     972:	01 f1       	breq	.+64     	; 0x9b4 <strtol+0xbe>
     974:	54 f4       	brge	.+20     	; 0x98a <strtol+0x94>
     976:	e2 e0       	ldi	r30, 0x02	; 2
     978:	ee 16       	cp	r14, r30
     97a:	f1 04       	cpc	r15, r1
     97c:	21 f5       	brne	.+72     	; 0x9c6 <strtol+0xd0>
     97e:	81 2c       	mov	r8, r1
     980:	91 2c       	mov	r9, r1
     982:	a1 2c       	mov	r10, r1
     984:	b0 e4       	ldi	r27, 0x40	; 64
     986:	bb 2e       	mov	r11, r27
     988:	3d c0       	rjmp	.+122    	; 0xa04 <strtol+0x10e>
     98a:	fa e0       	ldi	r31, 0x0A	; 10
     98c:	ef 16       	cp	r14, r31
     98e:	f1 04       	cpc	r15, r1
     990:	39 f0       	breq	.+14     	; 0x9a0 <strtol+0xaa>
     992:	20 e1       	ldi	r18, 0x10	; 16
     994:	e2 16       	cp	r14, r18
     996:	f1 04       	cpc	r15, r1
     998:	b1 f4       	brne	.+44     	; 0x9c6 <strtol+0xd0>
     99a:	2f c0       	rjmp	.+94     	; 0x9fa <strtol+0x104>
     99c:	10 33       	cpi	r17, 0x30	; 48
     99e:	11 f1       	breq	.+68     	; 0x9e4 <strtol+0xee>
     9a0:	fa e0       	ldi	r31, 0x0A	; 10
     9a2:	ef 2e       	mov	r14, r31
     9a4:	f1 2c       	mov	r15, r1
     9a6:	ac ec       	ldi	r26, 0xCC	; 204
     9a8:	8a 2e       	mov	r8, r26
     9aa:	98 2c       	mov	r9, r8
     9ac:	a8 2c       	mov	r10, r8
     9ae:	ac e0       	ldi	r26, 0x0C	; 12
     9b0:	ba 2e       	mov	r11, r26
     9b2:	28 c0       	rjmp	.+80     	; 0xa04 <strtol+0x10e>
     9b4:	78 e0       	ldi	r23, 0x08	; 8
     9b6:	e7 2e       	mov	r14, r23
     9b8:	f1 2c       	mov	r15, r1
     9ba:	81 2c       	mov	r8, r1
     9bc:	91 2c       	mov	r9, r1
     9be:	a1 2c       	mov	r10, r1
     9c0:	e0 e1       	ldi	r30, 0x10	; 16
     9c2:	be 2e       	mov	r11, r30
     9c4:	1f c0       	rjmp	.+62     	; 0xa04 <strtol+0x10e>
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e8       	ldi	r25, 0x80	; 128
     9ce:	97 01       	movw	r18, r14
     9d0:	0f 2c       	mov	r0, r15
     9d2:	00 0c       	add	r0, r0
     9d4:	44 0b       	sbc	r20, r20
     9d6:	55 0b       	sbc	r21, r21
     9d8:	a9 d3       	rcall	.+1874   	; 0x112c <__udivmodsi4>
     9da:	49 01       	movw	r8, r18
     9dc:	5a 01       	movw	r10, r20
     9de:	12 c0       	rjmp	.+36     	; 0xa04 <strtol+0x10e>
     9e0:	10 33       	cpi	r17, 0x30	; 48
     9e2:	59 f4       	brne	.+22     	; 0x9fa <strtol+0x104>
     9e4:	88 81       	ld	r24, Y
     9e6:	8f 7d       	andi	r24, 0xDF	; 223
     9e8:	88 35       	cpi	r24, 0x58	; 88
     9ea:	09 f0       	breq	.+2      	; 0x9ee <strtol+0xf8>
     9ec:	bb cf       	rjmp	.-138    	; 0x964 <strtol+0x6e>
     9ee:	19 81       	ldd	r17, Y+1	; 0x01
     9f0:	22 96       	adiw	r28, 0x02	; 2
     9f2:	02 60       	ori	r16, 0x02	; 2
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	e8 2e       	mov	r14, r24
     9f8:	f1 2c       	mov	r15, r1
     9fa:	81 2c       	mov	r8, r1
     9fc:	91 2c       	mov	r9, r1
     9fe:	a1 2c       	mov	r10, r1
     a00:	68 e0       	ldi	r22, 0x08	; 8
     a02:	b6 2e       	mov	r11, r22
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	cb 01       	movw	r24, r22
     a0c:	27 01       	movw	r4, r14
     a0e:	0f 2c       	mov	r0, r15
     a10:	00 0c       	add	r0, r0
     a12:	66 08       	sbc	r6, r6
     a14:	77 08       	sbc	r7, r7
     a16:	fe 01       	movw	r30, r28
     a18:	50 ed       	ldi	r21, 0xD0	; 208
     a1a:	35 2e       	mov	r3, r21
     a1c:	31 0e       	add	r3, r17
     a1e:	29 e0       	ldi	r18, 0x09	; 9
     a20:	23 15       	cp	r18, r3
     a22:	70 f4       	brcc	.+28     	; 0xa40 <strtol+0x14a>
     a24:	2f eb       	ldi	r18, 0xBF	; 191
     a26:	21 0f       	add	r18, r17
     a28:	2a 31       	cpi	r18, 0x1A	; 26
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <strtol+0x13c>
     a2c:	39 ec       	ldi	r19, 0xC9	; 201
     a2e:	33 2e       	mov	r3, r19
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <strtol+0x148>
     a32:	2f e9       	ldi	r18, 0x9F	; 159
     a34:	21 0f       	add	r18, r17
     a36:	2a 31       	cpi	r18, 0x1A	; 26
     a38:	10 f5       	brcc	.+68     	; 0xa7e <strtol+0x188>
     a3a:	29 ea       	ldi	r18, 0xA9	; 169
     a3c:	32 2e       	mov	r3, r18
     a3e:	31 0e       	add	r3, r17
     a40:	23 2d       	mov	r18, r3
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	2e 15       	cp	r18, r14
     a46:	3f 05       	cpc	r19, r15
     a48:	d4 f4       	brge	.+52     	; 0xa7e <strtol+0x188>
     a4a:	47 fd       	sbrc	r20, 7
     a4c:	15 c0       	rjmp	.+42     	; 0xa78 <strtol+0x182>
     a4e:	86 16       	cp	r8, r22
     a50:	97 06       	cpc	r9, r23
     a52:	a8 06       	cpc	r10, r24
     a54:	b9 06       	cpc	r11, r25
     a56:	68 f0       	brcs	.+26     	; 0xa72 <strtol+0x17c>
     a58:	a3 01       	movw	r20, r6
     a5a:	92 01       	movw	r18, r4
     a5c:	58 d3       	rcall	.+1712   	; 0x110e <__mulsi3>
     a5e:	63 0d       	add	r22, r3
     a60:	71 1d       	adc	r23, r1
     a62:	81 1d       	adc	r24, r1
     a64:	91 1d       	adc	r25, r1
     a66:	61 30       	cpi	r22, 0x01	; 1
     a68:	71 05       	cpc	r23, r1
     a6a:	81 05       	cpc	r24, r1
     a6c:	20 e8       	ldi	r18, 0x80	; 128
     a6e:	92 07       	cpc	r25, r18
     a70:	10 f0       	brcs	.+4      	; 0xa76 <strtol+0x180>
     a72:	4f ef       	ldi	r20, 0xFF	; 255
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <strtol+0x182>
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	21 96       	adiw	r28, 0x01	; 1
     a7a:	10 81       	ld	r17, Z
     a7c:	cc cf       	rjmp	.-104    	; 0xa16 <strtol+0x120>
     a7e:	20 2f       	mov	r18, r16
     a80:	21 70       	andi	r18, 0x01	; 1
     a82:	c1 14       	cp	r12, r1
     a84:	d1 04       	cpc	r13, r1
     a86:	71 f0       	breq	.+28     	; 0xaa4 <strtol+0x1ae>
     a88:	44 23       	and	r20, r20
     a8a:	29 f0       	breq	.+10     	; 0xa96 <strtol+0x1a0>
     a8c:	21 97       	sbiw	r28, 0x01	; 1
     a8e:	f6 01       	movw	r30, r12
     a90:	c0 83       	st	Z, r28
     a92:	d1 83       	std	Z+1, r29	; 0x01
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <strtol+0x1ae>
     a96:	01 ff       	sbrs	r16, 1
     a98:	19 c0       	rjmp	.+50     	; 0xacc <strtol+0x1d6>
     a9a:	22 97       	sbiw	r28, 0x02	; 2
     a9c:	f6 01       	movw	r30, r12
     a9e:	c0 83       	st	Z, r28
     aa0:	d1 83       	std	Z+1, r29	; 0x01
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <strtol+0x1d6>
     aa4:	47 ff       	sbrs	r20, 7
     aa6:	12 c0       	rjmp	.+36     	; 0xacc <strtol+0x1d6>
     aa8:	22 23       	and	r18, r18
     aaa:	29 f0       	breq	.+10     	; 0xab6 <strtol+0x1c0>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e8       	ldi	r25, 0x80	; 128
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <strtol+0x1c8>
     ab6:	6f ef       	ldi	r22, 0xFF	; 255
     ab8:	7f ef       	ldi	r23, 0xFF	; 255
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	9f e7       	ldi	r25, 0x7F	; 127
     abe:	22 e2       	ldi	r18, 0x22	; 34
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	20 93 a7 3e 	sts	0x3EA7, r18	; 0x803ea7 <errno>
     ac6:	30 93 a8 3e 	sts	0x3EA8, r19	; 0x803ea8 <errno+0x1>
     aca:	09 c0       	rjmp	.+18     	; 0xade <strtol+0x1e8>
     acc:	22 23       	and	r18, r18
     ace:	81 f0       	breq	.+32     	; 0xaf0 <strtol+0x1fa>
     ad0:	90 95       	com	r25
     ad2:	80 95       	com	r24
     ad4:	70 95       	com	r23
     ad6:	61 95       	neg	r22
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	8f 4f       	sbci	r24, 0xFF	; 255
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	46 2f       	mov	r20, r22
     ae0:	37 2f       	mov	r19, r23
     ae2:	28 2f       	mov	r18, r24
     ae4:	12 c0       	rjmp	.+36     	; 0xb0a <strtol+0x214>
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0d c0       	rjmp	.+26     	; 0xb0a <strtol+0x214>
     af0:	97 ff       	sbrs	r25, 7
     af2:	f5 cf       	rjmp	.-22     	; 0xade <strtol+0x1e8>
     af4:	82 e2       	ldi	r24, 0x22	; 34
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	80 93 a7 3e 	sts	0x3EA7, r24	; 0x803ea7 <errno>
     afc:	90 93 a8 3e 	sts	0x3EA8, r25	; 0x803ea8 <errno+0x1>
     b00:	6f ef       	ldi	r22, 0xFF	; 255
     b02:	7f ef       	ldi	r23, 0xFF	; 255
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f e7       	ldi	r25, 0x7F	; 127
     b08:	ea cf       	rjmp	.-44     	; 0xade <strtol+0x1e8>
     b0a:	64 2f       	mov	r22, r20
     b0c:	73 2f       	mov	r23, r19
     b0e:	82 2f       	mov	r24, r18
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	e1 e1       	ldi	r30, 0x11	; 17
     b16:	50 c3       	rjmp	.+1696   	; 0x11b8 <__epilogue_restores__+0x2>

00000b18 <isspace>:
     b18:	91 11       	cpse	r25, r1
     b1a:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__ctype_isfalse>
     b1e:	80 32       	cpi	r24, 0x20	; 32
     b20:	19 f0       	breq	.+6      	; 0xb28 <isspace+0x10>
     b22:	89 50       	subi	r24, 0x09	; 9
     b24:	85 50       	subi	r24, 0x05	; 5
     b26:	c8 f7       	brcc	.-14     	; 0xb1a <isspace+0x2>
     b28:	08 95       	ret

00000b2a <strtok>:
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	5e e3       	ldi	r21, 0x3E	; 62
     b2e:	11 d0       	rcall	.+34     	; 0xb52 <strtok_r>
     b30:	08 95       	ret

00000b32 <strcmp>:
     b32:	fb 01       	movw	r30, r22
     b34:	dc 01       	movw	r26, r24
     b36:	8d 91       	ld	r24, X+
     b38:	01 90       	ld	r0, Z+
     b3a:	80 19       	sub	r24, r0
     b3c:	01 10       	cpse	r0, r1
     b3e:	d9 f3       	breq	.-10     	; 0xb36 <strcmp+0x4>
     b40:	99 0b       	sbc	r25, r25
     b42:	08 95       	ret

00000b44 <strcpy>:
     b44:	fb 01       	movw	r30, r22
     b46:	dc 01       	movw	r26, r24
     b48:	01 90       	ld	r0, Z+
     b4a:	0d 92       	st	X+, r0
     b4c:	00 20       	and	r0, r0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <strcpy+0x4>
     b50:	08 95       	ret

00000b52 <strtok_r>:
     b52:	fa 01       	movw	r30, r20
     b54:	a1 91       	ld	r26, Z+
     b56:	b0 81       	ld	r27, Z
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	19 f4       	brne	.+6      	; 0xb62 <strtok_r+0x10>
     b5c:	10 97       	sbiw	r26, 0x00	; 0
     b5e:	e1 f0       	breq	.+56     	; 0xb98 <strtok_r+0x46>
     b60:	cd 01       	movw	r24, r26
     b62:	dc 01       	movw	r26, r24
     b64:	cd 01       	movw	r24, r26
     b66:	0d 90       	ld	r0, X+
     b68:	00 20       	and	r0, r0
     b6a:	11 f4       	brne	.+4      	; 0xb70 <strtok_r+0x1e>
     b6c:	c0 01       	movw	r24, r0
     b6e:	13 c0       	rjmp	.+38     	; 0xb96 <strtok_r+0x44>
     b70:	fb 01       	movw	r30, r22
     b72:	21 91       	ld	r18, Z+
     b74:	22 23       	and	r18, r18
     b76:	19 f0       	breq	.+6      	; 0xb7e <strtok_r+0x2c>
     b78:	20 15       	cp	r18, r0
     b7a:	d9 f7       	brne	.-10     	; 0xb72 <strtok_r+0x20>
     b7c:	f3 cf       	rjmp	.-26     	; 0xb64 <strtok_r+0x12>
     b7e:	fb 01       	movw	r30, r22
     b80:	21 91       	ld	r18, Z+
     b82:	20 15       	cp	r18, r0
     b84:	19 f4       	brne	.+6      	; 0xb8c <strtok_r+0x3a>
     b86:	1e 92       	st	-X, r1
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <strtok_r+0x46>
     b8c:	22 23       	and	r18, r18
     b8e:	c1 f7       	brne	.-16     	; 0xb80 <strtok_r+0x2e>
     b90:	0d 90       	ld	r0, X+
     b92:	00 20       	and	r0, r0
     b94:	a1 f7       	brne	.-24     	; 0xb7e <strtok_r+0x2c>
     b96:	d0 01       	movw	r26, r0
     b98:	fa 01       	movw	r30, r20
     b9a:	a1 93       	st	Z+, r26
     b9c:	b0 83       	st	Z, r27
     b9e:	08 95       	ret

00000ba0 <printf>:
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e5 ed       	ldi	r30, 0xD5	; 213
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	fd c2       	rjmp	.+1530   	; 0x11a4 <__prologue_saves__+0x20>
     baa:	ae 01       	movw	r20, r28
     bac:	4b 5f       	subi	r20, 0xFB	; 251
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	fa 01       	movw	r30, r20
     bb2:	61 91       	ld	r22, Z+
     bb4:	71 91       	ld	r23, Z+
     bb6:	af 01       	movw	r20, r30
     bb8:	80 91 ab 3e 	lds	r24, 0x3EAB	; 0x803eab <__iob+0x2>
     bbc:	90 91 ac 3e 	lds	r25, 0x3EAC	; 0x803eac <__iob+0x3>
     bc0:	21 d0       	rcall	.+66     	; 0xc04 <vfprintf>
     bc2:	e2 e0       	ldi	r30, 0x02	; 2
     bc4:	08 c3       	rjmp	.+1552   	; 0x11d6 <__epilogue_restores__+0x20>

00000bc6 <sprintf>:
     bc6:	ae e0       	ldi	r26, 0x0E	; 14
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 ee       	ldi	r30, 0xE8	; 232
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	e8 c2       	rjmp	.+1488   	; 0x11a0 <__prologue_saves__+0x1c>
     bd0:	0d 89       	ldd	r16, Y+21	; 0x15
     bd2:	1e 89       	ldd	r17, Y+22	; 0x16
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	8c 83       	std	Y+4, r24	; 0x04
     bd8:	09 83       	std	Y+1, r16	; 0x01
     bda:	1a 83       	std	Y+2, r17	; 0x02
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	9f e7       	ldi	r25, 0x7F	; 127
     be0:	8d 83       	std	Y+5, r24	; 0x05
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	ae 01       	movw	r20, r28
     be6:	47 5e       	subi	r20, 0xE7	; 231
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	6f 89       	ldd	r22, Y+23	; 0x17
     bec:	78 8d       	ldd	r23, Y+24	; 0x18
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	08 d0       	rcall	.+16     	; 0xc04 <vfprintf>
     bf4:	ef 81       	ldd	r30, Y+7	; 0x07
     bf6:	f8 85       	ldd	r31, Y+8	; 0x08
     bf8:	e0 0f       	add	r30, r16
     bfa:	f1 1f       	adc	r31, r17
     bfc:	10 82       	st	Z, r1
     bfe:	2e 96       	adiw	r28, 0x0e	; 14
     c00:	e4 e0       	ldi	r30, 0x04	; 4
     c02:	e7 c2       	rjmp	.+1486   	; 0x11d2 <__epilogue_restores__+0x1c>

00000c04 <vfprintf>:
     c04:	ab e0       	ldi	r26, 0x0B	; 11
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e0       	ldi	r30, 0x07	; 7
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	bb c2       	rjmp	.+1398   	; 0x1184 <__prologue_saves__>
     c0e:	6c 01       	movw	r12, r24
     c10:	7b 01       	movw	r14, r22
     c12:	8a 01       	movw	r16, r20
     c14:	fc 01       	movw	r30, r24
     c16:	16 82       	std	Z+6, r1	; 0x06
     c18:	17 82       	std	Z+7, r1	; 0x07
     c1a:	83 81       	ldd	r24, Z+3	; 0x03
     c1c:	81 ff       	sbrs	r24, 1
     c1e:	bf c1       	rjmp	.+894    	; 0xf9e <vfprintf+0x39a>
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	3c 01       	movw	r6, r24
     c26:	f6 01       	movw	r30, r12
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	f7 01       	movw	r30, r14
     c2c:	93 fd       	sbrc	r25, 3
     c2e:	85 91       	lpm	r24, Z+
     c30:	93 ff       	sbrs	r25, 3
     c32:	81 91       	ld	r24, Z+
     c34:	7f 01       	movw	r14, r30
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <vfprintf+0x38>
     c3a:	ad c1       	rjmp	.+858    	; 0xf96 <vfprintf+0x392>
     c3c:	85 32       	cpi	r24, 0x25	; 37
     c3e:	39 f4       	brne	.+14     	; 0xc4e <vfprintf+0x4a>
     c40:	93 fd       	sbrc	r25, 3
     c42:	85 91       	lpm	r24, Z+
     c44:	93 ff       	sbrs	r25, 3
     c46:	81 91       	ld	r24, Z+
     c48:	7f 01       	movw	r14, r30
     c4a:	85 32       	cpi	r24, 0x25	; 37
     c4c:	21 f4       	brne	.+8      	; 0xc56 <vfprintf+0x52>
     c4e:	b6 01       	movw	r22, r12
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	c3 d1       	rcall	.+902    	; 0xfda <fputc>
     c54:	e8 cf       	rjmp	.-48     	; 0xc26 <vfprintf+0x22>
     c56:	91 2c       	mov	r9, r1
     c58:	21 2c       	mov	r2, r1
     c5a:	31 2c       	mov	r3, r1
     c5c:	ff e1       	ldi	r31, 0x1F	; 31
     c5e:	f3 15       	cp	r31, r3
     c60:	d8 f0       	brcs	.+54     	; 0xc98 <vfprintf+0x94>
     c62:	8b 32       	cpi	r24, 0x2B	; 43
     c64:	79 f0       	breq	.+30     	; 0xc84 <vfprintf+0x80>
     c66:	38 f4       	brcc	.+14     	; 0xc76 <vfprintf+0x72>
     c68:	80 32       	cpi	r24, 0x20	; 32
     c6a:	79 f0       	breq	.+30     	; 0xc8a <vfprintf+0x86>
     c6c:	83 32       	cpi	r24, 0x23	; 35
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <vfprintf+0x94>
     c70:	23 2d       	mov	r18, r3
     c72:	20 61       	ori	r18, 0x10	; 16
     c74:	1d c0       	rjmp	.+58     	; 0xcb0 <vfprintf+0xac>
     c76:	8d 32       	cpi	r24, 0x2D	; 45
     c78:	61 f0       	breq	.+24     	; 0xc92 <vfprintf+0x8e>
     c7a:	80 33       	cpi	r24, 0x30	; 48
     c7c:	69 f4       	brne	.+26     	; 0xc98 <vfprintf+0x94>
     c7e:	23 2d       	mov	r18, r3
     c80:	21 60       	ori	r18, 0x01	; 1
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <vfprintf+0xac>
     c84:	83 2d       	mov	r24, r3
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	38 2e       	mov	r3, r24
     c8a:	e3 2d       	mov	r30, r3
     c8c:	e4 60       	ori	r30, 0x04	; 4
     c8e:	3e 2e       	mov	r3, r30
     c90:	2a c0       	rjmp	.+84     	; 0xce6 <vfprintf+0xe2>
     c92:	f3 2d       	mov	r31, r3
     c94:	f8 60       	ori	r31, 0x08	; 8
     c96:	1d c0       	rjmp	.+58     	; 0xcd2 <vfprintf+0xce>
     c98:	37 fc       	sbrc	r3, 7
     c9a:	2d c0       	rjmp	.+90     	; 0xcf6 <vfprintf+0xf2>
     c9c:	20 ed       	ldi	r18, 0xD0	; 208
     c9e:	28 0f       	add	r18, r24
     ca0:	2a 30       	cpi	r18, 0x0A	; 10
     ca2:	40 f0       	brcs	.+16     	; 0xcb4 <vfprintf+0xb0>
     ca4:	8e 32       	cpi	r24, 0x2E	; 46
     ca6:	b9 f4       	brne	.+46     	; 0xcd6 <vfprintf+0xd2>
     ca8:	36 fc       	sbrc	r3, 6
     caa:	75 c1       	rjmp	.+746    	; 0xf96 <vfprintf+0x392>
     cac:	23 2d       	mov	r18, r3
     cae:	20 64       	ori	r18, 0x40	; 64
     cb0:	32 2e       	mov	r3, r18
     cb2:	19 c0       	rjmp	.+50     	; 0xce6 <vfprintf+0xe2>
     cb4:	36 fe       	sbrs	r3, 6
     cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <vfprintf+0xc0>
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	98 9e       	mul	r9, r24
     cbc:	20 0d       	add	r18, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	92 2e       	mov	r9, r18
     cc2:	11 c0       	rjmp	.+34     	; 0xce6 <vfprintf+0xe2>
     cc4:	ea e0       	ldi	r30, 0x0A	; 10
     cc6:	2e 9e       	mul	r2, r30
     cc8:	20 0d       	add	r18, r0
     cca:	11 24       	eor	r1, r1
     ccc:	22 2e       	mov	r2, r18
     cce:	f3 2d       	mov	r31, r3
     cd0:	f0 62       	ori	r31, 0x20	; 32
     cd2:	3f 2e       	mov	r3, r31
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <vfprintf+0xe2>
     cd6:	8c 36       	cpi	r24, 0x6C	; 108
     cd8:	21 f4       	brne	.+8      	; 0xce2 <vfprintf+0xde>
     cda:	83 2d       	mov	r24, r3
     cdc:	80 68       	ori	r24, 0x80	; 128
     cde:	38 2e       	mov	r3, r24
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0xe2>
     ce2:	88 36       	cpi	r24, 0x68	; 104
     ce4:	41 f4       	brne	.+16     	; 0xcf6 <vfprintf+0xf2>
     ce6:	f7 01       	movw	r30, r14
     ce8:	93 fd       	sbrc	r25, 3
     cea:	85 91       	lpm	r24, Z+
     cec:	93 ff       	sbrs	r25, 3
     cee:	81 91       	ld	r24, Z+
     cf0:	7f 01       	movw	r14, r30
     cf2:	81 11       	cpse	r24, r1
     cf4:	b3 cf       	rjmp	.-154    	; 0xc5c <vfprintf+0x58>
     cf6:	98 2f       	mov	r25, r24
     cf8:	9f 7d       	andi	r25, 0xDF	; 223
     cfa:	95 54       	subi	r25, 0x45	; 69
     cfc:	93 30       	cpi	r25, 0x03	; 3
     cfe:	28 f4       	brcc	.+10     	; 0xd0a <vfprintf+0x106>
     d00:	0c 5f       	subi	r16, 0xFC	; 252
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	9f e3       	ldi	r25, 0x3F	; 63
     d06:	99 83       	std	Y+1, r25	; 0x01
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <vfprintf+0x120>
     d0a:	83 36       	cpi	r24, 0x63	; 99
     d0c:	31 f0       	breq	.+12     	; 0xd1a <vfprintf+0x116>
     d0e:	83 37       	cpi	r24, 0x73	; 115
     d10:	71 f0       	breq	.+28     	; 0xd2e <vfprintf+0x12a>
     d12:	83 35       	cpi	r24, 0x53	; 83
     d14:	09 f0       	breq	.+2      	; 0xd18 <vfprintf+0x114>
     d16:	55 c0       	rjmp	.+170    	; 0xdc2 <vfprintf+0x1be>
     d18:	20 c0       	rjmp	.+64     	; 0xd5a <vfprintf+0x156>
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 81       	ld	r24, Z
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	0e 5f       	subi	r16, 0xFE	; 254
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	88 24       	eor	r8, r8
     d26:	83 94       	inc	r8
     d28:	91 2c       	mov	r9, r1
     d2a:	53 01       	movw	r10, r6
     d2c:	12 c0       	rjmp	.+36     	; 0xd52 <vfprintf+0x14e>
     d2e:	28 01       	movw	r4, r16
     d30:	f2 e0       	ldi	r31, 0x02	; 2
     d32:	4f 0e       	add	r4, r31
     d34:	51 1c       	adc	r5, r1
     d36:	f8 01       	movw	r30, r16
     d38:	a0 80       	ld	r10, Z
     d3a:	b1 80       	ldd	r11, Z+1	; 0x01
     d3c:	36 fe       	sbrs	r3, 6
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x142>
     d40:	69 2d       	mov	r22, r9
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x146>
     d46:	6f ef       	ldi	r22, 0xFF	; 255
     d48:	7f ef       	ldi	r23, 0xFF	; 255
     d4a:	c5 01       	movw	r24, r10
     d4c:	3b d1       	rcall	.+630    	; 0xfc4 <strnlen>
     d4e:	4c 01       	movw	r8, r24
     d50:	82 01       	movw	r16, r4
     d52:	f3 2d       	mov	r31, r3
     d54:	ff 77       	andi	r31, 0x7F	; 127
     d56:	3f 2e       	mov	r3, r31
     d58:	15 c0       	rjmp	.+42     	; 0xd84 <vfprintf+0x180>
     d5a:	28 01       	movw	r4, r16
     d5c:	22 e0       	ldi	r18, 0x02	; 2
     d5e:	42 0e       	add	r4, r18
     d60:	51 1c       	adc	r5, r1
     d62:	f8 01       	movw	r30, r16
     d64:	a0 80       	ld	r10, Z
     d66:	b1 80       	ldd	r11, Z+1	; 0x01
     d68:	36 fe       	sbrs	r3, 6
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <vfprintf+0x16e>
     d6c:	69 2d       	mov	r22, r9
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x172>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	c5 01       	movw	r24, r10
     d78:	1a d1       	rcall	.+564    	; 0xfae <strnlen_P>
     d7a:	4c 01       	movw	r8, r24
     d7c:	f3 2d       	mov	r31, r3
     d7e:	f0 68       	ori	r31, 0x80	; 128
     d80:	3f 2e       	mov	r3, r31
     d82:	82 01       	movw	r16, r4
     d84:	33 fc       	sbrc	r3, 3
     d86:	19 c0       	rjmp	.+50     	; 0xdba <vfprintf+0x1b6>
     d88:	82 2d       	mov	r24, r2
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 16       	cp	r8, r24
     d8e:	99 06       	cpc	r9, r25
     d90:	a0 f4       	brcc	.+40     	; 0xdba <vfprintf+0x1b6>
     d92:	b6 01       	movw	r22, r12
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	20 d1       	rcall	.+576    	; 0xfda <fputc>
     d9a:	2a 94       	dec	r2
     d9c:	f5 cf       	rjmp	.-22     	; 0xd88 <vfprintf+0x184>
     d9e:	f5 01       	movw	r30, r10
     da0:	37 fc       	sbrc	r3, 7
     da2:	85 91       	lpm	r24, Z+
     da4:	37 fe       	sbrs	r3, 7
     da6:	81 91       	ld	r24, Z+
     da8:	5f 01       	movw	r10, r30
     daa:	b6 01       	movw	r22, r12
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	15 d1       	rcall	.+554    	; 0xfda <fputc>
     db0:	21 10       	cpse	r2, r1
     db2:	2a 94       	dec	r2
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	82 1a       	sub	r8, r18
     db8:	91 08       	sbc	r9, r1
     dba:	81 14       	cp	r8, r1
     dbc:	91 04       	cpc	r9, r1
     dbe:	79 f7       	brne	.-34     	; 0xd9e <vfprintf+0x19a>
     dc0:	e1 c0       	rjmp	.+450    	; 0xf84 <vfprintf+0x380>
     dc2:	84 36       	cpi	r24, 0x64	; 100
     dc4:	11 f0       	breq	.+4      	; 0xdca <vfprintf+0x1c6>
     dc6:	89 36       	cpi	r24, 0x69	; 105
     dc8:	39 f5       	brne	.+78     	; 0xe18 <vfprintf+0x214>
     dca:	f8 01       	movw	r30, r16
     dcc:	37 fe       	sbrs	r3, 7
     dce:	07 c0       	rjmp	.+14     	; 0xdde <vfprintf+0x1da>
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	0c 5f       	subi	r16, 0xFC	; 252
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <vfprintf+0x1ea>
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	07 2e       	mov	r0, r23
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	f3 2d       	mov	r31, r3
     df0:	ff 76       	andi	r31, 0x6F	; 111
     df2:	3f 2e       	mov	r3, r31
     df4:	97 ff       	sbrs	r25, 7
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <vfprintf+0x206>
     df8:	90 95       	com	r25
     dfa:	80 95       	com	r24
     dfc:	70 95       	com	r23
     dfe:	61 95       	neg	r22
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	f0 68       	ori	r31, 0x80	; 128
     e08:	3f 2e       	mov	r3, r31
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	a3 01       	movw	r20, r6
     e10:	20 d1       	rcall	.+576    	; 0x1052 <__ultoa_invert>
     e12:	88 2e       	mov	r8, r24
     e14:	86 18       	sub	r8, r6
     e16:	44 c0       	rjmp	.+136    	; 0xea0 <vfprintf+0x29c>
     e18:	85 37       	cpi	r24, 0x75	; 117
     e1a:	31 f4       	brne	.+12     	; 0xe28 <vfprintf+0x224>
     e1c:	23 2d       	mov	r18, r3
     e1e:	2f 7e       	andi	r18, 0xEF	; 239
     e20:	b2 2e       	mov	r11, r18
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	25 c0       	rjmp	.+74     	; 0xe72 <vfprintf+0x26e>
     e28:	93 2d       	mov	r25, r3
     e2a:	99 7f       	andi	r25, 0xF9	; 249
     e2c:	b9 2e       	mov	r11, r25
     e2e:	8f 36       	cpi	r24, 0x6F	; 111
     e30:	c1 f0       	breq	.+48     	; 0xe62 <vfprintf+0x25e>
     e32:	18 f4       	brcc	.+6      	; 0xe3a <vfprintf+0x236>
     e34:	88 35       	cpi	r24, 0x58	; 88
     e36:	79 f0       	breq	.+30     	; 0xe56 <vfprintf+0x252>
     e38:	ae c0       	rjmp	.+348    	; 0xf96 <vfprintf+0x392>
     e3a:	80 37       	cpi	r24, 0x70	; 112
     e3c:	19 f0       	breq	.+6      	; 0xe44 <vfprintf+0x240>
     e3e:	88 37       	cpi	r24, 0x78	; 120
     e40:	21 f0       	breq	.+8      	; 0xe4a <vfprintf+0x246>
     e42:	a9 c0       	rjmp	.+338    	; 0xf96 <vfprintf+0x392>
     e44:	e9 2f       	mov	r30, r25
     e46:	e0 61       	ori	r30, 0x10	; 16
     e48:	be 2e       	mov	r11, r30
     e4a:	b4 fe       	sbrs	r11, 4
     e4c:	0d c0       	rjmp	.+26     	; 0xe68 <vfprintf+0x264>
     e4e:	fb 2d       	mov	r31, r11
     e50:	f4 60       	ori	r31, 0x04	; 4
     e52:	bf 2e       	mov	r11, r31
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <vfprintf+0x264>
     e56:	34 fe       	sbrs	r3, 4
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <vfprintf+0x26a>
     e5a:	29 2f       	mov	r18, r25
     e5c:	26 60       	ori	r18, 0x06	; 6
     e5e:	b2 2e       	mov	r11, r18
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x26a>
     e62:	28 e0       	ldi	r18, 0x08	; 8
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <vfprintf+0x26e>
     e68:	20 e1       	ldi	r18, 0x10	; 16
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0x26e>
     e6e:	20 e1       	ldi	r18, 0x10	; 16
     e70:	32 e0       	ldi	r19, 0x02	; 2
     e72:	f8 01       	movw	r30, r16
     e74:	b7 fe       	sbrs	r11, 7
     e76:	07 c0       	rjmp	.+14     	; 0xe86 <vfprintf+0x282>
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	0c 5f       	subi	r16, 0xFC	; 252
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <vfprintf+0x28e>
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 5f       	subi	r16, 0xFE	; 254
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	a3 01       	movw	r20, r6
     e94:	de d0       	rcall	.+444    	; 0x1052 <__ultoa_invert>
     e96:	88 2e       	mov	r8, r24
     e98:	86 18       	sub	r8, r6
     e9a:	fb 2d       	mov	r31, r11
     e9c:	ff 77       	andi	r31, 0x7F	; 127
     e9e:	3f 2e       	mov	r3, r31
     ea0:	36 fe       	sbrs	r3, 6
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <vfprintf+0x2ba>
     ea4:	23 2d       	mov	r18, r3
     ea6:	2e 7f       	andi	r18, 0xFE	; 254
     ea8:	a2 2e       	mov	r10, r18
     eaa:	89 14       	cp	r8, r9
     eac:	58 f4       	brcc	.+22     	; 0xec4 <vfprintf+0x2c0>
     eae:	34 fe       	sbrs	r3, 4
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <vfprintf+0x2c4>
     eb2:	32 fc       	sbrc	r3, 2
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <vfprintf+0x2c4>
     eb6:	83 2d       	mov	r24, r3
     eb8:	8e 7e       	andi	r24, 0xEE	; 238
     eba:	a8 2e       	mov	r10, r24
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <vfprintf+0x2c4>
     ebe:	b8 2c       	mov	r11, r8
     ec0:	a3 2c       	mov	r10, r3
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <vfprintf+0x2c6>
     ec4:	b8 2c       	mov	r11, r8
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <vfprintf+0x2c6>
     ec8:	b9 2c       	mov	r11, r9
     eca:	a4 fe       	sbrs	r10, 4
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <vfprintf+0x2e8>
     ece:	fe 01       	movw	r30, r28
     ed0:	e8 0d       	add	r30, r8
     ed2:	f1 1d       	adc	r31, r1
     ed4:	80 81       	ld	r24, Z
     ed6:	80 33       	cpi	r24, 0x30	; 48
     ed8:	21 f4       	brne	.+8      	; 0xee2 <vfprintf+0x2de>
     eda:	9a 2d       	mov	r25, r10
     edc:	99 7e       	andi	r25, 0xE9	; 233
     ede:	a9 2e       	mov	r10, r25
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <vfprintf+0x2f0>
     ee2:	a2 fe       	sbrs	r10, 2
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <vfprintf+0x2ee>
     ee6:	b3 94       	inc	r11
     ee8:	b3 94       	inc	r11
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <vfprintf+0x2f0>
     eec:	8a 2d       	mov	r24, r10
     eee:	86 78       	andi	r24, 0x86	; 134
     ef0:	09 f0       	breq	.+2      	; 0xef4 <vfprintf+0x2f0>
     ef2:	b3 94       	inc	r11
     ef4:	a3 fc       	sbrc	r10, 3
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <vfprintf+0x314>
     ef8:	a0 fe       	sbrs	r10, 0
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vfprintf+0x304>
     efc:	b2 14       	cp	r11, r2
     efe:	80 f4       	brcc	.+32     	; 0xf20 <vfprintf+0x31c>
     f00:	28 0c       	add	r2, r8
     f02:	92 2c       	mov	r9, r2
     f04:	9b 18       	sub	r9, r11
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <vfprintf+0x31e>
     f08:	b2 14       	cp	r11, r2
     f0a:	58 f4       	brcc	.+22     	; 0xf22 <vfprintf+0x31e>
     f0c:	b6 01       	movw	r22, r12
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	63 d0       	rcall	.+198    	; 0xfda <fputc>
     f14:	b3 94       	inc	r11
     f16:	f8 cf       	rjmp	.-16     	; 0xf08 <vfprintf+0x304>
     f18:	b2 14       	cp	r11, r2
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <vfprintf+0x31e>
     f1c:	2b 18       	sub	r2, r11
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x320>
     f20:	98 2c       	mov	r9, r8
     f22:	21 2c       	mov	r2, r1
     f24:	a4 fe       	sbrs	r10, 4
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <vfprintf+0x342>
     f28:	b6 01       	movw	r22, r12
     f2a:	80 e3       	ldi	r24, 0x30	; 48
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	55 d0       	rcall	.+170    	; 0xfda <fputc>
     f30:	a2 fe       	sbrs	r10, 2
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <vfprintf+0x35c>
     f34:	a1 fc       	sbrc	r10, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x33a>
     f38:	88 e7       	ldi	r24, 0x78	; 120
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x33e>
     f3e:	88 e5       	ldi	r24, 0x58	; 88
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	b6 01       	movw	r22, r12
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <vfprintf+0x35a>
     f46:	8a 2d       	mov	r24, r10
     f48:	86 78       	andi	r24, 0x86	; 134
     f4a:	51 f0       	breq	.+20     	; 0xf60 <vfprintf+0x35c>
     f4c:	a1 fe       	sbrs	r10, 1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x350>
     f50:	8b e2       	ldi	r24, 0x2B	; 43
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <vfprintf+0x352>
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	a7 fc       	sbrc	r10, 7
     f58:	8d e2       	ldi	r24, 0x2D	; 45
     f5a:	b6 01       	movw	r22, r12
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	3d d0       	rcall	.+122    	; 0xfda <fputc>
     f60:	89 14       	cp	r8, r9
     f62:	30 f4       	brcc	.+12     	; 0xf70 <vfprintf+0x36c>
     f64:	b6 01       	movw	r22, r12
     f66:	80 e3       	ldi	r24, 0x30	; 48
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	37 d0       	rcall	.+110    	; 0xfda <fputc>
     f6c:	9a 94       	dec	r9
     f6e:	f8 cf       	rjmp	.-16     	; 0xf60 <vfprintf+0x35c>
     f70:	8a 94       	dec	r8
     f72:	f3 01       	movw	r30, r6
     f74:	e8 0d       	add	r30, r8
     f76:	f1 1d       	adc	r31, r1
     f78:	80 81       	ld	r24, Z
     f7a:	b6 01       	movw	r22, r12
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2d d0       	rcall	.+90     	; 0xfda <fputc>
     f80:	81 10       	cpse	r8, r1
     f82:	f6 cf       	rjmp	.-20     	; 0xf70 <vfprintf+0x36c>
     f84:	22 20       	and	r2, r2
     f86:	09 f4       	brne	.+2      	; 0xf8a <vfprintf+0x386>
     f88:	4e ce       	rjmp	.-868    	; 0xc26 <vfprintf+0x22>
     f8a:	b6 01       	movw	r22, r12
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	24 d0       	rcall	.+72     	; 0xfda <fputc>
     f92:	2a 94       	dec	r2
     f94:	f7 cf       	rjmp	.-18     	; 0xf84 <vfprintf+0x380>
     f96:	f6 01       	movw	r30, r12
     f98:	86 81       	ldd	r24, Z+6	; 0x06
     f9a:	97 81       	ldd	r25, Z+7	; 0x07
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x39e>
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	2b 96       	adiw	r28, 0x0b	; 11
     fa4:	e2 e1       	ldi	r30, 0x12	; 18
     fa6:	07 c1       	rjmp	.+526    	; 0x11b6 <__epilogue_restores__>

00000fa8 <__ctype_isfalse>:
     fa8:	99 27       	eor	r25, r25
     faa:	88 27       	eor	r24, r24

00000fac <__ctype_istrue>:
     fac:	08 95       	ret

00000fae <strnlen_P>:
     fae:	fc 01       	movw	r30, r24
     fb0:	05 90       	lpm	r0, Z+
     fb2:	61 50       	subi	r22, 0x01	; 1
     fb4:	70 40       	sbci	r23, 0x00	; 0
     fb6:	01 10       	cpse	r0, r1
     fb8:	d8 f7       	brcc	.-10     	; 0xfb0 <strnlen_P+0x2>
     fba:	80 95       	com	r24
     fbc:	90 95       	com	r25
     fbe:	8e 0f       	add	r24, r30
     fc0:	9f 1f       	adc	r25, r31
     fc2:	08 95       	ret

00000fc4 <strnlen>:
     fc4:	fc 01       	movw	r30, r24
     fc6:	61 50       	subi	r22, 0x01	; 1
     fc8:	70 40       	sbci	r23, 0x00	; 0
     fca:	01 90       	ld	r0, Z+
     fcc:	01 10       	cpse	r0, r1
     fce:	d8 f7       	brcc	.-10     	; 0xfc6 <strnlen+0x2>
     fd0:	80 95       	com	r24
     fd2:	90 95       	com	r25
     fd4:	8e 0f       	add	r24, r30
     fd6:	9f 1f       	adc	r25, r31
     fd8:	08 95       	ret

00000fda <fputc>:
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	fb 01       	movw	r30, r22
     fe4:	23 81       	ldd	r18, Z+3	; 0x03
     fe6:	21 fd       	sbrc	r18, 1
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <fputc+0x16>
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	9f ef       	ldi	r25, 0xFF	; 255
     fee:	2c c0       	rjmp	.+88     	; 0x1048 <fputc+0x6e>
     ff0:	22 ff       	sbrs	r18, 2
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <fputc+0x46>
     ff4:	46 81       	ldd	r20, Z+6	; 0x06
     ff6:	57 81       	ldd	r21, Z+7	; 0x07
     ff8:	24 81       	ldd	r18, Z+4	; 0x04
     ffa:	35 81       	ldd	r19, Z+5	; 0x05
     ffc:	42 17       	cp	r20, r18
     ffe:	53 07       	cpc	r21, r19
    1000:	44 f4       	brge	.+16     	; 0x1012 <fputc+0x38>
    1002:	a0 81       	ld	r26, Z
    1004:	b1 81       	ldd	r27, Z+1	; 0x01
    1006:	9d 01       	movw	r18, r26
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	20 83       	st	Z, r18
    100e:	31 83       	std	Z+1, r19	; 0x01
    1010:	8c 93       	st	X, r24
    1012:	26 81       	ldd	r18, Z+6	; 0x06
    1014:	37 81       	ldd	r19, Z+7	; 0x07
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	26 83       	std	Z+6, r18	; 0x06
    101c:	37 83       	std	Z+7, r19	; 0x07
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <fputc+0x6e>
    1020:	8b 01       	movw	r16, r22
    1022:	ec 01       	movw	r28, r24
    1024:	fb 01       	movw	r30, r22
    1026:	00 84       	ldd	r0, Z+8	; 0x08
    1028:	f1 85       	ldd	r31, Z+9	; 0x09
    102a:	e0 2d       	mov	r30, r0
    102c:	09 95       	icall
    102e:	89 2b       	or	r24, r25
    1030:	e1 f6       	brne	.-72     	; 0xfea <fputc+0x10>
    1032:	d8 01       	movw	r26, r16
    1034:	16 96       	adiw	r26, 0x06	; 6
    1036:	8d 91       	ld	r24, X+
    1038:	9c 91       	ld	r25, X
    103a:	17 97       	sbiw	r26, 0x07	; 7
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	16 96       	adiw	r26, 0x06	; 6
    1040:	8d 93       	st	X+, r24
    1042:	9c 93       	st	X, r25
    1044:	17 97       	sbiw	r26, 0x07	; 7
    1046:	ce 01       	movw	r24, r28
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <__ultoa_invert>:
    1052:	fa 01       	movw	r30, r20
    1054:	aa 27       	eor	r26, r26
    1056:	28 30       	cpi	r18, 0x08	; 8
    1058:	51 f1       	breq	.+84     	; 0x10ae <__ultoa_invert+0x5c>
    105a:	20 31       	cpi	r18, 0x10	; 16
    105c:	81 f1       	breq	.+96     	; 0x10be <__ultoa_invert+0x6c>
    105e:	e8 94       	clt
    1060:	6f 93       	push	r22
    1062:	6e 7f       	andi	r22, 0xFE	; 254
    1064:	6e 5f       	subi	r22, 0xFE	; 254
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	af 4f       	sbci	r26, 0xFF	; 255
    106e:	b1 e0       	ldi	r27, 0x01	; 1
    1070:	3e d0       	rcall	.+124    	; 0x10ee <__ultoa_invert+0x9c>
    1072:	b4 e0       	ldi	r27, 0x04	; 4
    1074:	3c d0       	rcall	.+120    	; 0x10ee <__ultoa_invert+0x9c>
    1076:	67 0f       	add	r22, r23
    1078:	78 1f       	adc	r23, r24
    107a:	89 1f       	adc	r24, r25
    107c:	9a 1f       	adc	r25, r26
    107e:	a1 1d       	adc	r26, r1
    1080:	68 0f       	add	r22, r24
    1082:	79 1f       	adc	r23, r25
    1084:	8a 1f       	adc	r24, r26
    1086:	91 1d       	adc	r25, r1
    1088:	a1 1d       	adc	r26, r1
    108a:	6a 0f       	add	r22, r26
    108c:	71 1d       	adc	r23, r1
    108e:	81 1d       	adc	r24, r1
    1090:	91 1d       	adc	r25, r1
    1092:	a1 1d       	adc	r26, r1
    1094:	20 d0       	rcall	.+64     	; 0x10d6 <__ultoa_invert+0x84>
    1096:	09 f4       	brne	.+2      	; 0x109a <__ultoa_invert+0x48>
    1098:	68 94       	set
    109a:	3f 91       	pop	r19
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	26 9f       	mul	r18, r22
    10a0:	11 24       	eor	r1, r1
    10a2:	30 19       	sub	r19, r0
    10a4:	30 5d       	subi	r19, 0xD0	; 208
    10a6:	31 93       	st	Z+, r19
    10a8:	de f6       	brtc	.-74     	; 0x1060 <__ultoa_invert+0xe>
    10aa:	cf 01       	movw	r24, r30
    10ac:	08 95       	ret
    10ae:	46 2f       	mov	r20, r22
    10b0:	47 70       	andi	r20, 0x07	; 7
    10b2:	40 5d       	subi	r20, 0xD0	; 208
    10b4:	41 93       	st	Z+, r20
    10b6:	b3 e0       	ldi	r27, 0x03	; 3
    10b8:	0f d0       	rcall	.+30     	; 0x10d8 <__ultoa_invert+0x86>
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__ultoa_invert+0x5c>
    10bc:	f6 cf       	rjmp	.-20     	; 0x10aa <__ultoa_invert+0x58>
    10be:	46 2f       	mov	r20, r22
    10c0:	4f 70       	andi	r20, 0x0F	; 15
    10c2:	40 5d       	subi	r20, 0xD0	; 208
    10c4:	4a 33       	cpi	r20, 0x3A	; 58
    10c6:	18 f0       	brcs	.+6      	; 0x10ce <__ultoa_invert+0x7c>
    10c8:	49 5d       	subi	r20, 0xD9	; 217
    10ca:	31 fd       	sbrc	r19, 1
    10cc:	40 52       	subi	r20, 0x20	; 32
    10ce:	41 93       	st	Z+, r20
    10d0:	02 d0       	rcall	.+4      	; 0x10d6 <__ultoa_invert+0x84>
    10d2:	a9 f7       	brne	.-22     	; 0x10be <__ultoa_invert+0x6c>
    10d4:	ea cf       	rjmp	.-44     	; 0x10aa <__ultoa_invert+0x58>
    10d6:	b4 e0       	ldi	r27, 0x04	; 4
    10d8:	a6 95       	lsr	r26
    10da:	97 95       	ror	r25
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	ba 95       	dec	r27
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__ultoa_invert+0x86>
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	61 05       	cpc	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	08 95       	ret
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	0a 2e       	mov	r0, r26
    10f4:	06 94       	lsr	r0
    10f6:	57 95       	ror	r21
    10f8:	47 95       	ror	r20
    10fa:	37 95       	ror	r19
    10fc:	27 95       	ror	r18
    10fe:	ba 95       	dec	r27
    1100:	c9 f7       	brne	.-14     	; 0x10f4 <__ultoa_invert+0xa2>
    1102:	62 0f       	add	r22, r18
    1104:	73 1f       	adc	r23, r19
    1106:	84 1f       	adc	r24, r20
    1108:	95 1f       	adc	r25, r21
    110a:	a0 1d       	adc	r26, r0
    110c:	08 95       	ret

0000110e <__mulsi3>:
    110e:	db 01       	movw	r26, r22
    1110:	8f 93       	push	r24
    1112:	9f 93       	push	r25
    1114:	2d d0       	rcall	.+90     	; 0x1170 <__muluhisi3>
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	a2 9f       	mul	r26, r18
    111c:	80 0d       	add	r24, r0
    111e:	91 1d       	adc	r25, r1
    1120:	a3 9f       	mul	r26, r19
    1122:	90 0d       	add	r25, r0
    1124:	b2 9f       	mul	r27, r18
    1126:	90 0d       	add	r25, r0
    1128:	11 24       	eor	r1, r1
    112a:	08 95       	ret

0000112c <__udivmodsi4>:
    112c:	a1 e2       	ldi	r26, 0x21	; 33
    112e:	1a 2e       	mov	r1, r26
    1130:	aa 1b       	sub	r26, r26
    1132:	bb 1b       	sub	r27, r27
    1134:	fd 01       	movw	r30, r26
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <__udivmodsi4_ep>

00001138 <__udivmodsi4_loop>:
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	ee 1f       	adc	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	a2 17       	cp	r26, r18
    1142:	b3 07       	cpc	r27, r19
    1144:	e4 07       	cpc	r30, r20
    1146:	f5 07       	cpc	r31, r21
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__udivmodsi4_ep>
    114a:	a2 1b       	sub	r26, r18
    114c:	b3 0b       	sbc	r27, r19
    114e:	e4 0b       	sbc	r30, r20
    1150:	f5 0b       	sbc	r31, r21

00001152 <__udivmodsi4_ep>:
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	1a 94       	dec	r1
    115c:	69 f7       	brne	.-38     	; 0x1138 <__udivmodsi4_loop>
    115e:	60 95       	com	r22
    1160:	70 95       	com	r23
    1162:	80 95       	com	r24
    1164:	90 95       	com	r25
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	bd 01       	movw	r22, r26
    116c:	cf 01       	movw	r24, r30
    116e:	08 95       	ret

00001170 <__muluhisi3>:
    1170:	3a d0       	rcall	.+116    	; 0x11e6 <__umulhisi3>
    1172:	a5 9f       	mul	r26, r21
    1174:	90 0d       	add	r25, r0
    1176:	b4 9f       	mul	r27, r20
    1178:	90 0d       	add	r25, r0
    117a:	a4 9f       	mul	r26, r20
    117c:	80 0d       	add	r24, r0
    117e:	91 1d       	adc	r25, r1
    1180:	11 24       	eor	r1, r1
    1182:	08 95       	ret

00001184 <__prologue_saves__>:
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	ca 1b       	sub	r28, r26
    11ae:	db 0b       	sbc	r29, r27
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	09 94       	ijmp

000011b6 <__epilogue_restores__>:
    11b6:	2a 88       	ldd	r2, Y+18	; 0x12
    11b8:	39 88       	ldd	r3, Y+17	; 0x11
    11ba:	48 88       	ldd	r4, Y+16	; 0x10
    11bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    11be:	6e 84       	ldd	r6, Y+14	; 0x0e
    11c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    11c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    11c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    11c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    11c8:	b9 84       	ldd	r11, Y+9	; 0x09
    11ca:	c8 84       	ldd	r12, Y+8	; 0x08
    11cc:	df 80       	ldd	r13, Y+7	; 0x07
    11ce:	ee 80       	ldd	r14, Y+6	; 0x06
    11d0:	fd 80       	ldd	r15, Y+5	; 0x05
    11d2:	0c 81       	ldd	r16, Y+4	; 0x04
    11d4:	1b 81       	ldd	r17, Y+3	; 0x03
    11d6:	aa 81       	ldd	r26, Y+2	; 0x02
    11d8:	b9 81       	ldd	r27, Y+1	; 0x01
    11da:	ce 0f       	add	r28, r30
    11dc:	d1 1d       	adc	r29, r1
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	ed 01       	movw	r28, r26
    11e4:	08 95       	ret

000011e6 <__umulhisi3>:
    11e6:	a2 9f       	mul	r26, r18
    11e8:	b0 01       	movw	r22, r0
    11ea:	b3 9f       	mul	r27, r19
    11ec:	c0 01       	movw	r24, r0
    11ee:	a3 9f       	mul	r26, r19
    11f0:	01 d0       	rcall	.+2      	; 0x11f4 <__umulhisi3+0xe>
    11f2:	b2 9f       	mul	r27, r18
    11f4:	70 0d       	add	r23, r0
    11f6:	81 1d       	adc	r24, r1
    11f8:	11 24       	eor	r1, r1
    11fa:	91 1d       	adc	r25, r1
    11fc:	08 95       	ret

000011fe <_exit>:
    11fe:	f8 94       	cli

00001200 <__stop_program>:
    1200:	ff cf       	rjmp	.-2      	; 0x1200 <__stop_program>
