
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803e00  000016c4  00001778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001574  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  00009574  00001574  00001628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b1  00803e02  00803e02  0000177a  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000360  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006667  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024ed  00000000  00000000  000081db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c77  00000000  00000000  0000a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000854  00000000  00000000  0000c340  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000020f7  00000000  00000000  0000cb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015e8  00000000  00000000  0000ec8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  00010273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	24 c1       	rjmp	.+584    	; 0x250 <__vector_3>
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	67 c4       	rjmp	.+2254   	; 0x8dc <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	bc c1       	rjmp	.+888    	; 0x38e <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	f3 c5       	rjmp	.+3046   	; 0xc14 <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e4 ec       	ldi	r30, 0xC4	; 196
      48:	f6 e1       	ldi	r31, 0x16	; 22
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 30       	cpi	r26, 0x02	; 2
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a2 e0       	ldi	r26, 0x02	; 2
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a3 3b       	cpi	r26, 0xB3	; 179
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	a8 d2       	rcall	.+1360   	; 0x5b8 <main>
      68:	83 ca       	rjmp	.-2810   	; 0xfffff570 <__eeprom_end+0xff7ef570>

0000006a <__bad_interrupt>:
      6a:	36 c1       	rjmp	.+620    	; 0x2d8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <led_hmi_on>:
     1a2:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <current_pwr_state>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <led_hmi_on+0xe>
     1aa:	80 e1       	ldi	r24, 0x10	; 16
     1ac:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b0:	08 95       	ret

000001b2 <led_hmi_off>:
     1b2:	80 e1       	ldi	r24, 0x10	; 16
     1b4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1b8:	08 95       	ret

000001ba <toggle_hmi_led>:
     1ba:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <current_pwr_state>
     1be:	88 23       	and	r24, r24
     1c0:	21 f0       	breq	.+8      	; 0x1ca <toggle_hmi_led+0x10>
     1c2:	80 e1       	ldi	r24, 0x10	; 16
     1c4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     1c8:	08 95       	ret
     1ca:	80 e1       	ldi	r24, 0x10	; 16
     1cc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1d0:	08 95       	ret

000001d2 <dim_display>:
     1d2:	18 16       	cp	r1, r24
     1d4:	19 06       	cpc	r1, r25
     1d6:	44 f4       	brge	.+16     	; 0x1e8 <dim_display+0x16>
     1d8:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <current_pwr_state>
     1dc:	88 23       	and	r24, r24
     1de:	21 f0       	breq	.+8      	; 0x1e8 <dim_display+0x16>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1ee:	08 95       	ret

000001f0 <display_enable>:
     1f0:	e0 e0       	ldi	r30, 0x00	; 0
     1f2:	f4 e0       	ldi	r31, 0x04	; 4
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	85 83       	std	Z+5, r24	; 0x05
     1f8:	92 e4       	ldi	r25, 0x42	; 66
     1fa:	9a 95       	dec	r25
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <display_enable+0xa>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <display_enable+0x10>
     200:	86 83       	std	Z+6, r24	; 0x06
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	8a 95       	dec	r24
     206:	f1 f7       	brne	.-4      	; 0x204 <display_enable+0x14>
     208:	00 c0       	rjmp	.+0      	; 0x20a <display_enable+0x1a>
     20a:	08 95       	ret

0000020c <set_display_data_pins>:
     20c:	e0 e4       	ldi	r30, 0x40	; 64
     20e:	f4 e0       	ldi	r31, 0x04	; 4
     210:	94 81       	ldd	r25, Z+4	; 0x04
     212:	90 7f       	andi	r25, 0xF0	; 240
     214:	94 83       	std	Z+4, r25	; 0x04
     216:	94 81       	ldd	r25, Z+4	; 0x04
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	98 2b       	or	r25, r24
     21c:	94 83       	std	Z+4, r25	; 0x04
     21e:	08 95       	ret

00000220 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     226:	08 95       	ret

00000228 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     228:	80 e4       	ldi	r24, 0x40	; 64
     22a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     22e:	08 95       	ret

00000230 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     238:	81 83       	std	Z+1, r24	; 0x01
     23a:	08 95       	ret

0000023c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     242:	08 95       	ret

00000244 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     244:	e0 e2       	ldi	r30, 0x20	; 32
     246:	f4 e0       	ldi	r31, 0x04	; 4
     248:	85 89       	ldd	r24, Z+21	; 0x15
     24a:	89 60       	ori	r24, 0x09	; 9
     24c:	85 8b       	std	Z+21, r24	; 0x15
     24e:	08 95       	ret

00000250 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	8f 93       	push	r24
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	/* EDIT: still true?? */
	if(PORTA_INTFLAGS & button_0) {
     260:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     264:	82 ff       	sbrs	r24, 2
     266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_3+0x28>
		flag_button_0_pressed = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     26e:	e9 e0       	ldi	r30, 0x09	; 9
     270:	f4 e0       	ldi	r31, 0x04	; 4
     272:	80 81       	ld	r24, Z
     274:	84 70       	andi	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     278:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     27c:	83 ff       	sbrs	r24, 3
     27e:	08 c0       	rjmp	.+16     	; 0x290 <__vector_3+0x40>
		flag_button_1_pressed = true;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     286:	e9 e0       	ldi	r30, 0x09	; 9
     288:	f4 e0       	ldi	r31, 0x04	; 4
     28a:	80 81       	ld	r24, Z
     28c:	88 70       	andi	r24, 0x08	; 8
     28e:	80 83       	st	Z, r24
	}
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	8f 93       	push	r24
     2ac:	ef 93       	push	r30
     2ae:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     2b0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     2b4:	85 ff       	sbrs	r24, 5
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <__vector_4+0x28>
		flag_heartbeat = true;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     2be:	e9 e2       	ldi	r30, 0x29	; 41
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	80 81       	ld	r24, Z
     2c4:	80 72       	andi	r24, 0x20	; 32
     2c6:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	8f 91       	pop	r24
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_default>:

ISR(BADISR_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	1f 93       	push	r17
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
     304:	c4 e1       	ldi	r28, 0x14	; 20
     306:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     308:	68 94       	set
     30a:	ee 24       	eor	r14, r14
     30c:	e5 f8       	bld	r14, 5
     30e:	ff 24       	eor	r15, r15
     310:	f2 f8       	bld	r15, 2
     312:	10 e1       	ldi	r17, 0x10	; 16
ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
	{
		led_hmi_on();
     314:	46 df       	rcall	.-372    	; 0x1a2 <led_hmi_on>
     316:	8f e4       	ldi	r24, 0x4F	; 79
     318:	93 ec       	ldi	r25, 0xC3	; 195
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <__vector_default+0x42>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <__vector_default+0x48>
     320:	00 00       	nop
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     322:	f7 01       	movw	r30, r14
     324:	16 83       	std	Z+6, r17	; 0x06
     326:	8f e4       	ldi	r24, 0x4F	; 79
     328:	93 ec       	ldi	r25, 0xC3	; 195
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <__vector_default+0x52>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_default+0x58>
     330:	00 00       	nop
     332:	21 97       	sbiw	r28, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     334:	79 f7       	brne	.-34     	; 0x314 <__vector_default+0x3c>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	fa e0       	ldi	r31, 0x0A	; 10
     366:	8b e2       	ldi	r24, 0x2B	; 43
     368:	9a e0       	ldi	r25, 0x0A	; 10
     36a:	86 a3       	std	Z+38, r24	; 0x26
     36c:	97 a3       	std	Z+39, r25	; 0x27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	82 87       	std	Z+10, r24	; 0x0a
     372:	08 95       	ret

00000374 <init_heatbeat_monitor>:
     374:	67 df       	rcall	.-306    	; 0x244 <setup_interrupt_for_hb_edge_detection>
     376:	f5 df       	rcall	.-22     	; 0x362 <setup_interrupt_timeout_detection>
     378:	08 95       	ret

0000037a <heartbeat_monitor>:
     37a:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_heartbeat>
     37e:	88 23       	and	r24, r24
     380:	29 f0       	breq	.+10     	; 0x38c <heartbeat_monitor+0x12>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	25 df       	rcall	.-438    	; 0x1d2 <dim_display>
     388:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_heartbeat>
     38c:	08 95       	ret

0000038e <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     398:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_bpi_heartbeat_ok>
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
	dim_display(1);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	13 df       	rcall	.-474    	; 0x1d2 <dim_display>
	display_clear();
     3ac:	f9 d1       	rcall	.+1010   	; 0x7a0 <display_clear>
	display_write_string("State is\ndisplay_on");
     3ae:	86 e7       	ldi	r24, 0x76	; 118
     3b0:	95 e9       	ldi	r25, 0x95	; 149
     3b2:	e3 d1       	rcall	.+966    	; 0x77a <display_write_string>
     3b4:	2f ef       	ldi	r18, 0xFF	; 255
     3b6:	80 e7       	ldi	r24, 0x70	; 112
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	80 40       	sbci	r24, 0x00	; 0
     3be:	90 40       	sbci	r25, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <mainloop_display_on+0x14>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <mainloop_display_on+0x1e>
     3c4:	00 00       	nop
     3c6:	08 95       	ret

000003c8 <mainloop_standby>:
	toggle_hmi_led();
	// send_sbc_heartbeat_count_to_bpi();
}

void mainloop_standby() {
	if (flag_button_0_pressed == true) {
     3c8:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_button_0_pressed>
     3cc:	88 23       	and	r24, r24
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <mainloop_standby+0x1c>
		flag_button_0_pressed = false;
     3d0:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_button_0_pressed>
		flag_pwr_state_change_request = true;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
		next_pwr_state = display_on;
     3d6:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <next_pwr_state>
	}
	
	if (flag_button_1_pressed == true) {
     3da:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_button_1_pressed>
     3de:	81 11       	cpse	r24, r1
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <mainloop_standby+0x24>
     3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e4:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_button_1_pressed>
     3e8:	88 23       	and	r24, r24
     3ea:	31 f0       	breq	.+12     	; 0x3f8 <mainloop_standby+0x30>
		flag_button_1_pressed = false;
     3ec:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_button_1_pressed>
		flag_pwr_state_change_request = true;
		next_pwr_state = display_on;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <next_pwr_state>
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
	}
	
	if (flag_pwr_state_change_request == true) {
     3f8:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_pwr_state_change_request>
     3fc:	88 23       	and	r24, r24
     3fe:	29 f0       	breq	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		flag_pwr_state_change_request = false;
     400:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_pwr_state_change_request>
		goto_pwr_state(next_pwr_state);
     404:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <next_pwr_state>
     408:	0e d2       	rcall	.+1052   	; 0x826 <goto_pwr_state>
     40a:	2f ef       	ldi	r18, 0xFF	; 255
     40c:	80 e7       	ldi	r24, 0x70	; 112
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	21 50       	subi	r18, 0x01	; 1
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	08 95       	ret

0000041e <mainloop_active>:
    }
}

void mainloop_active()
{
	heartbeat_monitor();
     41e:	ad df       	rcall	.-166    	; 0x37a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     420:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_bpi_heartbeat_ok>
     424:	81 11       	cpse	r24, r1
     426:	01 c0       	rjmp	.+2      	; 0x42a <mainloop_active+0xc>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     428:	09 df       	rcall	.-494    	; 0x23c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     42a:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_button_0_pressed>
     42e:	88 23       	and	r24, r24
     430:	19 f0       	breq	.+6      	; 0x438 <mainloop_active+0x1a>
		led_hmi_off();
     432:	bf de       	rcall	.-642    	; 0x1b2 <led_hmi_off>
		flag_button_0_pressed = false;
     434:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_button_0_pressed>
	}
	if (button_1_pressed() == 1) {
     438:	a1 de       	rcall	.-702    	; 0x17c <button_1_pressed>
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	19 f4       	brne	.+6      	; 0x444 <mainloop_active+0x26>
		USART0_sendString("C:Hello\r\n");
     43e:	8a e8       	ldi	r24, 0x8A	; 138
     440:	95 e9       	ldi	r25, 0x95	; 149
     442:	95 d2       	rcall	.+1322   	; 0x96e <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     444:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_usart_string_receive_complete>
     448:	88 23       	and	r24, r24
     44a:	19 f0       	breq	.+6      	; 0x452 <mainloop_active+0x34>
		USART0_process_incoming_message();
     44c:	16 d3       	rcall	.+1580   	; 0xa7a <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     44e:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     452:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_string_for_display_received>
     456:	88 23       	and	r24, r24
     458:	69 f0       	breq	.+26     	; 0x474 <mainloop_active+0x56>
		flag_string_for_display_received = false;
     45a:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_string_for_display_received>
		display_clear();
     45e:	a0 d1       	rcall	.+832    	; 0x7a0 <display_clear>
		display_write_string(display_line1_content_from_bcu);
     460:	89 e9       	ldi	r24, 0x99	; 153
     462:	9e e3       	ldi	r25, 0x3E	; 62
     464:	8a d1       	rcall	.+788    	; 0x77a <display_write_string>
		display_next_line();
     466:	7f d1       	rcall	.+766    	; 0x766 <display_next_line>
		display_write_string(display_line2_content_from_bcu);
     468:	87 e1       	ldi	r24, 0x17	; 23
     46a:	9e e3       	ldi	r25, 0x3E	; 62
     46c:	86 d1       	rcall	.+780    	; 0x77a <display_write_string>
		USART0_sendString_w_eol("New Display\n"); //<- line is being received, but no new content on display??
     46e:	84 e9       	ldi	r24, 0x94	; 148
     470:	95 e9       	ldi	r25, 0x95	; 149
     472:	9e d2       	rcall	.+1340   	; 0x9b0 <USART0_sendString_w_eol>
	}
	
	if (flag_pwr_state_change_request == true) {
     474:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_pwr_state_change_request>
     478:	88 23       	and	r24, r24
     47a:	49 f0       	breq	.+18     	; 0x48e <mainloop_active+0x70>
		display_clear();
     47c:	91 d1       	rcall	.+802    	; 0x7a0 <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     47e:	81 ea       	ldi	r24, 0xA1	; 161
     480:	95 e9       	ldi	r25, 0x95	; 149
     482:	7b d1       	rcall	.+758    	; 0x77a <display_write_string>
		flag_pwr_state_change_request = false;
     484:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_pwr_state_change_request>
		goto_pwr_state(next_pwr_state);
     488:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <next_pwr_state>
     48c:	cc d1       	rcall	.+920    	; 0x826 <goto_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     48e:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_human_readable_timestamp_next_bu_received>
     492:	88 23       	and	r24, r24
     494:	31 f0       	breq	.+12     	; 0x4a2 <mainloop_active+0x84>
		display_clear();
     496:	84 d1       	rcall	.+776    	; 0x7a0 <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     498:	88 e7       	ldi	r24, 0x78	; 120
     49a:	9e e3       	ldi	r25, 0x3E	; 62
     49c:	6e d1       	rcall	.+732    	; 0x77a <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     49e:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_human_readable_timestamp_next_bu_received>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     4a2:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_received_seconds_to_next_bu>
     4a6:	88 23       	and	r24, r24
     4a8:	21 f0       	breq	.+8      	; 0x4b2 <mainloop_active+0x94>
		//Todo: acknowledge to bcu
		flag_received_seconds_to_next_bu = false;
     4aa:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     4ae:	f1 d1       	rcall	.+994    	; 0x892 <rtc_write_seconds_to_cmp>
		rtc_setup();
     4b0:	e6 d1       	rcall	.+972    	; 0x87e <rtc_setup>
	}
	
	if (flag_goto_sleep == true) {
     4b2:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_goto_sleep>
     4b6:	88 23       	and	r24, r24
     4b8:	b9 f0       	breq	.+46     	; 0x4e8 <mainloop_active+0xca>
		flag_goto_sleep = false;
     4ba:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_goto_sleep>
		USART0_sendString_w_eol("going to sleep ...\n");
     4be:	8e eb       	ldi	r24, 0xBE	; 190
     4c0:	95 e9       	ldi	r25, 0x95	; 149
     4c2:	76 d2       	rcall	.+1260   	; 0x9b0 <USART0_sendString_w_eol>
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	80 e7       	ldi	r24, 0x70	; 112
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	90 40       	sbci	r25, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <mainloop_active+0xac>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <mainloop_active+0xb6>
     4d4:	00 00       	nop
		_delay_ms(100);
		SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     4d6:	e0 e5       	ldi	r30, 0x50	; 80
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	80 83       	st	Z, r24
		SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     4e0:	80 81       	ld	r24, Z
     4e2:	81 60       	ori	r24, 0x01	; 1
     4e4:	80 83       	st	Z, r24
		sleep_cpu();
     4e6:	88 95       	sleep
	}
	
	if (flag_request_current_measurement == true) {
     4e8:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_request_current_measurement>
     4ec:	88 23       	and	r24, r24
     4ee:	d9 f0       	breq	.+54     	; 0x526 <mainloop_active+0x108>
		flag_request_current_measurement = false;
     4f0:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     4f4:	eb dd       	rcall	.-1066   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"Cur: %d", input_current);
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	82 ed       	ldi	r24, 0xD2	; 210
     4fc:	95 e9       	ldi	r25, 0x95	; 149
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	88 e4       	ldi	r24, 0x48	; 72
     504:	9e e3       	ldi	r25, 0x3E	; 62
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	16 d5       	rcall	.+2604   	; 0xf38 <sprintf>
		USART0_sendString_w_eol(buffer);
     50c:	88 e4       	ldi	r24, 0x48	; 72
     50e:	9e e3       	ldi	r25, 0x3E	; 62
     510:	4f d2       	rcall	.+1182   	; 0x9b0 <USART0_sendString_w_eol>
		display_clear();
     512:	46 d1       	rcall	.+652    	; 0x7a0 <display_clear>
		display_write_string(buffer);
     514:	88 e4       	ldi	r24, 0x48	; 72
     516:	9e e3       	ldi	r25, 0x3E	; 62
     518:	30 d1       	rcall	.+608    	; 0x77a <display_write_string>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
	}
	
	if	(flag_request_temperature_measurement == true) {
     526:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <flag_request_temperature_measurement>
     52a:	88 23       	and	r24, r24
     52c:	d9 f0       	breq	.+54     	; 0x564 <mainloop_active+0x146>
		flag_request_temperature_measurement = false;
     52e:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     532:	d8 dd       	rcall	.-1104   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TMP: %d", temperature);
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	8a ed       	ldi	r24, 0xDA	; 218
     53a:	95 e9       	ldi	r25, 0x95	; 149
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	88 e4       	ldi	r24, 0x48	; 72
     542:	9e e3       	ldi	r25, 0x3E	; 62
     544:	9f 93       	push	r25
     546:	8f 93       	push	r24
     548:	f7 d4       	rcall	.+2542   	; 0xf38 <sprintf>
		USART0_sendString_w_eol(buffer);
     54a:	88 e4       	ldi	r24, 0x48	; 72
     54c:	9e e3       	ldi	r25, 0x3E	; 62
     54e:	30 d2       	rcall	.+1120   	; 0x9b0 <USART0_sendString_w_eol>
		display_clear();
     550:	27 d1       	rcall	.+590    	; 0x7a0 <display_clear>
		display_write_string(buffer);
     552:	88 e4       	ldi	r24, 0x48	; 72
     554:	9e e3       	ldi	r25, 0x3E	; 62
     556:	11 d1       	rcall	.+546    	; 0x77a <display_write_string>
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
	}
	
	if (flag_request_3v3_measurement == true) {
     564:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <flag_request_3v3_measurement>
     568:	88 23       	and	r24, r24
     56a:	d9 f0       	breq	.+54     	; 0x5a2 <mainloop_active+0x184>
		flag_request_3v3_measurement = false;
     56c:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     570:	a1 dd       	rcall	.-1214   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V3: %d", voltage_3v3);
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	82 ee       	ldi	r24, 0xE2	; 226
     578:	95 e9       	ldi	r25, 0x95	; 149
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	88 e4       	ldi	r24, 0x48	; 72
     580:	9e e3       	ldi	r25, 0x3E	; 62
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	d8 d4       	rcall	.+2480   	; 0xf38 <sprintf>
		USART0_sendString_w_eol(buffer);
     588:	88 e4       	ldi	r24, 0x48	; 72
     58a:	9e e3       	ldi	r25, 0x3E	; 62
     58c:	11 d2       	rcall	.+1058   	; 0x9b0 <USART0_sendString_w_eol>
		display_clear();
     58e:	08 d1       	rcall	.+528    	; 0x7a0 <display_clear>
		display_write_string(buffer);
     590:	88 e4       	ldi	r24, 0x48	; 72
     592:	9e e3       	ldi	r25, 0x3E	; 62
     594:	f2 d0       	rcall	.+484    	; 0x77a <display_write_string>
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	80 e7       	ldi	r24, 0x70	; 112
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <mainloop_active+0x18a>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <mainloop_active+0x194>
     5b2:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     5b4:	02 de       	rcall	.-1020   	; 0x1ba <toggle_hmi_led>
     5b6:	08 95       	ret

000005b8 <main>:
void mainloop_standby();
void mainloop_display_on();

int main(void)
{
	init_flags();
     5b8:	a9 dd       	rcall	.-1198   	; 0x10c <init_flags>
	init_pins();
     5ba:	bc dd       	rcall	.-1160   	; 0x134 <init_pins>
	init_heatbeat_monitor();
     5bc:	db de       	rcall	.-586    	; 0x374 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     5be:	e8 dd       	rcall	.-1072   	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     5c0:	c3 d1       	rcall	.+902    	; 0x948 <init_uart>
	init_display();
     5c2:	2b d0       	rcall	.+86     	; 0x61a <init_display>
	adc_init();
     5c4:	5e dd       	rcall	.-1348   	; 0x82 <adc_init>
	sei();
     5c6:	78 94       	sei
	
	display_write_string("Standby Unit\nready!");
     5c8:	8a ee       	ldi	r24, 0xEA	; 234
     5ca:	95 e9       	ldi	r25, 0x95	; 149
     5cc:	d6 d0       	rcall	.+428    	; 0x77a <display_write_string>
	USART0_sendString("I:STARTED");
     5ce:	8e ef       	ldi	r24, 0xFE	; 254
     5d0:	95 e9       	ldi	r25, 0x95	; 149
     5d2:	cd d1       	rcall	.+922    	; 0x96e <USART0_sendString>
	dim_display(1);
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	fc dd       	rcall	.-1032   	; 0x1d2 <dim_display>
	
	current_pwr_state = active;
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <current_pwr_state>
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f3 ed       	ldi	r31, 0xD3	; 211
     5e4:	cf 2e       	mov	r12, r31
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	df 2e       	mov	r13, r31
     5ea:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f4 ee       	ldi	r31, 0xE4	; 228
     5f0:	ef 2e       	mov	r14, r31
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	ff 2e       	mov	r15, r31
     5f6:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     5f8:	0f e0       	ldi	r16, 0x0F	; 15
     5fa:	12 e0       	ldi	r17, 0x02	; 2
	current_pwr_state = active;
	void (*mainloop)();
	
    while (1) 
    {
		switch(current_pwr_state) {
     5fc:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <current_pwr_state>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	39 f0       	breq	.+14     	; 0x612 <main+0x5a>
     604:	20 f0       	brcs	.+8      	; 0x60e <main+0x56>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	29 f4       	brne	.+10     	; 0x614 <main+0x5c>
			case active:
				mainloop = mainloop_active;
     60a:	e8 01       	movw	r28, r16
     60c:	03 c0       	rjmp	.+6      	; 0x614 <main+0x5c>
				break;
			case standby:
				mainloop = mainloop_standby;
     60e:	e7 01       	movw	r28, r14
				break;
     610:	01 c0       	rjmp	.+2      	; 0x614 <main+0x5c>
			case display_on:
				mainloop = mainloop_display_on;
     612:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     614:	fe 01       	movw	r30, r28
     616:	09 95       	icall
    }
     618:	f1 cf       	rjmp	.-30     	; 0x5fc <main+0x44>

0000061a <init_display>:
     61a:	2f e7       	ldi	r18, 0x7F	; 127
     61c:	8a e1       	ldi	r24, 0x1A	; 26
     61e:	96 e0       	ldi	r25, 0x06	; 6
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <init_display+0x6>
     628:	00 c0       	rjmp	.+0      	; 0x62a <init_display+0x10>
     62a:	00 00       	nop
     62c:	fd dd       	rcall	.-1030   	; 0x228 <display_clear_rs_pin>
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	ed dd       	rcall	.-1062   	; 0x20c <set_display_data_pins>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	dd dd       	rcall	.-1094   	; 0x1f0 <display_enable>
     636:	87 e8       	ldi	r24, 0x87	; 135
     638:	93 e1       	ldi	r25, 0x13	; 19
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <init_display+0x20>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <init_display+0x26>
     640:	00 00       	nop
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	e3 dd       	rcall	.-1082   	; 0x20c <set_display_data_pins>
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	d3 dd       	rcall	.-1114   	; 0x1f0 <display_enable>
     64a:	87 e8       	ldi	r24, 0x87	; 135
     64c:	93 e1       	ldi	r25, 0x13	; 19
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <init_display+0x34>
     652:	00 c0       	rjmp	.+0      	; 0x654 <init_display+0x3a>
     654:	00 00       	nop
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	d9 dd       	rcall	.-1102   	; 0x20c <set_display_data_pins>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	c9 dd       	rcall	.-1134   	; 0x1f0 <display_enable>
     65e:	87 e8       	ldi	r24, 0x87	; 135
     660:	93 e1       	ldi	r25, 0x13	; 19
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <init_display+0x48>
     666:	00 c0       	rjmp	.+0      	; 0x668 <init_display+0x4e>
     668:	00 00       	nop
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	cf dd       	rcall	.-1122   	; 0x20c <set_display_data_pins>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	bf dd       	rcall	.-1154   	; 0x1f0 <display_enable>
     672:	87 e8       	ldi	r24, 0x87	; 135
     674:	93 e1       	ldi	r25, 0x13	; 19
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <init_display+0x5c>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <init_display+0x62>
     67c:	00 00       	nop
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	c5 dd       	rcall	.-1142   	; 0x20c <set_display_data_pins>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	b5 dd       	rcall	.-1174   	; 0x1f0 <display_enable>
     686:	87 e8       	ldi	r24, 0x87	; 135
     688:	93 e1       	ldi	r25, 0x13	; 19
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <init_display+0x70>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <init_display+0x76>
     690:	00 00       	nop
     692:	88 e0       	ldi	r24, 0x08	; 8
     694:	bb dd       	rcall	.-1162   	; 0x20c <set_display_data_pins>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	ab dd       	rcall	.-1194   	; 0x1f0 <display_enable>
     69a:	87 e8       	ldi	r24, 0x87	; 135
     69c:	93 e1       	ldi	r25, 0x13	; 19
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <init_display+0x84>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <init_display+0x8a>
     6a4:	00 00       	nop
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	b1 dd       	rcall	.-1182   	; 0x20c <set_display_data_pins>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	a1 dd       	rcall	.-1214   	; 0x1f0 <display_enable>
     6ae:	87 e8       	ldi	r24, 0x87	; 135
     6b0:	93 e1       	ldi	r25, 0x13	; 19
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <init_display+0x98>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <init_display+0x9e>
     6b8:	00 00       	nop
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
     6bc:	a7 dd       	rcall	.-1202   	; 0x20c <set_display_data_pins>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	97 dd       	rcall	.-1234   	; 0x1f0 <display_enable>
     6c2:	87 e8       	ldi	r24, 0x87	; 135
     6c4:	93 e1       	ldi	r25, 0x13	; 19
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <init_display+0xac>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <init_display+0xb2>
     6cc:	00 00       	nop
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	9d dd       	rcall	.-1222   	; 0x20c <set_display_data_pins>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	8d dd       	rcall	.-1254   	; 0x1f0 <display_enable>
     6d6:	87 e8       	ldi	r24, 0x87	; 135
     6d8:	93 e1       	ldi	r25, 0x13	; 19
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <init_display+0xc0>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <init_display+0xc6>
     6e0:	00 00       	nop
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	93 dd       	rcall	.-1242   	; 0x20c <set_display_data_pins>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	83 dd       	rcall	.-1274   	; 0x1f0 <display_enable>
     6ea:	87 e8       	ldi	r24, 0x87	; 135
     6ec:	93 e1       	ldi	r25, 0x13	; 19
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <init_display+0xd4>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <init_display+0xda>
     6f4:	00 00       	nop
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	89 dd       	rcall	.-1262   	; 0x20c <set_display_data_pins>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	79 dd       	rcall	.-1294   	; 0x1f0 <display_enable>
     6fe:	87 e8       	ldi	r24, 0x87	; 135
     700:	93 e1       	ldi	r25, 0x13	; 19
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <init_display+0xe8>
     706:	00 c0       	rjmp	.+0      	; 0x708 <init_display+0xee>
     708:	00 00       	nop
     70a:	86 e0       	ldi	r24, 0x06	; 6
     70c:	7f dd       	rcall	.-1282   	; 0x20c <set_display_data_pins>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	6f dd       	rcall	.-1314   	; 0x1f0 <display_enable>
     712:	87 e8       	ldi	r24, 0x87	; 135
     714:	93 e1       	ldi	r25, 0x13	; 19
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <init_display+0xfc>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <init_display+0x102>
     71c:	00 00       	nop
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	75 dd       	rcall	.-1302   	; 0x20c <set_display_data_pins>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	65 dd       	rcall	.-1334   	; 0x1f0 <display_enable>
     726:	87 e8       	ldi	r24, 0x87	; 135
     728:	93 e1       	ldi	r25, 0x13	; 19
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <init_display+0x110>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <init_display+0x116>
     730:	00 00       	nop
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	6b dd       	rcall	.-1322   	; 0x20c <set_display_data_pins>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	5b dd       	rcall	.-1354   	; 0x1f0 <display_enable>
     73a:	87 e8       	ldi	r24, 0x87	; 135
     73c:	93 e1       	ldi	r25, 0x13	; 19
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <init_display+0x124>
     742:	00 c0       	rjmp	.+0      	; 0x744 <init_display+0x12a>
     744:	00 00       	nop
     746:	08 95       	ret

00000748 <display_write_char>:
     748:	cf 93       	push	r28
     74a:	c8 2f       	mov	r28, r24
     74c:	69 dd       	rcall	.-1326   	; 0x220 <display_set_rs_pin>
     74e:	8c 2f       	mov	r24, r28
     750:	82 95       	swap	r24
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	5b dd       	rcall	.-1354   	; 0x20c <set_display_data_pins>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	4b dd       	rcall	.-1386   	; 0x1f0 <display_enable>
     75a:	8c 2f       	mov	r24, r28
     75c:	57 dd       	rcall	.-1362   	; 0x20c <set_display_data_pins>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	47 dd       	rcall	.-1394   	; 0x1f0 <display_enable>
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <display_next_line>:
     766:	60 dd       	rcall	.-1344   	; 0x228 <display_clear_rs_pin>
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	50 dd       	rcall	.-1376   	; 0x20c <set_display_data_pins>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	40 dd       	rcall	.-1408   	; 0x1f0 <display_enable>
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	4c dd       	rcall	.-1384   	; 0x20c <set_display_data_pins>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	3c dd       	rcall	.-1416   	; 0x1f0 <display_enable>
     778:	08 95       	ret

0000077a <display_write_string>:
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
     780:	4f dd       	rcall	.-1378   	; 0x220 <display_set_rs_pin>
     782:	88 81       	ld	r24, Y
     784:	88 23       	and	r24, r24
     786:	49 f0       	breq	.+18     	; 0x79a <display_write_string+0x20>
     788:	21 96       	adiw	r28, 0x01	; 1
     78a:	8a 30       	cpi	r24, 0x0A	; 10
     78c:	11 f4       	brne	.+4      	; 0x792 <display_write_string+0x18>
     78e:	eb df       	rcall	.-42     	; 0x766 <display_next_line>
     790:	01 c0       	rjmp	.+2      	; 0x794 <display_write_string+0x1a>
     792:	da df       	rcall	.-76     	; 0x748 <display_write_char>
     794:	89 91       	ld	r24, Y+
     796:	81 11       	cpse	r24, r1
     798:	f8 cf       	rjmp	.-16     	; 0x78a <display_write_string+0x10>
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     7a0:	43 dd       	rcall	.-1402   	; 0x228 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	33 dd       	rcall	.-1434   	; 0x20c <set_display_data_pins>
	display_enable(1);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	23 dd       	rcall	.-1466   	; 0x1f0 <display_enable>
	set_display_data_pins(0x01);
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	2f dd       	rcall	.-1442   	; 0x20c <set_display_data_pins>
	display_enable(1);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	1f dd       	rcall	.-1474   	; 0x1f0 <display_enable>
     7b2:	87 ea       	ldi	r24, 0xA7	; 167
     7b4:	91 e6       	ldi	r25, 0x61	; 97
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <display_clear+0x16>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <display_clear+0x1c>
     7bc:	00 00       	nop
     7be:	08 95       	ret

000007c0 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     7c0:	e0 e0       	ldi	r30, 0x00	; 0
     7c2:	f4 e0       	ldi	r31, 0x04	; 4
     7c4:	84 81       	ldd	r24, Z+4	; 0x04
     7c6:	80 61       	ori	r24, 0x10	; 16
     7c8:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     7d0:	08 95       	ret

000007d2 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     7d2:	e0 e0       	ldi	r30, 0x00	; 0
     7d4:	f4 e0       	ldi	r31, 0x04	; 4
     7d6:	84 81       	ldd	r24, Z+4	; 0x04
     7d8:	8f 7e       	andi	r24, 0xEF	; 239
     7da:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     7dc:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     7e0:	08 95       	ret

000007e2 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     7e2:	e0 e2       	ldi	r30, 0x20	; 32
     7e4:	f4 e0       	ldi	r31, 0x04	; 4
     7e6:	84 81       	ldd	r24, Z+4	; 0x04
     7e8:	8d 7f       	andi	r24, 0xFD	; 253
     7ea:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     7f2:	08 95       	ret

000007f4 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     7f4:	e0 e2       	ldi	r30, 0x20	; 32
     7f6:	f4 e0       	ldi	r31, 0x04	; 4
     7f8:	84 81       	ldd	r24, Z+4	; 0x04
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     7fe:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     802:	08 95       	ret

00000804 <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     804:	cd df       	rcall	.-102    	; 0x7a0 <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     806:	88 e0       	ldi	r24, 0x08	; 8
     808:	96 e9       	ldi	r25, 0x96	; 150
     80a:	b7 df       	rcall	.-146    	; 0x77a <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     80c:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_bpi_heartbeat_ok>
     810:	81 11       	cpse	r24, r1
     812:	fe cf       	rjmp	.-4      	; 0x810 <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     814:	c5 df       	rcall	.-118    	; 0x7a0 <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     816:	83 e2       	ldi	r24, 0x23	; 35
     818:	96 e9       	ldi	r25, 0x96	; 150
     81a:	af df       	rcall	.-162    	; 0x77a <display_write_string>
	while (vcc3v3_present() == true) {
     81c:	6f dc       	rcall	.-1826   	; 0xfc <vcc3v3_present>
     81e:	81 11       	cpse	r24, r1
     820:	fd cf       	rjmp	.-6      	; 0x81c <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	08 95       	ret

00000826 <goto_pwr_state>:
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void goto_pwr_state(enum pwr_states pwr_state) {
	switch(pwr_state) {
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	89 f0       	breq	.+34     	; 0x84c <goto_pwr_state+0x26>
     82a:	18 f0       	brcs	.+6      	; 0x832 <goto_pwr_state+0xc>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	a1 f0       	breq	.+40     	; 0x858 <goto_pwr_state+0x32>
     830:	08 95       	ret
		case standby:
			wait_until_bpi_ready_for_shutdown();
     832:	e8 df       	rcall	.-48     	; 0x804 <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     834:	df df       	rcall	.-66     	; 0x7f4 <disable_bpi_sply>
			dim_display(0);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	cb dc       	rcall	.-1642   	; 0x1d2 <dim_display>
			led_hmi_off();
     83c:	ba dc       	rcall	.-1676   	; 0x1b2 <led_hmi_off>
			disable_5v0_smps();
     83e:	c9 df       	rcall	.-110    	; 0x7d2 <disable_5v0_smps>
			flag_goto_sleep = true;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_goto_sleep>
			current_pwr_state = standby;
     846:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <current_pwr_state>
			break;
     84a:	08 95       	ret
		
		case display_on:
			current_pwr_state = display_on;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <current_pwr_state>
			enable_5v0_smps();
     852:	b6 df       	rcall	.-148    	; 0x7c0 <enable_5v0_smps>
			init_display();
     854:	e2 de       	rcall	.-572    	; 0x61a <init_display>
			break;
     856:	08 95       	ret
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			display_write_string("Hello Folks!\nStarting BCU ..");
     858:	8d e3       	ldi	r24, 0x3D	; 61
     85a:	96 e9       	ldi	r25, 0x96	; 150
     85c:	8e df       	rcall	.-228    	; 0x77a <display_write_string>
			enable_bpi_sply();
     85e:	c1 df       	rcall	.-126    	; 0x7e2 <enable_bpi_sply>
			current_pwr_state = active;
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <current_pwr_state>
     866:	08 95       	ret

00000868 <rtc_reset_counter>:
	rtc_set_compare_interrupt();
	rtc_use_internal_1k024_oscillator();
}

void rtc_set_compare_value(void) {
	RTC.CMP = 0x0001;
     868:	e0 e4       	ldi	r30, 0x40	; 64
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	10 86       	std	Z+8, r1	; 0x08
     86e:	11 86       	std	Z+9, r1	; 0x09
     870:	08 95       	ret

00000872 <rtc_wait_for_all_status_bits_zero>:
     872:	e0 e4       	ldi	r30, 0x40	; 64
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	81 81       	ldd	r24, Z+1	; 0x01
     878:	81 11       	cpse	r24, r1
     87a:	fd cf       	rjmp	.-6      	; 0x876 <rtc_wait_for_all_status_bits_zero+0x4>
     87c:	08 95       	ret

0000087e <rtc_setup>:
     87e:	f9 df       	rcall	.-14     	; 0x872 <rtc_wait_for_all_status_bits_zero>
     880:	e0 e4       	ldi	r30, 0x40	; 64
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	81 ed       	ldi	r24, 0xD1	; 209
     886:	80 83       	st	Z, r24
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	82 83       	std	Z+2, r24	; 0x02
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	87 83       	std	Z+7, r24	; 0x07
     890:	08 95       	ret

00000892 <rtc_write_seconds_to_cmp>:
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     89a:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <seconds_to_next_bu>
     89e:	90 91 13 3e 	lds	r25, 0x3E13	; 0x803e13 <seconds_to_next_bu+0x1>
     8a2:	a0 91 14 3e 	lds	r26, 0x3E14	; 0x803e14 <seconds_to_next_bu+0x2>
     8a6:	b0 91 15 3e 	lds	r27, 0x3E15	; 0x803e15 <seconds_to_next_bu+0x3>
     8aa:	bb 23       	and	r27, r27
     8ac:	1c f4       	brge	.+6      	; 0x8b4 <rtc_write_seconds_to_cmp+0x22>
     8ae:	4f 96       	adiw	r24, 0x1f	; 31
     8b0:	a1 1d       	adc	r26, r1
     8b2:	b1 1d       	adc	r27, r1
     8b4:	6c 01       	movw	r12, r24
     8b6:	7d 01       	movw	r14, r26
     8b8:	68 94       	set
     8ba:	14 f8       	bld	r1, 4
     8bc:	f5 94       	asr	r15
     8be:	e7 94       	ror	r14
     8c0:	d7 94       	ror	r13
     8c2:	c7 94       	ror	r12
     8c4:	16 94       	lsr	r1
     8c6:	d1 f7       	brne	.-12     	; 0x8bc <rtc_write_seconds_to_cmp+0x2a>
	rtc_reset_counter();
     8c8:	cf df       	rcall	.-98     	; 0x868 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     8ca:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     8ce:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	08 95       	ret

000008dc <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     8fe:	e0 e4       	ldi	r30, 0x40	; 64
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	83 81       	ldd	r24, Z+3	; 0x03
     904:	82 60       	ori	r24, 0x02	; 2
     906:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     908:	8a e5       	ldi	r24, 0x5A	; 90
     90a:	96 e9       	ldi	r25, 0x96	; 150
     90c:	30 d0       	rcall	.+96     	; 0x96e <USART0_sendString>
	flag_pwr_state_change_request = true;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_pwr_state_change_request>
	next_pwr_state = active;
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <next_pwr_state>
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     93c:	e0 e0       	ldi	r30, 0x00	; 0
     93e:	f8 e0       	ldi	r31, 0x08	; 8
     940:	85 81       	ldd	r24, Z+5	; 0x05
     942:	80 68       	ori	r24, 0x80	; 128
     944:	85 83       	std	Z+5, r24	; 0x05
     946:	08 95       	ret

00000948 <init_uart>:
     948:	73 dc       	rcall	.-1818   	; 0x230 <set_pb2_txd_and_pb3_rxd>
     94a:	e0 e0       	ldi	r30, 0x00	; 0
     94c:	f8 e0       	ldi	r31, 0x08	; 8
     94e:	8c e6       	ldi	r24, 0x6C	; 108
     950:	95 e0       	ldi	r25, 0x05	; 5
     952:	80 87       	std	Z+8, r24	; 0x08
     954:	91 87       	std	Z+9, r25	; 0x09
     956:	80 ec       	ldi	r24, 0xC0	; 192
     958:	86 83       	std	Z+6, r24	; 0x06
     95a:	f0 df       	rcall	.-32     	; 0x93c <USART0_enable_rx_complete_interrupt>
     95c:	08 95       	ret

0000095e <USART0_sendChar>:
     95e:	e0 e0       	ldi	r30, 0x00	; 0
     960:	f8 e0       	ldi	r31, 0x08	; 8
     962:	94 81       	ldd	r25, Z+4	; 0x04
     964:	95 ff       	sbrs	r25, 5
     966:	fd cf       	rjmp	.-6      	; 0x962 <USART0_sendChar+0x4>
     968:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     96c:	08 95       	ret

0000096e <USART0_sendString>:
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	8c 01       	movw	r16, r24
     97c:	7c 01       	movw	r14, r24
     97e:	c0 e0       	ldi	r28, 0x00	; 0
     980:	d0 e0       	ldi	r29, 0x00	; 0
     982:	05 c0       	rjmp	.+10     	; 0x98e <USART0_sendString+0x20>
     984:	f7 01       	movw	r30, r14
     986:	81 91       	ld	r24, Z+
     988:	7f 01       	movw	r14, r30
     98a:	e9 df       	rcall	.-46     	; 0x95e <USART0_sendChar>
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	f8 01       	movw	r30, r16
     990:	01 90       	ld	r0, Z+
     992:	00 20       	and	r0, r0
     994:	e9 f7       	brne	.-6      	; 0x990 <USART0_sendString+0x22>
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	e0 1b       	sub	r30, r16
     99a:	f1 0b       	sbc	r31, r17
     99c:	ce 17       	cp	r28, r30
     99e:	df 07       	cpc	r29, r31
     9a0:	88 f3       	brcs	.-30     	; 0x984 <USART0_sendString+0x16>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <USART0_sendString_w_eol>:
     9b0:	de df       	rcall	.-68     	; 0x96e <USART0_sendString>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	d4 df       	rcall	.-88     	; 0x95e <USART0_sendChar>
     9b6:	08 95       	ret

000009b8 <USART0_read>:
     9b8:	e0 e0       	ldi	r30, 0x00	; 0
     9ba:	f8 e0       	ldi	r31, 0x08	; 8
     9bc:	84 81       	ldd	r24, Z+4	; 0x04
     9be:	88 23       	and	r24, r24
     9c0:	ec f7       	brge	.-6      	; 0x9bc <USART0_read+0x4>
     9c2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     9c6:	08 95       	ret

000009c8 <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	7c 01       	movw	r14, r24
     9da:	6b 01       	movw	r12, r22
     9dc:	61 32       	cpi	r22, 0x21	; 33
     9de:	71 05       	cpc	r23, r1
     9e0:	24 f0       	brlt	.+8      	; 0x9ea <USART0_read_string+0x22>
     9e2:	68 94       	set
     9e4:	cc 24       	eor	r12, r12
     9e6:	c5 f8       	bld	r12, 5
     9e8:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     9ea:	dd 20       	and	r13, r13
     9ec:	c4 f0       	brlt	.+48     	; 0xa1e <USART0_read_string+0x56>
     9ee:	e7 01       	movw	r28, r14
     9f0:	00 e0       	ldi	r16, 0x00	; 0
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	7e 01       	movw	r14, r28
		i++;
     9f6:	0f 5f       	subi	r16, 0xFF	; 255
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     9fa:	de df       	rcall	.-68     	; 0x9b8 <USART0_read>
     9fc:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     9fe:	8a 30       	cpi	r24, 0x0A	; 10
     a00:	21 f0       	breq	.+8      	; 0xa0a <USART0_read_string+0x42>
     a02:	88 23       	and	r24, r24
     a04:	11 f0       	breq	.+4      	; 0xa0a <USART0_read_string+0x42>
     a06:	8d 30       	cpi	r24, 0x0D	; 13
     a08:	31 f4       	brne	.+12     	; 0xa16 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     a0a:	f7 01       	movw	r30, r14
     a0c:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     a0e:	c0 16       	cp	r12, r16
     a10:	d1 06       	cpc	r13, r17
     a12:	3c f4       	brge	.+14     	; 0xa22 <USART0_read_string+0x5a>
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     a16:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     a18:	c0 16       	cp	r12, r16
     a1a:	d1 06       	cpc	r13, r17
     a1c:	5c f7       	brge	.-42     	; 0x9f4 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     a1e:	f7 01       	movw	r30, r14
     a20:	10 82       	st	Z, r1
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	08 95       	ret

00000a34 <convert_str_to_long>:
		USART0_sendString_w_eol("ACK:3V");
		flag_request_3v3_measurement = true;
	}
}

long convert_str_to_long(char *str) {
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <convert_str_to_long+0xa>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	08 2f       	mov	r16, r24
     a44:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	8f e5       	ldi	r24, 0x5F	; 95
     a4c:	96 e9       	ldi	r25, 0x96	; 150
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	5f d2       	rcall	.+1214   	; 0xf12 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     a54:	4a e0       	ldi	r20, 0x0A	; 10
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	be 01       	movw	r22, r28
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	80 2f       	mov	r24, r16
     a60:	91 2f       	mov	r25, r17
     a62:	02 d1       	rcall	.+516    	; 0xc68 <strtol>
	return ret;
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     a82:	6e e6       	ldi	r22, 0x6E	; 110
     a84:	76 e9       	ldi	r23, 0x96	; 150
     a86:	88 e2       	ldi	r24, 0x28	; 40
     a88:	9e e3       	ldi	r25, 0x3E	; 62
     a8a:	0c d2       	rcall	.+1048   	; 0xea4 <strcmp>
     a8c:	89 2b       	or	r24, r25
     a8e:	19 f4       	brne	.+6      	; 0xa96 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     a90:	83 e7       	ldi	r24, 0x73	; 115
     a92:	96 e9       	ldi	r25, 0x96	; 150
     a94:	8d df       	rcall	.-230    	; 0x9b0 <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     a96:	68 e7       	ldi	r22, 0x78	; 120
     a98:	76 e9       	ldi	r23, 0x96	; 150
     a9a:	88 e2       	ldi	r24, 0x28	; 40
     a9c:	9e e3       	ldi	r25, 0x3E	; 62
     a9e:	fe d1       	rcall	.+1020   	; 0xe9c <strtok>
     aa0:	d8 2f       	mov	r29, r24
     aa2:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     aa4:	64 e7       	ldi	r22, 0x74	; 116
     aa6:	75 e9       	ldi	r23, 0x95	; 149
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	f7 d1       	rcall	.+1006   	; 0xe9c <strtok>
     aae:	08 2f       	mov	r16, r24
     ab0:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	8a e7       	ldi	r24, 0x7A	; 122
     abc:	96 e9       	ldi	r25, 0x96	; 150
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	88 e4       	ldi	r24, 0x48	; 72
     ac4:	9e e3       	ldi	r25, 0x3E	; 62
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	36 d2       	rcall	.+1132   	; 0xf38 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     acc:	6e e8       	ldi	r22, 0x8E	; 142
     ace:	76 e9       	ldi	r23, 0x96	; 150
     ad0:	8d 2f       	mov	r24, r29
     ad2:	9c 2f       	mov	r25, r28
     ad4:	e7 d1       	rcall	.+974    	; 0xea4 <strcmp>
     ad6:	2d b7       	in	r18, 0x3d	; 61
     ad8:	3e b7       	in	r19, 0x3e	; 62
     ada:	28 5f       	subi	r18, 0xF8	; 248
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	2d bf       	out	0x3d, r18	; 61
     ae0:	3e bf       	out	0x3e, r19	; 62
     ae2:	89 2b       	or	r24, r25
     ae4:	41 f4       	brne	.+16     	; 0xaf6 <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_eol("ACK_D1");
     ae6:	8a e8       	ldi	r24, 0x8A	; 138
     ae8:	96 e9       	ldi	r25, 0x96	; 150
     aea:	62 df       	rcall	.-316    	; 0x9b0 <USART0_sendString_w_eol>
		strcpy(display_line1_content_from_bcu, payload);
     aec:	60 2f       	mov	r22, r16
     aee:	71 2f       	mov	r23, r17
     af0:	89 e9       	ldi	r24, 0x99	; 153
     af2:	9e e3       	ldi	r25, 0x3E	; 62
     af4:	e0 d1       	rcall	.+960    	; 0xeb6 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     af6:	65 e9       	ldi	r22, 0x95	; 149
     af8:	76 e9       	ldi	r23, 0x96	; 150
     afa:	8d 2f       	mov	r24, r29
     afc:	9c 2f       	mov	r25, r28
     afe:	d2 d1       	rcall	.+932    	; 0xea4 <strcmp>
     b00:	89 2b       	or	r24, r25
     b02:	59 f4       	brne	.+22     	; 0xb1a <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_eol("ACK_D2");
     b04:	81 e9       	ldi	r24, 0x91	; 145
     b06:	96 e9       	ldi	r25, 0x96	; 150
     b08:	53 df       	rcall	.-346    	; 0x9b0 <USART0_sendString_w_eol>
		strcpy(display_line2_content_from_bcu, payload);
     b0a:	60 2f       	mov	r22, r16
     b0c:	71 2f       	mov	r23, r17
     b0e:	87 e1       	ldi	r24, 0x17	; 23
     b10:	9e e3       	ldi	r25, 0x3E	; 62
     b12:	d1 d1       	rcall	.+930    	; 0xeb6 <strcpy>
		flag_string_for_display_received = true;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     b1a:	68 e9       	ldi	r22, 0x98	; 152
     b1c:	76 e9       	ldi	r23, 0x96	; 150
     b1e:	8d 2f       	mov	r24, r29
     b20:	9c 2f       	mov	r25, r28
     b22:	c0 d1       	rcall	.+896    	; 0xea4 <strcmp>
     b24:	89 2b       	or	r24, r25
     b26:	29 f4       	brne	.+10     	; 0xb32 <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_pwr_state_change_request>
		next_pwr_state = standby;
     b2e:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     b32:	6b e9       	ldi	r22, 0x9B	; 155
     b34:	76 e9       	ldi	r23, 0x96	; 150
     b36:	8d 2f       	mov	r24, r29
     b38:	9c 2f       	mov	r25, r28
     b3a:	b4 d1       	rcall	.+872    	; 0xea4 <strcmp>
     b3c:	89 2b       	or	r24, r25
     b3e:	11 f5       	brne	.+68     	; 0xb84 <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     b40:	1f 93       	push	r17
     b42:	0f 93       	push	r16
     b44:	8e e9       	ldi	r24, 0x9E	; 158
     b46:	96 e9       	ldi	r25, 0x96	; 150
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	88 e4       	ldi	r24, 0x48	; 72
     b4e:	9e e3       	ldi	r25, 0x3E	; 62
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	f1 d1       	rcall	.+994    	; 0xf38 <sprintf>
		USART0_sendString_w_eol(buffer);
     b56:	88 e4       	ldi	r24, 0x48	; 72
     b58:	9e e3       	ldi	r25, 0x3E	; 62
     b5a:	2a df       	rcall	.-428    	; 0x9b0 <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     b5c:	80 2f       	mov	r24, r16
     b5e:	91 2f       	mov	r25, r17
     b60:	69 df       	rcall	.-302    	; 0xa34 <convert_str_to_long>
     b62:	60 93 12 3e 	sts	0x3E12, r22	; 0x803e12 <seconds_to_next_bu>
     b66:	70 93 13 3e 	sts	0x3E13, r23	; 0x803e13 <seconds_to_next_bu+0x1>
     b6a:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <seconds_to_next_bu+0x2>
     b6e:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_received_seconds_to_next_bu>
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     b84:	69 ea       	ldi	r22, 0xA9	; 169
     b86:	76 e9       	ldi	r23, 0x96	; 150
     b88:	8d 2f       	mov	r24, r29
     b8a:	9c 2f       	mov	r25, r28
     b8c:	8b d1       	rcall	.+790    	; 0xea4 <strcmp>
     b8e:	89 2b       	or	r24, r25
     b90:	59 f4       	brne	.+22     	; 0xba8 <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     b92:	60 2f       	mov	r22, r16
     b94:	71 2f       	mov	r23, r17
     b96:	88 e7       	ldi	r24, 0x78	; 120
     b98:	9e e3       	ldi	r25, 0x3E	; 62
     b9a:	8d d1       	rcall	.+794    	; 0xeb6 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     b9c:	8a e0       	ldi	r24, 0x0A	; 10
     b9e:	80 93 88 3e 	sts	0x3E88, r24	; 0x803e88 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     ba8:	6c ea       	ldi	r22, 0xAC	; 172
     baa:	76 e9       	ldi	r23, 0x96	; 150
     bac:	8d 2f       	mov	r24, r29
     bae:	9c 2f       	mov	r25, r28
     bb0:	79 d1       	rcall	.+754    	; 0xea4 <strcmp>
     bb2:	89 2b       	or	r24, r25
     bb4:	19 f4       	brne	.+6      	; 0xbbc <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     bbc:	63 eb       	ldi	r22, 0xB3	; 179
     bbe:	76 e9       	ldi	r23, 0x96	; 150
     bc0:	8d 2f       	mov	r24, r29
     bc2:	9c 2f       	mov	r25, r28
     bc4:	6f d1       	rcall	.+734    	; 0xea4 <strcmp>
     bc6:	89 2b       	or	r24, r25
     bc8:	31 f4       	brne	.+12     	; 0xbd6 <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_eol("ACK:CC");
     bca:	8f ea       	ldi	r24, 0xAF	; 175
     bcc:	96 e9       	ldi	r25, 0x96	; 150
     bce:	f0 de       	rcall	.-544    	; 0x9b0 <USART0_sendString_w_eol>
		flag_request_current_measurement = true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     bd6:	6a eb       	ldi	r22, 0xBA	; 186
     bd8:	76 e9       	ldi	r23, 0x96	; 150
     bda:	8d 2f       	mov	r24, r29
     bdc:	9c 2f       	mov	r25, r28
     bde:	62 d1       	rcall	.+708    	; 0xea4 <strcmp>
     be0:	89 2b       	or	r24, r25
     be2:	31 f4       	brne	.+12     	; 0xbf0 <USART0_process_incoming_message+0x176>
		USART0_sendString_w_eol("ACK:TP");
     be4:	86 eb       	ldi	r24, 0xB6	; 182
     be6:	96 e9       	ldi	r25, 0x96	; 150
     be8:	e3 de       	rcall	.-570    	; 0x9b0 <USART0_sendString_w_eol>
		flag_request_temperature_measurement = true;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     bf0:	61 ec       	ldi	r22, 0xC1	; 193
     bf2:	76 e9       	ldi	r23, 0x96	; 150
     bf4:	8d 2f       	mov	r24, r29
     bf6:	9c 2f       	mov	r25, r28
     bf8:	55 d1       	rcall	.+682    	; 0xea4 <strcmp>
     bfa:	89 2b       	or	r24, r25
     bfc:	31 f4       	brne	.+12     	; 0xc0a <USART0_process_incoming_message+0x190>
		USART0_sendString_w_eol("ACK:3V");
     bfe:	8d eb       	ldi	r24, 0xBD	; 189
     c00:	96 e9       	ldi	r25, 0x96	; 150
     c02:	d6 de       	rcall	.-596    	; 0x9b0 <USART0_sendString_w_eol>
		flag_request_3v3_measurement = true;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <flag_request_3v3_measurement>
	}
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     c36:	60 e2       	ldi	r22, 0x20	; 32
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	88 e2       	ldi	r24, 0x28	; 40
     c3c:	9e e3       	ldi	r25, 0x3E	; 62
     c3e:	c4 de       	rcall	.-632    	; 0x9c8 <USART0_read_string>
	flag_usart_string_receive_complete = true;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_usart_string_receive_complete>
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <strtol>:
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e9 e3       	ldi	r30, 0x39	; 57
     c6e:	f6 e0       	ldi	r31, 0x06	; 6
     c70:	43 c4       	rjmp	.+2182   	; 0x14f8 <__prologue_saves__+0x2>
     c72:	5c 01       	movw	r10, r24
     c74:	6b 01       	movw	r12, r22
     c76:	7a 01       	movw	r14, r20
     c78:	61 15       	cp	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	19 f0       	breq	.+6      	; 0xc84 <strtol+0x1c>
     c7e:	fb 01       	movw	r30, r22
     c80:	80 83       	st	Z, r24
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	e1 14       	cp	r14, r1
     c86:	f1 04       	cpc	r15, r1
     c88:	29 f0       	breq	.+10     	; 0xc94 <strtol+0x2c>
     c8a:	c7 01       	movw	r24, r14
     c8c:	02 97       	sbiw	r24, 0x02	; 2
     c8e:	83 97       	sbiw	r24, 0x23	; 35
     c90:	08 f0       	brcs	.+2      	; 0xc94 <strtol+0x2c>
     c92:	e2 c0       	rjmp	.+452    	; 0xe58 <strtol+0x1f0>
     c94:	e5 01       	movw	r28, r10
     c96:	21 96       	adiw	r28, 0x01	; 1
     c98:	f5 01       	movw	r30, r10
     c9a:	10 81       	ld	r17, Z
     c9c:	81 2f       	mov	r24, r17
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	f4 d0       	rcall	.+488    	; 0xe8a <isspace>
     ca2:	89 2b       	or	r24, r25
     ca4:	11 f0       	breq	.+4      	; 0xcaa <strtol+0x42>
     ca6:	5e 01       	movw	r10, r28
     ca8:	f5 cf       	rjmp	.-22     	; 0xc94 <strtol+0x2c>
     caa:	1d 32       	cpi	r17, 0x2D	; 45
     cac:	29 f4       	brne	.+10     	; 0xcb8 <strtol+0x50>
     cae:	21 96       	adiw	r28, 0x01	; 1
     cb0:	f5 01       	movw	r30, r10
     cb2:	11 81       	ldd	r17, Z+1	; 0x01
     cb4:	01 e0       	ldi	r16, 0x01	; 1
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <strtol+0x5e>
     cb8:	1b 32       	cpi	r17, 0x2B	; 43
     cba:	21 f4       	brne	.+8      	; 0xcc4 <strtol+0x5c>
     cbc:	e5 01       	movw	r28, r10
     cbe:	22 96       	adiw	r28, 0x02	; 2
     cc0:	f5 01       	movw	r30, r10
     cc2:	11 81       	ldd	r17, Z+1	; 0x01
     cc4:	00 e0       	ldi	r16, 0x00	; 0
     cc6:	e1 14       	cp	r14, r1
     cc8:	f1 04       	cpc	r15, r1
     cca:	09 f1       	breq	.+66     	; 0xd0e <strtol+0xa6>
     ccc:	f0 e1       	ldi	r31, 0x10	; 16
     cce:	ef 16       	cp	r14, r31
     cd0:	f1 04       	cpc	r15, r1
     cd2:	29 f4       	brne	.+10     	; 0xcde <strtol+0x76>
     cd4:	3e c0       	rjmp	.+124    	; 0xd52 <strtol+0xea>
     cd6:	10 e3       	ldi	r17, 0x30	; 48
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	21 f1       	breq	.+72     	; 0xd26 <strtol+0xbe>
     cde:	28 e0       	ldi	r18, 0x08	; 8
     ce0:	e2 16       	cp	r14, r18
     ce2:	f1 04       	cpc	r15, r1
     ce4:	01 f1       	breq	.+64     	; 0xd26 <strtol+0xbe>
     ce6:	54 f4       	brge	.+20     	; 0xcfc <strtol+0x94>
     ce8:	e2 e0       	ldi	r30, 0x02	; 2
     cea:	ee 16       	cp	r14, r30
     cec:	f1 04       	cpc	r15, r1
     cee:	21 f5       	brne	.+72     	; 0xd38 <strtol+0xd0>
     cf0:	81 2c       	mov	r8, r1
     cf2:	91 2c       	mov	r9, r1
     cf4:	a1 2c       	mov	r10, r1
     cf6:	b0 e4       	ldi	r27, 0x40	; 64
     cf8:	bb 2e       	mov	r11, r27
     cfa:	3d c0       	rjmp	.+122    	; 0xd76 <strtol+0x10e>
     cfc:	fa e0       	ldi	r31, 0x0A	; 10
     cfe:	ef 16       	cp	r14, r31
     d00:	f1 04       	cpc	r15, r1
     d02:	39 f0       	breq	.+14     	; 0xd12 <strtol+0xaa>
     d04:	20 e1       	ldi	r18, 0x10	; 16
     d06:	e2 16       	cp	r14, r18
     d08:	f1 04       	cpc	r15, r1
     d0a:	b1 f4       	brne	.+44     	; 0xd38 <strtol+0xd0>
     d0c:	2f c0       	rjmp	.+94     	; 0xd6c <strtol+0x104>
     d0e:	10 33       	cpi	r17, 0x30	; 48
     d10:	11 f1       	breq	.+68     	; 0xd56 <strtol+0xee>
     d12:	fa e0       	ldi	r31, 0x0A	; 10
     d14:	ef 2e       	mov	r14, r31
     d16:	f1 2c       	mov	r15, r1
     d18:	ac ec       	ldi	r26, 0xCC	; 204
     d1a:	8a 2e       	mov	r8, r26
     d1c:	98 2c       	mov	r9, r8
     d1e:	a8 2c       	mov	r10, r8
     d20:	ac e0       	ldi	r26, 0x0C	; 12
     d22:	ba 2e       	mov	r11, r26
     d24:	28 c0       	rjmp	.+80     	; 0xd76 <strtol+0x10e>
     d26:	78 e0       	ldi	r23, 0x08	; 8
     d28:	e7 2e       	mov	r14, r23
     d2a:	f1 2c       	mov	r15, r1
     d2c:	81 2c       	mov	r8, r1
     d2e:	91 2c       	mov	r9, r1
     d30:	a1 2c       	mov	r10, r1
     d32:	e0 e1       	ldi	r30, 0x10	; 16
     d34:	be 2e       	mov	r11, r30
     d36:	1f c0       	rjmp	.+62     	; 0xd76 <strtol+0x10e>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e8       	ldi	r25, 0x80	; 128
     d40:	97 01       	movw	r18, r14
     d42:	0f 2c       	mov	r0, r15
     d44:	00 0c       	add	r0, r0
     d46:	44 0b       	sbc	r20, r20
     d48:	55 0b       	sbc	r21, r21
     d4a:	a9 d3       	rcall	.+1874   	; 0x149e <__udivmodsi4>
     d4c:	49 01       	movw	r8, r18
     d4e:	5a 01       	movw	r10, r20
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <strtol+0x10e>
     d52:	10 33       	cpi	r17, 0x30	; 48
     d54:	59 f4       	brne	.+22     	; 0xd6c <strtol+0x104>
     d56:	88 81       	ld	r24, Y
     d58:	8f 7d       	andi	r24, 0xDF	; 223
     d5a:	88 35       	cpi	r24, 0x58	; 88
     d5c:	09 f0       	breq	.+2      	; 0xd60 <strtol+0xf8>
     d5e:	bb cf       	rjmp	.-138    	; 0xcd6 <strtol+0x6e>
     d60:	19 81       	ldd	r17, Y+1	; 0x01
     d62:	22 96       	adiw	r28, 0x02	; 2
     d64:	02 60       	ori	r16, 0x02	; 2
     d66:	80 e1       	ldi	r24, 0x10	; 16
     d68:	e8 2e       	mov	r14, r24
     d6a:	f1 2c       	mov	r15, r1
     d6c:	81 2c       	mov	r8, r1
     d6e:	91 2c       	mov	r9, r1
     d70:	a1 2c       	mov	r10, r1
     d72:	68 e0       	ldi	r22, 0x08	; 8
     d74:	b6 2e       	mov	r11, r22
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	27 01       	movw	r4, r14
     d80:	0f 2c       	mov	r0, r15
     d82:	00 0c       	add	r0, r0
     d84:	66 08       	sbc	r6, r6
     d86:	77 08       	sbc	r7, r7
     d88:	fe 01       	movw	r30, r28
     d8a:	50 ed       	ldi	r21, 0xD0	; 208
     d8c:	35 2e       	mov	r3, r21
     d8e:	31 0e       	add	r3, r17
     d90:	29 e0       	ldi	r18, 0x09	; 9
     d92:	23 15       	cp	r18, r3
     d94:	70 f4       	brcc	.+28     	; 0xdb2 <strtol+0x14a>
     d96:	2f eb       	ldi	r18, 0xBF	; 191
     d98:	21 0f       	add	r18, r17
     d9a:	2a 31       	cpi	r18, 0x1A	; 26
     d9c:	18 f4       	brcc	.+6      	; 0xda4 <strtol+0x13c>
     d9e:	39 ec       	ldi	r19, 0xC9	; 201
     da0:	33 2e       	mov	r3, r19
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <strtol+0x148>
     da4:	2f e9       	ldi	r18, 0x9F	; 159
     da6:	21 0f       	add	r18, r17
     da8:	2a 31       	cpi	r18, 0x1A	; 26
     daa:	10 f5       	brcc	.+68     	; 0xdf0 <strtol+0x188>
     dac:	29 ea       	ldi	r18, 0xA9	; 169
     dae:	32 2e       	mov	r3, r18
     db0:	31 0e       	add	r3, r17
     db2:	23 2d       	mov	r18, r3
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	2e 15       	cp	r18, r14
     db8:	3f 05       	cpc	r19, r15
     dba:	d4 f4       	brge	.+52     	; 0xdf0 <strtol+0x188>
     dbc:	47 fd       	sbrc	r20, 7
     dbe:	15 c0       	rjmp	.+42     	; 0xdea <strtol+0x182>
     dc0:	86 16       	cp	r8, r22
     dc2:	97 06       	cpc	r9, r23
     dc4:	a8 06       	cpc	r10, r24
     dc6:	b9 06       	cpc	r11, r25
     dc8:	68 f0       	brcs	.+26     	; 0xde4 <strtol+0x17c>
     dca:	a3 01       	movw	r20, r6
     dcc:	92 01       	movw	r18, r4
     dce:	58 d3       	rcall	.+1712   	; 0x1480 <__mulsi3>
     dd0:	63 0d       	add	r22, r3
     dd2:	71 1d       	adc	r23, r1
     dd4:	81 1d       	adc	r24, r1
     dd6:	91 1d       	adc	r25, r1
     dd8:	61 30       	cpi	r22, 0x01	; 1
     dda:	71 05       	cpc	r23, r1
     ddc:	81 05       	cpc	r24, r1
     dde:	20 e8       	ldi	r18, 0x80	; 128
     de0:	92 07       	cpc	r25, r18
     de2:	10 f0       	brcs	.+4      	; 0xde8 <strtol+0x180>
     de4:	4f ef       	ldi	r20, 0xFF	; 255
     de6:	01 c0       	rjmp	.+2      	; 0xdea <strtol+0x182>
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	21 96       	adiw	r28, 0x01	; 1
     dec:	10 81       	ld	r17, Z
     dee:	cc cf       	rjmp	.-104    	; 0xd88 <strtol+0x120>
     df0:	20 2f       	mov	r18, r16
     df2:	21 70       	andi	r18, 0x01	; 1
     df4:	c1 14       	cp	r12, r1
     df6:	d1 04       	cpc	r13, r1
     df8:	71 f0       	breq	.+28     	; 0xe16 <strtol+0x1ae>
     dfa:	44 23       	and	r20, r20
     dfc:	29 f0       	breq	.+10     	; 0xe08 <strtol+0x1a0>
     dfe:	21 97       	sbiw	r28, 0x01	; 1
     e00:	f6 01       	movw	r30, r12
     e02:	c0 83       	st	Z, r28
     e04:	d1 83       	std	Z+1, r29	; 0x01
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <strtol+0x1ae>
     e08:	01 ff       	sbrs	r16, 1
     e0a:	19 c0       	rjmp	.+50     	; 0xe3e <strtol+0x1d6>
     e0c:	22 97       	sbiw	r28, 0x02	; 2
     e0e:	f6 01       	movw	r30, r12
     e10:	c0 83       	st	Z, r28
     e12:	d1 83       	std	Z+1, r29	; 0x01
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <strtol+0x1d6>
     e16:	47 ff       	sbrs	r20, 7
     e18:	12 c0       	rjmp	.+36     	; 0xe3e <strtol+0x1d6>
     e1a:	22 23       	and	r18, r18
     e1c:	29 f0       	breq	.+10     	; 0xe28 <strtol+0x1c0>
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e8       	ldi	r25, 0x80	; 128
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <strtol+0x1c8>
     e28:	6f ef       	ldi	r22, 0xFF	; 255
     e2a:	7f ef       	ldi	r23, 0xFF	; 255
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f e7       	ldi	r25, 0x7F	; 127
     e30:	22 e2       	ldi	r18, 0x22	; 34
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	20 93 ab 3e 	sts	0x3EAB, r18	; 0x803eab <errno>
     e38:	30 93 ac 3e 	sts	0x3EAC, r19	; 0x803eac <errno+0x1>
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <strtol+0x1e8>
     e3e:	22 23       	and	r18, r18
     e40:	81 f0       	breq	.+32     	; 0xe62 <strtol+0x1fa>
     e42:	90 95       	com	r25
     e44:	80 95       	com	r24
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	46 2f       	mov	r20, r22
     e52:	37 2f       	mov	r19, r23
     e54:	28 2f       	mov	r18, r24
     e56:	12 c0       	rjmp	.+36     	; 0xe7c <strtol+0x214>
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <strtol+0x214>
     e62:	97 ff       	sbrs	r25, 7
     e64:	f5 cf       	rjmp	.-22     	; 0xe50 <strtol+0x1e8>
     e66:	82 e2       	ldi	r24, 0x22	; 34
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	80 93 ab 3e 	sts	0x3EAB, r24	; 0x803eab <errno>
     e6e:	90 93 ac 3e 	sts	0x3EAC, r25	; 0x803eac <errno+0x1>
     e72:	6f ef       	ldi	r22, 0xFF	; 255
     e74:	7f ef       	ldi	r23, 0xFF	; 255
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f e7       	ldi	r25, 0x7F	; 127
     e7a:	ea cf       	rjmp	.-44     	; 0xe50 <strtol+0x1e8>
     e7c:	64 2f       	mov	r22, r20
     e7e:	73 2f       	mov	r23, r19
     e80:	82 2f       	mov	r24, r18
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	e1 e1       	ldi	r30, 0x11	; 17
     e88:	50 c3       	rjmp	.+1696   	; 0x152a <__epilogue_restores__+0x2>

00000e8a <isspace>:
     e8a:	91 11       	cpse	r25, r1
     e8c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__ctype_isfalse>
     e90:	80 32       	cpi	r24, 0x20	; 32
     e92:	19 f0       	breq	.+6      	; 0xe9a <isspace+0x10>
     e94:	89 50       	subi	r24, 0x09	; 9
     e96:	85 50       	subi	r24, 0x05	; 5
     e98:	c8 f7       	brcc	.-14     	; 0xe8c <isspace+0x2>
     e9a:	08 95       	ret

00000e9c <strtok>:
     e9c:	42 e0       	ldi	r20, 0x02	; 2
     e9e:	5e e3       	ldi	r21, 0x3E	; 62
     ea0:	11 d0       	rcall	.+34     	; 0xec4 <strtok_r>
     ea2:	08 95       	ret

00000ea4 <strcmp>:
     ea4:	fb 01       	movw	r30, r22
     ea6:	dc 01       	movw	r26, r24
     ea8:	8d 91       	ld	r24, X+
     eaa:	01 90       	ld	r0, Z+
     eac:	80 19       	sub	r24, r0
     eae:	01 10       	cpse	r0, r1
     eb0:	d9 f3       	breq	.-10     	; 0xea8 <strcmp+0x4>
     eb2:	99 0b       	sbc	r25, r25
     eb4:	08 95       	ret

00000eb6 <strcpy>:
     eb6:	fb 01       	movw	r30, r22
     eb8:	dc 01       	movw	r26, r24
     eba:	01 90       	ld	r0, Z+
     ebc:	0d 92       	st	X+, r0
     ebe:	00 20       	and	r0, r0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <strcpy+0x4>
     ec2:	08 95       	ret

00000ec4 <strtok_r>:
     ec4:	fa 01       	movw	r30, r20
     ec6:	a1 91       	ld	r26, Z+
     ec8:	b0 81       	ld	r27, Z
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	19 f4       	brne	.+6      	; 0xed4 <strtok_r+0x10>
     ece:	10 97       	sbiw	r26, 0x00	; 0
     ed0:	e1 f0       	breq	.+56     	; 0xf0a <strtok_r+0x46>
     ed2:	cd 01       	movw	r24, r26
     ed4:	dc 01       	movw	r26, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0d 90       	ld	r0, X+
     eda:	00 20       	and	r0, r0
     edc:	11 f4       	brne	.+4      	; 0xee2 <strtok_r+0x1e>
     ede:	c0 01       	movw	r24, r0
     ee0:	13 c0       	rjmp	.+38     	; 0xf08 <strtok_r+0x44>
     ee2:	fb 01       	movw	r30, r22
     ee4:	21 91       	ld	r18, Z+
     ee6:	22 23       	and	r18, r18
     ee8:	19 f0       	breq	.+6      	; 0xef0 <strtok_r+0x2c>
     eea:	20 15       	cp	r18, r0
     eec:	d9 f7       	brne	.-10     	; 0xee4 <strtok_r+0x20>
     eee:	f3 cf       	rjmp	.-26     	; 0xed6 <strtok_r+0x12>
     ef0:	fb 01       	movw	r30, r22
     ef2:	21 91       	ld	r18, Z+
     ef4:	20 15       	cp	r18, r0
     ef6:	19 f4       	brne	.+6      	; 0xefe <strtok_r+0x3a>
     ef8:	1e 92       	st	-X, r1
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <strtok_r+0x46>
     efe:	22 23       	and	r18, r18
     f00:	c1 f7       	brne	.-16     	; 0xef2 <strtok_r+0x2e>
     f02:	0d 90       	ld	r0, X+
     f04:	00 20       	and	r0, r0
     f06:	a1 f7       	brne	.-24     	; 0xef0 <strtok_r+0x2c>
     f08:	d0 01       	movw	r26, r0
     f0a:	fa 01       	movw	r30, r20
     f0c:	a1 93       	st	Z+, r26
     f0e:	b0 83       	st	Z, r27
     f10:	08 95       	ret

00000f12 <printf>:
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ee e8       	ldi	r30, 0x8E	; 142
     f18:	f7 e0       	ldi	r31, 0x07	; 7
     f1a:	fd c2       	rjmp	.+1530   	; 0x1516 <__prologue_saves__+0x20>
     f1c:	ae 01       	movw	r20, r28
     f1e:	4b 5f       	subi	r20, 0xFB	; 251
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	fa 01       	movw	r30, r20
     f24:	61 91       	ld	r22, Z+
     f26:	71 91       	ld	r23, Z+
     f28:	af 01       	movw	r20, r30
     f2a:	80 91 af 3e 	lds	r24, 0x3EAF	; 0x803eaf <__iob+0x2>
     f2e:	90 91 b0 3e 	lds	r25, 0x3EB0	; 0x803eb0 <__iob+0x3>
     f32:	21 d0       	rcall	.+66     	; 0xf76 <vfprintf>
     f34:	e2 e0       	ldi	r30, 0x02	; 2
     f36:	08 c3       	rjmp	.+1552   	; 0x1548 <__epilogue_restores__+0x20>

00000f38 <sprintf>:
     f38:	ae e0       	ldi	r26, 0x0E	; 14
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 ea       	ldi	r30, 0xA1	; 161
     f3e:	f7 e0       	ldi	r31, 0x07	; 7
     f40:	e8 c2       	rjmp	.+1488   	; 0x1512 <__prologue_saves__+0x1c>
     f42:	0d 89       	ldd	r16, Y+21	; 0x15
     f44:	1e 89       	ldd	r17, Y+22	; 0x16
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	8c 83       	std	Y+4, r24	; 0x04
     f4a:	09 83       	std	Y+1, r16	; 0x01
     f4c:	1a 83       	std	Y+2, r17	; 0x02
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f e7       	ldi	r25, 0x7F	; 127
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	ae 01       	movw	r20, r28
     f58:	47 5e       	subi	r20, 0xE7	; 231
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	6f 89       	ldd	r22, Y+23	; 0x17
     f5e:	78 8d       	ldd	r23, Y+24	; 0x18
     f60:	ce 01       	movw	r24, r28
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	08 d0       	rcall	.+16     	; 0xf76 <vfprintf>
     f66:	ef 81       	ldd	r30, Y+7	; 0x07
     f68:	f8 85       	ldd	r31, Y+8	; 0x08
     f6a:	e0 0f       	add	r30, r16
     f6c:	f1 1f       	adc	r31, r17
     f6e:	10 82       	st	Z, r1
     f70:	2e 96       	adiw	r28, 0x0e	; 14
     f72:	e4 e0       	ldi	r30, 0x04	; 4
     f74:	e7 c2       	rjmp	.+1486   	; 0x1544 <__epilogue_restores__+0x1c>

00000f76 <vfprintf>:
     f76:	ab e0       	ldi	r26, 0x0B	; 11
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e0 ec       	ldi	r30, 0xC0	; 192
     f7c:	f7 e0       	ldi	r31, 0x07	; 7
     f7e:	bb c2       	rjmp	.+1398   	; 0x14f6 <__prologue_saves__>
     f80:	6c 01       	movw	r12, r24
     f82:	7b 01       	movw	r14, r22
     f84:	8a 01       	movw	r16, r20
     f86:	fc 01       	movw	r30, r24
     f88:	16 82       	std	Z+6, r1	; 0x06
     f8a:	17 82       	std	Z+7, r1	; 0x07
     f8c:	83 81       	ldd	r24, Z+3	; 0x03
     f8e:	81 ff       	sbrs	r24, 1
     f90:	bf c1       	rjmp	.+894    	; 0x1310 <vfprintf+0x39a>
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	3c 01       	movw	r6, r24
     f98:	f6 01       	movw	r30, r12
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	f7 01       	movw	r30, r14
     f9e:	93 fd       	sbrc	r25, 3
     fa0:	85 91       	lpm	r24, Z+
     fa2:	93 ff       	sbrs	r25, 3
     fa4:	81 91       	ld	r24, Z+
     fa6:	7f 01       	movw	r14, r30
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <vfprintf+0x38>
     fac:	ad c1       	rjmp	.+858    	; 0x1308 <vfprintf+0x392>
     fae:	85 32       	cpi	r24, 0x25	; 37
     fb0:	39 f4       	brne	.+14     	; 0xfc0 <vfprintf+0x4a>
     fb2:	93 fd       	sbrc	r25, 3
     fb4:	85 91       	lpm	r24, Z+
     fb6:	93 ff       	sbrs	r25, 3
     fb8:	81 91       	ld	r24, Z+
     fba:	7f 01       	movw	r14, r30
     fbc:	85 32       	cpi	r24, 0x25	; 37
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <vfprintf+0x52>
     fc0:	b6 01       	movw	r22, r12
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	c3 d1       	rcall	.+902    	; 0x134c <fputc>
     fc6:	e8 cf       	rjmp	.-48     	; 0xf98 <vfprintf+0x22>
     fc8:	91 2c       	mov	r9, r1
     fca:	21 2c       	mov	r2, r1
     fcc:	31 2c       	mov	r3, r1
     fce:	ff e1       	ldi	r31, 0x1F	; 31
     fd0:	f3 15       	cp	r31, r3
     fd2:	d8 f0       	brcs	.+54     	; 0x100a <vfprintf+0x94>
     fd4:	8b 32       	cpi	r24, 0x2B	; 43
     fd6:	79 f0       	breq	.+30     	; 0xff6 <vfprintf+0x80>
     fd8:	38 f4       	brcc	.+14     	; 0xfe8 <vfprintf+0x72>
     fda:	80 32       	cpi	r24, 0x20	; 32
     fdc:	79 f0       	breq	.+30     	; 0xffc <vfprintf+0x86>
     fde:	83 32       	cpi	r24, 0x23	; 35
     fe0:	a1 f4       	brne	.+40     	; 0x100a <vfprintf+0x94>
     fe2:	23 2d       	mov	r18, r3
     fe4:	20 61       	ori	r18, 0x10	; 16
     fe6:	1d c0       	rjmp	.+58     	; 0x1022 <vfprintf+0xac>
     fe8:	8d 32       	cpi	r24, 0x2D	; 45
     fea:	61 f0       	breq	.+24     	; 0x1004 <vfprintf+0x8e>
     fec:	80 33       	cpi	r24, 0x30	; 48
     fee:	69 f4       	brne	.+26     	; 0x100a <vfprintf+0x94>
     ff0:	23 2d       	mov	r18, r3
     ff2:	21 60       	ori	r18, 0x01	; 1
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <vfprintf+0xac>
     ff6:	83 2d       	mov	r24, r3
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	38 2e       	mov	r3, r24
     ffc:	e3 2d       	mov	r30, r3
     ffe:	e4 60       	ori	r30, 0x04	; 4
    1000:	3e 2e       	mov	r3, r30
    1002:	2a c0       	rjmp	.+84     	; 0x1058 <vfprintf+0xe2>
    1004:	f3 2d       	mov	r31, r3
    1006:	f8 60       	ori	r31, 0x08	; 8
    1008:	1d c0       	rjmp	.+58     	; 0x1044 <vfprintf+0xce>
    100a:	37 fc       	sbrc	r3, 7
    100c:	2d c0       	rjmp	.+90     	; 0x1068 <vfprintf+0xf2>
    100e:	20 ed       	ldi	r18, 0xD0	; 208
    1010:	28 0f       	add	r18, r24
    1012:	2a 30       	cpi	r18, 0x0A	; 10
    1014:	40 f0       	brcs	.+16     	; 0x1026 <vfprintf+0xb0>
    1016:	8e 32       	cpi	r24, 0x2E	; 46
    1018:	b9 f4       	brne	.+46     	; 0x1048 <vfprintf+0xd2>
    101a:	36 fc       	sbrc	r3, 6
    101c:	75 c1       	rjmp	.+746    	; 0x1308 <vfprintf+0x392>
    101e:	23 2d       	mov	r18, r3
    1020:	20 64       	ori	r18, 0x40	; 64
    1022:	32 2e       	mov	r3, r18
    1024:	19 c0       	rjmp	.+50     	; 0x1058 <vfprintf+0xe2>
    1026:	36 fe       	sbrs	r3, 6
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <vfprintf+0xc0>
    102a:	8a e0       	ldi	r24, 0x0A	; 10
    102c:	98 9e       	mul	r9, r24
    102e:	20 0d       	add	r18, r0
    1030:	11 24       	eor	r1, r1
    1032:	92 2e       	mov	r9, r18
    1034:	11 c0       	rjmp	.+34     	; 0x1058 <vfprintf+0xe2>
    1036:	ea e0       	ldi	r30, 0x0A	; 10
    1038:	2e 9e       	mul	r2, r30
    103a:	20 0d       	add	r18, r0
    103c:	11 24       	eor	r1, r1
    103e:	22 2e       	mov	r2, r18
    1040:	f3 2d       	mov	r31, r3
    1042:	f0 62       	ori	r31, 0x20	; 32
    1044:	3f 2e       	mov	r3, r31
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <vfprintf+0xe2>
    1048:	8c 36       	cpi	r24, 0x6C	; 108
    104a:	21 f4       	brne	.+8      	; 0x1054 <vfprintf+0xde>
    104c:	83 2d       	mov	r24, r3
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	38 2e       	mov	r3, r24
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0xe2>
    1054:	88 36       	cpi	r24, 0x68	; 104
    1056:	41 f4       	brne	.+16     	; 0x1068 <vfprintf+0xf2>
    1058:	f7 01       	movw	r30, r14
    105a:	93 fd       	sbrc	r25, 3
    105c:	85 91       	lpm	r24, Z+
    105e:	93 ff       	sbrs	r25, 3
    1060:	81 91       	ld	r24, Z+
    1062:	7f 01       	movw	r14, r30
    1064:	81 11       	cpse	r24, r1
    1066:	b3 cf       	rjmp	.-154    	; 0xfce <vfprintf+0x58>
    1068:	98 2f       	mov	r25, r24
    106a:	9f 7d       	andi	r25, 0xDF	; 223
    106c:	95 54       	subi	r25, 0x45	; 69
    106e:	93 30       	cpi	r25, 0x03	; 3
    1070:	28 f4       	brcc	.+10     	; 0x107c <vfprintf+0x106>
    1072:	0c 5f       	subi	r16, 0xFC	; 252
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	9f e3       	ldi	r25, 0x3F	; 63
    1078:	99 83       	std	Y+1, r25	; 0x01
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <vfprintf+0x120>
    107c:	83 36       	cpi	r24, 0x63	; 99
    107e:	31 f0       	breq	.+12     	; 0x108c <vfprintf+0x116>
    1080:	83 37       	cpi	r24, 0x73	; 115
    1082:	71 f0       	breq	.+28     	; 0x10a0 <vfprintf+0x12a>
    1084:	83 35       	cpi	r24, 0x53	; 83
    1086:	09 f0       	breq	.+2      	; 0x108a <vfprintf+0x114>
    1088:	55 c0       	rjmp	.+170    	; 0x1134 <vfprintf+0x1be>
    108a:	20 c0       	rjmp	.+64     	; 0x10cc <vfprintf+0x156>
    108c:	f8 01       	movw	r30, r16
    108e:	80 81       	ld	r24, Z
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	0e 5f       	subi	r16, 0xFE	; 254
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	88 24       	eor	r8, r8
    1098:	83 94       	inc	r8
    109a:	91 2c       	mov	r9, r1
    109c:	53 01       	movw	r10, r6
    109e:	12 c0       	rjmp	.+36     	; 0x10c4 <vfprintf+0x14e>
    10a0:	28 01       	movw	r4, r16
    10a2:	f2 e0       	ldi	r31, 0x02	; 2
    10a4:	4f 0e       	add	r4, r31
    10a6:	51 1c       	adc	r5, r1
    10a8:	f8 01       	movw	r30, r16
    10aa:	a0 80       	ld	r10, Z
    10ac:	b1 80       	ldd	r11, Z+1	; 0x01
    10ae:	36 fe       	sbrs	r3, 6
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <vfprintf+0x142>
    10b2:	69 2d       	mov	r22, r9
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vfprintf+0x146>
    10b8:	6f ef       	ldi	r22, 0xFF	; 255
    10ba:	7f ef       	ldi	r23, 0xFF	; 255
    10bc:	c5 01       	movw	r24, r10
    10be:	3b d1       	rcall	.+630    	; 0x1336 <strnlen>
    10c0:	4c 01       	movw	r8, r24
    10c2:	82 01       	movw	r16, r4
    10c4:	f3 2d       	mov	r31, r3
    10c6:	ff 77       	andi	r31, 0x7F	; 127
    10c8:	3f 2e       	mov	r3, r31
    10ca:	15 c0       	rjmp	.+42     	; 0x10f6 <vfprintf+0x180>
    10cc:	28 01       	movw	r4, r16
    10ce:	22 e0       	ldi	r18, 0x02	; 2
    10d0:	42 0e       	add	r4, r18
    10d2:	51 1c       	adc	r5, r1
    10d4:	f8 01       	movw	r30, r16
    10d6:	a0 80       	ld	r10, Z
    10d8:	b1 80       	ldd	r11, Z+1	; 0x01
    10da:	36 fe       	sbrs	r3, 6
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <vfprintf+0x16e>
    10de:	69 2d       	mov	r22, r9
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vfprintf+0x172>
    10e4:	6f ef       	ldi	r22, 0xFF	; 255
    10e6:	7f ef       	ldi	r23, 0xFF	; 255
    10e8:	c5 01       	movw	r24, r10
    10ea:	1a d1       	rcall	.+564    	; 0x1320 <strnlen_P>
    10ec:	4c 01       	movw	r8, r24
    10ee:	f3 2d       	mov	r31, r3
    10f0:	f0 68       	ori	r31, 0x80	; 128
    10f2:	3f 2e       	mov	r3, r31
    10f4:	82 01       	movw	r16, r4
    10f6:	33 fc       	sbrc	r3, 3
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <vfprintf+0x1b6>
    10fa:	82 2d       	mov	r24, r2
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	88 16       	cp	r8, r24
    1100:	99 06       	cpc	r9, r25
    1102:	a0 f4       	brcc	.+40     	; 0x112c <vfprintf+0x1b6>
    1104:	b6 01       	movw	r22, r12
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	20 d1       	rcall	.+576    	; 0x134c <fputc>
    110c:	2a 94       	dec	r2
    110e:	f5 cf       	rjmp	.-22     	; 0x10fa <vfprintf+0x184>
    1110:	f5 01       	movw	r30, r10
    1112:	37 fc       	sbrc	r3, 7
    1114:	85 91       	lpm	r24, Z+
    1116:	37 fe       	sbrs	r3, 7
    1118:	81 91       	ld	r24, Z+
    111a:	5f 01       	movw	r10, r30
    111c:	b6 01       	movw	r22, r12
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	15 d1       	rcall	.+554    	; 0x134c <fputc>
    1122:	21 10       	cpse	r2, r1
    1124:	2a 94       	dec	r2
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	82 1a       	sub	r8, r18
    112a:	91 08       	sbc	r9, r1
    112c:	81 14       	cp	r8, r1
    112e:	91 04       	cpc	r9, r1
    1130:	79 f7       	brne	.-34     	; 0x1110 <vfprintf+0x19a>
    1132:	e1 c0       	rjmp	.+450    	; 0x12f6 <vfprintf+0x380>
    1134:	84 36       	cpi	r24, 0x64	; 100
    1136:	11 f0       	breq	.+4      	; 0x113c <vfprintf+0x1c6>
    1138:	89 36       	cpi	r24, 0x69	; 105
    113a:	39 f5       	brne	.+78     	; 0x118a <vfprintf+0x214>
    113c:	f8 01       	movw	r30, r16
    113e:	37 fe       	sbrs	r3, 7
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <vfprintf+0x1da>
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0c 5f       	subi	r16, 0xFC	; 252
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <vfprintf+0x1ea>
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	07 2e       	mov	r0, r23
    1156:	00 0c       	add	r0, r0
    1158:	88 0b       	sbc	r24, r24
    115a:	99 0b       	sbc	r25, r25
    115c:	0e 5f       	subi	r16, 0xFE	; 254
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	f3 2d       	mov	r31, r3
    1162:	ff 76       	andi	r31, 0x6F	; 111
    1164:	3f 2e       	mov	r3, r31
    1166:	97 ff       	sbrs	r25, 7
    1168:	09 c0       	rjmp	.+18     	; 0x117c <vfprintf+0x206>
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	f0 68       	ori	r31, 0x80	; 128
    117a:	3f 2e       	mov	r3, r31
    117c:	2a e0       	ldi	r18, 0x0A	; 10
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	a3 01       	movw	r20, r6
    1182:	20 d1       	rcall	.+576    	; 0x13c4 <__ultoa_invert>
    1184:	88 2e       	mov	r8, r24
    1186:	86 18       	sub	r8, r6
    1188:	44 c0       	rjmp	.+136    	; 0x1212 <vfprintf+0x29c>
    118a:	85 37       	cpi	r24, 0x75	; 117
    118c:	31 f4       	brne	.+12     	; 0x119a <vfprintf+0x224>
    118e:	23 2d       	mov	r18, r3
    1190:	2f 7e       	andi	r18, 0xEF	; 239
    1192:	b2 2e       	mov	r11, r18
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	25 c0       	rjmp	.+74     	; 0x11e4 <vfprintf+0x26e>
    119a:	93 2d       	mov	r25, r3
    119c:	99 7f       	andi	r25, 0xF9	; 249
    119e:	b9 2e       	mov	r11, r25
    11a0:	8f 36       	cpi	r24, 0x6F	; 111
    11a2:	c1 f0       	breq	.+48     	; 0x11d4 <vfprintf+0x25e>
    11a4:	18 f4       	brcc	.+6      	; 0x11ac <vfprintf+0x236>
    11a6:	88 35       	cpi	r24, 0x58	; 88
    11a8:	79 f0       	breq	.+30     	; 0x11c8 <vfprintf+0x252>
    11aa:	ae c0       	rjmp	.+348    	; 0x1308 <vfprintf+0x392>
    11ac:	80 37       	cpi	r24, 0x70	; 112
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <vfprintf+0x240>
    11b0:	88 37       	cpi	r24, 0x78	; 120
    11b2:	21 f0       	breq	.+8      	; 0x11bc <vfprintf+0x246>
    11b4:	a9 c0       	rjmp	.+338    	; 0x1308 <vfprintf+0x392>
    11b6:	e9 2f       	mov	r30, r25
    11b8:	e0 61       	ori	r30, 0x10	; 16
    11ba:	be 2e       	mov	r11, r30
    11bc:	b4 fe       	sbrs	r11, 4
    11be:	0d c0       	rjmp	.+26     	; 0x11da <vfprintf+0x264>
    11c0:	fb 2d       	mov	r31, r11
    11c2:	f4 60       	ori	r31, 0x04	; 4
    11c4:	bf 2e       	mov	r11, r31
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <vfprintf+0x264>
    11c8:	34 fe       	sbrs	r3, 4
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <vfprintf+0x26a>
    11cc:	29 2f       	mov	r18, r25
    11ce:	26 60       	ori	r18, 0x06	; 6
    11d0:	b2 2e       	mov	r11, r18
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <vfprintf+0x26a>
    11d4:	28 e0       	ldi	r18, 0x08	; 8
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <vfprintf+0x26e>
    11da:	20 e1       	ldi	r18, 0x10	; 16
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <vfprintf+0x26e>
    11e0:	20 e1       	ldi	r18, 0x10	; 16
    11e2:	32 e0       	ldi	r19, 0x02	; 2
    11e4:	f8 01       	movw	r30, r16
    11e6:	b7 fe       	sbrs	r11, 7
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <vfprintf+0x282>
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	93 81       	ldd	r25, Z+3	; 0x03
    11f2:	0c 5f       	subi	r16, 0xFC	; 252
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <vfprintf+0x28e>
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 5f       	subi	r16, 0xFE	; 254
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	a3 01       	movw	r20, r6
    1206:	de d0       	rcall	.+444    	; 0x13c4 <__ultoa_invert>
    1208:	88 2e       	mov	r8, r24
    120a:	86 18       	sub	r8, r6
    120c:	fb 2d       	mov	r31, r11
    120e:	ff 77       	andi	r31, 0x7F	; 127
    1210:	3f 2e       	mov	r3, r31
    1212:	36 fe       	sbrs	r3, 6
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <vfprintf+0x2ba>
    1216:	23 2d       	mov	r18, r3
    1218:	2e 7f       	andi	r18, 0xFE	; 254
    121a:	a2 2e       	mov	r10, r18
    121c:	89 14       	cp	r8, r9
    121e:	58 f4       	brcc	.+22     	; 0x1236 <vfprintf+0x2c0>
    1220:	34 fe       	sbrs	r3, 4
    1222:	0b c0       	rjmp	.+22     	; 0x123a <vfprintf+0x2c4>
    1224:	32 fc       	sbrc	r3, 2
    1226:	09 c0       	rjmp	.+18     	; 0x123a <vfprintf+0x2c4>
    1228:	83 2d       	mov	r24, r3
    122a:	8e 7e       	andi	r24, 0xEE	; 238
    122c:	a8 2e       	mov	r10, r24
    122e:	05 c0       	rjmp	.+10     	; 0x123a <vfprintf+0x2c4>
    1230:	b8 2c       	mov	r11, r8
    1232:	a3 2c       	mov	r10, r3
    1234:	03 c0       	rjmp	.+6      	; 0x123c <vfprintf+0x2c6>
    1236:	b8 2c       	mov	r11, r8
    1238:	01 c0       	rjmp	.+2      	; 0x123c <vfprintf+0x2c6>
    123a:	b9 2c       	mov	r11, r9
    123c:	a4 fe       	sbrs	r10, 4
    123e:	0f c0       	rjmp	.+30     	; 0x125e <vfprintf+0x2e8>
    1240:	fe 01       	movw	r30, r28
    1242:	e8 0d       	add	r30, r8
    1244:	f1 1d       	adc	r31, r1
    1246:	80 81       	ld	r24, Z
    1248:	80 33       	cpi	r24, 0x30	; 48
    124a:	21 f4       	brne	.+8      	; 0x1254 <vfprintf+0x2de>
    124c:	9a 2d       	mov	r25, r10
    124e:	99 7e       	andi	r25, 0xE9	; 233
    1250:	a9 2e       	mov	r10, r25
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <vfprintf+0x2f0>
    1254:	a2 fe       	sbrs	r10, 2
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0x2ee>
    1258:	b3 94       	inc	r11
    125a:	b3 94       	inc	r11
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <vfprintf+0x2f0>
    125e:	8a 2d       	mov	r24, r10
    1260:	86 78       	andi	r24, 0x86	; 134
    1262:	09 f0       	breq	.+2      	; 0x1266 <vfprintf+0x2f0>
    1264:	b3 94       	inc	r11
    1266:	a3 fc       	sbrc	r10, 3
    1268:	10 c0       	rjmp	.+32     	; 0x128a <vfprintf+0x314>
    126a:	a0 fe       	sbrs	r10, 0
    126c:	06 c0       	rjmp	.+12     	; 0x127a <vfprintf+0x304>
    126e:	b2 14       	cp	r11, r2
    1270:	80 f4       	brcc	.+32     	; 0x1292 <vfprintf+0x31c>
    1272:	28 0c       	add	r2, r8
    1274:	92 2c       	mov	r9, r2
    1276:	9b 18       	sub	r9, r11
    1278:	0d c0       	rjmp	.+26     	; 0x1294 <vfprintf+0x31e>
    127a:	b2 14       	cp	r11, r2
    127c:	58 f4       	brcc	.+22     	; 0x1294 <vfprintf+0x31e>
    127e:	b6 01       	movw	r22, r12
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	63 d0       	rcall	.+198    	; 0x134c <fputc>
    1286:	b3 94       	inc	r11
    1288:	f8 cf       	rjmp	.-16     	; 0x127a <vfprintf+0x304>
    128a:	b2 14       	cp	r11, r2
    128c:	18 f4       	brcc	.+6      	; 0x1294 <vfprintf+0x31e>
    128e:	2b 18       	sub	r2, r11
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x320>
    1292:	98 2c       	mov	r9, r8
    1294:	21 2c       	mov	r2, r1
    1296:	a4 fe       	sbrs	r10, 4
    1298:	0f c0       	rjmp	.+30     	; 0x12b8 <vfprintf+0x342>
    129a:	b6 01       	movw	r22, r12
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	55 d0       	rcall	.+170    	; 0x134c <fputc>
    12a2:	a2 fe       	sbrs	r10, 2
    12a4:	16 c0       	rjmp	.+44     	; 0x12d2 <vfprintf+0x35c>
    12a6:	a1 fc       	sbrc	r10, 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vfprintf+0x33a>
    12aa:	88 e7       	ldi	r24, 0x78	; 120
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x33e>
    12b0:	88 e5       	ldi	r24, 0x58	; 88
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b6 01       	movw	r22, r12
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <vfprintf+0x35a>
    12b8:	8a 2d       	mov	r24, r10
    12ba:	86 78       	andi	r24, 0x86	; 134
    12bc:	51 f0       	breq	.+20     	; 0x12d2 <vfprintf+0x35c>
    12be:	a1 fe       	sbrs	r10, 1
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x350>
    12c2:	8b e2       	ldi	r24, 0x2B	; 43
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <vfprintf+0x352>
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	a7 fc       	sbrc	r10, 7
    12ca:	8d e2       	ldi	r24, 0x2D	; 45
    12cc:	b6 01       	movw	r22, r12
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	3d d0       	rcall	.+122    	; 0x134c <fputc>
    12d2:	89 14       	cp	r8, r9
    12d4:	30 f4       	brcc	.+12     	; 0x12e2 <vfprintf+0x36c>
    12d6:	b6 01       	movw	r22, r12
    12d8:	80 e3       	ldi	r24, 0x30	; 48
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	37 d0       	rcall	.+110    	; 0x134c <fputc>
    12de:	9a 94       	dec	r9
    12e0:	f8 cf       	rjmp	.-16     	; 0x12d2 <vfprintf+0x35c>
    12e2:	8a 94       	dec	r8
    12e4:	f3 01       	movw	r30, r6
    12e6:	e8 0d       	add	r30, r8
    12e8:	f1 1d       	adc	r31, r1
    12ea:	80 81       	ld	r24, Z
    12ec:	b6 01       	movw	r22, r12
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	2d d0       	rcall	.+90     	; 0x134c <fputc>
    12f2:	81 10       	cpse	r8, r1
    12f4:	f6 cf       	rjmp	.-20     	; 0x12e2 <vfprintf+0x36c>
    12f6:	22 20       	and	r2, r2
    12f8:	09 f4       	brne	.+2      	; 0x12fc <vfprintf+0x386>
    12fa:	4e ce       	rjmp	.-868    	; 0xf98 <vfprintf+0x22>
    12fc:	b6 01       	movw	r22, r12
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	24 d0       	rcall	.+72     	; 0x134c <fputc>
    1304:	2a 94       	dec	r2
    1306:	f7 cf       	rjmp	.-18     	; 0x12f6 <vfprintf+0x380>
    1308:	f6 01       	movw	r30, r12
    130a:	86 81       	ldd	r24, Z+6	; 0x06
    130c:	97 81       	ldd	r25, Z+7	; 0x07
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x39e>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	2b 96       	adiw	r28, 0x0b	; 11
    1316:	e2 e1       	ldi	r30, 0x12	; 18
    1318:	07 c1       	rjmp	.+526    	; 0x1528 <__epilogue_restores__>

0000131a <__ctype_isfalse>:
    131a:	99 27       	eor	r25, r25
    131c:	88 27       	eor	r24, r24

0000131e <__ctype_istrue>:
    131e:	08 95       	ret

00001320 <strnlen_P>:
    1320:	fc 01       	movw	r30, r24
    1322:	05 90       	lpm	r0, Z+
    1324:	61 50       	subi	r22, 0x01	; 1
    1326:	70 40       	sbci	r23, 0x00	; 0
    1328:	01 10       	cpse	r0, r1
    132a:	d8 f7       	brcc	.-10     	; 0x1322 <strnlen_P+0x2>
    132c:	80 95       	com	r24
    132e:	90 95       	com	r25
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	08 95       	ret

00001336 <strnlen>:
    1336:	fc 01       	movw	r30, r24
    1338:	61 50       	subi	r22, 0x01	; 1
    133a:	70 40       	sbci	r23, 0x00	; 0
    133c:	01 90       	ld	r0, Z+
    133e:	01 10       	cpse	r0, r1
    1340:	d8 f7       	brcc	.-10     	; 0x1338 <strnlen+0x2>
    1342:	80 95       	com	r24
    1344:	90 95       	com	r25
    1346:	8e 0f       	add	r24, r30
    1348:	9f 1f       	adc	r25, r31
    134a:	08 95       	ret

0000134c <fputc>:
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	fb 01       	movw	r30, r22
    1356:	23 81       	ldd	r18, Z+3	; 0x03
    1358:	21 fd       	sbrc	r18, 1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <fputc+0x16>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	2c c0       	rjmp	.+88     	; 0x13ba <fputc+0x6e>
    1362:	22 ff       	sbrs	r18, 2
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <fputc+0x46>
    1366:	46 81       	ldd	r20, Z+6	; 0x06
    1368:	57 81       	ldd	r21, Z+7	; 0x07
    136a:	24 81       	ldd	r18, Z+4	; 0x04
    136c:	35 81       	ldd	r19, Z+5	; 0x05
    136e:	42 17       	cp	r20, r18
    1370:	53 07       	cpc	r21, r19
    1372:	44 f4       	brge	.+16     	; 0x1384 <fputc+0x38>
    1374:	a0 81       	ld	r26, Z
    1376:	b1 81       	ldd	r27, Z+1	; 0x01
    1378:	9d 01       	movw	r18, r26
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	20 83       	st	Z, r18
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	8c 93       	st	X, r24
    1384:	26 81       	ldd	r18, Z+6	; 0x06
    1386:	37 81       	ldd	r19, Z+7	; 0x07
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	26 83       	std	Z+6, r18	; 0x06
    138e:	37 83       	std	Z+7, r19	; 0x07
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <fputc+0x6e>
    1392:	8b 01       	movw	r16, r22
    1394:	ec 01       	movw	r28, r24
    1396:	fb 01       	movw	r30, r22
    1398:	00 84       	ldd	r0, Z+8	; 0x08
    139a:	f1 85       	ldd	r31, Z+9	; 0x09
    139c:	e0 2d       	mov	r30, r0
    139e:	09 95       	icall
    13a0:	89 2b       	or	r24, r25
    13a2:	e1 f6       	brne	.-72     	; 0x135c <fputc+0x10>
    13a4:	d8 01       	movw	r26, r16
    13a6:	16 96       	adiw	r26, 0x06	; 6
    13a8:	8d 91       	ld	r24, X+
    13aa:	9c 91       	ld	r25, X
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	16 96       	adiw	r26, 0x06	; 6
    13b2:	8d 93       	st	X+, r24
    13b4:	9c 93       	st	X, r25
    13b6:	17 97       	sbiw	r26, 0x07	; 7
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <__ultoa_invert>:
    13c4:	fa 01       	movw	r30, r20
    13c6:	aa 27       	eor	r26, r26
    13c8:	28 30       	cpi	r18, 0x08	; 8
    13ca:	51 f1       	breq	.+84     	; 0x1420 <__ultoa_invert+0x5c>
    13cc:	20 31       	cpi	r18, 0x10	; 16
    13ce:	81 f1       	breq	.+96     	; 0x1430 <__ultoa_invert+0x6c>
    13d0:	e8 94       	clt
    13d2:	6f 93       	push	r22
    13d4:	6e 7f       	andi	r22, 0xFE	; 254
    13d6:	6e 5f       	subi	r22, 0xFE	; 254
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	8f 4f       	sbci	r24, 0xFF	; 255
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	af 4f       	sbci	r26, 0xFF	; 255
    13e0:	b1 e0       	ldi	r27, 0x01	; 1
    13e2:	3e d0       	rcall	.+124    	; 0x1460 <__ultoa_invert+0x9c>
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	3c d0       	rcall	.+120    	; 0x1460 <__ultoa_invert+0x9c>
    13e8:	67 0f       	add	r22, r23
    13ea:	78 1f       	adc	r23, r24
    13ec:	89 1f       	adc	r24, r25
    13ee:	9a 1f       	adc	r25, r26
    13f0:	a1 1d       	adc	r26, r1
    13f2:	68 0f       	add	r22, r24
    13f4:	79 1f       	adc	r23, r25
    13f6:	8a 1f       	adc	r24, r26
    13f8:	91 1d       	adc	r25, r1
    13fa:	a1 1d       	adc	r26, r1
    13fc:	6a 0f       	add	r22, r26
    13fe:	71 1d       	adc	r23, r1
    1400:	81 1d       	adc	r24, r1
    1402:	91 1d       	adc	r25, r1
    1404:	a1 1d       	adc	r26, r1
    1406:	20 d0       	rcall	.+64     	; 0x1448 <__ultoa_invert+0x84>
    1408:	09 f4       	brne	.+2      	; 0x140c <__ultoa_invert+0x48>
    140a:	68 94       	set
    140c:	3f 91       	pop	r19
    140e:	2a e0       	ldi	r18, 0x0A	; 10
    1410:	26 9f       	mul	r18, r22
    1412:	11 24       	eor	r1, r1
    1414:	30 19       	sub	r19, r0
    1416:	30 5d       	subi	r19, 0xD0	; 208
    1418:	31 93       	st	Z+, r19
    141a:	de f6       	brtc	.-74     	; 0x13d2 <__ultoa_invert+0xe>
    141c:	cf 01       	movw	r24, r30
    141e:	08 95       	ret
    1420:	46 2f       	mov	r20, r22
    1422:	47 70       	andi	r20, 0x07	; 7
    1424:	40 5d       	subi	r20, 0xD0	; 208
    1426:	41 93       	st	Z+, r20
    1428:	b3 e0       	ldi	r27, 0x03	; 3
    142a:	0f d0       	rcall	.+30     	; 0x144a <__ultoa_invert+0x86>
    142c:	c9 f7       	brne	.-14     	; 0x1420 <__ultoa_invert+0x5c>
    142e:	f6 cf       	rjmp	.-20     	; 0x141c <__ultoa_invert+0x58>
    1430:	46 2f       	mov	r20, r22
    1432:	4f 70       	andi	r20, 0x0F	; 15
    1434:	40 5d       	subi	r20, 0xD0	; 208
    1436:	4a 33       	cpi	r20, 0x3A	; 58
    1438:	18 f0       	brcs	.+6      	; 0x1440 <__ultoa_invert+0x7c>
    143a:	49 5d       	subi	r20, 0xD9	; 217
    143c:	31 fd       	sbrc	r19, 1
    143e:	40 52       	subi	r20, 0x20	; 32
    1440:	41 93       	st	Z+, r20
    1442:	02 d0       	rcall	.+4      	; 0x1448 <__ultoa_invert+0x84>
    1444:	a9 f7       	brne	.-22     	; 0x1430 <__ultoa_invert+0x6c>
    1446:	ea cf       	rjmp	.-44     	; 0x141c <__ultoa_invert+0x58>
    1448:	b4 e0       	ldi	r27, 0x04	; 4
    144a:	a6 95       	lsr	r26
    144c:	97 95       	ror	r25
    144e:	87 95       	ror	r24
    1450:	77 95       	ror	r23
    1452:	67 95       	ror	r22
    1454:	ba 95       	dec	r27
    1456:	c9 f7       	brne	.-14     	; 0x144a <__ultoa_invert+0x86>
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	61 05       	cpc	r22, r1
    145c:	71 05       	cpc	r23, r1
    145e:	08 95       	ret
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	0a 2e       	mov	r0, r26
    1466:	06 94       	lsr	r0
    1468:	57 95       	ror	r21
    146a:	47 95       	ror	r20
    146c:	37 95       	ror	r19
    146e:	27 95       	ror	r18
    1470:	ba 95       	dec	r27
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__ultoa_invert+0xa2>
    1474:	62 0f       	add	r22, r18
    1476:	73 1f       	adc	r23, r19
    1478:	84 1f       	adc	r24, r20
    147a:	95 1f       	adc	r25, r21
    147c:	a0 1d       	adc	r26, r0
    147e:	08 95       	ret

00001480 <__mulsi3>:
    1480:	db 01       	movw	r26, r22
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	2d d0       	rcall	.+90     	; 0x14e2 <__muluhisi3>
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	a2 9f       	mul	r26, r18
    148e:	80 0d       	add	r24, r0
    1490:	91 1d       	adc	r25, r1
    1492:	a3 9f       	mul	r26, r19
    1494:	90 0d       	add	r25, r0
    1496:	b2 9f       	mul	r27, r18
    1498:	90 0d       	add	r25, r0
    149a:	11 24       	eor	r1, r1
    149c:	08 95       	ret

0000149e <__udivmodsi4>:
    149e:	a1 e2       	ldi	r26, 0x21	; 33
    14a0:	1a 2e       	mov	r1, r26
    14a2:	aa 1b       	sub	r26, r26
    14a4:	bb 1b       	sub	r27, r27
    14a6:	fd 01       	movw	r30, r26
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <__udivmodsi4_ep>

000014aa <__udivmodsi4_loop>:
    14aa:	aa 1f       	adc	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	ee 1f       	adc	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	a2 17       	cp	r26, r18
    14b4:	b3 07       	cpc	r27, r19
    14b6:	e4 07       	cpc	r30, r20
    14b8:	f5 07       	cpc	r31, r21
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__udivmodsi4_ep>
    14bc:	a2 1b       	sub	r26, r18
    14be:	b3 0b       	sbc	r27, r19
    14c0:	e4 0b       	sbc	r30, r20
    14c2:	f5 0b       	sbc	r31, r21

000014c4 <__udivmodsi4_ep>:
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	1a 94       	dec	r1
    14ce:	69 f7       	brne	.-38     	; 0x14aa <__udivmodsi4_loop>
    14d0:	60 95       	com	r22
    14d2:	70 95       	com	r23
    14d4:	80 95       	com	r24
    14d6:	90 95       	com	r25
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	bd 01       	movw	r22, r26
    14de:	cf 01       	movw	r24, r30
    14e0:	08 95       	ret

000014e2 <__muluhisi3>:
    14e2:	3a d0       	rcall	.+116    	; 0x1558 <__umulhisi3>
    14e4:	a5 9f       	mul	r26, r21
    14e6:	90 0d       	add	r25, r0
    14e8:	b4 9f       	mul	r27, r20
    14ea:	90 0d       	add	r25, r0
    14ec:	a4 9f       	mul	r26, r20
    14ee:	80 0d       	add	r24, r0
    14f0:	91 1d       	adc	r25, r1
    14f2:	11 24       	eor	r1, r1
    14f4:	08 95       	ret

000014f6 <__prologue_saves__>:
    14f6:	2f 92       	push	r2
    14f8:	3f 92       	push	r3
    14fa:	4f 92       	push	r4
    14fc:	5f 92       	push	r5
    14fe:	6f 92       	push	r6
    1500:	7f 92       	push	r7
    1502:	8f 92       	push	r8
    1504:	9f 92       	push	r9
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	ca 1b       	sub	r28, r26
    1520:	db 0b       	sbc	r29, r27
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	09 94       	ijmp

00001528 <__epilogue_restores__>:
    1528:	2a 88       	ldd	r2, Y+18	; 0x12
    152a:	39 88       	ldd	r3, Y+17	; 0x11
    152c:	48 88       	ldd	r4, Y+16	; 0x10
    152e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1530:	6e 84       	ldd	r6, Y+14	; 0x0e
    1532:	7d 84       	ldd	r7, Y+13	; 0x0d
    1534:	8c 84       	ldd	r8, Y+12	; 0x0c
    1536:	9b 84       	ldd	r9, Y+11	; 0x0b
    1538:	aa 84       	ldd	r10, Y+10	; 0x0a
    153a:	b9 84       	ldd	r11, Y+9	; 0x09
    153c:	c8 84       	ldd	r12, Y+8	; 0x08
    153e:	df 80       	ldd	r13, Y+7	; 0x07
    1540:	ee 80       	ldd	r14, Y+6	; 0x06
    1542:	fd 80       	ldd	r15, Y+5	; 0x05
    1544:	0c 81       	ldd	r16, Y+4	; 0x04
    1546:	1b 81       	ldd	r17, Y+3	; 0x03
    1548:	aa 81       	ldd	r26, Y+2	; 0x02
    154a:	b9 81       	ldd	r27, Y+1	; 0x01
    154c:	ce 0f       	add	r28, r30
    154e:	d1 1d       	adc	r29, r1
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	ed 01       	movw	r28, r26
    1556:	08 95       	ret

00001558 <__umulhisi3>:
    1558:	a2 9f       	mul	r26, r18
    155a:	b0 01       	movw	r22, r0
    155c:	b3 9f       	mul	r27, r19
    155e:	c0 01       	movw	r24, r0
    1560:	a3 9f       	mul	r26, r19
    1562:	01 d0       	rcall	.+2      	; 0x1566 <__umulhisi3+0xe>
    1564:	b2 9f       	mul	r27, r18
    1566:	70 0d       	add	r23, r0
    1568:	81 1d       	adc	r24, r1
    156a:	11 24       	eor	r1, r1
    156c:	91 1d       	adc	r25, r1
    156e:	08 95       	ret

00001570 <_exit>:
    1570:	f8 94       	cli

00001572 <__stop_program>:
    1572:	ff cf       	rjmp	.-2      	; 0x1572 <__stop_program>
