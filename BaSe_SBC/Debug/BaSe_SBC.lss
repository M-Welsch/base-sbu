
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000437  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000021  00008382  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000001  00803e00  00803e00  00000437  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003200  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bdf  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cce  00000000  00000000  00005403  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000294  00000000  00000000  000060d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010b7  00000000  00000000  00006368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a4c  00000000  00000000  0000741f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  00007e6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	6c c1       	rjmp	.+728    	; 0x2e0 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	5c d0       	rcall	.+184    	; 0x10a <main>
  52:	95 c1       	rjmp	.+810    	; 0x37e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_pins>:
	PORTB.OUTSET = PIN2_bm;
	PORTB.DIRSET = PIN2_bm;
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
  56:	e0 e0       	ldi	r30, 0x00	; 0
  58:	f4 e0       	ldi	r31, 0x04	; 4
  5a:	80 e8       	ldi	r24, 0x80	; 128
  5c:	86 83       	std	Z+6, r24	; 0x06
  5e:	81 83       	std	Z+1, r24	; 0x01
  60:	80 e4       	ldi	r24, 0x40	; 64
  62:	81 83       	std	Z+1, r24	; 0x01
  64:	80 e1       	ldi	r24, 0x10	; 16
  66:	85 83       	std	Z+5, r24	; 0x05
  68:	81 83       	std	Z+1, r24	; 0x01
  6a:	8c e0       	ldi	r24, 0x0C	; 12
  6c:	82 83       	std	Z+2, r24	; 0x02
  6e:	82 89       	ldd	r24, Z+18	; 0x12
  70:	88 60       	ori	r24, 0x08	; 8
  72:	82 8b       	std	Z+18, r24	; 0x12
  74:	83 89       	ldd	r24, Z+19	; 0x13
  76:	88 60       	ori	r24, 0x08	; 8
  78:	83 8b       	std	Z+19, r24	; 0x13
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	83 e1       	ldi	r24, 0x13	; 19
  80:	81 83       	std	Z+1, r24	; 0x01
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	82 83       	std	Z+2, r24	; 0x02
  86:	e0 e4       	ldi	r30, 0x40	; 64
  88:	f4 e0       	ldi	r31, 0x04	; 4
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	81 83       	std	Z+1, r24	; 0x01
  8e:	15 82       	std	Z+5, r1	; 0x05
  90:	08 95       	ret

00000092 <button_1_pressed>:
  92:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <led_hmi_off>:
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
  ac:	08 95       	ret

000000ae <display_enable>:
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	85 83       	std	Z+5, r24	; 0x05
  b6:	92 e4       	ldi	r25, 0x42	; 66
  b8:	9a 95       	dec	r25
  ba:	f1 f7       	brne	.-4      	; 0xb8 <display_enable+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <display_enable+0x10>
  be:	86 83       	std	Z+6, r24	; 0x06
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <display_enable+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <display_enable+0x1a>
  c8:	08 95       	ret

000000ca <set_display_data_pins>:
  ca:	e0 e4       	ldi	r30, 0x40	; 64
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	94 81       	ldd	r25, Z+4	; 0x04
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	94 83       	std	Z+4, r25	; 0x04
  d4:	94 81       	ldd	r25, Z+4	; 0x04
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	98 2b       	or	r25, r24
  da:	94 83       	std	Z+4, r25	; 0x04
  dc:	08 95       	ret

000000de <display_set_rs_pin>:
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
  e4:	08 95       	ret

000000e6 <display_clear_rs_pin>:
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
  ec:	08 95       	ret

000000ee <set_pb2_txd_and_pb3_rxd>:
  ee:	e0 e2       	ldi	r30, 0x20	; 32
  f0:	f4 e0       	ldi	r31, 0x04	; 4
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	85 83       	std	Z+5, r24	; 0x05
  f6:	81 83       	std	Z+1, r24	; 0x01
  f8:	08 95       	ret

000000fa <setup_heartbeat_interrupt>:
}

/* Heartbeat */
void setup_heartbeat_interrupt(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	85 89       	ldd	r24, Z+21	; 0x15
 100:	89 60       	ori	r24, 0x09	; 9
 102:	85 8b       	std	Z+21, r24	; 0x15
 104:	08 95       	ret

00000106 <init_heatbeat_monitor>:
#include "heartbeat.h"
#include "gpio_interface.h"
#include "flags.h"

void init_heatbeat_monitor(void) {
	setup_heartbeat_interrupt();
 106:	f9 df       	rcall	.-14     	; 0xfa <setup_heartbeat_interrupt>
 108:	08 95       	ret

0000010a <main>:
#include "heartbeat.h"


int main(void)
{
	init_pins();
 10a:	a5 df       	rcall	.-182    	; 0x56 <init_pins>
	init_heatbeat_monitor();
 10c:	fc df       	rcall	.-8      	; 0x106 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
 10e:	1b d0       	rcall	.+54     	; 0x146 <set_interrupts_for_buttons>
	init_uart();
 110:	03 d1       	rcall	.+518    	; 0x318 <init_uart>
	init_display();
 112:	31 d0       	rcall	.+98     	; 0x176 <init_display>
	sei();
 114:	78 94       	sei
	
	display_write_string("Hallo Welt!\n");
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	93 e8       	ldi	r25, 0x83	; 131
 11a:	d3 d0       	rcall	.+422    	; 0x2c2 <display_write_string>
	USART0_sendString("I:STARTED");
 11c:	8f e8       	ldi	r24, 0x8F	; 143
 11e:	93 e8       	ldi	r25, 0x83	; 131
 120:	0d d1       	rcall	.+538    	; 0x33c <USART0_sendString>
			//disable_usart_tx();
		//}
		
		/* HEART Beat processing doesn't work! */
		
		if (flag_button_0_pressed == true) {
 122:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
 126:	81 11       	cpse	r24, r1
			led_hmi_off();
 128:	be df       	rcall	.-132    	; 0xa6 <led_hmi_off>
		}
		if (button_1_pressed() == 1) {
 12a:	b3 df       	rcall	.-154    	; 0x92 <button_1_pressed>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	39 f4       	brne	.+14     	; 0x13e <main+0x34>
			dim_display(1);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	11 d0       	rcall	.+34     	; 0x158 <dim_display>
			USART0_sendString("C:Hello\r\n");
 136:	89 e9       	ldi	r24, 0x99	; 153
 138:	93 e8       	ldi	r25, 0x83	; 131
 13a:	00 d1       	rcall	.+512    	; 0x33c <USART0_sendString>
 13c:	f2 cf       	rjmp	.-28     	; 0x122 <main+0x18>
			} else {
			dim_display(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0a d0       	rcall	.+20     	; 0x158 <dim_display>
 144:	ee cf       	rjmp	.-36     	; 0x122 <main+0x18>

00000146 <set_interrupts_for_buttons>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f4 e0       	ldi	r31, 0x04	; 4
 14a:	82 89       	ldd	r24, Z+18	; 0x12
 14c:	83 60       	ori	r24, 0x03	; 3
 14e:	82 8b       	std	Z+18, r24	; 0x12
 150:	83 89       	ldd	r24, Z+19	; 0x13
 152:	83 60       	ori	r24, 0x03	; 3
 154:	83 8b       	std	Z+19, r24	; 0x13
 156:	08 95       	ret

00000158 <dim_display>:
 158:	18 16       	cp	r1, r24
 15a:	19 06       	cpc	r1, r25
 15c:	34 f4       	brge	.+12     	; 0x16a <dim_display+0x12>
 15e:	e0 e2       	ldi	r30, 0x20	; 32
 160:	f4 e0       	ldi	r31, 0x04	; 4
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	81 60       	ori	r24, 0x01	; 1
 166:	84 83       	std	Z+4, r24	; 0x04
 168:	08 95       	ret
 16a:	e0 e2       	ldi	r30, 0x20	; 32
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	84 81       	ldd	r24, Z+4	; 0x04
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	84 83       	std	Z+4, r24	; 0x04
 174:	08 95       	ret

00000176 <init_display>:
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	8a e1       	ldi	r24, 0x1A	; 26
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <init_display+0x6>
 184:	00 c0       	rjmp	.+0      	; 0x186 <init_display+0x10>
 186:	00 00       	nop
 188:	ae df       	rcall	.-164    	; 0xe6 <display_clear_rs_pin>
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	9e df       	rcall	.-196    	; 0xca <set_display_data_pins>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8e df       	rcall	.-228    	; 0xae <display_enable>
 192:	87 e8       	ldi	r24, 0x87	; 135
 194:	93 e1       	ldi	r25, 0x13	; 19
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <init_display+0x20>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <init_display+0x26>
 19c:	00 00       	nop
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	94 df       	rcall	.-216    	; 0xca <set_display_data_pins>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	84 df       	rcall	.-248    	; 0xae <display_enable>
 1a6:	87 e8       	ldi	r24, 0x87	; 135
 1a8:	93 e1       	ldi	r25, 0x13	; 19
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <init_display+0x34>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <init_display+0x3a>
 1b0:	00 00       	nop
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	8a df       	rcall	.-236    	; 0xca <set_display_data_pins>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	7a df       	rcall	.-268    	; 0xae <display_enable>
 1ba:	87 e8       	ldi	r24, 0x87	; 135
 1bc:	93 e1       	ldi	r25, 0x13	; 19
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <init_display+0x48>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <init_display+0x4e>
 1c4:	00 00       	nop
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 df       	rcall	.-256    	; 0xca <set_display_data_pins>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	70 df       	rcall	.-288    	; 0xae <display_enable>
 1ce:	87 e8       	ldi	r24, 0x87	; 135
 1d0:	93 e1       	ldi	r25, 0x13	; 19
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <init_display+0x5c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <init_display+0x62>
 1d8:	00 00       	nop
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	76 df       	rcall	.-276    	; 0xca <set_display_data_pins>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	66 df       	rcall	.-308    	; 0xae <display_enable>
 1e2:	87 e8       	ldi	r24, 0x87	; 135
 1e4:	93 e1       	ldi	r25, 0x13	; 19
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <init_display+0x70>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <init_display+0x76>
 1ec:	00 00       	nop
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	6c df       	rcall	.-296    	; 0xca <set_display_data_pins>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	5c df       	rcall	.-328    	; 0xae <display_enable>
 1f6:	87 e8       	ldi	r24, 0x87	; 135
 1f8:	93 e1       	ldi	r25, 0x13	; 19
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <init_display+0x84>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <init_display+0x8a>
 200:	00 00       	nop
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	62 df       	rcall	.-316    	; 0xca <set_display_data_pins>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	52 df       	rcall	.-348    	; 0xae <display_enable>
 20a:	87 e8       	ldi	r24, 0x87	; 135
 20c:	93 e1       	ldi	r25, 0x13	; 19
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <init_display+0x98>
 212:	00 c0       	rjmp	.+0      	; 0x214 <init_display+0x9e>
 214:	00 00       	nop
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	58 df       	rcall	.-336    	; 0xca <set_display_data_pins>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	48 df       	rcall	.-368    	; 0xae <display_enable>
 21e:	87 e8       	ldi	r24, 0x87	; 135
 220:	93 e1       	ldi	r25, 0x13	; 19
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <init_display+0xac>
 226:	00 c0       	rjmp	.+0      	; 0x228 <init_display+0xb2>
 228:	00 00       	nop
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	4e df       	rcall	.-356    	; 0xca <set_display_data_pins>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	3e df       	rcall	.-388    	; 0xae <display_enable>
 232:	87 e8       	ldi	r24, 0x87	; 135
 234:	93 e1       	ldi	r25, 0x13	; 19
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <init_display+0xc0>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <init_display+0xc6>
 23c:	00 00       	nop
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	44 df       	rcall	.-376    	; 0xca <set_display_data_pins>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	34 df       	rcall	.-408    	; 0xae <display_enable>
 246:	87 e8       	ldi	r24, 0x87	; 135
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <init_display+0xd4>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <init_display+0xda>
 250:	00 00       	nop
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	3a df       	rcall	.-396    	; 0xca <set_display_data_pins>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	2a df       	rcall	.-428    	; 0xae <display_enable>
 25a:	87 e8       	ldi	r24, 0x87	; 135
 25c:	93 e1       	ldi	r25, 0x13	; 19
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <init_display+0xe8>
 262:	00 c0       	rjmp	.+0      	; 0x264 <init_display+0xee>
 264:	00 00       	nop
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	30 df       	rcall	.-416    	; 0xca <set_display_data_pins>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	20 df       	rcall	.-448    	; 0xae <display_enable>
 26e:	87 e8       	ldi	r24, 0x87	; 135
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <init_display+0xfc>
 276:	00 c0       	rjmp	.+0      	; 0x278 <init_display+0x102>
 278:	00 00       	nop
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	26 df       	rcall	.-436    	; 0xca <set_display_data_pins>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	16 df       	rcall	.-468    	; 0xae <display_enable>
 282:	87 e8       	ldi	r24, 0x87	; 135
 284:	93 e1       	ldi	r25, 0x13	; 19
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <init_display+0x110>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <init_display+0x116>
 28c:	00 00       	nop
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	1c df       	rcall	.-456    	; 0xca <set_display_data_pins>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0c df       	rcall	.-488    	; 0xae <display_enable>
 296:	87 e8       	ldi	r24, 0x87	; 135
 298:	93 e1       	ldi	r25, 0x13	; 19
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <init_display+0x124>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <init_display+0x12a>
 2a0:	00 00       	nop
 2a2:	08 95       	ret

000002a4 <display_write_char>:
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
 2a8:	1a df       	rcall	.-460    	; 0xde <display_set_rs_pin>
 2aa:	8c 2f       	mov	r24, r28
 2ac:	82 95       	swap	r24
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	0c df       	rcall	.-488    	; 0xca <set_display_data_pins>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	fc de       	rcall	.-520    	; 0xae <display_enable>
 2b6:	8c 2f       	mov	r24, r28
 2b8:	08 df       	rcall	.-496    	; 0xca <set_display_data_pins>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	f8 de       	rcall	.-528    	; 0xae <display_enable>
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <display_write_string>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
 2c8:	0a df       	rcall	.-492    	; 0xde <display_set_rs_pin>
 2ca:	88 81       	ld	r24, Y
 2cc:	88 23       	and	r24, r24
 2ce:	29 f0       	breq	.+10     	; 0x2da <display_write_string+0x18>
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	e8 df       	rcall	.-48     	; 0x2a4 <display_write_char>
 2d4:	89 91       	ld	r24, Y+
 2d6:	81 11       	cpse	r24, r1
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <display_write_string+0x10>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <__vector_3>:
	display_enable(1);
	_delay_ms(5);
}

ISR(PORTA_PORT_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTA_INTFLAGS & button_0) {
 2f0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 2f4:	82 ff       	sbrs	r24, 2
 2f6:	08 c0       	rjmp	.+16     	; 0x308 <__vector_3+0x28>
		flag_button_0_pressed = true;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <_edata>
		PORTA_INTFLAGS &= button_0;
 2fe:	e9 e0       	ldi	r30, 0x09	; 9
 300:	f4 e0       	ldi	r31, 0x04	; 4
 302:	80 81       	ld	r24, Z
 304:	84 70       	andi	r24, 0x04	; 4
 306:	80 83       	st	Z, r24
	}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	8f 91       	pop	r24
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <init_uart>:
//#define USART0_BAUD_RATE(BAUD_RATE) ((float)(F_CPU * 64 / (16 * (float)BAUD_RATE)) + 0.5)
#define BAUD_RATE 9600
#define UROUND(x) ((2UL*(x)+1)/2)

void init_uart(void) {
	set_pb2_txd_and_pb3_rxd();
 318:	ea de       	rcall	.-556    	; 0xee <set_pb2_txd_and_pb3_rxd>
	USART0.BAUD = UROUND(64UL*F_CPU/16/BAUD_RATE);
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	8c e6       	ldi	r24, 0x6C	; 108
 320:	95 e0       	ldi	r25, 0x05	; 5
 322:	80 87       	std	Z+8, r24	; 0x08
 324:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	86 83       	std	Z+6, r24	; 0x06
 32a:	08 95       	ret

0000032c <USART0_sendChar>:
}

void USART0_sendChar(char c) {
	while((USART0.STATUS & USART_DREIF_bm) == 0)
 32c:	e0 e0       	ldi	r30, 0x00	; 0
 32e:	f8 e0       	ldi	r31, 0x08	; 8
 330:	94 81       	ldd	r25, Z+4	; 0x04
 332:	95 ff       	sbrs	r25, 5
 334:	fd cf       	rjmp	.-6      	; 0x330 <USART0_sendChar+0x4>
	;
	USART0.TXDATAL = c;
 336:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 33a:	08 95       	ret

0000033c <USART0_sendString>:
}

void USART0_sendString(char *s) {
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	8c 01       	movw	r16, r24
 34a:	7c 01       	movw	r14, r24
	for(size_t i = 0; i < strlen(s); i++) {
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
 350:	05 c0       	rjmp	.+10     	; 0x35c <USART0_sendString+0x20>
		USART0_sendChar(s[i]);
 352:	f7 01       	movw	r30, r14
 354:	81 91       	ld	r24, Z+
 356:	7f 01       	movw	r14, r30
 358:	e9 df       	rcall	.-46     	; 0x32c <USART0_sendChar>
	;
	USART0.TXDATAL = c;
}

void USART0_sendString(char *s) {
	for(size_t i = 0; i < strlen(s); i++) {
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	f8 01       	movw	r30, r16
 35e:	01 90       	ld	r0, Z+
 360:	00 20       	and	r0, r0
 362:	e9 f7       	brne	.-6      	; 0x35e <USART0_sendString+0x22>
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	e0 1b       	sub	r30, r16
 368:	f1 0b       	sbc	r31, r17
 36a:	ce 17       	cp	r28, r30
 36c:	df 07       	cpc	r29, r31
 36e:	88 f3       	brcs	.-30     	; 0x352 <USART0_sendString+0x16>
		USART0_sendChar(s[i]);
	}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
