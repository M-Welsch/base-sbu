
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ea  000093e6  000013e6  0000147a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b2  00803e00  00803e00  00001564  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006060  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002395  00000000  00000000  0000798c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ab9  00000000  00000000  00009d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c4  00000000  00000000  0000b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f79  00000000  00000000  0000bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000146e  00000000  00000000  0000df19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  0000f387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	fd c0       	rjmp	.+506    	; 0x202 <__vector_3>
       8:	24 c1       	rjmp	.+584    	; 0x252 <__vector_4>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	a6 c3       	rjmp	.+1868   	; 0x75a <__vector_6>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	7d c1       	rjmp	.+762    	; 0x310 <__vector_10>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
      26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
      28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
      2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
      2c:	2c c5       	rjmp	.+2648   	; 0xa86 <__vector_22>
      2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
      30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
      32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
      40:	2e e3       	ldi	r18, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	a2 3b       	cpi	r26, 0xB2	; 178
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	6b d1       	rcall	.+726    	; 0x328 <main>
      52:	c7 c9       	rjmp	.-3186   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>

00000054 <__bad_interrupt>:
      54:	1a c1       	rjmp	.+564    	; 0x28a <__vector_default>

00000056 <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      56:	e0 e0       	ldi	r30, 0x00	; 0
      58:	f6 e0       	ldi	r31, 0x06	; 6
      5a:	80 81       	ld	r24, Z
      5c:	80 83       	st	Z, r24
      5e:	08 95       	ret

00000060 <adc_enable>:
      60:	e0 e0       	ldi	r30, 0x00	; 0
      62:	f6 e0       	ldi	r31, 0x06	; 6
      64:	80 81       	ld	r24, Z
      66:	81 60       	ori	r24, 0x01	; 1
      68:	80 83       	st	Z, r24
      6a:	08 95       	ret

0000006c <adc_init>:
      6c:	f4 df       	rcall	.-24     	; 0x56 <adc_init_10bit_resolution>
      6e:	80 e3       	ldi	r24, 0x30	; 48
      70:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      74:	f5 df       	rcall	.-22     	; 0x60 <adc_enable>
      76:	08 95       	ret

00000078 <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      78:	e0 e0       	ldi	r30, 0x00	; 0
      7a:	f6 e0       	ldi	r31, 0x06	; 6
      7c:	83 85       	ldd	r24, Z+11	; 0x0b
      7e:	80 ff       	sbrs	r24, 0
      80:	fd cf       	rjmp	.-6      	; 0x7c <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
      82:	08 95       	ret

00000084 <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      84:	1f 93       	push	r17
      86:	cf 93       	push	r28
      88:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      8a:	c0 e0       	ldi	r28, 0x00	; 0
      8c:	d6 e0       	ldi	r29, 0x06	; 6
      8e:	11 e0       	ldi	r17, 0x01	; 1
      90:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      92:	f2 df       	rcall	.-28     	; 0x78 <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      94:	1b 87       	std	Y+11, r17	; 0x0b
}
      96:	df 91       	pop	r29
      98:	cf 91       	pop	r28
      9a:	1f 91       	pop	r17
      9c:	08 95       	ret

0000009e <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      a2:	c0 e0       	ldi	r28, 0x00	; 0
      a4:	d6 e0       	ldi	r29, 0x06	; 6
      a6:	85 e0       	ldi	r24, 0x05	; 5
      a8:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      aa:	ec df       	rcall	.-40     	; 0x84 <adc_do_conversion>
	return ADC0.RES;
      ac:	88 89       	ldd	r24, Y+16	; 0x10
      ae:	99 89       	ldd	r25, Y+17	; 0x11
}
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      ba:	c0 e0       	ldi	r28, 0x00	; 0
      bc:	d6 e0       	ldi	r29, 0x06	; 6
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c2:	e0 df       	rcall	.-64     	; 0x84 <adc_do_conversion>
	return ADC0.RES;
      c4:	88 89       	ldd	r24, Y+16	; 0x10
      c6:	99 89       	ldd	r25, Y+17	; 0x11
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      d2:	c0 e0       	ldi	r28, 0x00	; 0
      d4:	d6 e0       	ldi	r29, 0x06	; 6
      d6:	8e e1       	ldi	r24, 0x1E	; 30
      d8:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      da:	d4 df       	rcall	.-88     	; 0x84 <adc_do_conversion>
	return ADC0.RES;
      dc:	88 89       	ldd	r24, Y+16	; 0x10
      de:	99 89       	ldd	r25, Y+17	; 0x11
}
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
      e6:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_button_0_pressed>
	flag_heartbeat = false;
      ea:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_heartbeat>
      ee:	08 95       	ret

000000f0 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f0:	e0 e0       	ldi	r30, 0x00	; 0
      f2:	f4 e0       	ldi	r31, 0x04	; 4
      f4:	81 89       	ldd	r24, Z+17	; 0x11
      f6:	88 7f       	andi	r24, 0xF8	; 248
      f8:	81 8b       	std	Z+17, r24	; 0x11
      fa:	81 89       	ldd	r24, Z+17	; 0x11
      fc:	84 60       	ori	r24, 0x04	; 4
      fe:	81 8b       	std	Z+17, r24	; 0x11
     100:	85 89       	ldd	r24, Z+21	; 0x15
     102:	88 7f       	andi	r24, 0xF8	; 248
     104:	85 8b       	std	Z+21, r24	; 0x15
     106:	85 89       	ldd	r24, Z+21	; 0x15
     108:	84 60       	ori	r24, 0x04	; 4
     10a:	85 8b       	std	Z+21, r24	; 0x15
     10c:	08 95       	ret

0000010e <init_pins>:
     10e:	e0 e0       	ldi	r30, 0x00	; 0
     110:	f4 e0       	ldi	r31, 0x04	; 4
     112:	80 e8       	ldi	r24, 0x80	; 128
     114:	86 83       	std	Z+6, r24	; 0x06
     116:	81 83       	std	Z+1, r24	; 0x01
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	81 83       	std	Z+1, r24	; 0x01
     11c:	80 e1       	ldi	r24, 0x10	; 16
     11e:	85 83       	std	Z+5, r24	; 0x05
     120:	81 83       	std	Z+1, r24	; 0x01
     122:	8c e0       	ldi	r24, 0x0C	; 12
     124:	82 83       	std	Z+2, r24	; 0x02
     126:	82 89       	ldd	r24, Z+18	; 0x12
     128:	88 60       	ori	r24, 0x08	; 8
     12a:	82 8b       	std	Z+18, r24	; 0x12
     12c:	83 89       	ldd	r24, Z+19	; 0x13
     12e:	88 60       	ori	r24, 0x08	; 8
     130:	83 8b       	std	Z+19, r24	; 0x13
     132:	e0 e2       	ldi	r30, 0x20	; 32
     134:	f4 e0       	ldi	r31, 0x04	; 4
     136:	83 e1       	ldi	r24, 0x13	; 19
     138:	81 83       	std	Z+1, r24	; 0x01
     13a:	80 e2       	ldi	r24, 0x20	; 32
     13c:	82 83       	std	Z+2, r24	; 0x02
     13e:	a0 e4       	ldi	r26, 0x40	; 64
     140:	b4 e0       	ldi	r27, 0x04	; 4
     142:	8f e0       	ldi	r24, 0x0F	; 15
     144:	11 96       	adiw	r26, 0x01	; 1
     146:	8c 93       	st	X, r24
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	15 96       	adiw	r26, 0x05	; 5
     14c:	1c 92       	st	X, r1
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	ce df       	rcall	.-100    	; 0xf0 <disable_digital_input_buffers_for_adc>
     154:	08 95       	ret

00000156 <button_1_pressed>:
     156:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     15a:	86 95       	lsr	r24
     15c:	86 95       	lsr	r24
     15e:	86 95       	lsr	r24
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	89 27       	eor	r24, r25
     164:	81 70       	andi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

0000016a <set_interrupts_for_buttons>:
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	f4 e0       	ldi	r31, 0x04	; 4
     16e:	82 89       	ldd	r24, Z+18	; 0x12
     170:	83 60       	ori	r24, 0x03	; 3
     172:	82 8b       	std	Z+18, r24	; 0x12
     174:	83 89       	ldd	r24, Z+19	; 0x13
     176:	83 60       	ori	r24, 0x03	; 3
     178:	83 8b       	std	Z+19, r24	; 0x13
     17a:	08 95       	ret

0000017c <led_hmi_off>:
     17c:	80 e1       	ldi	r24, 0x10	; 16
     17e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     182:	08 95       	ret

00000184 <toggle_hmi_led>:
     184:	80 e1       	ldi	r24, 0x10	; 16
     186:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     18a:	08 95       	ret

0000018c <dim_display>:
     18c:	18 16       	cp	r1, r24
     18e:	19 06       	cpc	r1, r25
     190:	24 f4       	brge	.+8      	; 0x19a <dim_display+0xe>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     198:	08 95       	ret
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1a0:	08 95       	ret

000001a2 <display_enable>:
     1a2:	e0 e0       	ldi	r30, 0x00	; 0
     1a4:	f4 e0       	ldi	r31, 0x04	; 4
     1a6:	80 e8       	ldi	r24, 0x80	; 128
     1a8:	85 83       	std	Z+5, r24	; 0x05
     1aa:	92 e4       	ldi	r25, 0x42	; 66
     1ac:	9a 95       	dec	r25
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <display_enable+0xa>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <display_enable+0x10>
     1b2:	86 83       	std	Z+6, r24	; 0x06
     1b4:	82 e4       	ldi	r24, 0x42	; 66
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <display_enable+0x14>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <display_enable+0x1a>
     1bc:	08 95       	ret

000001be <set_display_data_pins>:
     1be:	e0 e4       	ldi	r30, 0x40	; 64
     1c0:	f4 e0       	ldi	r31, 0x04	; 4
     1c2:	94 81       	ldd	r25, Z+4	; 0x04
     1c4:	90 7f       	andi	r25, 0xF0	; 240
     1c6:	94 83       	std	Z+4, r25	; 0x04
     1c8:	94 81       	ldd	r25, Z+4	; 0x04
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	98 2b       	or	r25, r24
     1ce:	94 83       	std	Z+4, r25	; 0x04
     1d0:	08 95       	ret

000001d2 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     1d2:	80 e4       	ldi	r24, 0x40	; 64
     1d4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     1d8:	08 95       	ret

000001da <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     1da:	80 e4       	ldi	r24, 0x40	; 64
     1dc:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     1e0:	08 95       	ret

000001e2 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     1e2:	e0 e2       	ldi	r30, 0x20	; 32
     1e4:	f4 e0       	ldi	r31, 0x04	; 4
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     1ea:	81 83       	std	Z+1, r24	; 0x01
     1ec:	08 95       	ret

000001ee <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1f4:	08 95       	ret

000001f6 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     1f6:	e0 e2       	ldi	r30, 0x20	; 32
     1f8:	f4 e0       	ldi	r31, 0x04	; 4
     1fa:	85 89       	ldd	r24, Z+21	; 0x15
     1fc:	89 60       	ori	r24, 0x09	; 9
     1fe:	85 8b       	std	Z+21, r24	; 0x15
     200:	08 95       	ret

00000202 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	8f 93       	push	r24
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	/* EDIT: still true?? */
	if(PORTA_INTFLAGS & button_0) {
     212:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     216:	82 ff       	sbrs	r24, 2
     218:	08 c0       	rjmp	.+16     	; 0x22a <__vector_3+0x28>
		flag_button_0_pressed = true;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     220:	e9 e0       	ldi	r30, 0x09	; 9
     222:	f4 e0       	ldi	r31, 0x04	; 4
     224:	80 81       	ld	r24, Z
     226:	84 70       	andi	r24, 0x04	; 4
     228:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     22a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     22e:	83 ff       	sbrs	r24, 3
     230:	08 c0       	rjmp	.+16     	; 0x242 <__vector_3+0x40>
		flag_button_1_pressed = true;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     238:	e9 e0       	ldi	r30, 0x09	; 9
     23a:	f4 e0       	ldi	r31, 0x04	; 4
     23c:	80 81       	ld	r24, Z
     23e:	88 70       	andi	r24, 0x08	; 8
     240:	80 83       	st	Z, r24
	}
}
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	8f 91       	pop	r24
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	8f 93       	push	r24
     25e:	ef 93       	push	r30
     260:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     262:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     266:	85 ff       	sbrs	r24, 5
     268:	08 c0       	rjmp	.+16     	; 0x27a <__vector_4+0x28>
		flag_heartbeat = true;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     270:	e9 e2       	ldi	r30, 0x29	; 41
     272:	f4 e0       	ldi	r31, 0x04	; 4
     274:	80 81       	ld	r24, Z
     276:	80 72       	andi	r24, 0x20	; 32
     278:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     27a:	ff 91       	pop	r31
     27c:	ef 91       	pop	r30
     27e:	8f 91       	pop	r24
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_default>:

ISR(BADISR_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
     29a:	af 93       	push	r26
     29c:	bf 93       	push	r27
     29e:	ef 93       	push	r30
     2a0:	ff 93       	push	r31
     2a2:	84 e1       	ldi	r24, 0x14	; 20
     2a4:	90 e0       	ldi	r25, 0x00	; 0
}

/* HMI LED */

void led_hmi_on(void) {
	PORTB.OUTSET = led_hmi;
     2a6:	e0 e2       	ldi	r30, 0x20	; 32
     2a8:	f4 e0       	ldi	r31, 0x04	; 4
     2aa:	20 e1       	ldi	r18, 0x10	; 16
     2ac:	25 83       	std	Z+5, r18	; 0x05
     2ae:	af e4       	ldi	r26, 0x4F	; 79
     2b0:	b3 ec       	ldi	r27, 0xC3	; 195
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <__vector_default+0x28>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__vector_default+0x2e>
     2b8:	00 00       	nop
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     2ba:	26 83       	std	Z+6, r18	; 0x06
     2bc:	af e4       	ldi	r26, 0x4F	; 79
     2be:	b3 ec       	ldi	r27, 0xC3	; 195
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <__vector_default+0x36>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <__vector_default+0x3c>
     2c6:	00 00       	nop
     2c8:	01 97       	sbiw	r24, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     2ca:	81 f7       	brne	.-32     	; 0x2ac <__vector_default+0x22>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	bf 91       	pop	r27
     2d2:	af 91       	pop	r26
     2d4:	9f 91       	pop	r25
     2d6:	8f 91       	pop	r24
     2d8:	2f 91       	pop	r18
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     2e4:	e0 e0       	ldi	r30, 0x00	; 0
     2e6:	fa e0       	ldi	r31, 0x0A	; 10
     2e8:	8b e2       	ldi	r24, 0x2B	; 43
     2ea:	9a e0       	ldi	r25, 0x0A	; 10
     2ec:	86 a3       	std	Z+38, r24	; 0x26
     2ee:	97 a3       	std	Z+39, r25	; 0x27
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	82 87       	std	Z+10, r24	; 0x0a
     2f4:	08 95       	ret

000002f6 <init_heatbeat_monitor>:
     2f6:	7f df       	rcall	.-258    	; 0x1f6 <setup_interrupt_for_hb_edge_detection>
     2f8:	f5 df       	rcall	.-22     	; 0x2e4 <setup_interrupt_timeout_detection>
     2fa:	08 95       	ret

000002fc <heartbeat_monitor>:
     2fc:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_heartbeat>
     300:	88 23       	and	r24, r24
     302:	29 f0       	breq	.+10     	; 0x30e <heartbeat_monitor+0x12>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	41 df       	rcall	.-382    	; 0x18c <dim_display>
     30a:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_heartbeat>
     30e:	08 95       	ret

00000310 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     31a:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_bpi_heartbeat_ok>
     31e:	0f 90       	pop	r0
     320:	0f be       	out	0x3f, r0	; 63
     322:	0f 90       	pop	r0
     324:	1f 90       	pop	r1
     326:	18 95       	reti

00000328 <main>:
#include "adc.h"


int main(void)
{
	init_flags();
     328:	de de       	rcall	.-580    	; 0xe6 <init_flags>
	init_pins();
     32a:	f1 de       	rcall	.-542    	; 0x10e <init_pins>
	init_heatbeat_monitor();
     32c:	e4 df       	rcall	.-56     	; 0x2f6 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     32e:	1d df       	rcall	.-454    	; 0x16a <set_interrupts_for_buttons>
	init_uart();
     330:	44 d2       	rcall	.+1160   	; 0x7ba <init_uart>
	init_display();
     332:	db d0       	rcall	.+438    	; 0x4ea <init_display>
	adc_init();
     334:	9b de       	rcall	.-714    	; 0x6c <adc_init>
	sei();
     336:	78 94       	sei
	
	display_write_string("Standby Unit\nready!");
     338:	88 ee       	ldi	r24, 0xE8	; 232
     33a:	93 e9       	ldi	r25, 0x93	; 147
     33c:	86 d1       	rcall	.+780    	; 0x64a <display_write_string>
	USART0_sendString("I:STARTED");
     33e:	8c ef       	ldi	r24, 0xFC	; 252
     340:	93 e9       	ldi	r25, 0x93	; 147
     342:	4e d2       	rcall	.+1180   	; 0x7e0 <USART0_sendString>
	dim_display(1);
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	21 df       	rcall	.-446    	; 0x18c <dim_display>
		
		if (flag_goto_sleep == true) {
			flag_goto_sleep = false;
			USART0_sendString_w_eol("going to sleep ...\n");
			_delay_ms(100);
			SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     34a:	00 e5       	ldi	r16, 0x50	; 80
     34c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (flag_request_current_measurement == true) {
			flag_request_current_measurement = false;
			uint16_t input_current = adc_measure_input_current();
			sprintf(buffer,"Cur: %d", input_current);
     34e:	0f 2e       	mov	r0, r31
     350:	fe e4       	ldi	r31, 0x4E	; 78
     352:	af 2e       	mov	r10, r31
     354:	f4 e9       	ldi	r31, 0x94	; 148
     356:	bf 2e       	mov	r11, r31
     358:	f0 2d       	mov	r31, r0
     35a:	c6 e4       	ldi	r28, 0x46	; 70
     35c:	de e3       	ldi	r29, 0x3E	; 62
		}
		
		if	(flag_request_temperature_measurement == true) {
			flag_request_temperature_measurement = false;
			uint16_t temperature = adc_measure_temperature();
			sprintf(buffer, "TMP: %d", temperature);
     35e:	0f 2e       	mov	r0, r31
     360:	f6 e5       	ldi	r31, 0x56	; 86
     362:	cf 2e       	mov	r12, r31
     364:	f4 e9       	ldi	r31, 0x94	; 148
     366:	df 2e       	mov	r13, r31
     368:	f0 2d       	mov	r31, r0
		}
		
		if (flag_request_3v3_measurement == true) {
			flag_request_3v3_measurement = false;
			uint16_t voltage_3v3 = adc_measure_3v3();
			sprintf(buffer, "3V3: %d", voltage_3v3);
     36a:	0f 2e       	mov	r0, r31
     36c:	fe e5       	ldi	r31, 0x5E	; 94
     36e:	ef 2e       	mov	r14, r31
     370:	f4 e9       	ldi	r31, 0x94	; 148
     372:	ff 2e       	mov	r15, r31
     374:	f0 2d       	mov	r31, r0
	USART0_sendString("I:STARTED");
	dim_display(1);
	
    while (1) 
    {
		heartbeat_monitor();
     376:	c2 df       	rcall	.-124    	; 0x2fc <heartbeat_monitor>
		if(!flag_bpi_heartbeat_ok) {
     378:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_bpi_heartbeat_ok>
     37c:	81 11       	cpse	r24, r1
     37e:	01 c0       	rjmp	.+2      	; 0x382 <main+0x5a>
			/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
			disable_usart_tx();
     380:	36 df       	rcall	.-404    	; 0x1ee <disable_usart_tx>
		}
		
		if (flag_button_0_pressed == true) {
     382:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_button_0_pressed>
     386:	88 23       	and	r24, r24
     388:	19 f0       	breq	.+6      	; 0x390 <main+0x68>
			led_hmi_off();
     38a:	f8 de       	rcall	.-528    	; 0x17c <led_hmi_off>
			flag_button_0_pressed = false;
     38c:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_button_0_pressed>
		}
		if (button_1_pressed() == 1) {
     390:	e2 de       	rcall	.-572    	; 0x156 <button_1_pressed>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	19 f4       	brne	.+6      	; 0x39c <main+0x74>
			USART0_sendString("C:Hello\r\n");
     396:	86 e0       	ldi	r24, 0x06	; 6
     398:	94 e9       	ldi	r25, 0x94	; 148
     39a:	22 d2       	rcall	.+1092   	; 0x7e0 <USART0_sendString>
		}
		
		if (flag_usart_string_receive_complete == true) {
     39c:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_usart_string_receive_complete>
     3a0:	88 23       	and	r24, r24
     3a2:	19 f0       	breq	.+6      	; 0x3aa <main+0x82>
			USART0_process_incoming_message();
     3a4:	a3 d2       	rcall	.+1350   	; 0x8ec <USART0_process_incoming_message>
			flag_usart_string_receive_complete = false;
     3a6:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_usart_string_receive_complete>
		}
		
		if (flag_string_for_display_received == true) {
     3aa:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_string_for_display_received>
     3ae:	88 23       	and	r24, r24
     3b0:	69 f0       	breq	.+26     	; 0x3cc <main+0xa4>
			flag_string_for_display_received = false;
     3b2:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_string_for_display_received>
			display_clear();
     3b6:	5c d1       	rcall	.+696    	; 0x670 <display_clear>
			display_write_string(display_line1_content_from_bcu);
     3b8:	87 e9       	ldi	r24, 0x97	; 151
     3ba:	9e e3       	ldi	r25, 0x3E	; 62
     3bc:	46 d1       	rcall	.+652    	; 0x64a <display_write_string>
			display_next_line();
     3be:	3b d1       	rcall	.+630    	; 0x636 <display_next_line>
			display_write_string(display_line2_content_from_bcu);
     3c0:	85 e1       	ldi	r24, 0x15	; 21
     3c2:	9e e3       	ldi	r25, 0x3E	; 62
     3c4:	42 d1       	rcall	.+644    	; 0x64a <display_write_string>
			USART0_sendString_w_eol("New Display\n"); //<- line is being received, but no new content on display??
     3c6:	80 e1       	ldi	r24, 0x10	; 16
     3c8:	94 e9       	ldi	r25, 0x94	; 148
     3ca:	2b d2       	rcall	.+1110   	; 0x822 <USART0_sendString_w_eol>
		}
		
		if (flag_pwr_state_change_request == true) {
     3cc:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_pwr_state_change_request>
     3d0:	88 23       	and	r24, r24
     3d2:	49 f0       	breq	.+18     	; 0x3e6 <main+0xbe>
			display_clear();
     3d4:	4d d1       	rcall	.+666    	; 0x670 <display_clear>
			display_write_string("Received Shut-\ndown Request!");
     3d6:	8d e1       	ldi	r24, 0x1D	; 29
     3d8:	94 e9       	ldi	r25, 0x94	; 148
     3da:	37 d1       	rcall	.+622    	; 0x64a <display_write_string>
			flag_pwr_state_change_request = false;
     3dc:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_pwr_state_change_request>
			goto_pwr_state(next_pwr_state);
     3e0:	80 91 a9 3e 	lds	r24, 0x3EA9	; 0x803ea9 <next_pwr_state>
     3e4:	6d d1       	rcall	.+730    	; 0x6c0 <goto_pwr_state>
		}
		
		if (flag_human_readable_timestamp_next_bu_received == true) {
     3e6:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_human_readable_timestamp_next_bu_received>
     3ea:	88 23       	and	r24, r24
     3ec:	31 f0       	breq	.+12     	; 0x3fa <main+0xd2>
			display_clear();
     3ee:	40 d1       	rcall	.+640    	; 0x670 <display_clear>
			display_write_string(human_readable_timestamp_next_bu);
     3f0:	86 e7       	ldi	r24, 0x76	; 118
     3f2:	9e e3       	ldi	r25, 0x3E	; 62
     3f4:	2a d1       	rcall	.+596    	; 0x64a <display_write_string>
			flag_human_readable_timestamp_next_bu_received = false;
     3f6:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_human_readable_timestamp_next_bu_received>
		}
		
		if (flag_received_seconds_to_next_bu == true) {
     3fa:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_received_seconds_to_next_bu>
     3fe:	88 23       	and	r24, r24
     400:	21 f0       	breq	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			//Todo: acknowledge to bcu
			flag_received_seconds_to_next_bu = false;
     402:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_received_seconds_to_next_bu>
			rtc_write_seconds_to_cmp();
     406:	84 d1       	rcall	.+776    	; 0x710 <rtc_write_seconds_to_cmp>
			rtc_setup();
     408:	79 d1       	rcall	.+754    	; 0x6fc <rtc_setup>
		}
		
		if (flag_goto_sleep == true) {
     40a:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <flag_goto_sleep>
     40e:	88 23       	and	r24, r24
     410:	b1 f0       	breq	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			flag_goto_sleep = false;
     412:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <flag_goto_sleep>
			USART0_sendString_w_eol("going to sleep ...\n");
     416:	8a e3       	ldi	r24, 0x3A	; 58
     418:	94 e9       	ldi	r25, 0x94	; 148
     41a:	03 d2       	rcall	.+1030   	; 0x822 <USART0_sendString_w_eol>
     41c:	2f ef       	ldi	r18, 0xFF	; 255
     41e:	80 e7       	ldi	r24, 0x70	; 112
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
			_delay_ms(100);
			SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     42e:	f8 01       	movw	r30, r16
     430:	80 81       	ld	r24, Z
     432:	82 60       	ori	r24, 0x02	; 2
     434:	80 83       	st	Z, r24
			SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     436:	80 81       	ld	r24, Z
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	80 83       	st	Z, r24
			sleep_cpu();
     43c:	88 95       	sleep
		}
		
		if (flag_request_current_measurement == true) {
     43e:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <flag_request_current_measurement>
     442:	88 23       	and	r24, r24
     444:	a9 f0       	breq	.+42     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			flag_request_current_measurement = false;
     446:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <flag_request_current_measurement>
			uint16_t input_current = adc_measure_input_current();
     44a:	35 de       	rcall	.-918    	; 0xb6 <adc_measure_input_current>
			sprintf(buffer,"Cur: %d", input_current);
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	bf 92       	push	r11
     452:	af 92       	push	r10
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	a8 d4       	rcall	.+2384   	; 0xdaa <sprintf>
			USART0_sendString_w_eol(buffer);
     45a:	ce 01       	movw	r24, r28
     45c:	e2 d1       	rcall	.+964    	; 0x822 <USART0_sendString_w_eol>
			display_clear();
     45e:	08 d1       	rcall	.+528    	; 0x670 <display_clear>
			display_write_string(buffer);
     460:	ce 01       	movw	r24, r28
     462:	f3 d0       	rcall	.+486    	; 0x64a <display_write_string>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
		}
		
		if	(flag_request_temperature_measurement == true) {
     470:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <flag_request_temperature_measurement>
     474:	88 23       	and	r24, r24
     476:	a9 f0       	breq	.+42     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			flag_request_temperature_measurement = false;
     478:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <flag_request_temperature_measurement>
			uint16_t temperature = adc_measure_temperature();
     47c:	28 de       	rcall	.-944    	; 0xce <adc_measure_temperature>
			sprintf(buffer, "TMP: %d", temperature);
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	df 92       	push	r13
     484:	cf 92       	push	r12
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	8f d4       	rcall	.+2334   	; 0xdaa <sprintf>
			USART0_sendString_w_eol(buffer);
     48c:	ce 01       	movw	r24, r28
     48e:	c9 d1       	rcall	.+914    	; 0x822 <USART0_sendString_w_eol>
			display_clear();
     490:	ef d0       	rcall	.+478    	; 0x670 <display_clear>
			display_write_string(buffer);
     492:	ce 01       	movw	r24, r28
     494:	da d0       	rcall	.+436    	; 0x64a <display_write_string>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
		}
		
		if (flag_request_3v3_measurement == true) {
     4a2:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <flag_request_3v3_measurement>
     4a6:	88 23       	and	r24, r24
     4a8:	a9 f0       	breq	.+42     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			flag_request_3v3_measurement = false;
     4aa:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <flag_request_3v3_measurement>
			uint16_t voltage_3v3 = adc_measure_3v3();
     4ae:	f7 dd       	rcall	.-1042   	; 0x9e <adc_measure_3v3>
			sprintf(buffer, "3V3: %d", voltage_3v3);
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	ff 92       	push	r15
     4b6:	ef 92       	push	r14
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	76 d4       	rcall	.+2284   	; 0xdaa <sprintf>
			USART0_sendString_w_eol(buffer);
     4be:	ce 01       	movw	r24, r28
     4c0:	b0 d1       	rcall	.+864    	; 0x822 <USART0_sendString_w_eol>
			display_clear();
     4c2:	d6 d0       	rcall	.+428    	; 0x670 <display_clear>
			display_write_string(buffer);			
     4c4:	ce 01       	movw	r24, r28
     4c6:	c1 d0       	rcall	.+386    	; 0x64a <display_write_string>
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	80 e7       	ldi	r24, 0x70	; 112
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e4:	00 00       	nop
		}
		
		_delay_ms(100);
		
		/* let hmi led toggle as a sbc heartbeat */		
		toggle_hmi_led();
     4e6:	4e de       	rcall	.-868    	; 0x184 <toggle_hmi_led>
		// send_sbc_heartbeat_count_to_bpi();
    }
     4e8:	46 cf       	rjmp	.-372    	; 0x376 <main+0x4e>

000004ea <init_display>:
     4ea:	2f e7       	ldi	r18, 0x7F	; 127
     4ec:	8a e1       	ldi	r24, 0x1A	; 26
     4ee:	96 e0       	ldi	r25, 0x06	; 6
     4f0:	21 50       	subi	r18, 0x01	; 1
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	90 40       	sbci	r25, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <init_display+0x6>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <init_display+0x10>
     4fa:	00 00       	nop
     4fc:	6e de       	rcall	.-804    	; 0x1da <display_clear_rs_pin>
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	5e de       	rcall	.-836    	; 0x1be <set_display_data_pins>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	4e de       	rcall	.-868    	; 0x1a2 <display_enable>
     506:	87 e8       	ldi	r24, 0x87	; 135
     508:	93 e1       	ldi	r25, 0x13	; 19
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <init_display+0x20>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <init_display+0x26>
     510:	00 00       	nop
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	54 de       	rcall	.-856    	; 0x1be <set_display_data_pins>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	44 de       	rcall	.-888    	; 0x1a2 <display_enable>
     51a:	87 e8       	ldi	r24, 0x87	; 135
     51c:	93 e1       	ldi	r25, 0x13	; 19
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <init_display+0x34>
     522:	00 c0       	rjmp	.+0      	; 0x524 <init_display+0x3a>
     524:	00 00       	nop
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	4a de       	rcall	.-876    	; 0x1be <set_display_data_pins>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	3a de       	rcall	.-908    	; 0x1a2 <display_enable>
     52e:	87 e8       	ldi	r24, 0x87	; 135
     530:	93 e1       	ldi	r25, 0x13	; 19
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <init_display+0x48>
     536:	00 c0       	rjmp	.+0      	; 0x538 <init_display+0x4e>
     538:	00 00       	nop
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	40 de       	rcall	.-896    	; 0x1be <set_display_data_pins>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	30 de       	rcall	.-928    	; 0x1a2 <display_enable>
     542:	87 e8       	ldi	r24, 0x87	; 135
     544:	93 e1       	ldi	r25, 0x13	; 19
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <init_display+0x5c>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <init_display+0x62>
     54c:	00 00       	nop
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	36 de       	rcall	.-916    	; 0x1be <set_display_data_pins>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	26 de       	rcall	.-948    	; 0x1a2 <display_enable>
     556:	87 e8       	ldi	r24, 0x87	; 135
     558:	93 e1       	ldi	r25, 0x13	; 19
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <init_display+0x70>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <init_display+0x76>
     560:	00 00       	nop
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	2c de       	rcall	.-936    	; 0x1be <set_display_data_pins>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	1c de       	rcall	.-968    	; 0x1a2 <display_enable>
     56a:	87 e8       	ldi	r24, 0x87	; 135
     56c:	93 e1       	ldi	r25, 0x13	; 19
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <init_display+0x84>
     572:	00 c0       	rjmp	.+0      	; 0x574 <init_display+0x8a>
     574:	00 00       	nop
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	22 de       	rcall	.-956    	; 0x1be <set_display_data_pins>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	12 de       	rcall	.-988    	; 0x1a2 <display_enable>
     57e:	87 e8       	ldi	r24, 0x87	; 135
     580:	93 e1       	ldi	r25, 0x13	; 19
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <init_display+0x98>
     586:	00 c0       	rjmp	.+0      	; 0x588 <init_display+0x9e>
     588:	00 00       	nop
     58a:	8c e0       	ldi	r24, 0x0C	; 12
     58c:	18 de       	rcall	.-976    	; 0x1be <set_display_data_pins>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 de       	rcall	.-1008   	; 0x1a2 <display_enable>
     592:	87 e8       	ldi	r24, 0x87	; 135
     594:	93 e1       	ldi	r25, 0x13	; 19
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <init_display+0xac>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <init_display+0xb2>
     59c:	00 00       	nop
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e de       	rcall	.-996    	; 0x1be <set_display_data_pins>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	fe dd       	rcall	.-1028   	; 0x1a2 <display_enable>
     5a6:	87 e8       	ldi	r24, 0x87	; 135
     5a8:	93 e1       	ldi	r25, 0x13	; 19
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <init_display+0xc0>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <init_display+0xc6>
     5b0:	00 00       	nop
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	04 de       	rcall	.-1016   	; 0x1be <set_display_data_pins>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	f4 dd       	rcall	.-1048   	; 0x1a2 <display_enable>
     5ba:	87 e8       	ldi	r24, 0x87	; 135
     5bc:	93 e1       	ldi	r25, 0x13	; 19
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <init_display+0xd4>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <init_display+0xda>
     5c4:	00 00       	nop
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	fa dd       	rcall	.-1036   	; 0x1be <set_display_data_pins>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	ea dd       	rcall	.-1068   	; 0x1a2 <display_enable>
     5ce:	87 e8       	ldi	r24, 0x87	; 135
     5d0:	93 e1       	ldi	r25, 0x13	; 19
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <init_display+0xe8>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <init_display+0xee>
     5d8:	00 00       	nop
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	f0 dd       	rcall	.-1056   	; 0x1be <set_display_data_pins>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	e0 dd       	rcall	.-1088   	; 0x1a2 <display_enable>
     5e2:	87 e8       	ldi	r24, 0x87	; 135
     5e4:	93 e1       	ldi	r25, 0x13	; 19
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <init_display+0xfc>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <init_display+0x102>
     5ec:	00 00       	nop
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	e6 dd       	rcall	.-1076   	; 0x1be <set_display_data_pins>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	d6 dd       	rcall	.-1108   	; 0x1a2 <display_enable>
     5f6:	87 e8       	ldi	r24, 0x87	; 135
     5f8:	93 e1       	ldi	r25, 0x13	; 19
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <init_display+0x110>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <init_display+0x116>
     600:	00 00       	nop
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	dc dd       	rcall	.-1096   	; 0x1be <set_display_data_pins>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	cc dd       	rcall	.-1128   	; 0x1a2 <display_enable>
     60a:	87 e8       	ldi	r24, 0x87	; 135
     60c:	93 e1       	ldi	r25, 0x13	; 19
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <init_display+0x124>
     612:	00 c0       	rjmp	.+0      	; 0x614 <init_display+0x12a>
     614:	00 00       	nop
     616:	08 95       	ret

00000618 <display_write_char>:
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
     61c:	da dd       	rcall	.-1100   	; 0x1d2 <display_set_rs_pin>
     61e:	8c 2f       	mov	r24, r28
     620:	82 95       	swap	r24
     622:	8f 70       	andi	r24, 0x0F	; 15
     624:	cc dd       	rcall	.-1128   	; 0x1be <set_display_data_pins>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	bc dd       	rcall	.-1160   	; 0x1a2 <display_enable>
     62a:	8c 2f       	mov	r24, r28
     62c:	c8 dd       	rcall	.-1136   	; 0x1be <set_display_data_pins>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	b8 dd       	rcall	.-1168   	; 0x1a2 <display_enable>
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <display_next_line>:
     636:	d1 dd       	rcall	.-1118   	; 0x1da <display_clear_rs_pin>
     638:	8c e0       	ldi	r24, 0x0C	; 12
     63a:	c1 dd       	rcall	.-1150   	; 0x1be <set_display_data_pins>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	b1 dd       	rcall	.-1182   	; 0x1a2 <display_enable>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	bd dd       	rcall	.-1158   	; 0x1be <set_display_data_pins>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	ad dd       	rcall	.-1190   	; 0x1a2 <display_enable>
     648:	08 95       	ret

0000064a <display_write_string>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	ec 01       	movw	r28, r24
     650:	c0 dd       	rcall	.-1152   	; 0x1d2 <display_set_rs_pin>
     652:	88 81       	ld	r24, Y
     654:	88 23       	and	r24, r24
     656:	49 f0       	breq	.+18     	; 0x66a <display_write_string+0x20>
     658:	21 96       	adiw	r28, 0x01	; 1
     65a:	8a 30       	cpi	r24, 0x0A	; 10
     65c:	11 f4       	brne	.+4      	; 0x662 <display_write_string+0x18>
     65e:	eb df       	rcall	.-42     	; 0x636 <display_next_line>
     660:	01 c0       	rjmp	.+2      	; 0x664 <display_write_string+0x1a>
     662:	da df       	rcall	.-76     	; 0x618 <display_write_char>
     664:	89 91       	ld	r24, Y+
     666:	81 11       	cpse	r24, r1
     668:	f8 cf       	rjmp	.-16     	; 0x65a <display_write_string+0x10>
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     670:	b4 dd       	rcall	.-1176   	; 0x1da <display_clear_rs_pin>
	set_display_data_pins(0x00);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	a4 dd       	rcall	.-1208   	; 0x1be <set_display_data_pins>
	display_enable(1);
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	94 dd       	rcall	.-1240   	; 0x1a2 <display_enable>
	set_display_data_pins(0x01);
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	a0 dd       	rcall	.-1216   	; 0x1be <set_display_data_pins>
	display_enable(1);
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 dd       	rcall	.-1248   	; 0x1a2 <display_enable>
     682:	87 ea       	ldi	r24, 0xA7	; 167
     684:	91 e6       	ldi	r25, 0x61	; 97
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <display_clear+0x16>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <display_clear+0x1c>
     68c:	00 00       	nop
     68e:	08 95       	ret

00000690 <enable_5v0_smps>:
#include "flags.h"
#include "gpio_interface.h"
#include "powerpath_control.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     690:	e0 e0       	ldi	r30, 0x00	; 0
     692:	f4 e0       	ldi	r31, 0x04	; 4
     694:	84 81       	ldd	r24, Z+4	; 0x04
     696:	80 61       	ori	r24, 0x10	; 16
     698:	84 83       	std	Z+4, r24	; 0x04
     69a:	08 95       	ret

0000069c <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     69c:	e0 e0       	ldi	r30, 0x00	; 0
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
     6a2:	8f 7e       	andi	r24, 0xEF	; 239
     6a4:	84 83       	std	Z+4, r24	; 0x04
     6a6:	08 95       	ret

000006a8 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     6a8:	e0 e2       	ldi	r30, 0x20	; 32
     6aa:	f4 e0       	ldi	r31, 0x04	; 4
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	8d 7f       	andi	r24, 0xFD	; 253
     6b0:	84 83       	std	Z+4, r24	; 0x04
     6b2:	08 95       	ret

000006b4 <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     6b4:	e0 e2       	ldi	r30, 0x20	; 32
     6b6:	f4 e0       	ldi	r31, 0x04	; 4
     6b8:	84 81       	ldd	r24, Z+4	; 0x04
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	84 83       	std	Z+4, r24	; 0x04
     6be:	08 95       	ret

000006c0 <goto_pwr_state>:
}

void goto_pwr_state(enum pwr_states pwr_state) {
	switch(pwr_state) {
     6c0:	88 23       	and	r24, r24
     6c2:	19 f0       	breq	.+6      	; 0x6ca <goto_pwr_state+0xa>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	61 f0       	breq	.+24     	; 0x6e0 <goto_pwr_state+0x20>
     6c8:	08 95       	ret
		case standby:
			
		if (flag_bpi_ready_for_shutdown == true && flag_bpi_shutdown_timer_elapsed == true) {
     6ca:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_bpi_ready_for_shutdown>
     6ce:	88 23       	and	r24, r24
     6d0:	49 f0       	breq	.+18     	; 0x6e4 <goto_pwr_state+0x24>
     6d2:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_bpi_shutdown_timer_elapsed>
     6d6:	88 23       	and	r24, r24
     6d8:	29 f0       	breq	.+10     	; 0x6e4 <goto_pwr_state+0x24>
			disable_bpi_sply();
     6da:	ec df       	rcall	.-40     	; 0x6b4 <disable_bpi_sply>
			disable_5v0_smps();
     6dc:	df df       	rcall	.-66     	; 0x69c <disable_5v0_smps>
     6de:	08 95       	ret
		case display_on:
		
		break;
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			enable_5v0_smps();
     6e0:	d7 df       	rcall	.-82     	; 0x690 <enable_5v0_smps>
			enable_bpi_sply();
     6e2:	e2 df       	rcall	.-60     	; 0x6a8 <enable_bpi_sply>
     6e4:	08 95       	ret

000006e6 <rtc_reset_counter>:
	rtc_set_compare_interrupt();
	rtc_use_internal_1k024_oscillator();
}

void rtc_set_compare_value(void) {
	RTC.CMP = 0x0001;
     6e6:	e0 e4       	ldi	r30, 0x40	; 64
     6e8:	f1 e0       	ldi	r31, 0x01	; 1
     6ea:	10 86       	std	Z+8, r1	; 0x08
     6ec:	11 86       	std	Z+9, r1	; 0x09
     6ee:	08 95       	ret

000006f0 <rtc_wait_for_all_status_bits_zero>:
     6f0:	e0 e4       	ldi	r30, 0x40	; 64
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	81 81       	ldd	r24, Z+1	; 0x01
     6f6:	81 11       	cpse	r24, r1
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <rtc_wait_for_all_status_bits_zero+0x4>
     6fa:	08 95       	ret

000006fc <rtc_setup>:
     6fc:	f9 df       	rcall	.-14     	; 0x6f0 <rtc_wait_for_all_status_bits_zero>
     6fe:	e0 e4       	ldi	r30, 0x40	; 64
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	81 ed       	ldi	r24, 0xD1	; 209
     704:	80 83       	st	Z, r24
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	82 83       	std	Z+2, r24	; 0x02
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	87 83       	std	Z+7, r24	; 0x07
     70e:	08 95       	ret

00000710 <rtc_write_seconds_to_cmp>:
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     718:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <seconds_to_next_bu>
     71c:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <seconds_to_next_bu+0x1>
     720:	a0 91 13 3e 	lds	r26, 0x3E13	; 0x803e13 <seconds_to_next_bu+0x2>
     724:	b0 91 14 3e 	lds	r27, 0x3E14	; 0x803e14 <seconds_to_next_bu+0x3>
     728:	bb 23       	and	r27, r27
     72a:	1c f4       	brge	.+6      	; 0x732 <rtc_write_seconds_to_cmp+0x22>
     72c:	4f 96       	adiw	r24, 0x1f	; 31
     72e:	a1 1d       	adc	r26, r1
     730:	b1 1d       	adc	r27, r1
     732:	6c 01       	movw	r12, r24
     734:	7d 01       	movw	r14, r26
     736:	68 94       	set
     738:	14 f8       	bld	r1, 4
     73a:	f5 94       	asr	r15
     73c:	e7 94       	ror	r14
     73e:	d7 94       	ror	r13
     740:	c7 94       	ror	r12
     742:	16 94       	lsr	r1
     744:	d1 f7       	brne	.-12     	; 0x73a <rtc_write_seconds_to_cmp+0x2a>
	rtc_reset_counter();
     746:	cf df       	rcall	.-98     	; 0x6e6 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     748:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     74c:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     77c:	e0 e4       	ldi	r30, 0x40	; 64
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	83 81       	ldd	r24, Z+3	; 0x03
     782:	82 60       	ori	r24, 0x02	; 2
     784:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     786:	86 e6       	ldi	r24, 0x66	; 102
     788:	94 e9       	ldi	r25, 0x94	; 148
     78a:	2a d0       	rcall	.+84     	; 0x7e0 <USART0_sendString>
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     7ae:	e0 e0       	ldi	r30, 0x00	; 0
     7b0:	f8 e0       	ldi	r31, 0x08	; 8
     7b2:	85 81       	ldd	r24, Z+5	; 0x05
     7b4:	80 68       	ori	r24, 0x80	; 128
     7b6:	85 83       	std	Z+5, r24	; 0x05
     7b8:	08 95       	ret

000007ba <init_uart>:
     7ba:	13 dd       	rcall	.-1498   	; 0x1e2 <set_pb2_txd_and_pb3_rxd>
     7bc:	e0 e0       	ldi	r30, 0x00	; 0
     7be:	f8 e0       	ldi	r31, 0x08	; 8
     7c0:	8c e6       	ldi	r24, 0x6C	; 108
     7c2:	95 e0       	ldi	r25, 0x05	; 5
     7c4:	80 87       	std	Z+8, r24	; 0x08
     7c6:	91 87       	std	Z+9, r25	; 0x09
     7c8:	80 ec       	ldi	r24, 0xC0	; 192
     7ca:	86 83       	std	Z+6, r24	; 0x06
     7cc:	f0 df       	rcall	.-32     	; 0x7ae <USART0_enable_rx_complete_interrupt>
     7ce:	08 95       	ret

000007d0 <USART0_sendChar>:
     7d0:	e0 e0       	ldi	r30, 0x00	; 0
     7d2:	f8 e0       	ldi	r31, 0x08	; 8
     7d4:	94 81       	ldd	r25, Z+4	; 0x04
     7d6:	95 ff       	sbrs	r25, 5
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <USART0_sendChar+0x4>
     7da:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     7de:	08 95       	ret

000007e0 <USART0_sendString>:
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	8c 01       	movw	r16, r24
     7ee:	7c 01       	movw	r14, r24
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <USART0_sendString+0x20>
     7f6:	f7 01       	movw	r30, r14
     7f8:	81 91       	ld	r24, Z+
     7fa:	7f 01       	movw	r14, r30
     7fc:	e9 df       	rcall	.-46     	; 0x7d0 <USART0_sendChar>
     7fe:	21 96       	adiw	r28, 0x01	; 1
     800:	f8 01       	movw	r30, r16
     802:	01 90       	ld	r0, Z+
     804:	00 20       	and	r0, r0
     806:	e9 f7       	brne	.-6      	; 0x802 <USART0_sendString+0x22>
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	e0 1b       	sub	r30, r16
     80c:	f1 0b       	sbc	r31, r17
     80e:	ce 17       	cp	r28, r30
     810:	df 07       	cpc	r29, r31
     812:	88 f3       	brcs	.-30     	; 0x7f6 <USART0_sendString+0x16>
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <USART0_sendString_w_eol>:
     822:	de df       	rcall	.-68     	; 0x7e0 <USART0_sendString>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	d4 df       	rcall	.-88     	; 0x7d0 <USART0_sendChar>
     828:	08 95       	ret

0000082a <USART0_read>:
     82a:	e0 e0       	ldi	r30, 0x00	; 0
     82c:	f8 e0       	ldi	r31, 0x08	; 8
     82e:	84 81       	ldd	r24, Z+4	; 0x04
     830:	88 23       	and	r24, r24
     832:	ec f7       	brge	.-6      	; 0x82e <USART0_read+0x4>
     834:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     838:	08 95       	ret

0000083a <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	7c 01       	movw	r14, r24
     84c:	6b 01       	movw	r12, r22
     84e:	61 32       	cpi	r22, 0x21	; 33
     850:	71 05       	cpc	r23, r1
     852:	24 f0       	brlt	.+8      	; 0x85c <USART0_read_string+0x22>
     854:	68 94       	set
     856:	cc 24       	eor	r12, r12
     858:	c5 f8       	bld	r12, 5
     85a:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     85c:	dd 20       	and	r13, r13
     85e:	c4 f0       	brlt	.+48     	; 0x890 <USART0_read_string+0x56>
     860:	e7 01       	movw	r28, r14
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	7e 01       	movw	r14, r28
		i++;
     868:	0f 5f       	subi	r16, 0xFF	; 255
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     86c:	de df       	rcall	.-68     	; 0x82a <USART0_read>
     86e:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     870:	8a 30       	cpi	r24, 0x0A	; 10
     872:	21 f0       	breq	.+8      	; 0x87c <USART0_read_string+0x42>
     874:	88 23       	and	r24, r24
     876:	11 f0       	breq	.+4      	; 0x87c <USART0_read_string+0x42>
     878:	8d 30       	cpi	r24, 0x0D	; 13
     87a:	31 f4       	brne	.+12     	; 0x888 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     87c:	f7 01       	movw	r30, r14
     87e:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     880:	c0 16       	cp	r12, r16
     882:	d1 06       	cpc	r13, r17
     884:	3c f4       	brge	.+14     	; 0x894 <USART0_read_string+0x5a>
     886:	04 c0       	rjmp	.+8      	; 0x890 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     888:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     88a:	c0 16       	cp	r12, r16
     88c:	d1 06       	cpc	r13, r17
     88e:	5c f7       	brge	.-42     	; 0x866 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     890:	f7 01       	movw	r30, r14
     892:	10 82       	st	Z, r1
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <convert_str_to_long>:
		USART0_sendString_w_eol("ACK:3V");
		flag_request_3v3_measurement = true;
	}
}

long convert_str_to_long(char *str) {
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <convert_str_to_long+0xa>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	08 2f       	mov	r16, r24
     8b6:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	8b e6       	ldi	r24, 0x6B	; 107
     8be:	94 e9       	ldi	r25, 0x94	; 148
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	5f d2       	rcall	.+1214   	; 0xd84 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     8c6:	4a e0       	ldi	r20, 0x0A	; 10
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	be 01       	movw	r22, r28
     8cc:	6f 5f       	subi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	80 2f       	mov	r24, r16
     8d2:	91 2f       	mov	r25, r17
     8d4:	02 d1       	rcall	.+516    	; 0xada <strtol>
	return ret;
}
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     8f4:	6a e7       	ldi	r22, 0x7A	; 122
     8f6:	74 e9       	ldi	r23, 0x94	; 148
     8f8:	86 e2       	ldi	r24, 0x26	; 38
     8fa:	9e e3       	ldi	r25, 0x3E	; 62
     8fc:	0c d2       	rcall	.+1048   	; 0xd16 <strcmp>
     8fe:	89 2b       	or	r24, r25
     900:	19 f4       	brne	.+6      	; 0x908 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     902:	8f e7       	ldi	r24, 0x7F	; 127
     904:	94 e9       	ldi	r25, 0x94	; 148
     906:	8d df       	rcall	.-230    	; 0x822 <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     908:	64 e8       	ldi	r22, 0x84	; 132
     90a:	74 e9       	ldi	r23, 0x94	; 148
     90c:	86 e2       	ldi	r24, 0x26	; 38
     90e:	9e e3       	ldi	r25, 0x3E	; 62
     910:	fe d1       	rcall	.+1020   	; 0xd0e <strtok>
     912:	d8 2f       	mov	r29, r24
     914:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     916:	66 ee       	ldi	r22, 0xE6	; 230
     918:	73 e9       	ldi	r23, 0x93	; 147
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	f7 d1       	rcall	.+1006   	; 0xd0e <strtok>
     920:	08 2f       	mov	r16, r24
     922:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	86 e8       	ldi	r24, 0x86	; 134
     92e:	94 e9       	ldi	r25, 0x94	; 148
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	86 e4       	ldi	r24, 0x46	; 70
     936:	9e e3       	ldi	r25, 0x3E	; 62
     938:	9f 93       	push	r25
     93a:	8f 93       	push	r24
     93c:	36 d2       	rcall	.+1132   	; 0xdaa <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     93e:	6a e9       	ldi	r22, 0x9A	; 154
     940:	74 e9       	ldi	r23, 0x94	; 148
     942:	8d 2f       	mov	r24, r29
     944:	9c 2f       	mov	r25, r28
     946:	e7 d1       	rcall	.+974    	; 0xd16 <strcmp>
     948:	2d b7       	in	r18, 0x3d	; 61
     94a:	3e b7       	in	r19, 0x3e	; 62
     94c:	28 5f       	subi	r18, 0xF8	; 248
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	2d bf       	out	0x3d, r18	; 61
     952:	3e bf       	out	0x3e, r19	; 62
     954:	89 2b       	or	r24, r25
     956:	41 f4       	brne	.+16     	; 0x968 <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_eol("ACK_D1");
     958:	86 e9       	ldi	r24, 0x96	; 150
     95a:	94 e9       	ldi	r25, 0x94	; 148
     95c:	62 df       	rcall	.-316    	; 0x822 <USART0_sendString_w_eol>
		strcpy(display_line1_content_from_bcu, payload);
     95e:	60 2f       	mov	r22, r16
     960:	71 2f       	mov	r23, r17
     962:	87 e9       	ldi	r24, 0x97	; 151
     964:	9e e3       	ldi	r25, 0x3E	; 62
     966:	e0 d1       	rcall	.+960    	; 0xd28 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     968:	61 ea       	ldi	r22, 0xA1	; 161
     96a:	74 e9       	ldi	r23, 0x94	; 148
     96c:	8d 2f       	mov	r24, r29
     96e:	9c 2f       	mov	r25, r28
     970:	d2 d1       	rcall	.+932    	; 0xd16 <strcmp>
     972:	89 2b       	or	r24, r25
     974:	59 f4       	brne	.+22     	; 0x98c <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_eol("ACK_D2");
     976:	8d e9       	ldi	r24, 0x9D	; 157
     978:	94 e9       	ldi	r25, 0x94	; 148
     97a:	53 df       	rcall	.-346    	; 0x822 <USART0_sendString_w_eol>
		strcpy(display_line2_content_from_bcu, payload);
     97c:	60 2f       	mov	r22, r16
     97e:	71 2f       	mov	r23, r17
     980:	85 e1       	ldi	r24, 0x15	; 21
     982:	9e e3       	ldi	r25, 0x3E	; 62
     984:	d1 d1       	rcall	.+930    	; 0xd28 <strcpy>
		flag_string_for_display_received = true;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     98c:	64 ea       	ldi	r22, 0xA4	; 164
     98e:	74 e9       	ldi	r23, 0x94	; 148
     990:	8d 2f       	mov	r24, r29
     992:	9c 2f       	mov	r25, r28
     994:	c0 d1       	rcall	.+896    	; 0xd16 <strcmp>
     996:	89 2b       	or	r24, r25
     998:	29 f4       	brne	.+10     	; 0x9a4 <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_pwr_state_change_request>
		next_pwr_state = standby;
     9a0:	10 92 a9 3e 	sts	0x3EA9, r1	; 0x803ea9 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     9a4:	67 ea       	ldi	r22, 0xA7	; 167
     9a6:	74 e9       	ldi	r23, 0x94	; 148
     9a8:	8d 2f       	mov	r24, r29
     9aa:	9c 2f       	mov	r25, r28
     9ac:	b4 d1       	rcall	.+872    	; 0xd16 <strcmp>
     9ae:	89 2b       	or	r24, r25
     9b0:	11 f5       	brne	.+68     	; 0x9f6 <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     9b2:	1f 93       	push	r17
     9b4:	0f 93       	push	r16
     9b6:	8a ea       	ldi	r24, 0xAA	; 170
     9b8:	94 e9       	ldi	r25, 0x94	; 148
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	86 e4       	ldi	r24, 0x46	; 70
     9c0:	9e e3       	ldi	r25, 0x3E	; 62
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	f1 d1       	rcall	.+994    	; 0xdaa <sprintf>
		USART0_sendString_w_eol(buffer);
     9c8:	86 e4       	ldi	r24, 0x46	; 70
     9ca:	9e e3       	ldi	r25, 0x3E	; 62
     9cc:	2a df       	rcall	.-428    	; 0x822 <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     9ce:	80 2f       	mov	r24, r16
     9d0:	91 2f       	mov	r25, r17
     9d2:	69 df       	rcall	.-302    	; 0x8a6 <convert_str_to_long>
     9d4:	60 93 11 3e 	sts	0x3E11, r22	; 0x803e11 <seconds_to_next_bu>
     9d8:	70 93 12 3e 	sts	0x3E12, r23	; 0x803e12 <seconds_to_next_bu+0x1>
     9dc:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <seconds_to_next_bu+0x2>
     9e0:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <flag_received_seconds_to_next_bu>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     9f6:	65 eb       	ldi	r22, 0xB5	; 181
     9f8:	74 e9       	ldi	r23, 0x94	; 148
     9fa:	8d 2f       	mov	r24, r29
     9fc:	9c 2f       	mov	r25, r28
     9fe:	8b d1       	rcall	.+790    	; 0xd16 <strcmp>
     a00:	89 2b       	or	r24, r25
     a02:	59 f4       	brne	.+22     	; 0xa1a <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     a04:	60 2f       	mov	r22, r16
     a06:	71 2f       	mov	r23, r17
     a08:	86 e7       	ldi	r24, 0x76	; 118
     a0a:	9e e3       	ldi	r25, 0x3E	; 62
     a0c:	8d d1       	rcall	.+794    	; 0xd28 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     a0e:	8a e0       	ldi	r24, 0x0A	; 10
     a10:	80 93 86 3e 	sts	0x3E86, r24	; 0x803e86 <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     a1a:	68 eb       	ldi	r22, 0xB8	; 184
     a1c:	74 e9       	ldi	r23, 0x94	; 148
     a1e:	8d 2f       	mov	r24, r29
     a20:	9c 2f       	mov	r25, r28
     a22:	79 d1       	rcall	.+754    	; 0xd16 <strcmp>
     a24:	89 2b       	or	r24, r25
     a26:	19 f4       	brne	.+6      	; 0xa2e <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     a2e:	6f eb       	ldi	r22, 0xBF	; 191
     a30:	74 e9       	ldi	r23, 0x94	; 148
     a32:	8d 2f       	mov	r24, r29
     a34:	9c 2f       	mov	r25, r28
     a36:	6f d1       	rcall	.+734    	; 0xd16 <strcmp>
     a38:	89 2b       	or	r24, r25
     a3a:	31 f4       	brne	.+12     	; 0xa48 <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_eol("ACK:CC");
     a3c:	8b eb       	ldi	r24, 0xBB	; 187
     a3e:	94 e9       	ldi	r25, 0x94	; 148
     a40:	f0 de       	rcall	.-544    	; 0x822 <USART0_sendString_w_eol>
		flag_request_current_measurement = true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     a48:	66 ec       	ldi	r22, 0xC6	; 198
     a4a:	74 e9       	ldi	r23, 0x94	; 148
     a4c:	8d 2f       	mov	r24, r29
     a4e:	9c 2f       	mov	r25, r28
     a50:	62 d1       	rcall	.+708    	; 0xd16 <strcmp>
     a52:	89 2b       	or	r24, r25
     a54:	31 f4       	brne	.+12     	; 0xa62 <USART0_process_incoming_message+0x176>
		USART0_sendString_w_eol("ACK:TP");
     a56:	82 ec       	ldi	r24, 0xC2	; 194
     a58:	94 e9       	ldi	r25, 0x94	; 148
     a5a:	e3 de       	rcall	.-570    	; 0x822 <USART0_sendString_w_eol>
		flag_request_temperature_measurement = true;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     a62:	6d ec       	ldi	r22, 0xCD	; 205
     a64:	74 e9       	ldi	r23, 0x94	; 148
     a66:	8d 2f       	mov	r24, r29
     a68:	9c 2f       	mov	r25, r28
     a6a:	55 d1       	rcall	.+682    	; 0xd16 <strcmp>
     a6c:	89 2b       	or	r24, r25
     a6e:	31 f4       	brne	.+12     	; 0xa7c <USART0_process_incoming_message+0x190>
		USART0_sendString_w_eol("ACK:3V");
     a70:	89 ec       	ldi	r24, 0xC9	; 201
     a72:	94 e9       	ldi	r25, 0x94	; 148
     a74:	d6 de       	rcall	.-596    	; 0x822 <USART0_sendString_w_eol>
		flag_request_3v3_measurement = true;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <flag_request_3v3_measurement>
	}
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     aa8:	60 e2       	ldi	r22, 0x20	; 32
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	86 e2       	ldi	r24, 0x26	; 38
     aae:	9e e3       	ldi	r25, 0x3E	; 62
     ab0:	c4 de       	rcall	.-632    	; 0x83a <USART0_read_string>
	flag_usart_string_receive_complete = true;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_usart_string_receive_complete>
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <strtol>:
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	e2 e7       	ldi	r30, 0x72	; 114
     ae0:	f5 e0       	ldi	r31, 0x05	; 5
     ae2:	43 c4       	rjmp	.+2182   	; 0x136a <__prologue_saves__+0x2>
     ae4:	5c 01       	movw	r10, r24
     ae6:	6b 01       	movw	r12, r22
     ae8:	7a 01       	movw	r14, r20
     aea:	61 15       	cp	r22, r1
     aec:	71 05       	cpc	r23, r1
     aee:	19 f0       	breq	.+6      	; 0xaf6 <strtol+0x1c>
     af0:	fb 01       	movw	r30, r22
     af2:	80 83       	st	Z, r24
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	e1 14       	cp	r14, r1
     af8:	f1 04       	cpc	r15, r1
     afa:	29 f0       	breq	.+10     	; 0xb06 <strtol+0x2c>
     afc:	c7 01       	movw	r24, r14
     afe:	02 97       	sbiw	r24, 0x02	; 2
     b00:	83 97       	sbiw	r24, 0x23	; 35
     b02:	08 f0       	brcs	.+2      	; 0xb06 <strtol+0x2c>
     b04:	e2 c0       	rjmp	.+452    	; 0xcca <strtol+0x1f0>
     b06:	e5 01       	movw	r28, r10
     b08:	21 96       	adiw	r28, 0x01	; 1
     b0a:	f5 01       	movw	r30, r10
     b0c:	10 81       	ld	r17, Z
     b0e:	81 2f       	mov	r24, r17
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	f4 d0       	rcall	.+488    	; 0xcfc <isspace>
     b14:	89 2b       	or	r24, r25
     b16:	11 f0       	breq	.+4      	; 0xb1c <strtol+0x42>
     b18:	5e 01       	movw	r10, r28
     b1a:	f5 cf       	rjmp	.-22     	; 0xb06 <strtol+0x2c>
     b1c:	1d 32       	cpi	r17, 0x2D	; 45
     b1e:	29 f4       	brne	.+10     	; 0xb2a <strtol+0x50>
     b20:	21 96       	adiw	r28, 0x01	; 1
     b22:	f5 01       	movw	r30, r10
     b24:	11 81       	ldd	r17, Z+1	; 0x01
     b26:	01 e0       	ldi	r16, 0x01	; 1
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <strtol+0x5e>
     b2a:	1b 32       	cpi	r17, 0x2B	; 43
     b2c:	21 f4       	brne	.+8      	; 0xb36 <strtol+0x5c>
     b2e:	e5 01       	movw	r28, r10
     b30:	22 96       	adiw	r28, 0x02	; 2
     b32:	f5 01       	movw	r30, r10
     b34:	11 81       	ldd	r17, Z+1	; 0x01
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	e1 14       	cp	r14, r1
     b3a:	f1 04       	cpc	r15, r1
     b3c:	09 f1       	breq	.+66     	; 0xb80 <strtol+0xa6>
     b3e:	f0 e1       	ldi	r31, 0x10	; 16
     b40:	ef 16       	cp	r14, r31
     b42:	f1 04       	cpc	r15, r1
     b44:	29 f4       	brne	.+10     	; 0xb50 <strtol+0x76>
     b46:	3e c0       	rjmp	.+124    	; 0xbc4 <strtol+0xea>
     b48:	10 e3       	ldi	r17, 0x30	; 48
     b4a:	e1 14       	cp	r14, r1
     b4c:	f1 04       	cpc	r15, r1
     b4e:	21 f1       	breq	.+72     	; 0xb98 <strtol+0xbe>
     b50:	28 e0       	ldi	r18, 0x08	; 8
     b52:	e2 16       	cp	r14, r18
     b54:	f1 04       	cpc	r15, r1
     b56:	01 f1       	breq	.+64     	; 0xb98 <strtol+0xbe>
     b58:	54 f4       	brge	.+20     	; 0xb6e <strtol+0x94>
     b5a:	e2 e0       	ldi	r30, 0x02	; 2
     b5c:	ee 16       	cp	r14, r30
     b5e:	f1 04       	cpc	r15, r1
     b60:	21 f5       	brne	.+72     	; 0xbaa <strtol+0xd0>
     b62:	81 2c       	mov	r8, r1
     b64:	91 2c       	mov	r9, r1
     b66:	a1 2c       	mov	r10, r1
     b68:	b0 e4       	ldi	r27, 0x40	; 64
     b6a:	bb 2e       	mov	r11, r27
     b6c:	3d c0       	rjmp	.+122    	; 0xbe8 <strtol+0x10e>
     b6e:	fa e0       	ldi	r31, 0x0A	; 10
     b70:	ef 16       	cp	r14, r31
     b72:	f1 04       	cpc	r15, r1
     b74:	39 f0       	breq	.+14     	; 0xb84 <strtol+0xaa>
     b76:	20 e1       	ldi	r18, 0x10	; 16
     b78:	e2 16       	cp	r14, r18
     b7a:	f1 04       	cpc	r15, r1
     b7c:	b1 f4       	brne	.+44     	; 0xbaa <strtol+0xd0>
     b7e:	2f c0       	rjmp	.+94     	; 0xbde <strtol+0x104>
     b80:	10 33       	cpi	r17, 0x30	; 48
     b82:	11 f1       	breq	.+68     	; 0xbc8 <strtol+0xee>
     b84:	fa e0       	ldi	r31, 0x0A	; 10
     b86:	ef 2e       	mov	r14, r31
     b88:	f1 2c       	mov	r15, r1
     b8a:	ac ec       	ldi	r26, 0xCC	; 204
     b8c:	8a 2e       	mov	r8, r26
     b8e:	98 2c       	mov	r9, r8
     b90:	a8 2c       	mov	r10, r8
     b92:	ac e0       	ldi	r26, 0x0C	; 12
     b94:	ba 2e       	mov	r11, r26
     b96:	28 c0       	rjmp	.+80     	; 0xbe8 <strtol+0x10e>
     b98:	78 e0       	ldi	r23, 0x08	; 8
     b9a:	e7 2e       	mov	r14, r23
     b9c:	f1 2c       	mov	r15, r1
     b9e:	81 2c       	mov	r8, r1
     ba0:	91 2c       	mov	r9, r1
     ba2:	a1 2c       	mov	r10, r1
     ba4:	e0 e1       	ldi	r30, 0x10	; 16
     ba6:	be 2e       	mov	r11, r30
     ba8:	1f c0       	rjmp	.+62     	; 0xbe8 <strtol+0x10e>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e8       	ldi	r25, 0x80	; 128
     bb2:	97 01       	movw	r18, r14
     bb4:	0f 2c       	mov	r0, r15
     bb6:	00 0c       	add	r0, r0
     bb8:	44 0b       	sbc	r20, r20
     bba:	55 0b       	sbc	r21, r21
     bbc:	a9 d3       	rcall	.+1874   	; 0x1310 <__udivmodsi4>
     bbe:	49 01       	movw	r8, r18
     bc0:	5a 01       	movw	r10, r20
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <strtol+0x10e>
     bc4:	10 33       	cpi	r17, 0x30	; 48
     bc6:	59 f4       	brne	.+22     	; 0xbde <strtol+0x104>
     bc8:	88 81       	ld	r24, Y
     bca:	8f 7d       	andi	r24, 0xDF	; 223
     bcc:	88 35       	cpi	r24, 0x58	; 88
     bce:	09 f0       	breq	.+2      	; 0xbd2 <strtol+0xf8>
     bd0:	bb cf       	rjmp	.-138    	; 0xb48 <strtol+0x6e>
     bd2:	19 81       	ldd	r17, Y+1	; 0x01
     bd4:	22 96       	adiw	r28, 0x02	; 2
     bd6:	02 60       	ori	r16, 0x02	; 2
     bd8:	80 e1       	ldi	r24, 0x10	; 16
     bda:	e8 2e       	mov	r14, r24
     bdc:	f1 2c       	mov	r15, r1
     bde:	81 2c       	mov	r8, r1
     be0:	91 2c       	mov	r9, r1
     be2:	a1 2c       	mov	r10, r1
     be4:	68 e0       	ldi	r22, 0x08	; 8
     be6:	b6 2e       	mov	r11, r22
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	cb 01       	movw	r24, r22
     bf0:	27 01       	movw	r4, r14
     bf2:	0f 2c       	mov	r0, r15
     bf4:	00 0c       	add	r0, r0
     bf6:	66 08       	sbc	r6, r6
     bf8:	77 08       	sbc	r7, r7
     bfa:	fe 01       	movw	r30, r28
     bfc:	50 ed       	ldi	r21, 0xD0	; 208
     bfe:	35 2e       	mov	r3, r21
     c00:	31 0e       	add	r3, r17
     c02:	29 e0       	ldi	r18, 0x09	; 9
     c04:	23 15       	cp	r18, r3
     c06:	70 f4       	brcc	.+28     	; 0xc24 <strtol+0x14a>
     c08:	2f eb       	ldi	r18, 0xBF	; 191
     c0a:	21 0f       	add	r18, r17
     c0c:	2a 31       	cpi	r18, 0x1A	; 26
     c0e:	18 f4       	brcc	.+6      	; 0xc16 <strtol+0x13c>
     c10:	39 ec       	ldi	r19, 0xC9	; 201
     c12:	33 2e       	mov	r3, r19
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <strtol+0x148>
     c16:	2f e9       	ldi	r18, 0x9F	; 159
     c18:	21 0f       	add	r18, r17
     c1a:	2a 31       	cpi	r18, 0x1A	; 26
     c1c:	10 f5       	brcc	.+68     	; 0xc62 <strtol+0x188>
     c1e:	29 ea       	ldi	r18, 0xA9	; 169
     c20:	32 2e       	mov	r3, r18
     c22:	31 0e       	add	r3, r17
     c24:	23 2d       	mov	r18, r3
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	2e 15       	cp	r18, r14
     c2a:	3f 05       	cpc	r19, r15
     c2c:	d4 f4       	brge	.+52     	; 0xc62 <strtol+0x188>
     c2e:	47 fd       	sbrc	r20, 7
     c30:	15 c0       	rjmp	.+42     	; 0xc5c <strtol+0x182>
     c32:	86 16       	cp	r8, r22
     c34:	97 06       	cpc	r9, r23
     c36:	a8 06       	cpc	r10, r24
     c38:	b9 06       	cpc	r11, r25
     c3a:	68 f0       	brcs	.+26     	; 0xc56 <strtol+0x17c>
     c3c:	a3 01       	movw	r20, r6
     c3e:	92 01       	movw	r18, r4
     c40:	58 d3       	rcall	.+1712   	; 0x12f2 <__mulsi3>
     c42:	63 0d       	add	r22, r3
     c44:	71 1d       	adc	r23, r1
     c46:	81 1d       	adc	r24, r1
     c48:	91 1d       	adc	r25, r1
     c4a:	61 30       	cpi	r22, 0x01	; 1
     c4c:	71 05       	cpc	r23, r1
     c4e:	81 05       	cpc	r24, r1
     c50:	20 e8       	ldi	r18, 0x80	; 128
     c52:	92 07       	cpc	r25, r18
     c54:	10 f0       	brcs	.+4      	; 0xc5a <strtol+0x180>
     c56:	4f ef       	ldi	r20, 0xFF	; 255
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <strtol+0x182>
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	10 81       	ld	r17, Z
     c60:	cc cf       	rjmp	.-104    	; 0xbfa <strtol+0x120>
     c62:	20 2f       	mov	r18, r16
     c64:	21 70       	andi	r18, 0x01	; 1
     c66:	c1 14       	cp	r12, r1
     c68:	d1 04       	cpc	r13, r1
     c6a:	71 f0       	breq	.+28     	; 0xc88 <strtol+0x1ae>
     c6c:	44 23       	and	r20, r20
     c6e:	29 f0       	breq	.+10     	; 0xc7a <strtol+0x1a0>
     c70:	21 97       	sbiw	r28, 0x01	; 1
     c72:	f6 01       	movw	r30, r12
     c74:	c0 83       	st	Z, r28
     c76:	d1 83       	std	Z+1, r29	; 0x01
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <strtol+0x1ae>
     c7a:	01 ff       	sbrs	r16, 1
     c7c:	19 c0       	rjmp	.+50     	; 0xcb0 <strtol+0x1d6>
     c7e:	22 97       	sbiw	r28, 0x02	; 2
     c80:	f6 01       	movw	r30, r12
     c82:	c0 83       	st	Z, r28
     c84:	d1 83       	std	Z+1, r29	; 0x01
     c86:	14 c0       	rjmp	.+40     	; 0xcb0 <strtol+0x1d6>
     c88:	47 ff       	sbrs	r20, 7
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <strtol+0x1d6>
     c8c:	22 23       	and	r18, r18
     c8e:	29 f0       	breq	.+10     	; 0xc9a <strtol+0x1c0>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e8       	ldi	r25, 0x80	; 128
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <strtol+0x1c8>
     c9a:	6f ef       	ldi	r22, 0xFF	; 255
     c9c:	7f ef       	ldi	r23, 0xFF	; 255
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	9f e7       	ldi	r25, 0x7F	; 127
     ca2:	22 e2       	ldi	r18, 0x22	; 34
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	20 93 aa 3e 	sts	0x3EAA, r18	; 0x803eaa <errno>
     caa:	30 93 ab 3e 	sts	0x3EAB, r19	; 0x803eab <errno+0x1>
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <strtol+0x1e8>
     cb0:	22 23       	and	r18, r18
     cb2:	81 f0       	breq	.+32     	; 0xcd4 <strtol+0x1fa>
     cb4:	90 95       	com	r25
     cb6:	80 95       	com	r24
     cb8:	70 95       	com	r23
     cba:	61 95       	neg	r22
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	8f 4f       	sbci	r24, 0xFF	; 255
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	46 2f       	mov	r20, r22
     cc4:	37 2f       	mov	r19, r23
     cc6:	28 2f       	mov	r18, r24
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <strtol+0x214>
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0d c0       	rjmp	.+26     	; 0xcee <strtol+0x214>
     cd4:	97 ff       	sbrs	r25, 7
     cd6:	f5 cf       	rjmp	.-22     	; 0xcc2 <strtol+0x1e8>
     cd8:	82 e2       	ldi	r24, 0x22	; 34
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 93 aa 3e 	sts	0x3EAA, r24	; 0x803eaa <errno>
     ce0:	90 93 ab 3e 	sts	0x3EAB, r25	; 0x803eab <errno+0x1>
     ce4:	6f ef       	ldi	r22, 0xFF	; 255
     ce6:	7f ef       	ldi	r23, 0xFF	; 255
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	9f e7       	ldi	r25, 0x7F	; 127
     cec:	ea cf       	rjmp	.-44     	; 0xcc2 <strtol+0x1e8>
     cee:	64 2f       	mov	r22, r20
     cf0:	73 2f       	mov	r23, r19
     cf2:	82 2f       	mov	r24, r18
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	e1 e1       	ldi	r30, 0x11	; 17
     cfa:	50 c3       	rjmp	.+1696   	; 0x139c <__epilogue_restores__+0x2>

00000cfc <isspace>:
     cfc:	91 11       	cpse	r25, r1
     cfe:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__ctype_isfalse>
     d02:	80 32       	cpi	r24, 0x20	; 32
     d04:	19 f0       	breq	.+6      	; 0xd0c <isspace+0x10>
     d06:	89 50       	subi	r24, 0x09	; 9
     d08:	85 50       	subi	r24, 0x05	; 5
     d0a:	c8 f7       	brcc	.-14     	; 0xcfe <isspace+0x2>
     d0c:	08 95       	ret

00000d0e <strtok>:
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	5e e3       	ldi	r21, 0x3E	; 62
     d12:	11 d0       	rcall	.+34     	; 0xd36 <strtok_r>
     d14:	08 95       	ret

00000d16 <strcmp>:
     d16:	fb 01       	movw	r30, r22
     d18:	dc 01       	movw	r26, r24
     d1a:	8d 91       	ld	r24, X+
     d1c:	01 90       	ld	r0, Z+
     d1e:	80 19       	sub	r24, r0
     d20:	01 10       	cpse	r0, r1
     d22:	d9 f3       	breq	.-10     	; 0xd1a <strcmp+0x4>
     d24:	99 0b       	sbc	r25, r25
     d26:	08 95       	ret

00000d28 <strcpy>:
     d28:	fb 01       	movw	r30, r22
     d2a:	dc 01       	movw	r26, r24
     d2c:	01 90       	ld	r0, Z+
     d2e:	0d 92       	st	X+, r0
     d30:	00 20       	and	r0, r0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <strcpy+0x4>
     d34:	08 95       	ret

00000d36 <strtok_r>:
     d36:	fa 01       	movw	r30, r20
     d38:	a1 91       	ld	r26, Z+
     d3a:	b0 81       	ld	r27, Z
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	19 f4       	brne	.+6      	; 0xd46 <strtok_r+0x10>
     d40:	10 97       	sbiw	r26, 0x00	; 0
     d42:	e1 f0       	breq	.+56     	; 0xd7c <strtok_r+0x46>
     d44:	cd 01       	movw	r24, r26
     d46:	dc 01       	movw	r26, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0d 90       	ld	r0, X+
     d4c:	00 20       	and	r0, r0
     d4e:	11 f4       	brne	.+4      	; 0xd54 <strtok_r+0x1e>
     d50:	c0 01       	movw	r24, r0
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <strtok_r+0x44>
     d54:	fb 01       	movw	r30, r22
     d56:	21 91       	ld	r18, Z+
     d58:	22 23       	and	r18, r18
     d5a:	19 f0       	breq	.+6      	; 0xd62 <strtok_r+0x2c>
     d5c:	20 15       	cp	r18, r0
     d5e:	d9 f7       	brne	.-10     	; 0xd56 <strtok_r+0x20>
     d60:	f3 cf       	rjmp	.-26     	; 0xd48 <strtok_r+0x12>
     d62:	fb 01       	movw	r30, r22
     d64:	21 91       	ld	r18, Z+
     d66:	20 15       	cp	r18, r0
     d68:	19 f4       	brne	.+6      	; 0xd70 <strtok_r+0x3a>
     d6a:	1e 92       	st	-X, r1
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <strtok_r+0x46>
     d70:	22 23       	and	r18, r18
     d72:	c1 f7       	brne	.-16     	; 0xd64 <strtok_r+0x2e>
     d74:	0d 90       	ld	r0, X+
     d76:	00 20       	and	r0, r0
     d78:	a1 f7       	brne	.-24     	; 0xd62 <strtok_r+0x2c>
     d7a:	d0 01       	movw	r26, r0
     d7c:	fa 01       	movw	r30, r20
     d7e:	a1 93       	st	Z+, r26
     d80:	b0 83       	st	Z, r27
     d82:	08 95       	ret

00000d84 <printf>:
     d84:	a0 e0       	ldi	r26, 0x00	; 0
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 ec       	ldi	r30, 0xC7	; 199
     d8a:	f6 e0       	ldi	r31, 0x06	; 6
     d8c:	fd c2       	rjmp	.+1530   	; 0x1388 <__prologue_saves__+0x20>
     d8e:	ae 01       	movw	r20, r28
     d90:	4b 5f       	subi	r20, 0xFB	; 251
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	fa 01       	movw	r30, r20
     d96:	61 91       	ld	r22, Z+
     d98:	71 91       	ld	r23, Z+
     d9a:	af 01       	movw	r20, r30
     d9c:	80 91 ae 3e 	lds	r24, 0x3EAE	; 0x803eae <__iob+0x2>
     da0:	90 91 af 3e 	lds	r25, 0x3EAF	; 0x803eaf <__iob+0x3>
     da4:	21 d0       	rcall	.+66     	; 0xde8 <vfprintf>
     da6:	e2 e0       	ldi	r30, 0x02	; 2
     da8:	08 c3       	rjmp	.+1552   	; 0x13ba <__epilogue_restores__+0x20>

00000daa <sprintf>:
     daa:	ae e0       	ldi	r26, 0x0E	; 14
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea ed       	ldi	r30, 0xDA	; 218
     db0:	f6 e0       	ldi	r31, 0x06	; 6
     db2:	e8 c2       	rjmp	.+1488   	; 0x1384 <__prologue_saves__+0x1c>
     db4:	0d 89       	ldd	r16, Y+21	; 0x15
     db6:	1e 89       	ldd	r17, Y+22	; 0x16
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	09 83       	std	Y+1, r16	; 0x01
     dbe:	1a 83       	std	Y+2, r17	; 0x02
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f e7       	ldi	r25, 0x7F	; 127
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	ae 01       	movw	r20, r28
     dca:	47 5e       	subi	r20, 0xE7	; 231
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	6f 89       	ldd	r22, Y+23	; 0x17
     dd0:	78 8d       	ldd	r23, Y+24	; 0x18
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	08 d0       	rcall	.+16     	; 0xde8 <vfprintf>
     dd8:	ef 81       	ldd	r30, Y+7	; 0x07
     dda:	f8 85       	ldd	r31, Y+8	; 0x08
     ddc:	e0 0f       	add	r30, r16
     dde:	f1 1f       	adc	r31, r17
     de0:	10 82       	st	Z, r1
     de2:	2e 96       	adiw	r28, 0x0e	; 14
     de4:	e4 e0       	ldi	r30, 0x04	; 4
     de6:	e7 c2       	rjmp	.+1486   	; 0x13b6 <__epilogue_restores__+0x1c>

00000de8 <vfprintf>:
     de8:	ab e0       	ldi	r26, 0x0B	; 11
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e9 ef       	ldi	r30, 0xF9	; 249
     dee:	f6 e0       	ldi	r31, 0x06	; 6
     df0:	bb c2       	rjmp	.+1398   	; 0x1368 <__prologue_saves__>
     df2:	6c 01       	movw	r12, r24
     df4:	7b 01       	movw	r14, r22
     df6:	8a 01       	movw	r16, r20
     df8:	fc 01       	movw	r30, r24
     dfa:	16 82       	std	Z+6, r1	; 0x06
     dfc:	17 82       	std	Z+7, r1	; 0x07
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	81 ff       	sbrs	r24, 1
     e02:	bf c1       	rjmp	.+894    	; 0x1182 <vfprintf+0x39a>
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	3c 01       	movw	r6, r24
     e0a:	f6 01       	movw	r30, r12
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	f7 01       	movw	r30, r14
     e10:	93 fd       	sbrc	r25, 3
     e12:	85 91       	lpm	r24, Z+
     e14:	93 ff       	sbrs	r25, 3
     e16:	81 91       	ld	r24, Z+
     e18:	7f 01       	movw	r14, r30
     e1a:	88 23       	and	r24, r24
     e1c:	09 f4       	brne	.+2      	; 0xe20 <vfprintf+0x38>
     e1e:	ad c1       	rjmp	.+858    	; 0x117a <vfprintf+0x392>
     e20:	85 32       	cpi	r24, 0x25	; 37
     e22:	39 f4       	brne	.+14     	; 0xe32 <vfprintf+0x4a>
     e24:	93 fd       	sbrc	r25, 3
     e26:	85 91       	lpm	r24, Z+
     e28:	93 ff       	sbrs	r25, 3
     e2a:	81 91       	ld	r24, Z+
     e2c:	7f 01       	movw	r14, r30
     e2e:	85 32       	cpi	r24, 0x25	; 37
     e30:	21 f4       	brne	.+8      	; 0xe3a <vfprintf+0x52>
     e32:	b6 01       	movw	r22, r12
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	c3 d1       	rcall	.+902    	; 0x11be <fputc>
     e38:	e8 cf       	rjmp	.-48     	; 0xe0a <vfprintf+0x22>
     e3a:	91 2c       	mov	r9, r1
     e3c:	21 2c       	mov	r2, r1
     e3e:	31 2c       	mov	r3, r1
     e40:	ff e1       	ldi	r31, 0x1F	; 31
     e42:	f3 15       	cp	r31, r3
     e44:	d8 f0       	brcs	.+54     	; 0xe7c <vfprintf+0x94>
     e46:	8b 32       	cpi	r24, 0x2B	; 43
     e48:	79 f0       	breq	.+30     	; 0xe68 <vfprintf+0x80>
     e4a:	38 f4       	brcc	.+14     	; 0xe5a <vfprintf+0x72>
     e4c:	80 32       	cpi	r24, 0x20	; 32
     e4e:	79 f0       	breq	.+30     	; 0xe6e <vfprintf+0x86>
     e50:	83 32       	cpi	r24, 0x23	; 35
     e52:	a1 f4       	brne	.+40     	; 0xe7c <vfprintf+0x94>
     e54:	23 2d       	mov	r18, r3
     e56:	20 61       	ori	r18, 0x10	; 16
     e58:	1d c0       	rjmp	.+58     	; 0xe94 <vfprintf+0xac>
     e5a:	8d 32       	cpi	r24, 0x2D	; 45
     e5c:	61 f0       	breq	.+24     	; 0xe76 <vfprintf+0x8e>
     e5e:	80 33       	cpi	r24, 0x30	; 48
     e60:	69 f4       	brne	.+26     	; 0xe7c <vfprintf+0x94>
     e62:	23 2d       	mov	r18, r3
     e64:	21 60       	ori	r18, 0x01	; 1
     e66:	16 c0       	rjmp	.+44     	; 0xe94 <vfprintf+0xac>
     e68:	83 2d       	mov	r24, r3
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	38 2e       	mov	r3, r24
     e6e:	e3 2d       	mov	r30, r3
     e70:	e4 60       	ori	r30, 0x04	; 4
     e72:	3e 2e       	mov	r3, r30
     e74:	2a c0       	rjmp	.+84     	; 0xeca <vfprintf+0xe2>
     e76:	f3 2d       	mov	r31, r3
     e78:	f8 60       	ori	r31, 0x08	; 8
     e7a:	1d c0       	rjmp	.+58     	; 0xeb6 <vfprintf+0xce>
     e7c:	37 fc       	sbrc	r3, 7
     e7e:	2d c0       	rjmp	.+90     	; 0xeda <vfprintf+0xf2>
     e80:	20 ed       	ldi	r18, 0xD0	; 208
     e82:	28 0f       	add	r18, r24
     e84:	2a 30       	cpi	r18, 0x0A	; 10
     e86:	40 f0       	brcs	.+16     	; 0xe98 <vfprintf+0xb0>
     e88:	8e 32       	cpi	r24, 0x2E	; 46
     e8a:	b9 f4       	brne	.+46     	; 0xeba <vfprintf+0xd2>
     e8c:	36 fc       	sbrc	r3, 6
     e8e:	75 c1       	rjmp	.+746    	; 0x117a <vfprintf+0x392>
     e90:	23 2d       	mov	r18, r3
     e92:	20 64       	ori	r18, 0x40	; 64
     e94:	32 2e       	mov	r3, r18
     e96:	19 c0       	rjmp	.+50     	; 0xeca <vfprintf+0xe2>
     e98:	36 fe       	sbrs	r3, 6
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <vfprintf+0xc0>
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	98 9e       	mul	r9, r24
     ea0:	20 0d       	add	r18, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	92 2e       	mov	r9, r18
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <vfprintf+0xe2>
     ea8:	ea e0       	ldi	r30, 0x0A	; 10
     eaa:	2e 9e       	mul	r2, r30
     eac:	20 0d       	add	r18, r0
     eae:	11 24       	eor	r1, r1
     eb0:	22 2e       	mov	r2, r18
     eb2:	f3 2d       	mov	r31, r3
     eb4:	f0 62       	ori	r31, 0x20	; 32
     eb6:	3f 2e       	mov	r3, r31
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <vfprintf+0xe2>
     eba:	8c 36       	cpi	r24, 0x6C	; 108
     ebc:	21 f4       	brne	.+8      	; 0xec6 <vfprintf+0xde>
     ebe:	83 2d       	mov	r24, r3
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	38 2e       	mov	r3, r24
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0xe2>
     ec6:	88 36       	cpi	r24, 0x68	; 104
     ec8:	41 f4       	brne	.+16     	; 0xeda <vfprintf+0xf2>
     eca:	f7 01       	movw	r30, r14
     ecc:	93 fd       	sbrc	r25, 3
     ece:	85 91       	lpm	r24, Z+
     ed0:	93 ff       	sbrs	r25, 3
     ed2:	81 91       	ld	r24, Z+
     ed4:	7f 01       	movw	r14, r30
     ed6:	81 11       	cpse	r24, r1
     ed8:	b3 cf       	rjmp	.-154    	; 0xe40 <vfprintf+0x58>
     eda:	98 2f       	mov	r25, r24
     edc:	9f 7d       	andi	r25, 0xDF	; 223
     ede:	95 54       	subi	r25, 0x45	; 69
     ee0:	93 30       	cpi	r25, 0x03	; 3
     ee2:	28 f4       	brcc	.+10     	; 0xeee <vfprintf+0x106>
     ee4:	0c 5f       	subi	r16, 0xFC	; 252
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	9f e3       	ldi	r25, 0x3F	; 63
     eea:	99 83       	std	Y+1, r25	; 0x01
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <vfprintf+0x120>
     eee:	83 36       	cpi	r24, 0x63	; 99
     ef0:	31 f0       	breq	.+12     	; 0xefe <vfprintf+0x116>
     ef2:	83 37       	cpi	r24, 0x73	; 115
     ef4:	71 f0       	breq	.+28     	; 0xf12 <vfprintf+0x12a>
     ef6:	83 35       	cpi	r24, 0x53	; 83
     ef8:	09 f0       	breq	.+2      	; 0xefc <vfprintf+0x114>
     efa:	55 c0       	rjmp	.+170    	; 0xfa6 <vfprintf+0x1be>
     efc:	20 c0       	rjmp	.+64     	; 0xf3e <vfprintf+0x156>
     efe:	f8 01       	movw	r30, r16
     f00:	80 81       	ld	r24, Z
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	0e 5f       	subi	r16, 0xFE	; 254
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	88 24       	eor	r8, r8
     f0a:	83 94       	inc	r8
     f0c:	91 2c       	mov	r9, r1
     f0e:	53 01       	movw	r10, r6
     f10:	12 c0       	rjmp	.+36     	; 0xf36 <vfprintf+0x14e>
     f12:	28 01       	movw	r4, r16
     f14:	f2 e0       	ldi	r31, 0x02	; 2
     f16:	4f 0e       	add	r4, r31
     f18:	51 1c       	adc	r5, r1
     f1a:	f8 01       	movw	r30, r16
     f1c:	a0 80       	ld	r10, Z
     f1e:	b1 80       	ldd	r11, Z+1	; 0x01
     f20:	36 fe       	sbrs	r3, 6
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <vfprintf+0x142>
     f24:	69 2d       	mov	r22, r9
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <vfprintf+0x146>
     f2a:	6f ef       	ldi	r22, 0xFF	; 255
     f2c:	7f ef       	ldi	r23, 0xFF	; 255
     f2e:	c5 01       	movw	r24, r10
     f30:	3b d1       	rcall	.+630    	; 0x11a8 <strnlen>
     f32:	4c 01       	movw	r8, r24
     f34:	82 01       	movw	r16, r4
     f36:	f3 2d       	mov	r31, r3
     f38:	ff 77       	andi	r31, 0x7F	; 127
     f3a:	3f 2e       	mov	r3, r31
     f3c:	15 c0       	rjmp	.+42     	; 0xf68 <vfprintf+0x180>
     f3e:	28 01       	movw	r4, r16
     f40:	22 e0       	ldi	r18, 0x02	; 2
     f42:	42 0e       	add	r4, r18
     f44:	51 1c       	adc	r5, r1
     f46:	f8 01       	movw	r30, r16
     f48:	a0 80       	ld	r10, Z
     f4a:	b1 80       	ldd	r11, Z+1	; 0x01
     f4c:	36 fe       	sbrs	r3, 6
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x16e>
     f50:	69 2d       	mov	r22, r9
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x172>
     f56:	6f ef       	ldi	r22, 0xFF	; 255
     f58:	7f ef       	ldi	r23, 0xFF	; 255
     f5a:	c5 01       	movw	r24, r10
     f5c:	1a d1       	rcall	.+564    	; 0x1192 <strnlen_P>
     f5e:	4c 01       	movw	r8, r24
     f60:	f3 2d       	mov	r31, r3
     f62:	f0 68       	ori	r31, 0x80	; 128
     f64:	3f 2e       	mov	r3, r31
     f66:	82 01       	movw	r16, r4
     f68:	33 fc       	sbrc	r3, 3
     f6a:	19 c0       	rjmp	.+50     	; 0xf9e <vfprintf+0x1b6>
     f6c:	82 2d       	mov	r24, r2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	88 16       	cp	r8, r24
     f72:	99 06       	cpc	r9, r25
     f74:	a0 f4       	brcc	.+40     	; 0xf9e <vfprintf+0x1b6>
     f76:	b6 01       	movw	r22, r12
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	20 d1       	rcall	.+576    	; 0x11be <fputc>
     f7e:	2a 94       	dec	r2
     f80:	f5 cf       	rjmp	.-22     	; 0xf6c <vfprintf+0x184>
     f82:	f5 01       	movw	r30, r10
     f84:	37 fc       	sbrc	r3, 7
     f86:	85 91       	lpm	r24, Z+
     f88:	37 fe       	sbrs	r3, 7
     f8a:	81 91       	ld	r24, Z+
     f8c:	5f 01       	movw	r10, r30
     f8e:	b6 01       	movw	r22, r12
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	15 d1       	rcall	.+554    	; 0x11be <fputc>
     f94:	21 10       	cpse	r2, r1
     f96:	2a 94       	dec	r2
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	82 1a       	sub	r8, r18
     f9c:	91 08       	sbc	r9, r1
     f9e:	81 14       	cp	r8, r1
     fa0:	91 04       	cpc	r9, r1
     fa2:	79 f7       	brne	.-34     	; 0xf82 <vfprintf+0x19a>
     fa4:	e1 c0       	rjmp	.+450    	; 0x1168 <vfprintf+0x380>
     fa6:	84 36       	cpi	r24, 0x64	; 100
     fa8:	11 f0       	breq	.+4      	; 0xfae <vfprintf+0x1c6>
     faa:	89 36       	cpi	r24, 0x69	; 105
     fac:	39 f5       	brne	.+78     	; 0xffc <vfprintf+0x214>
     fae:	f8 01       	movw	r30, r16
     fb0:	37 fe       	sbrs	r3, 7
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <vfprintf+0x1da>
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0c 5f       	subi	r16, 0xFC	; 252
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	08 c0       	rjmp	.+16     	; 0xfd2 <vfprintf+0x1ea>
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	07 2e       	mov	r0, r23
     fc8:	00 0c       	add	r0, r0
     fca:	88 0b       	sbc	r24, r24
     fcc:	99 0b       	sbc	r25, r25
     fce:	0e 5f       	subi	r16, 0xFE	; 254
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	f3 2d       	mov	r31, r3
     fd4:	ff 76       	andi	r31, 0x6F	; 111
     fd6:	3f 2e       	mov	r3, r31
     fd8:	97 ff       	sbrs	r25, 7
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x206>
     fdc:	90 95       	com	r25
     fde:	80 95       	com	r24
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	f0 68       	ori	r31, 0x80	; 128
     fec:	3f 2e       	mov	r3, r31
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	a3 01       	movw	r20, r6
     ff4:	20 d1       	rcall	.+576    	; 0x1236 <__ultoa_invert>
     ff6:	88 2e       	mov	r8, r24
     ff8:	86 18       	sub	r8, r6
     ffa:	44 c0       	rjmp	.+136    	; 0x1084 <vfprintf+0x29c>
     ffc:	85 37       	cpi	r24, 0x75	; 117
     ffe:	31 f4       	brne	.+12     	; 0x100c <vfprintf+0x224>
    1000:	23 2d       	mov	r18, r3
    1002:	2f 7e       	andi	r18, 0xEF	; 239
    1004:	b2 2e       	mov	r11, r18
    1006:	2a e0       	ldi	r18, 0x0A	; 10
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	25 c0       	rjmp	.+74     	; 0x1056 <vfprintf+0x26e>
    100c:	93 2d       	mov	r25, r3
    100e:	99 7f       	andi	r25, 0xF9	; 249
    1010:	b9 2e       	mov	r11, r25
    1012:	8f 36       	cpi	r24, 0x6F	; 111
    1014:	c1 f0       	breq	.+48     	; 0x1046 <vfprintf+0x25e>
    1016:	18 f4       	brcc	.+6      	; 0x101e <vfprintf+0x236>
    1018:	88 35       	cpi	r24, 0x58	; 88
    101a:	79 f0       	breq	.+30     	; 0x103a <vfprintf+0x252>
    101c:	ae c0       	rjmp	.+348    	; 0x117a <vfprintf+0x392>
    101e:	80 37       	cpi	r24, 0x70	; 112
    1020:	19 f0       	breq	.+6      	; 0x1028 <vfprintf+0x240>
    1022:	88 37       	cpi	r24, 0x78	; 120
    1024:	21 f0       	breq	.+8      	; 0x102e <vfprintf+0x246>
    1026:	a9 c0       	rjmp	.+338    	; 0x117a <vfprintf+0x392>
    1028:	e9 2f       	mov	r30, r25
    102a:	e0 61       	ori	r30, 0x10	; 16
    102c:	be 2e       	mov	r11, r30
    102e:	b4 fe       	sbrs	r11, 4
    1030:	0d c0       	rjmp	.+26     	; 0x104c <vfprintf+0x264>
    1032:	fb 2d       	mov	r31, r11
    1034:	f4 60       	ori	r31, 0x04	; 4
    1036:	bf 2e       	mov	r11, r31
    1038:	09 c0       	rjmp	.+18     	; 0x104c <vfprintf+0x264>
    103a:	34 fe       	sbrs	r3, 4
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <vfprintf+0x26a>
    103e:	29 2f       	mov	r18, r25
    1040:	26 60       	ori	r18, 0x06	; 6
    1042:	b2 2e       	mov	r11, r18
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <vfprintf+0x26a>
    1046:	28 e0       	ldi	r18, 0x08	; 8
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <vfprintf+0x26e>
    104c:	20 e1       	ldi	r18, 0x10	; 16
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x26e>
    1052:	20 e1       	ldi	r18, 0x10	; 16
    1054:	32 e0       	ldi	r19, 0x02	; 2
    1056:	f8 01       	movw	r30, r16
    1058:	b7 fe       	sbrs	r11, 7
    105a:	07 c0       	rjmp	.+14     	; 0x106a <vfprintf+0x282>
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	0c 5f       	subi	r16, 0xFC	; 252
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <vfprintf+0x28e>
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 5f       	subi	r16, 0xFE	; 254
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	a3 01       	movw	r20, r6
    1078:	de d0       	rcall	.+444    	; 0x1236 <__ultoa_invert>
    107a:	88 2e       	mov	r8, r24
    107c:	86 18       	sub	r8, r6
    107e:	fb 2d       	mov	r31, r11
    1080:	ff 77       	andi	r31, 0x7F	; 127
    1082:	3f 2e       	mov	r3, r31
    1084:	36 fe       	sbrs	r3, 6
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <vfprintf+0x2ba>
    1088:	23 2d       	mov	r18, r3
    108a:	2e 7f       	andi	r18, 0xFE	; 254
    108c:	a2 2e       	mov	r10, r18
    108e:	89 14       	cp	r8, r9
    1090:	58 f4       	brcc	.+22     	; 0x10a8 <vfprintf+0x2c0>
    1092:	34 fe       	sbrs	r3, 4
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <vfprintf+0x2c4>
    1096:	32 fc       	sbrc	r3, 2
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <vfprintf+0x2c4>
    109a:	83 2d       	mov	r24, r3
    109c:	8e 7e       	andi	r24, 0xEE	; 238
    109e:	a8 2e       	mov	r10, r24
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <vfprintf+0x2c4>
    10a2:	b8 2c       	mov	r11, r8
    10a4:	a3 2c       	mov	r10, r3
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfprintf+0x2c6>
    10a8:	b8 2c       	mov	r11, r8
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <vfprintf+0x2c6>
    10ac:	b9 2c       	mov	r11, r9
    10ae:	a4 fe       	sbrs	r10, 4
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <vfprintf+0x2e8>
    10b2:	fe 01       	movw	r30, r28
    10b4:	e8 0d       	add	r30, r8
    10b6:	f1 1d       	adc	r31, r1
    10b8:	80 81       	ld	r24, Z
    10ba:	80 33       	cpi	r24, 0x30	; 48
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <vfprintf+0x2de>
    10be:	9a 2d       	mov	r25, r10
    10c0:	99 7e       	andi	r25, 0xE9	; 233
    10c2:	a9 2e       	mov	r10, r25
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <vfprintf+0x2f0>
    10c6:	a2 fe       	sbrs	r10, 2
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x2ee>
    10ca:	b3 94       	inc	r11
    10cc:	b3 94       	inc	r11
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <vfprintf+0x2f0>
    10d0:	8a 2d       	mov	r24, r10
    10d2:	86 78       	andi	r24, 0x86	; 134
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <vfprintf+0x2f0>
    10d6:	b3 94       	inc	r11
    10d8:	a3 fc       	sbrc	r10, 3
    10da:	10 c0       	rjmp	.+32     	; 0x10fc <vfprintf+0x314>
    10dc:	a0 fe       	sbrs	r10, 0
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0x304>
    10e0:	b2 14       	cp	r11, r2
    10e2:	80 f4       	brcc	.+32     	; 0x1104 <vfprintf+0x31c>
    10e4:	28 0c       	add	r2, r8
    10e6:	92 2c       	mov	r9, r2
    10e8:	9b 18       	sub	r9, r11
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <vfprintf+0x31e>
    10ec:	b2 14       	cp	r11, r2
    10ee:	58 f4       	brcc	.+22     	; 0x1106 <vfprintf+0x31e>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	63 d0       	rcall	.+198    	; 0x11be <fputc>
    10f8:	b3 94       	inc	r11
    10fa:	f8 cf       	rjmp	.-16     	; 0x10ec <vfprintf+0x304>
    10fc:	b2 14       	cp	r11, r2
    10fe:	18 f4       	brcc	.+6      	; 0x1106 <vfprintf+0x31e>
    1100:	2b 18       	sub	r2, r11
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x320>
    1104:	98 2c       	mov	r9, r8
    1106:	21 2c       	mov	r2, r1
    1108:	a4 fe       	sbrs	r10, 4
    110a:	0f c0       	rjmp	.+30     	; 0x112a <vfprintf+0x342>
    110c:	b6 01       	movw	r22, r12
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	55 d0       	rcall	.+170    	; 0x11be <fputc>
    1114:	a2 fe       	sbrs	r10, 2
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <vfprintf+0x35c>
    1118:	a1 fc       	sbrc	r10, 1
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <vfprintf+0x33a>
    111c:	88 e7       	ldi	r24, 0x78	; 120
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfprintf+0x33e>
    1122:	88 e5       	ldi	r24, 0x58	; 88
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	b6 01       	movw	r22, r12
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <vfprintf+0x35a>
    112a:	8a 2d       	mov	r24, r10
    112c:	86 78       	andi	r24, 0x86	; 134
    112e:	51 f0       	breq	.+20     	; 0x1144 <vfprintf+0x35c>
    1130:	a1 fe       	sbrs	r10, 1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x350>
    1134:	8b e2       	ldi	r24, 0x2B	; 43
    1136:	01 c0       	rjmp	.+2      	; 0x113a <vfprintf+0x352>
    1138:	80 e2       	ldi	r24, 0x20	; 32
    113a:	a7 fc       	sbrc	r10, 7
    113c:	8d e2       	ldi	r24, 0x2D	; 45
    113e:	b6 01       	movw	r22, r12
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	3d d0       	rcall	.+122    	; 0x11be <fputc>
    1144:	89 14       	cp	r8, r9
    1146:	30 f4       	brcc	.+12     	; 0x1154 <vfprintf+0x36c>
    1148:	b6 01       	movw	r22, r12
    114a:	80 e3       	ldi	r24, 0x30	; 48
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	37 d0       	rcall	.+110    	; 0x11be <fputc>
    1150:	9a 94       	dec	r9
    1152:	f8 cf       	rjmp	.-16     	; 0x1144 <vfprintf+0x35c>
    1154:	8a 94       	dec	r8
    1156:	f3 01       	movw	r30, r6
    1158:	e8 0d       	add	r30, r8
    115a:	f1 1d       	adc	r31, r1
    115c:	80 81       	ld	r24, Z
    115e:	b6 01       	movw	r22, r12
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	2d d0       	rcall	.+90     	; 0x11be <fputc>
    1164:	81 10       	cpse	r8, r1
    1166:	f6 cf       	rjmp	.-20     	; 0x1154 <vfprintf+0x36c>
    1168:	22 20       	and	r2, r2
    116a:	09 f4       	brne	.+2      	; 0x116e <vfprintf+0x386>
    116c:	4e ce       	rjmp	.-868    	; 0xe0a <vfprintf+0x22>
    116e:	b6 01       	movw	r22, r12
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	24 d0       	rcall	.+72     	; 0x11be <fputc>
    1176:	2a 94       	dec	r2
    1178:	f7 cf       	rjmp	.-18     	; 0x1168 <vfprintf+0x380>
    117a:	f6 01       	movw	r30, r12
    117c:	86 81       	ldd	r24, Z+6	; 0x06
    117e:	97 81       	ldd	r25, Z+7	; 0x07
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x39e>
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	2b 96       	adiw	r28, 0x0b	; 11
    1188:	e2 e1       	ldi	r30, 0x12	; 18
    118a:	07 c1       	rjmp	.+526    	; 0x139a <__epilogue_restores__>

0000118c <__ctype_isfalse>:
    118c:	99 27       	eor	r25, r25
    118e:	88 27       	eor	r24, r24

00001190 <__ctype_istrue>:
    1190:	08 95       	ret

00001192 <strnlen_P>:
    1192:	fc 01       	movw	r30, r24
    1194:	05 90       	lpm	r0, Z+
    1196:	61 50       	subi	r22, 0x01	; 1
    1198:	70 40       	sbci	r23, 0x00	; 0
    119a:	01 10       	cpse	r0, r1
    119c:	d8 f7       	brcc	.-10     	; 0x1194 <strnlen_P+0x2>
    119e:	80 95       	com	r24
    11a0:	90 95       	com	r25
    11a2:	8e 0f       	add	r24, r30
    11a4:	9f 1f       	adc	r25, r31
    11a6:	08 95       	ret

000011a8 <strnlen>:
    11a8:	fc 01       	movw	r30, r24
    11aa:	61 50       	subi	r22, 0x01	; 1
    11ac:	70 40       	sbci	r23, 0x00	; 0
    11ae:	01 90       	ld	r0, Z+
    11b0:	01 10       	cpse	r0, r1
    11b2:	d8 f7       	brcc	.-10     	; 0x11aa <strnlen+0x2>
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	8e 0f       	add	r24, r30
    11ba:	9f 1f       	adc	r25, r31
    11bc:	08 95       	ret

000011be <fputc>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	fb 01       	movw	r30, r22
    11c8:	23 81       	ldd	r18, Z+3	; 0x03
    11ca:	21 fd       	sbrc	r18, 1
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <fputc+0x16>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	2c c0       	rjmp	.+88     	; 0x122c <fputc+0x6e>
    11d4:	22 ff       	sbrs	r18, 2
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <fputc+0x46>
    11d8:	46 81       	ldd	r20, Z+6	; 0x06
    11da:	57 81       	ldd	r21, Z+7	; 0x07
    11dc:	24 81       	ldd	r18, Z+4	; 0x04
    11de:	35 81       	ldd	r19, Z+5	; 0x05
    11e0:	42 17       	cp	r20, r18
    11e2:	53 07       	cpc	r21, r19
    11e4:	44 f4       	brge	.+16     	; 0x11f6 <fputc+0x38>
    11e6:	a0 81       	ld	r26, Z
    11e8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ea:	9d 01       	movw	r18, r26
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	20 83       	st	Z, r18
    11f2:	31 83       	std	Z+1, r19	; 0x01
    11f4:	8c 93       	st	X, r24
    11f6:	26 81       	ldd	r18, Z+6	; 0x06
    11f8:	37 81       	ldd	r19, Z+7	; 0x07
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	26 83       	std	Z+6, r18	; 0x06
    1200:	37 83       	std	Z+7, r19	; 0x07
    1202:	14 c0       	rjmp	.+40     	; 0x122c <fputc+0x6e>
    1204:	8b 01       	movw	r16, r22
    1206:	ec 01       	movw	r28, r24
    1208:	fb 01       	movw	r30, r22
    120a:	00 84       	ldd	r0, Z+8	; 0x08
    120c:	f1 85       	ldd	r31, Z+9	; 0x09
    120e:	e0 2d       	mov	r30, r0
    1210:	09 95       	icall
    1212:	89 2b       	or	r24, r25
    1214:	e1 f6       	brne	.-72     	; 0x11ce <fputc+0x10>
    1216:	d8 01       	movw	r26, r16
    1218:	16 96       	adiw	r26, 0x06	; 6
    121a:	8d 91       	ld	r24, X+
    121c:	9c 91       	ld	r25, X
    121e:	17 97       	sbiw	r26, 0x07	; 7
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	16 96       	adiw	r26, 0x06	; 6
    1224:	8d 93       	st	X+, r24
    1226:	9c 93       	st	X, r25
    1228:	17 97       	sbiw	r26, 0x07	; 7
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <__ultoa_invert>:
    1236:	fa 01       	movw	r30, r20
    1238:	aa 27       	eor	r26, r26
    123a:	28 30       	cpi	r18, 0x08	; 8
    123c:	51 f1       	breq	.+84     	; 0x1292 <__ultoa_invert+0x5c>
    123e:	20 31       	cpi	r18, 0x10	; 16
    1240:	81 f1       	breq	.+96     	; 0x12a2 <__ultoa_invert+0x6c>
    1242:	e8 94       	clt
    1244:	6f 93       	push	r22
    1246:	6e 7f       	andi	r22, 0xFE	; 254
    1248:	6e 5f       	subi	r22, 0xFE	; 254
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	af 4f       	sbci	r26, 0xFF	; 255
    1252:	b1 e0       	ldi	r27, 0x01	; 1
    1254:	3e d0       	rcall	.+124    	; 0x12d2 <__ultoa_invert+0x9c>
    1256:	b4 e0       	ldi	r27, 0x04	; 4
    1258:	3c d0       	rcall	.+120    	; 0x12d2 <__ultoa_invert+0x9c>
    125a:	67 0f       	add	r22, r23
    125c:	78 1f       	adc	r23, r24
    125e:	89 1f       	adc	r24, r25
    1260:	9a 1f       	adc	r25, r26
    1262:	a1 1d       	adc	r26, r1
    1264:	68 0f       	add	r22, r24
    1266:	79 1f       	adc	r23, r25
    1268:	8a 1f       	adc	r24, r26
    126a:	91 1d       	adc	r25, r1
    126c:	a1 1d       	adc	r26, r1
    126e:	6a 0f       	add	r22, r26
    1270:	71 1d       	adc	r23, r1
    1272:	81 1d       	adc	r24, r1
    1274:	91 1d       	adc	r25, r1
    1276:	a1 1d       	adc	r26, r1
    1278:	20 d0       	rcall	.+64     	; 0x12ba <__ultoa_invert+0x84>
    127a:	09 f4       	brne	.+2      	; 0x127e <__ultoa_invert+0x48>
    127c:	68 94       	set
    127e:	3f 91       	pop	r19
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	26 9f       	mul	r18, r22
    1284:	11 24       	eor	r1, r1
    1286:	30 19       	sub	r19, r0
    1288:	30 5d       	subi	r19, 0xD0	; 208
    128a:	31 93       	st	Z+, r19
    128c:	de f6       	brtc	.-74     	; 0x1244 <__ultoa_invert+0xe>
    128e:	cf 01       	movw	r24, r30
    1290:	08 95       	ret
    1292:	46 2f       	mov	r20, r22
    1294:	47 70       	andi	r20, 0x07	; 7
    1296:	40 5d       	subi	r20, 0xD0	; 208
    1298:	41 93       	st	Z+, r20
    129a:	b3 e0       	ldi	r27, 0x03	; 3
    129c:	0f d0       	rcall	.+30     	; 0x12bc <__ultoa_invert+0x86>
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__ultoa_invert+0x5c>
    12a0:	f6 cf       	rjmp	.-20     	; 0x128e <__ultoa_invert+0x58>
    12a2:	46 2f       	mov	r20, r22
    12a4:	4f 70       	andi	r20, 0x0F	; 15
    12a6:	40 5d       	subi	r20, 0xD0	; 208
    12a8:	4a 33       	cpi	r20, 0x3A	; 58
    12aa:	18 f0       	brcs	.+6      	; 0x12b2 <__ultoa_invert+0x7c>
    12ac:	49 5d       	subi	r20, 0xD9	; 217
    12ae:	31 fd       	sbrc	r19, 1
    12b0:	40 52       	subi	r20, 0x20	; 32
    12b2:	41 93       	st	Z+, r20
    12b4:	02 d0       	rcall	.+4      	; 0x12ba <__ultoa_invert+0x84>
    12b6:	a9 f7       	brne	.-22     	; 0x12a2 <__ultoa_invert+0x6c>
    12b8:	ea cf       	rjmp	.-44     	; 0x128e <__ultoa_invert+0x58>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	a6 95       	lsr	r26
    12be:	97 95       	ror	r25
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	ba 95       	dec	r27
    12c8:	c9 f7       	brne	.-14     	; 0x12bc <__ultoa_invert+0x86>
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	61 05       	cpc	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	08 95       	ret
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	0a 2e       	mov	r0, r26
    12d8:	06 94       	lsr	r0
    12da:	57 95       	ror	r21
    12dc:	47 95       	ror	r20
    12de:	37 95       	ror	r19
    12e0:	27 95       	ror	r18
    12e2:	ba 95       	dec	r27
    12e4:	c9 f7       	brne	.-14     	; 0x12d8 <__ultoa_invert+0xa2>
    12e6:	62 0f       	add	r22, r18
    12e8:	73 1f       	adc	r23, r19
    12ea:	84 1f       	adc	r24, r20
    12ec:	95 1f       	adc	r25, r21
    12ee:	a0 1d       	adc	r26, r0
    12f0:	08 95       	ret

000012f2 <__mulsi3>:
    12f2:	db 01       	movw	r26, r22
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	2d d0       	rcall	.+90     	; 0x1354 <__muluhisi3>
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	a2 9f       	mul	r26, r18
    1300:	80 0d       	add	r24, r0
    1302:	91 1d       	adc	r25, r1
    1304:	a3 9f       	mul	r26, r19
    1306:	90 0d       	add	r25, r0
    1308:	b2 9f       	mul	r27, r18
    130a:	90 0d       	add	r25, r0
    130c:	11 24       	eor	r1, r1
    130e:	08 95       	ret

00001310 <__udivmodsi4>:
    1310:	a1 e2       	ldi	r26, 0x21	; 33
    1312:	1a 2e       	mov	r1, r26
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	fd 01       	movw	r30, r26
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <__udivmodsi4_ep>

0000131c <__udivmodsi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	ee 1f       	adc	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	a2 17       	cp	r26, r18
    1326:	b3 07       	cpc	r27, r19
    1328:	e4 07       	cpc	r30, r20
    132a:	f5 07       	cpc	r31, r21
    132c:	20 f0       	brcs	.+8      	; 0x1336 <__udivmodsi4_ep>
    132e:	a2 1b       	sub	r26, r18
    1330:	b3 0b       	sbc	r27, r19
    1332:	e4 0b       	sbc	r30, r20
    1334:	f5 0b       	sbc	r31, r21

00001336 <__udivmodsi4_ep>:
    1336:	66 1f       	adc	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	1a 94       	dec	r1
    1340:	69 f7       	brne	.-38     	; 0x131c <__udivmodsi4_loop>
    1342:	60 95       	com	r22
    1344:	70 95       	com	r23
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	bd 01       	movw	r22, r26
    1350:	cf 01       	movw	r24, r30
    1352:	08 95       	ret

00001354 <__muluhisi3>:
    1354:	3a d0       	rcall	.+116    	; 0x13ca <__umulhisi3>
    1356:	a5 9f       	mul	r26, r21
    1358:	90 0d       	add	r25, r0
    135a:	b4 9f       	mul	r27, r20
    135c:	90 0d       	add	r25, r0
    135e:	a4 9f       	mul	r26, r20
    1360:	80 0d       	add	r24, r0
    1362:	91 1d       	adc	r25, r1
    1364:	11 24       	eor	r1, r1
    1366:	08 95       	ret

00001368 <__prologue_saves__>:
    1368:	2f 92       	push	r2
    136a:	3f 92       	push	r3
    136c:	4f 92       	push	r4
    136e:	5f 92       	push	r5
    1370:	6f 92       	push	r6
    1372:	7f 92       	push	r7
    1374:	8f 92       	push	r8
    1376:	9f 92       	push	r9
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	ca 1b       	sub	r28, r26
    1392:	db 0b       	sbc	r29, r27
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	09 94       	ijmp

0000139a <__epilogue_restores__>:
    139a:	2a 88       	ldd	r2, Y+18	; 0x12
    139c:	39 88       	ldd	r3, Y+17	; 0x11
    139e:	48 88       	ldd	r4, Y+16	; 0x10
    13a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    13a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    13a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    13aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    13ac:	b9 84       	ldd	r11, Y+9	; 0x09
    13ae:	c8 84       	ldd	r12, Y+8	; 0x08
    13b0:	df 80       	ldd	r13, Y+7	; 0x07
    13b2:	ee 80       	ldd	r14, Y+6	; 0x06
    13b4:	fd 80       	ldd	r15, Y+5	; 0x05
    13b6:	0c 81       	ldd	r16, Y+4	; 0x04
    13b8:	1b 81       	ldd	r17, Y+3	; 0x03
    13ba:	aa 81       	ldd	r26, Y+2	; 0x02
    13bc:	b9 81       	ldd	r27, Y+1	; 0x01
    13be:	ce 0f       	add	r28, r30
    13c0:	d1 1d       	adc	r29, r1
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	ed 01       	movw	r28, r26
    13c8:	08 95       	ret

000013ca <__umulhisi3>:
    13ca:	a2 9f       	mul	r26, r18
    13cc:	b0 01       	movw	r22, r0
    13ce:	b3 9f       	mul	r27, r19
    13d0:	c0 01       	movw	r24, r0
    13d2:	a3 9f       	mul	r26, r19
    13d4:	01 d0       	rcall	.+2      	; 0x13d8 <__umulhisi3+0xe>
    13d6:	b2 9f       	mul	r27, r18
    13d8:	70 0d       	add	r23, r0
    13da:	81 1d       	adc	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	91 1d       	adc	r25, r1
    13e0:	08 95       	ret

000013e2 <_exit>:
    13e2:	f8 94       	cli

000013e4 <__stop_program>:
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <__stop_program>
