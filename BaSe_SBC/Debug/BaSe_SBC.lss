
BaSe_SBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  000019d8  00001a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  000097b4  000017b4  00001868  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b8  00803e04  00803e04  00001a90  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000079a9  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027fe  00000000  00000000  000098a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f99  00000000  00000000  0000c09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000960  00000000  00000000  0000e038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022de  00000000  00000000  0000e998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fc  00000000  00000000  00010c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  00012272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	24 c1       	rjmp	.+584    	; 0x250 <__vector_3>
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__vector_4>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	60 c5       	rjmp	.+2752   	; 0xace <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	b8 c1       	rjmp	.+880    	; 0x386 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	13 c7       	rjmp	.+3622   	; 0xe54 <__vector_22>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e8 ed       	ldi	r30, 0xD8	; 216
      48:	f9 e1       	ldi	r31, 0x19	; 25
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 30       	cpi	r26, 0x04	; 4
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a4 e0       	ldi	r26, 0x04	; 4
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 3b       	cpi	r26, 0xBC	; 188
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	12 d2       	rcall	.+1060   	; 0x48c <main>
      68:	a3 cb       	rjmp	.-2234   	; 0xfffff7b0 <__eeprom_end+0xff7ef7b0>

0000006a <__bad_interrupt>:
      6a:	36 c1       	rjmp	.+620    	; 0x2d8 <__vector_default>

0000006c <adc_init_10bit_resolution>:
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      6c:	e0 e0       	ldi	r30, 0x00	; 0
      6e:	f6 e0       	ldi	r31, 0x06	; 6
      70:	80 81       	ld	r24, Z
      72:	80 83       	st	Z, r24
      74:	08 95       	ret

00000076 <adc_enable>:
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	f6 e0       	ldi	r31, 0x06	; 6
      7a:	80 81       	ld	r24, Z
      7c:	81 60       	ori	r24, 0x01	; 1
      7e:	80 83       	st	Z, r24
      80:	08 95       	ret

00000082 <adc_init>:
      82:	f4 df       	rcall	.-24     	; 0x6c <adc_init_10bit_resolution>
      84:	80 e3       	ldi	r24, 0x30	; 48
      86:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
      8a:	f5 df       	rcall	.-22     	; 0x76 <adc_enable>
      8c:	08 95       	ret

0000008e <adc_wait_for_convesion_to_complete>:
}

void adc_wait_for_convesion_to_complete()
{
	while ( !(ADC0.INTFLAGS & ADC_RESRDY_bm) )
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	f6 e0       	ldi	r31, 0x06	; 6
      92:	83 85       	ldd	r24, Z+11	; 0x0b
      94:	80 ff       	sbrs	r24, 0
      96:	fd cf       	rjmp	.-6      	; 0x92 <adc_wait_for_convesion_to_complete+0x4>
	{
		;
	}
}
      98:	08 95       	ret

0000009a <adc_do_conversion>:
	adc_do_conversion();
	return ADC0.RES;
}

void adc_do_conversion()
{
      9a:	1f 93       	push	r17
      9c:	cf 93       	push	r28
      9e:	df 93       	push	r29
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
}

void adc_start_conversion() {
	ADC0.COMMAND = ADC_STCONV_bm;
      a0:	c0 e0       	ldi	r28, 0x00	; 0
      a2:	d6 e0       	ldi	r29, 0x06	; 6
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	18 87       	std	Y+8, r17	; 0x08
}

void adc_do_conversion()
{
	adc_start_conversion();
	adc_wait_for_convesion_to_complete();
      a8:	f2 df       	rcall	.-28     	; 0x8e <adc_wait_for_convesion_to_complete>
	
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
      aa:	1b 87       	std	Y+11, r17	; 0x0b
}
      ac:	df 91       	pop	r29
      ae:	cf 91       	pop	r28
      b0:	1f 91       	pop	r17
      b2:	08 95       	ret

000000b4 <adc_measure_3v3>:
	adc_init_10bit_resolution();
	adc_4V34_reference();
	adc_enable();
}

uint16_t adc_measure_3v3() {
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
      b8:	c0 e0       	ldi	r28, 0x00	; 0
      ba:	d6 e0       	ldi	r29, 0x06	; 6
      bc:	85 e0       	ldi	r24, 0x05	; 5
      be:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      c0:	ec df       	rcall	.-40     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      c2:	88 89       	ldd	r24, Y+16	; 0x10
      c4:	99 89       	ldd	r25, Y+17	; 0x11
}
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <adc_measure_input_current>:

uint16_t adc_measure_input_current() {
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
      d0:	c0 e0       	ldi	r28, 0x00	; 0
      d2:	d6 e0       	ldi	r29, 0x06	; 6
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      d8:	e0 df       	rcall	.-64     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      da:	88 89       	ldd	r24, Y+16	; 0x10
      dc:	99 89       	ldd	r25, Y+17	; 0x11
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <adc_measure_temperature>:

uint16_t adc_measure_temperature() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	// Fixme: measurement like datasheet s.437, chapter: 30.3.2.6
	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d6 e0       	ldi	r29, 0x06	; 6
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	8e 83       	std	Y+6, r24	; 0x06
	adc_do_conversion();
      f0:	d4 df       	rcall	.-88     	; 0x9a <adc_do_conversion>
	return ADC0.RES;
      f2:	88 89       	ldd	r24, Y+16	; 0x10
      f4:	99 89       	ldd	r25, Y+17	; 0x11
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <vcc3v3_present>:
		;
	}
}

bool vcc3v3_present() {
	if (adc_measure_3v3() > 900) {
      fc:	db df       	rcall	.-74     	; 0xb4 <adc_measure_3v3>
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	85 38       	cpi	r24, 0x85	; 133
     102:	93 40       	sbci	r25, 0x03	; 3
     104:	08 f4       	brcc	.+2      	; 0x108 <vcc3v3_present+0xc>
     106:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	}
	else {
		return false;
	}
     108:	82 2f       	mov	r24, r18
     10a:	08 95       	ret

0000010c <init_flags>:
 */ 
#include <stdbool.h>
#include "flags.h"

void init_flags(void) {
	flag_button_0_pressed = false;	
     10c:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
	flag_heartbeat = false;
     110:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_heartbeat>
     114:	08 95       	ret

00000116 <disable_digital_input_buffers_for_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f4 e0       	ldi	r31, 0x04	; 4
     11a:	81 89       	ldd	r24, Z+17	; 0x11
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	81 8b       	std	Z+17, r24	; 0x11
     120:	81 89       	ldd	r24, Z+17	; 0x11
     122:	84 60       	ori	r24, 0x04	; 4
     124:	81 8b       	std	Z+17, r24	; 0x11
     126:	85 89       	ldd	r24, Z+21	; 0x15
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	85 8b       	std	Z+21, r24	; 0x15
     12c:	85 89       	ldd	r24, Z+21	; 0x15
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	85 8b       	std	Z+21, r24	; 0x15
     132:	08 95       	ret

00000134 <init_pins>:
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f4 e0       	ldi	r31, 0x04	; 4
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	86 83       	std	Z+6, r24	; 0x06
     13c:	81 83       	std	Z+1, r24	; 0x01
     13e:	80 e4       	ldi	r24, 0x40	; 64
     140:	81 83       	std	Z+1, r24	; 0x01
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	85 83       	std	Z+5, r24	; 0x05
     146:	81 83       	std	Z+1, r24	; 0x01
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	82 89       	ldd	r24, Z+18	; 0x12
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	82 8b       	std	Z+18, r24	; 0x12
     152:	83 89       	ldd	r24, Z+19	; 0x13
     154:	88 60       	ori	r24, 0x08	; 8
     156:	83 8b       	std	Z+19, r24	; 0x13
     158:	e0 e2       	ldi	r30, 0x20	; 32
     15a:	f4 e0       	ldi	r31, 0x04	; 4
     15c:	83 e1       	ldi	r24, 0x13	; 19
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	82 83       	std	Z+2, r24	; 0x02
     164:	a0 e4       	ldi	r26, 0x40	; 64
     166:	b4 e0       	ldi	r27, 0x04	; 4
     168:	8f e0       	ldi	r24, 0x0F	; 15
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	8c 93       	st	X, r24
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	15 96       	adiw	r26, 0x05	; 5
     172:	1c 92       	st	X, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	81 83       	std	Z+1, r24	; 0x01
     178:	ce df       	rcall	.-100    	; 0x116 <disable_digital_input_buffers_for_adc>
     17a:	08 95       	ret

0000017c <button_1_pressed>:
     17c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <set_interrupts_for_buttons>:
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	82 89       	ldd	r24, Z+18	; 0x12
     196:	83 60       	ori	r24, 0x03	; 3
     198:	82 8b       	std	Z+18, r24	; 0x12
     19a:	83 89       	ldd	r24, Z+19	; 0x13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	83 8b       	std	Z+19, r24	; 0x13
     1a0:	08 95       	ret

000001a2 <led_hmi_on>:
     1a2:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <led_hmi_on+0xe>
     1aa:	80 e1       	ldi	r24, 0x10	; 16
     1ac:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1b0:	08 95       	ret

000001b2 <led_hmi_off>:
     1b2:	80 e1       	ldi	r24, 0x10	; 16
     1b4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1b8:	08 95       	ret

000001ba <toggle_hmi_led>:
     1ba:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1be:	88 23       	and	r24, r24
     1c0:	21 f0       	breq	.+8      	; 0x1ca <toggle_hmi_led+0x10>
     1c2:	80 e1       	ldi	r24, 0x10	; 16
     1c4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
     1c8:	08 95       	ret
     1ca:	80 e1       	ldi	r24, 0x10	; 16
     1cc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1d0:	08 95       	ret

000001d2 <dim_display>:
     1d2:	18 16       	cp	r1, r24
     1d4:	19 06       	cpc	r1, r25
     1d6:	44 f4       	brge	.+16     	; 0x1e8 <dim_display+0x16>
     1d8:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     1dc:	88 23       	and	r24, r24
     1de:	21 f0       	breq	.+8      	; 0x1e8 <dim_display+0x16>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     1ee:	08 95       	ret

000001f0 <display_enable>:
     1f0:	e0 e0       	ldi	r30, 0x00	; 0
     1f2:	f4 e0       	ldi	r31, 0x04	; 4
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	85 83       	std	Z+5, r24	; 0x05
     1f8:	92 e4       	ldi	r25, 0x42	; 66
     1fa:	9a 95       	dec	r25
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <display_enable+0xa>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <display_enable+0x10>
     200:	86 83       	std	Z+6, r24	; 0x06
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	8a 95       	dec	r24
     206:	f1 f7       	brne	.-4      	; 0x204 <display_enable+0x14>
     208:	00 c0       	rjmp	.+0      	; 0x20a <display_enable+0x1a>
     20a:	08 95       	ret

0000020c <set_display_data_pins>:
     20c:	e0 e4       	ldi	r30, 0x40	; 64
     20e:	f4 e0       	ldi	r31, 0x04	; 4
     210:	94 81       	ldd	r25, Z+4	; 0x04
     212:	90 7f       	andi	r25, 0xF0	; 240
     214:	94 83       	std	Z+4, r25	; 0x04
     216:	94 81       	ldd	r25, Z+4	; 0x04
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	98 2b       	or	r25, r24
     21c:	94 83       	std	Z+4, r25	; 0x04
     21e:	08 95       	ret

00000220 <display_set_rs_pin>:
	display_clear_rs_pin();
	_delay_ms(10);
}

void display_set_rs_pin(void) {
	dis_rs_port.OUTSET = dis_rs;
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     226:	08 95       	ret

00000228 <display_clear_rs_pin>:
}

void display_clear_rs_pin(void) {
	dis_rs_port.OUTCLR = dis_rs;
     228:	80 e4       	ldi	r24, 0x40	; 64
     22a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     22e:	08 95       	ret

00000230 <set_pb2_txd_and_pb3_rxd>:
}

/* USART */
void set_pb2_txd_and_pb3_rxd(void) {
	PORTB.OUTSET = PIN2_bm;
     230:	e0 e2       	ldi	r30, 0x20	; 32
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     238:	81 83       	std	Z+1, r24	; 0x01
     23a:	08 95       	ret

0000023c <disable_usart_tx>:
}

void disable_usart_tx(void) {
	PORTB.OUTCLR = PIN2_bm;
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     242:	08 95       	ret

00000244 <setup_interrupt_for_hb_edge_detection>:
}

/* Heartbeat */
void setup_interrupt_for_hb_edge_detection(void) {
	bpi_heartbeat_port.bpi_heartbeat_ctrl |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
     244:	e0 e2       	ldi	r30, 0x20	; 32
     246:	f4 e0       	ldi	r31, 0x04	; 4
     248:	85 89       	ldd	r24, Z+21	; 0x15
     24a:	89 60       	ori	r24, 0x09	; 9
     24c:	85 8b       	std	Z+21, r24	; 0x15
     24e:	08 95       	ret

00000250 <__vector_3>:
}

/* Interrupt Service Routines regarding pin interrupts */

ISR(PORTA_PORT_vect)
{
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	8f 93       	push	r24
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	// use the following lines to see the interrupt level (Datasheet p.111)
	//sprintf(buffer,"iflags = %d, status = %d\n", PORTA_INTFLAGS, CPUINT.STATUS);
	//USART0_sendString(buffer);
	if(PORTA_INTFLAGS & button_0) {
     260:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     264:	82 ff       	sbrs	r24, 2
     266:	08 c0       	rjmp	.+16     	; 0x278 <__vector_3+0x28>
		flag_button_0_pressed = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <flag_button_0_pressed>
		PORTA_INTFLAGS &= button_0;
     26e:	e9 e0       	ldi	r30, 0x09	; 9
     270:	f4 e0       	ldi	r31, 0x04	; 4
     272:	80 81       	ld	r24, Z
     274:	84 70       	andi	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
	}
	
	if(PORTA_INTFLAGS & button_1) {
     278:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     27c:	83 ff       	sbrs	r24, 3
     27e:	08 c0       	rjmp	.+16     	; 0x290 <__vector_3+0x40>
		flag_button_1_pressed = true;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <flag_button_1_pressed>
		PORTA_INTFLAGS &= button_1;
     286:	e9 e0       	ldi	r30, 0x09	; 9
     288:	f4 e0       	ldi	r31, 0x04	; 4
     28a:	80 81       	ld	r24, Z
     28c:	88 70       	andi	r24, 0x08	; 8
     28e:	80 83       	st	Z, r24
	}
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_4>:

ISR(PORTB_PORT_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	8f 93       	push	r24
     2ac:	ef 93       	push	r30
     2ae:	ff 93       	push	r31
	/* Writing something to display here freezes the MCU. Perhaps because the ISR will be called over and over again. */
	if(PORTB_INTFLAGS & bpi_heartbeat) {
     2b0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     2b4:	85 ff       	sbrs	r24, 5
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <__vector_4+0x28>
		flag_heartbeat = true;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <flag_heartbeat>
		PORTB_INTFLAGS &= bpi_heartbeat;
     2be:	e9 e2       	ldi	r30, 0x29	; 41
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	80 81       	ld	r24, Z
     2c4:	80 72       	andi	r24, 0x20	; 32
     2c6:	80 83       	st	Z, r24
		/* reset timer. This has to be done within the ISR to avoid false timeouts due to the slowness of the mainloop */
	}
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	8f 91       	pop	r24
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_default>:

ISR(BADISR_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	1f 93       	push	r17
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ef 93       	push	r30
     302:	ff 93       	push	r31
     304:	c4 e1       	ldi	r28, 0x14	; 20
     306:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     308:	68 94       	set
     30a:	ee 24       	eor	r14, r14
     30c:	e5 f8       	bld	r14, 5
     30e:	ff 24       	eor	r15, r15
     310:	f2 f8       	bld	r15, 2
     312:	10 e1       	ldi	r17, 0x10	; 16
ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
	{
		led_hmi_on();
     314:	46 df       	rcall	.-372    	; 0x1a2 <led_hmi_on>
     316:	8f e4       	ldi	r24, 0x4F	; 79
     318:	93 ec       	ldi	r25, 0xC3	; 195
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <__vector_default+0x42>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <__vector_default+0x48>
     320:	00 00       	nop
		PORTB.OUTSET = led_hmi;
	}
}

void led_hmi_off(void) {
	PORTB.OUTCLR = led_hmi;
     322:	f7 01       	movw	r30, r14
     324:	16 83       	std	Z+6, r17	; 0x06
     326:	8f e4       	ldi	r24, 0x4F	; 79
     328:	93 ec       	ldi	r25, 0xC3	; 195
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <__vector_default+0x52>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_default+0x58>
     330:	00 00       	nop
     332:	21 97       	sbiw	r28, 0x01	; 1
}

ISR(BADISR_vect)
{
	/* This routine is called if a non defined interrupt-vector is requested. It flashes the HMI_LED real fast */
	for(int i = 0; i < 20; i++)
     334:	79 f7       	brne	.-34     	; 0x314 <__vector_default+0x3c>
		led_hmi_on();
		_delay_ms(10);
		led_hmi_off();
		_delay_ms(10);	
	}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <setup_interrupt_timeout_detection>:
}

void send_sbc_heartbeat_count_to_bpi() {
	sprintf(buffer, "H:%i", increment_or_reset_sbc_heartbeat_count());
	USART0_sendString_w_eol(buffer);
}
     362:	e0 e0       	ldi	r30, 0x00	; 0
     364:	fa e0       	ldi	r31, 0x0A	; 10
     366:	8b e2       	ldi	r24, 0x2B	; 43
     368:	9a e0       	ldi	r25, 0x0A	; 10
     36a:	86 a3       	std	Z+38, r24	; 0x26
     36c:	97 a3       	std	Z+39, r25	; 0x27
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	82 87       	std	Z+10, r24	; 0x0a
     372:	08 95       	ret

00000374 <init_heatbeat_monitor>:
     374:	67 df       	rcall	.-306    	; 0x244 <setup_interrupt_for_hb_edge_detection>
     376:	f5 df       	rcall	.-22     	; 0x362 <setup_interrupt_timeout_detection>
     378:	08 95       	ret

0000037a <heartbeat_monitor>:
     37a:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <flag_heartbeat>
     37e:	81 11       	cpse	r24, r1
     380:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <flag_heartbeat>
     384:	08 95       	ret

00000386 <__vector_10>:
		heartbeat_count++;
	}
	return heartbeat_count;
}

ISR(TCA0_CMP0_vect) {
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	11 24       	eor	r1, r1
	flag_bpi_heartbeat_ok = false;
     390:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <flag_bpi_heartbeat_ok>
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <mainloop_standby>:
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
}

void mainloop_standby() {
	if (flag_button_0_pressed | flag_button_1_pressed) {
     39e:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     3a2:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_button_1_pressed>
     3a6:	81 11       	cpse	r24, r1
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <mainloop_standby+0x10>
     3aa:	99 23       	and	r25, r25
     3ac:	41 f0       	breq	.+16     	; 0x3be <mainloop_standby+0x20>
		flag_button_0_pressed = false;
     3ae:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		flag_button_1_pressed = false;
     3b2:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		
		next_pwr_state = display_on;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
		transition_to_pwr_state(next_pwr_state);
     3bc:	f7 d2       	rcall	.+1518   	; 0x9ac <transition_to_pwr_state>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <mainloop_standby+0x26>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <mainloop_standby+0x30>
     3ce:	00 00       	nop
     3d0:	08 95       	ret

000003d2 <mainloop_display_on>:
	}	
	_delay_ms(100);
}

void mainloop_display_on() {
     3d2:	cf 93       	push	r28
	if (flag_entering_mainloop_display_on) {
     3d4:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <flag_entering_mainloop_display_on>
     3d8:	88 23       	and	r24, r24
     3da:	b9 f0       	breq	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		flag_entering_mainloop_display_on = false;
     3dc:	10 92 06 3e 	sts	0x3E06, r1	; 0x803e06 <flag_entering_mainloop_display_on>
		show_menu = show_main_menu;
     3e0:	8d e4       	ldi	r24, 0x4D	; 77
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     3e8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
		button0_action = show_menu_timestamp;
     3ec:	85 e7       	ldi	r24, 0x75	; 117
     3ee:	94 e0       	ldi	r25, 0x04	; 4
     3f0:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     3f4:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
		button1_action = show_menu_actions;
     3f8:	8e e5       	ldi	r24, 0x5E	; 94
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     400:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
		dim_display(1);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	e4 de       	rcall	.-568    	; 0x1d2 <dim_display>
	}
	show_menu();
     40a:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <show_menu>
     40e:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <show_menu+0x1>
     412:	09 95       	icall
     414:	2f ef       	ldi	r18, 0xFF	; 255
     416:	80 e7       	ldi	r24, 0x70	; 112
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	21 50       	subi	r18, 0x01	; 1
     41c:	80 40       	sbci	r24, 0x00	; 0
     41e:	90 40       	sbci	r25, 0x00	; 0
     420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     424:	00 00       	nop
	_delay_ms(100); //debouncing 
	while(!flag_button_0_pressed & !button_1_pressed()) {
     426:	c0 91 19 3e 	lds	r28, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     42a:	a8 de       	rcall	.-688    	; 0x17c <button_1_pressed>
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	89 2b       	or	r24, r25
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	c2 17       	cp	r28, r18
     436:	b8 f3       	brcs	.-18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		;
	}
	//goto_sleep_idle();
	//Fixme: button1 press cannot wake mcu from standby!
	
	if (flag_button_0_pressed) {
     438:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     43c:	88 23       	and	r24, r24
     43e:	39 f0       	breq	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		flag_button_0_pressed = false;
     440:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		button0_action();
     444:	e0 91 16 3e 	lds	r30, 0x3E16	; 0x803e16 <button0_action>
     448:	f0 91 17 3e 	lds	r31, 0x3E17	; 0x803e17 <button0_action+0x1>
     44c:	09 95       	icall
	}
	
	if (button_1_pressed()) {
     44e:	96 de       	rcall	.-724    	; 0x17c <button_1_pressed>
     450:	89 2b       	or	r24, r25
     452:	39 f0       	breq	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		flag_button_1_pressed = false;
     454:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		button1_action();
     458:	e0 91 14 3e 	lds	r30, 0x3E14	; 0x803e14 <button1_action>
     45c:	f0 91 15 3e 	lds	r31, 0x3E15	; 0x803e15 <button1_action+0x1>
     460:	09 95       	icall
	}
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <init_sbu>:
void show_menu_actions();
void show_main_menu();

void init_sbu()
{
	init_flags();
     466:	52 de       	rcall	.-860    	; 0x10c <init_flags>
	init_pins();
     468:	65 de       	rcall	.-822    	; 0x134 <init_pins>
	init_heatbeat_monitor();
     46a:	84 df       	rcall	.-248    	; 0x374 <init_heatbeat_monitor>
	set_interrupts_for_buttons();
     46c:	91 de       	rcall	.-734    	; 0x190 <set_interrupts_for_buttons>
	init_uart();
     46e:	65 d3       	rcall	.+1738   	; 0xb3a <init_uart>
	init_display();
     470:	2a d1       	rcall	.+596    	; 0x6c6 <init_display>
	adc_init();
     472:	07 de       	rcall	.-1010   	; 0x82 <adc_init>
	strcpy(human_readable_timestamp_next_bu, "09.01.1990 12:57");
     474:	81 e1       	ldi	r24, 0x11	; 17
     476:	e6 eb       	ldi	r30, 0xB6	; 182
     478:	f7 e9       	ldi	r31, 0x97	; 151
     47a:	ab e1       	ldi	r26, 0x1B	; 27
     47c:	be e3       	ldi	r27, 0x3E	; 62
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	8a 95       	dec	r24
     484:	e1 f7       	brne	.-8      	; 0x47e <init_sbu+0x18>
	dimmer_init();
     486:	f2 d1       	rcall	.+996    	; 0x86c <dimmer_init>
	sei();
     488:	78 94       	sei
     48a:	08 95       	ret

0000048c <main>:
}

int main(void)
{
	init_sbu();
     48c:	ec df       	rcall	.-40     	; 0x466 <init_sbu>

	display_write_string("Standby Unit\nready!");
     48e:	87 ec       	ldi	r24, 0xC7	; 199
     490:	97 e9       	ldi	r25, 0x97	; 151
     492:	c9 d1       	rcall	.+914    	; 0x826 <display_write_string>
	USART0_sendString("I:STARTED");
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	97 e9       	ldi	r25, 0x97	; 151
     498:	63 d3       	rcall	.+1734   	; 0xb60 <USART0_sendString>
	dim_display(1);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	99 de       	rcall	.-718    	; 0x1d2 <dim_display>
	
	current_pwr_state = active;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <current_pwr_state>
	void (*mainloop)() = mainloop_active;
     4a6:	cb e7       	ldi	r28, 0x7B	; 123
     4a8:	d2 e0       	ldi	r29, 0x02	; 2
				break;
			case standby:
				mainloop = mainloop_standby;
				break;
			case display_on:
				mainloop = mainloop_display_on;
     4aa:	0f 2e       	mov	r0, r31
     4ac:	f9 ee       	ldi	r31, 0xE9	; 233
     4ae:	cf 2e       	mov	r12, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	df 2e       	mov	r13, r31
     4b4:	f0 2d       	mov	r31, r0
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
				break;
			case standby:
				mainloop = mainloop_standby;
     4b6:	0f 2e       	mov	r0, r31
     4b8:	ff ec       	ldi	r31, 0xCF	; 207
     4ba:	ef 2e       	mov	r14, r31
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
	
    while (1) 
    {
		switch(current_pwr_state) {
			case active:
				mainloop = mainloop_active;
     4c2:	8e 01       	movw	r16, r28
	void (*mainloop)() = mainloop_active;

	
    while (1) 
    {
		switch(current_pwr_state) {
     4c4:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <current_pwr_state>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	39 f0       	breq	.+14     	; 0x4da <main+0x4e>
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <main+0x4a>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	29 f4       	brne	.+10     	; 0x4dc <main+0x50>
			case active:
				mainloop = mainloop_active;
     4d2:	e8 01       	movw	r28, r16
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <main+0x50>
				break;
			case standby:
				mainloop = mainloop_standby;
     4d6:	e7 01       	movw	r28, r14
				break;
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <main+0x50>
			case display_on:
				mainloop = mainloop_display_on;
     4da:	e6 01       	movw	r28, r12
				break;
		}
		mainloop();
     4dc:	fe 01       	movw	r30, r28
     4de:	09 95       	icall
    }
     4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <main+0x38>

000004e2 <goto_sleep_standby>:
}

void goto_sleep_standby()
{
	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc;
     4e2:	e0 e5       	ldi	r30, 0x50	; 80
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm;
     4ec:	80 81       	ld	r24, Z
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	80 83       	st	Z, r24
	sleep_cpu();
     4f2:	88 95       	sleep
     4f4:	08 95       	ret

000004f6 <mainloop_active>:
	sleep_cpu();
}

void mainloop_active()
{
	dim_display(1);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	6b de       	rcall	.-810    	; 0x1d2 <dim_display>
	heartbeat_monitor();
     4fc:	3e df       	rcall	.-388    	; 0x37a <heartbeat_monitor>
	if(!flag_bpi_heartbeat_ok) {
     4fe:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_bpi_heartbeat_ok>
     502:	81 11       	cpse	r24, r1
     504:	01 c0       	rjmp	.+2      	; 0x508 <mainloop_active+0x12>
		/* if heartbeat from bpi is missing, stop loading it with a high-level voltage on its rx-pin! */
		disable_usart_tx();
     506:	9a de       	rcall	.-716    	; 0x23c <disable_usart_tx>
	}
	
	if (flag_button_0_pressed == true) {
     508:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <flag_button_0_pressed>
     50c:	88 23       	and	r24, r24
     50e:	19 f0       	breq	.+6      	; 0x516 <mainloop_active+0x20>
		flag_button_0_pressed = false;
     510:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <flag_button_0_pressed>
		led_hmi_off();
     514:	4e de       	rcall	.-868    	; 0x1b2 <led_hmi_off>
	}
	
	if (flag_button_1_pressed == true) {
     516:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <flag_button_1_pressed>
     51a:	88 23       	and	r24, r24
     51c:	29 f0       	breq	.+10     	; 0x528 <mainloop_active+0x32>
		flag_button_1_pressed = false;
     51e:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <flag_button_1_pressed>
		USART0_sendString("C:Hello\r\n");
     522:	85 ee       	ldi	r24, 0xE5	; 229
     524:	97 e9       	ldi	r25, 0x97	; 151
     526:	1c d3       	rcall	.+1592   	; 0xb60 <USART0_sendString>
	}
	
	if (flag_usart_string_receive_complete == true) {
     528:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <flag_usart_string_receive_complete>
     52c:	88 23       	and	r24, r24
     52e:	19 f0       	breq	.+6      	; 0x536 <mainloop_active+0x40>
		USART0_process_incoming_message();
     530:	9d d3       	rcall	.+1850   	; 0xc6c <USART0_process_incoming_message>
		flag_usart_string_receive_complete = false;
     532:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <flag_usart_string_receive_complete>
	}
	
	if (flag_string_for_display_received == true) {
     536:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <flag_string_for_display_received>
     53a:	88 23       	and	r24, r24
     53c:	69 f0       	breq	.+26     	; 0x558 <mainloop_active+0x62>
		flag_string_for_display_received = false;
     53e:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <flag_string_for_display_received>
		display_clear();
     542:	84 d1       	rcall	.+776    	; 0x84c <display_clear>
		display_write_string(display_line1_content);
     544:	82 e5       	ldi	r24, 0x52	; 82
     546:	9e e3       	ldi	r25, 0x3E	; 62
     548:	6e d1       	rcall	.+732    	; 0x826 <display_write_string>
		display_next_line();
     54a:	63 d1       	rcall	.+710    	; 0x812 <display_next_line>
		display_write_string(display_line2_content);
     54c:	8c e3       	ldi	r24, 0x3C	; 60
     54e:	9e e3       	ldi	r25, 0x3E	; 62
     550:	6a d1       	rcall	.+724    	; 0x826 <display_write_string>
		USART0_sendString_w_eol("ACK:New Display Content\n");
     552:	8f ee       	ldi	r24, 0xEF	; 239
     554:	97 e9       	ldi	r25, 0x97	; 151
     556:	25 d3       	rcall	.+1610   	; 0xba2 <USART0_sendString_w_eol>
	}
	
	if (flag_pwr_state_change_request == true) {
     558:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <flag_pwr_state_change_request>
     55c:	88 23       	and	r24, r24
     55e:	49 f0       	breq	.+18     	; 0x572 <mainloop_active+0x7c>
		display_clear();
     560:	75 d1       	rcall	.+746    	; 0x84c <display_clear>
		display_write_string("Received Shut-\ndown Request!");
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	98 e9       	ldi	r25, 0x98	; 152
     566:	5f d1       	rcall	.+702    	; 0x826 <display_write_string>
		flag_pwr_state_change_request = false;
     568:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <flag_pwr_state_change_request>
		transition_to_pwr_state(next_pwr_state);
     56c:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <next_pwr_state>
     570:	1d d2       	rcall	.+1082   	; 0x9ac <transition_to_pwr_state>
	}
	
	if (flag_human_readable_timestamp_next_bu_received == true) {
     572:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
     576:	88 23       	and	r24, r24
     578:	31 f0       	breq	.+12     	; 0x586 <mainloop_active+0x90>
		display_clear();
     57a:	68 d1       	rcall	.+720    	; 0x84c <display_clear>
		display_write_string(human_readable_timestamp_next_bu);
     57c:	8b e1       	ldi	r24, 0x1B	; 27
     57e:	9e e3       	ldi	r25, 0x3E	; 62
     580:	52 d1       	rcall	.+676    	; 0x826 <display_write_string>
		flag_human_readable_timestamp_next_bu_received = false;
     582:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
	}
	
	if (flag_received_seconds_to_next_bu == true) {
     586:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <flag_received_seconds_to_next_bu>
     58a:	88 23       	and	r24, r24
     58c:	09 f1       	breq	.+66     	; 0x5d0 <mainloop_active+0xda>
		sprintf(buffer, "Will wake up in %ld seconds\n", seconds_to_next_bu);
     58e:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <seconds_to_next_bu+0x3>
     592:	8f 93       	push	r24
     594:	80 91 4f 3e 	lds	r24, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x2>
     598:	8f 93       	push	r24
     59a:	80 91 4e 3e 	lds	r24, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x1>
     59e:	8f 93       	push	r24
     5a0:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <seconds_to_next_bu>
     5a4:	8f 93       	push	r24
     5a6:	85 e2       	ldi	r24, 0x25	; 37
     5a8:	98 e9       	ldi	r25, 0x98	; 152
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	83 e8       	ldi	r24, 0x83	; 131
     5b0:	9e e3       	ldi	r25, 0x3E	; 62
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	e0 d5       	rcall	.+3008   	; 0x1178 <sprintf>
		USART0_sendString_w_eol(buffer);
     5b8:	83 e8       	ldi	r24, 0x83	; 131
     5ba:	9e e3       	ldi	r25, 0x3E	; 62
     5bc:	f2 d2       	rcall	.+1508   	; 0xba2 <USART0_sendString_w_eol>
		flag_received_seconds_to_next_bu = false;
     5be:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <flag_received_seconds_to_next_bu>
		rtc_write_seconds_to_cmp();
     5c2:	49 d2       	rcall	.+1170   	; 0xa56 <rtc_write_seconds_to_cmp>
		rtc_setup();
     5c4:	3c d2       	rcall	.+1144   	; 0xa3e <rtc_setup>
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	08 96       	adiw	r24, 0x08	; 8
     5cc:	8d bf       	out	0x3d, r24	; 61
     5ce:	9e bf       	out	0x3e, r25	; 62
	}
	
	if (flag_goto_sleep == true) {
     5d0:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <flag_goto_sleep>
     5d4:	88 23       	and	r24, r24
     5d6:	79 f0       	breq	.+30     	; 0x5f6 <mainloop_active+0x100>
		flag_goto_sleep = false;
     5d8:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <flag_goto_sleep>
		USART0_sendString_w_eol("going to sleep ...\n");
     5dc:	82 e4       	ldi	r24, 0x42	; 66
     5de:	98 e9       	ldi	r25, 0x98	; 152
     5e0:	e0 d2       	rcall	.+1472   	; 0xba2 <USART0_sendString_w_eol>
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	20 e7       	ldi	r18, 0x70	; 112
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	91 50       	subi	r25, 0x01	; 1
     5ea:	20 40       	sbci	r18, 0x00	; 0
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <mainloop_active+0xf2>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <mainloop_active+0xfc>
     5f2:	00 00       	nop
		_delay_ms(100);
		goto_sleep_standby();
     5f4:	76 df       	rcall	.-276    	; 0x4e2 <goto_sleep_standby>

	}
	
	if (flag_request_current_measurement == true) {
     5f6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <flag_request_current_measurement>
     5fa:	88 23       	and	r24, r24
     5fc:	d9 f0       	breq	.+54     	; 0x634 <mainloop_active+0x13e>
		flag_request_current_measurement = false;
     5fe:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <flag_request_current_measurement>
		uint16_t input_current = adc_measure_input_current();
     602:	64 dd       	rcall	.-1336   	; 0xcc <adc_measure_input_current>
		sprintf(buffer,"Cur: %d", input_current);
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	86 e5       	ldi	r24, 0x56	; 86
     60a:	98 e9       	ldi	r25, 0x98	; 152
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	9e e3       	ldi	r25, 0x3E	; 62
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	af d5       	rcall	.+2910   	; 0x1178 <sprintf>
		USART0_sendString_w_eol(buffer);
     61a:	83 e8       	ldi	r24, 0x83	; 131
     61c:	9e e3       	ldi	r25, 0x3E	; 62
     61e:	c1 d2       	rcall	.+1410   	; 0xba2 <USART0_sendString_w_eol>
		display_clear();
     620:	15 d1       	rcall	.+554    	; 0x84c <display_clear>
		display_write_string(buffer);
     622:	83 e8       	ldi	r24, 0x83	; 131
     624:	9e e3       	ldi	r25, 0x3E	; 62
     626:	ff d0       	rcall	.+510    	; 0x826 <display_write_string>
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
	}
	
	if	(flag_request_temperature_measurement == true) {
     634:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <flag_request_temperature_measurement>
     638:	88 23       	and	r24, r24
     63a:	d9 f0       	breq	.+54     	; 0x672 <mainloop_active+0x17c>
		flag_request_temperature_measurement = false;
     63c:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <flag_request_temperature_measurement>
		uint16_t temperature = adc_measure_temperature();
     640:	51 dd       	rcall	.-1374   	; 0xe4 <adc_measure_temperature>
		sprintf(buffer, "TMP: %d", temperature);
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	8e e5       	ldi	r24, 0x5E	; 94
     648:	98 e9       	ldi	r25, 0x98	; 152
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	83 e8       	ldi	r24, 0x83	; 131
     650:	9e e3       	ldi	r25, 0x3E	; 62
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	90 d5       	rcall	.+2848   	; 0x1178 <sprintf>
		USART0_sendString_w_eol(buffer);
     658:	83 e8       	ldi	r24, 0x83	; 131
     65a:	9e e3       	ldi	r25, 0x3E	; 62
     65c:	a2 d2       	rcall	.+1348   	; 0xba2 <USART0_sendString_w_eol>
		display_clear();
     65e:	f6 d0       	rcall	.+492    	; 0x84c <display_clear>
		display_write_string(buffer);
     660:	83 e8       	ldi	r24, 0x83	; 131
     662:	9e e3       	ldi	r25, 0x3E	; 62
     664:	e0 d0       	rcall	.+448    	; 0x826 <display_write_string>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
	}
	
	if (flag_request_3v3_measurement == true) {
     672:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <flag_request_3v3_measurement>
     676:	88 23       	and	r24, r24
     678:	d9 f0       	breq	.+54     	; 0x6b0 <mainloop_active+0x1ba>
		flag_request_3v3_measurement = false;
     67a:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <flag_request_3v3_measurement>
		uint16_t voltage_3v3 = adc_measure_3v3();
     67e:	1a dd       	rcall	.-1484   	; 0xb4 <adc_measure_3v3>
		sprintf(buffer, "3V3: %d", voltage_3v3);
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	86 e6       	ldi	r24, 0x66	; 102
     686:	98 e9       	ldi	r25, 0x98	; 152
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	83 e8       	ldi	r24, 0x83	; 131
     68e:	9e e3       	ldi	r25, 0x3E	; 62
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	71 d5       	rcall	.+2786   	; 0x1178 <sprintf>
		USART0_sendString_w_eol(buffer);
     696:	83 e8       	ldi	r24, 0x83	; 131
     698:	9e e3       	ldi	r25, 0x3E	; 62
     69a:	83 d2       	rcall	.+1286   	; 0xba2 <USART0_sendString_w_eol>
		display_clear();
     69c:	d7 d0       	rcall	.+430    	; 0x84c <display_clear>
		display_write_string(buffer);
     69e:	83 e8       	ldi	r24, 0x83	; 131
     6a0:	9e e3       	ldi	r25, 0x3E	; 62
     6a2:	c1 d0       	rcall	.+386    	; 0x826 <display_write_string>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	9f ef       	ldi	r25, 0xFF	; 255
     6b2:	20 e7       	ldi	r18, 0x70	; 112
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	91 50       	subi	r25, 0x01	; 1
     6b8:	20 40       	sbci	r18, 0x00	; 0
     6ba:	80 40       	sbci	r24, 0x00	; 0
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <mainloop_active+0x1c0>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <mainloop_active+0x1ca>
     6c0:	00 00       	nop
	}
	
	_delay_ms(100);
	
	/* let hmi led toggle as a sbc heartbeat */
	toggle_hmi_led();
     6c2:	7b dd       	rcall	.-1290   	; 0x1ba <toggle_hmi_led>
     6c4:	08 95       	ret

000006c6 <init_display>:
     6c6:	2f e7       	ldi	r18, 0x7F	; 127
     6c8:	8a e1       	ldi	r24, 0x1A	; 26
     6ca:	96 e0       	ldi	r25, 0x06	; 6
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <init_display+0x6>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <init_display+0x10>
     6d6:	00 00       	nop
     6d8:	a7 dd       	rcall	.-1202   	; 0x228 <display_clear_rs_pin>
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	97 dd       	rcall	.-1234   	; 0x20c <set_display_data_pins>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	87 dd       	rcall	.-1266   	; 0x1f0 <display_enable>
     6e2:	87 e8       	ldi	r24, 0x87	; 135
     6e4:	93 e1       	ldi	r25, 0x13	; 19
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <init_display+0x20>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <init_display+0x26>
     6ec:	00 00       	nop
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	8d dd       	rcall	.-1254   	; 0x20c <set_display_data_pins>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	7d dd       	rcall	.-1286   	; 0x1f0 <display_enable>
     6f6:	87 e8       	ldi	r24, 0x87	; 135
     6f8:	93 e1       	ldi	r25, 0x13	; 19
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <init_display+0x34>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <init_display+0x3a>
     700:	00 00       	nop
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	83 dd       	rcall	.-1274   	; 0x20c <set_display_data_pins>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	73 dd       	rcall	.-1306   	; 0x1f0 <display_enable>
     70a:	87 e8       	ldi	r24, 0x87	; 135
     70c:	93 e1       	ldi	r25, 0x13	; 19
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <init_display+0x48>
     712:	00 c0       	rjmp	.+0      	; 0x714 <init_display+0x4e>
     714:	00 00       	nop
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	79 dd       	rcall	.-1294   	; 0x20c <set_display_data_pins>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	69 dd       	rcall	.-1326   	; 0x1f0 <display_enable>
     71e:	87 e8       	ldi	r24, 0x87	; 135
     720:	93 e1       	ldi	r25, 0x13	; 19
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <init_display+0x5c>
     726:	00 c0       	rjmp	.+0      	; 0x728 <init_display+0x62>
     728:	00 00       	nop
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	6f dd       	rcall	.-1314   	; 0x20c <set_display_data_pins>
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	5f dd       	rcall	.-1346   	; 0x1f0 <display_enable>
     732:	87 e8       	ldi	r24, 0x87	; 135
     734:	93 e1       	ldi	r25, 0x13	; 19
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <init_display+0x70>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <init_display+0x76>
     73c:	00 00       	nop
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	65 dd       	rcall	.-1334   	; 0x20c <set_display_data_pins>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	55 dd       	rcall	.-1366   	; 0x1f0 <display_enable>
     746:	87 e8       	ldi	r24, 0x87	; 135
     748:	93 e1       	ldi	r25, 0x13	; 19
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <init_display+0x84>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <init_display+0x8a>
     750:	00 00       	nop
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	5b dd       	rcall	.-1354   	; 0x20c <set_display_data_pins>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	4b dd       	rcall	.-1386   	; 0x1f0 <display_enable>
     75a:	87 e8       	ldi	r24, 0x87	; 135
     75c:	93 e1       	ldi	r25, 0x13	; 19
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <init_display+0x98>
     762:	00 c0       	rjmp	.+0      	; 0x764 <init_display+0x9e>
     764:	00 00       	nop
     766:	8c e0       	ldi	r24, 0x0C	; 12
     768:	51 dd       	rcall	.-1374   	; 0x20c <set_display_data_pins>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	41 dd       	rcall	.-1406   	; 0x1f0 <display_enable>
     76e:	87 e8       	ldi	r24, 0x87	; 135
     770:	93 e1       	ldi	r25, 0x13	; 19
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <init_display+0xac>
     776:	00 c0       	rjmp	.+0      	; 0x778 <init_display+0xb2>
     778:	00 00       	nop
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	47 dd       	rcall	.-1394   	; 0x20c <set_display_data_pins>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	37 dd       	rcall	.-1426   	; 0x1f0 <display_enable>
     782:	87 e8       	ldi	r24, 0x87	; 135
     784:	93 e1       	ldi	r25, 0x13	; 19
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <init_display+0xc0>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <init_display+0xc6>
     78c:	00 00       	nop
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	3d dd       	rcall	.-1414   	; 0x20c <set_display_data_pins>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	2d dd       	rcall	.-1446   	; 0x1f0 <display_enable>
     796:	87 e8       	ldi	r24, 0x87	; 135
     798:	93 e1       	ldi	r25, 0x13	; 19
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <init_display+0xd4>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <init_display+0xda>
     7a0:	00 00       	nop
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	33 dd       	rcall	.-1434   	; 0x20c <set_display_data_pins>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	23 dd       	rcall	.-1466   	; 0x1f0 <display_enable>
     7aa:	87 e8       	ldi	r24, 0x87	; 135
     7ac:	93 e1       	ldi	r25, 0x13	; 19
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <init_display+0xe8>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <init_display+0xee>
     7b4:	00 00       	nop
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	29 dd       	rcall	.-1454   	; 0x20c <set_display_data_pins>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	19 dd       	rcall	.-1486   	; 0x1f0 <display_enable>
     7be:	87 e8       	ldi	r24, 0x87	; 135
     7c0:	93 e1       	ldi	r25, 0x13	; 19
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <init_display+0xfc>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <init_display+0x102>
     7c8:	00 00       	nop
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	1f dd       	rcall	.-1474   	; 0x20c <set_display_data_pins>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0f dd       	rcall	.-1506   	; 0x1f0 <display_enable>
     7d2:	87 e8       	ldi	r24, 0x87	; 135
     7d4:	93 e1       	ldi	r25, 0x13	; 19
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <init_display+0x110>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <init_display+0x116>
     7dc:	00 00       	nop
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	15 dd       	rcall	.-1494   	; 0x20c <set_display_data_pins>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	05 dd       	rcall	.-1526   	; 0x1f0 <display_enable>
     7e6:	87 e8       	ldi	r24, 0x87	; 135
     7e8:	93 e1       	ldi	r25, 0x13	; 19
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <init_display+0x124>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <init_display+0x12a>
     7f0:	00 00       	nop
     7f2:	08 95       	ret

000007f4 <display_write_char>:
     7f4:	cf 93       	push	r28
     7f6:	c8 2f       	mov	r28, r24
     7f8:	13 dd       	rcall	.-1498   	; 0x220 <display_set_rs_pin>
     7fa:	8c 2f       	mov	r24, r28
     7fc:	82 95       	swap	r24
     7fe:	8f 70       	andi	r24, 0x0F	; 15
     800:	05 dd       	rcall	.-1526   	; 0x20c <set_display_data_pins>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	f5 dc       	rcall	.-1558   	; 0x1f0 <display_enable>
     806:	8c 2f       	mov	r24, r28
     808:	01 dd       	rcall	.-1534   	; 0x20c <set_display_data_pins>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	f1 dc       	rcall	.-1566   	; 0x1f0 <display_enable>
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <display_next_line>:
     812:	0a dd       	rcall	.-1516   	; 0x228 <display_clear_rs_pin>
     814:	8c e0       	ldi	r24, 0x0C	; 12
     816:	fa dc       	rcall	.-1548   	; 0x20c <set_display_data_pins>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	ea dc       	rcall	.-1580   	; 0x1f0 <display_enable>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	f6 dc       	rcall	.-1556   	; 0x20c <set_display_data_pins>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	e6 dc       	rcall	.-1588   	; 0x1f0 <display_enable>
     824:	08 95       	ret

00000826 <display_write_string>:
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
     82c:	f9 dc       	rcall	.-1550   	; 0x220 <display_set_rs_pin>
     82e:	88 81       	ld	r24, Y
     830:	88 23       	and	r24, r24
     832:	49 f0       	breq	.+18     	; 0x846 <display_write_string+0x20>
     834:	21 96       	adiw	r28, 0x01	; 1
     836:	8a 30       	cpi	r24, 0x0A	; 10
     838:	11 f4       	brne	.+4      	; 0x83e <display_write_string+0x18>
     83a:	eb df       	rcall	.-42     	; 0x812 <display_next_line>
     83c:	01 c0       	rjmp	.+2      	; 0x840 <display_write_string+0x1a>
     83e:	da df       	rcall	.-76     	; 0x7f4 <display_write_char>
     840:	89 91       	ld	r24, Y+
     842:	81 11       	cpse	r24, r1
     844:	f8 cf       	rjmp	.-16     	; 0x836 <display_write_string+0x10>
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <display_clear>:
	display_enable(1);
	_delay_ms(5);
}

void display_clear(void) {
	display_clear_rs_pin();
     84c:	ed dc       	rcall	.-1574   	; 0x228 <display_clear_rs_pin>
	set_display_data_pins(0x00);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	dd dc       	rcall	.-1606   	; 0x20c <set_display_data_pins>
	display_enable(1);
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	cd dc       	rcall	.-1638   	; 0x1f0 <display_enable>
	set_display_data_pins(0x01);
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	d9 dc       	rcall	.-1614   	; 0x20c <set_display_data_pins>
	display_enable(1);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	c9 dc       	rcall	.-1646   	; 0x1f0 <display_enable>
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	91 e6       	ldi	r25, 0x61	; 97
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <display_clear+0x16>
     866:	00 c0       	rjmp	.+0      	; 0x868 <display_clear+0x1c>
     868:	00 00       	nop
     86a:	08 95       	ret

0000086c <dimmer_init>:
	/* WO0 (PB0) is used for the Display Backlight, WO1 (PB4) is used for the HMI LED. PB4 is not the default output pin for WO1 */
	
	
	// wgmode in ctrla selects waveform generation
	// 
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_CLKSEL_DIV4_gc; // prescaler is 4 from fclk_per
     86c:	e0 e0       	ldi	r30, 0x00	; 0
     86e:	fa e0       	ldi	r31, 0x0A	; 10
     870:	80 81       	ld	r24, Z
     872:	84 60       	ori	r24, 0x04	; 4
     874:	80 83       	st	Z, r24
	TCA0.SINGLE.PERBUF = 0x01A0; // about 1kHz with prescaler = 4
     876:	80 ea       	ldi	r24, 0xA0	; 160
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	86 ab       	std	Z+54, r24	; 0x36
     87c:	97 ab       	std	Z+55, r25	; 0x37
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm); // count clock ticks instead of events
     87e:	81 85       	ldd	r24, Z+9	; 0x09
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	81 87       	std	Z+9, r24	; 0x09
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	83 60       	ori	r24, 0x03	; 3
     888:	81 83       	std	Z+1, r24	; 0x01
     88a:	08 95       	ret

0000088c <back_to_main_menu>:
}

/* Button Actions */

void back_to_main_menu() {
	show_menu = show_main_menu;
     88c:	8d e4       	ldi	r24, 0x4D	; 77
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     894:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
     898:	08 95       	ret

0000089a <show_main_menu>:
void (*show_menu)() = show_main_menu;
void (*button0_action)() = NULL;
void (*button1_action)() = NULL;

void show_main_menu() {
	display_clear();
     89a:	d8 df       	rcall	.-80     	; 0x84c <display_clear>
	display_write_string("Show next BU   >\nActions        >");
     89c:	8e e6       	ldi	r24, 0x6E	; 110
     89e:	98 e9       	ldi	r25, 0x98	; 152
     8a0:	c2 df       	rcall	.-124    	; 0x826 <display_write_string>
	button0_action = show_menu_timestamp;
     8a2:	85 e7       	ldi	r24, 0x75	; 117
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     8aa:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = show_menu_actions;
     8ae:	8e e5       	ldi	r24, 0x5E	; 94
     8b0:	94 e0       	ldi	r25, 0x04	; 4
     8b2:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     8b6:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     8ba:	08 95       	ret

000008bc <show_menu_actions>:
}

void show_menu_actions() {
	show_menu = show_menu_actions;
     8bc:	8e e5       	ldi	r24, 0x5E	; 94
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8c4:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	display_clear();
     8c8:	c1 df       	rcall	.-126    	; 0x84c <display_clear>
	display_write_string("Do Backup Now  >\nWake for config>");
     8ca:	80 e9       	ldi	r24, 0x90	; 144
     8cc:	98 e9       	ldi	r25, 0x98	; 152
     8ce:	ab df       	rcall	.-170    	; 0x826 <display_write_string>
	button0_action = wake_bcu_and_do_backup_now;
     8d0:	8e e8       	ldi	r24, 0x8E	; 142
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     8d8:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = wake_bcu;
     8dc:	8a e9       	ldi	r24, 0x9A	; 154
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     8e4:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     8e8:	08 95       	ret

000008ea <show_menu_timestamp>:
}

void show_menu_timestamp() {
	show_menu = show_menu_timestamp;
     8ea:	85 e7       	ldi	r24, 0x75	; 117
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <show_menu>
     8f2:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <show_menu+0x1>
	
	
	display_clear();
     8f6:	aa df       	rcall	.-172    	; 0x84c <display_clear>
	display_write_string("");
     8f8:	8e ee       	ldi	r24, 0xEE	; 238
     8fa:	97 e9       	ldi	r25, 0x97	; 151
     8fc:	94 df       	rcall	.-216    	; 0x826 <display_write_string>
	display_next_line();
     8fe:	89 df       	rcall	.-238    	; 0x812 <display_next_line>
	display_write_string(human_readable_timestamp_next_bu);
     900:	8b e1       	ldi	r24, 0x1B	; 27
     902:	9e e3       	ldi	r25, 0x3E	; 62
     904:	90 df       	rcall	.-224    	; 0x826 <display_write_string>
	button0_action = back_to_main_menu;
     906:	86 e4       	ldi	r24, 0x46	; 70
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <button0_action>
     90e:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <button0_action+0x1>
	button1_action = back_to_main_menu;
     912:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <button1_action>
     916:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <button1_action+0x1>
     91a:	08 95       	ret

0000091c <wake_bcu_and_do_backup_now>:
void back_to_main_menu() {
	show_menu = show_main_menu;
}

void wake_bcu_and_do_backup_now() {
	display_clear();
     91c:	97 df       	rcall	.-210    	; 0x84c <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     91e:	82 eb       	ldi	r24, 0xB2	; 178
     920:	98 e9       	ldi	r25, 0x98	; 152
     922:	81 df       	rcall	.-254    	; 0x826 <display_write_string>
	flag_schedule_backup_now = true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 07 3e 	sts	0x3E07, r24	; 0x803e07 <flag_schedule_backup_now>
	next_pwr_state = active;
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     930:	3d d0       	rcall	.+122    	; 0x9ac <transition_to_pwr_state>
     932:	08 95       	ret

00000934 <wake_bcu>:
}

void wake_bcu() {
	display_clear();
     934:	8b df       	rcall	.-234    	; 0x84c <display_clear>
	display_write_string("Waking BCU and\ndo Backup now ..");
     936:	82 eb       	ldi	r24, 0xB2	; 178
     938:	98 e9       	ldi	r25, 0x98	; 152
     93a:	75 df       	rcall	.-278    	; 0x826 <display_write_string>
	next_pwr_state = active;
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     942:	34 d0       	rcall	.+104    	; 0x9ac <transition_to_pwr_state>
     944:	08 95       	ret

00000946 <enable_5v0_smps>:
#include "powerpath_control.h"
#include "adc.h"
#include "hmi.h"

void enable_5v0_smps(void) {
	PORTA.OUT |= en_5v;
     946:	e0 e0       	ldi	r30, 0x00	; 0
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	84 81       	ldd	r24, Z+4	; 0x04
     94c:	80 61       	ori	r24, 0x10	; 16
     94e:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <flag_5v0_up>
     956:	08 95       	ret

00000958 <disable_5v0_smps>:
}

void disable_5v0_smps(void) {
	PORTA.OUT &= ~en_5v;
     958:	e0 e0       	ldi	r30, 0x00	; 0
     95a:	f4 e0       	ldi	r31, 0x04	; 4
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	8f 7e       	andi	r24, 0xEF	; 239
     960:	84 83       	std	Z+4, r24	; 0x04
	flag_5v0_up = false;
     962:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <flag_5v0_up>
     966:	08 95       	ret

00000968 <enable_bpi_sply>:
}

void enable_bpi_sply(void) {
	PORTB.OUT &= ~dis_bpi_sply;
     968:	e0 e2       	ldi	r30, 0x20	; 32
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	84 81       	ldd	r24, Z+4	; 0x04
     96e:	8d 7f       	andi	r24, 0xFD	; 253
     970:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = true;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
     978:	08 95       	ret

0000097a <disable_bpi_sply>:
}

void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
     97a:	e0 e2       	ldi	r30, 0x20	; 32
     97c:	f4 e0       	ldi	r31, 0x04	; 4
     97e:	84 81       	ldd	r24, Z+4	; 0x04
     980:	82 60       	ori	r24, 0x02	; 2
     982:	84 83       	std	Z+4, r24	; 0x04
	flag_bcu_sply_up = false;
     984:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     988:	08 95       	ret

0000098a <wait_until_bpi_ready_for_shutdown>:
			break;
	}
}

bool wait_until_bpi_ready_for_shutdown() {
	display_clear();
     98a:	60 df       	rcall	.-320    	; 0x84c <display_clear>
	display_write_string("Waiting for BCU\nHB to stop");
     98c:	82 ed       	ldi	r24, 0xD2	; 210
     98e:	98 e9       	ldi	r25, 0x98	; 152
     990:	4a df       	rcall	.-364    	; 0x826 <display_write_string>
	while (flag_bpi_heartbeat_ok == true) {
     992:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <flag_bpi_heartbeat_ok>
     996:	81 11       	cpse	r24, r1
     998:	fe cf       	rjmp	.-4      	; 0x996 <wait_until_bpi_ready_for_shutdown+0xc>
		;
	}
	display_clear();
     99a:	58 df       	rcall	.-336    	; 0x84c <display_clear>
	display_write_string("Waiting for 3V3\nto go low");
     99c:	8d ee       	ldi	r24, 0xED	; 237
     99e:	98 e9       	ldi	r25, 0x98	; 152
     9a0:	42 df       	rcall	.-380    	; 0x826 <display_write_string>
	while (vcc3v3_present() == true) {
     9a2:	ac db       	rcall	.-2216   	; 0xfc <vcc3v3_present>
     9a4:	81 11       	cpse	r24, r1
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <wait_until_bpi_ready_for_shutdown+0x18>
		;
	}
	return true;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret

000009ac <transition_to_pwr_state>:
void disable_bpi_sply(void) {
	PORTB.OUT |= dis_bpi_sply;
	flag_bcu_sply_up = false;
}

void transition_to_pwr_state(enum pwr_states pwr_state) {
     9ac:	cf 93       	push	r28
	switch(pwr_state) {
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	89 f0       	breq	.+34     	; 0x9d4 <transition_to_pwr_state+0x28>
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <transition_to_pwr_state+0xe>
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	f9 f0       	breq	.+62     	; 0x9f6 <transition_to_pwr_state+0x4a>
     9b8:	35 c0       	rjmp	.+106    	; 0xa24 <transition_to_pwr_state+0x78>
		case standby:
			wait_until_bpi_ready_for_shutdown();
     9ba:	e7 df       	rcall	.-50     	; 0x98a <wait_until_bpi_ready_for_shutdown>
			disable_bpi_sply();
     9bc:	de df       	rcall	.-68     	; 0x97a <disable_bpi_sply>
			dim_display(0);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	07 dc       	rcall	.-2034   	; 0x1d2 <dim_display>
			led_hmi_off();
     9c4:	f6 db       	rcall	.-2068   	; 0x1b2 <led_hmi_off>
			disable_5v0_smps();
     9c6:	c8 df       	rcall	.-112    	; 0x958 <disable_5v0_smps>
			flag_goto_sleep = true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_goto_sleep>
			current_pwr_state = standby;
     9ce:	10 92 1a 3e 	sts	0x3E1A, r1	; 0x803e1a <current_pwr_state>
			break;
     9d2:	28 c0       	rjmp	.+80     	; 0xa24 <transition_to_pwr_state+0x78>
		
		case display_on:
			current_pwr_state = display_on;
     9d4:	c1 e0       	ldi	r28, 0x01	; 1
     9d6:	c0 93 1a 3e 	sts	0x3E1A, r28	; 0x803e1a <current_pwr_state>
			set_interrupts_for_buttons();
     9da:	da db       	rcall	.-2124   	; 0x190 <set_interrupts_for_buttons>
			enable_5v0_smps();
     9dc:	b4 df       	rcall	.-152    	; 0x946 <enable_5v0_smps>
     9de:	86 e4       	ldi	r24, 0x46	; 70
     9e0:	90 e1       	ldi	r25, 0x10	; 16
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <transition_to_pwr_state+0x36>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <transition_to_pwr_state+0x3c>
			_delay_ms(5);
			init_display();
     9e8:	6e de       	rcall	.-804    	; 0x6c6 <init_display>
			flag_entering_mainloop_display_on = true;
     9ea:	c0 93 06 3e 	sts	0x3E06, r28	; 0x803e06 <flag_entering_mainloop_display_on>
			if(flag_wakeup_by_rtc) {
     9ee:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <flag_wakeup_by_rtc>
     9f2:	88 23       	and	r24, r24
     9f4:	b9 f0       	breq	.+46     	; 0xa24 <transition_to_pwr_state+0x78>
				break;
			}
			
		case active:
			// Todo: check if conditions for save startup are met ... if there are any
			strcpy(display_line1_content,"BCU starting up");
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	e7 e0       	ldi	r30, 0x07	; 7
     9fa:	f9 e9       	ldi	r31, 0x99	; 153
     9fc:	a2 e5       	ldi	r26, 0x52	; 82
     9fe:	be e3       	ldi	r27, 0x3E	; 62
     a00:	01 90       	ld	r0, Z+
     a02:	0d 92       	st	X+, r0
     a04:	8a 95       	dec	r24
     a06:	e1 f7       	brne	.-8      	; 0xa00 <transition_to_pwr_state+0x54>
			strcpy(display_line2_content,"Please wait ...");
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	e7 e1       	ldi	r30, 0x17	; 23
     a0c:	f9 e9       	ldi	r31, 0x99	; 153
     a0e:	ac e3       	ldi	r26, 0x3C	; 60
     a10:	be e3       	ldi	r27, 0x3E	; 62
     a12:	01 90       	ld	r0, Z+
     a14:	0d 92       	st	X+, r0
     a16:	8a 95       	dec	r24
     a18:	e1 f7       	brne	.-8      	; 0xa12 <transition_to_pwr_state+0x66>
			enable_5v0_smps();
     a1a:	95 df       	rcall	.-214    	; 0x946 <enable_5v0_smps>
			enable_bpi_sply();
     a1c:	a5 df       	rcall	.-182    	; 0x968 <enable_bpi_sply>
			current_pwr_state = active;
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <current_pwr_state>
			break;
	}
}
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <rtc_reset_counter>:
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a28:	e0 e4       	ldi	r30, 0x40	; 64
     a2a:	f1 e0       	ldi	r31, 0x01	; 1
     a2c:	10 86       	std	Z+8, r1	; 0x08
     a2e:	11 86       	std	Z+9, r1	; 0x09
     a30:	08 95       	ret

00000a32 <rtc_wait_for_all_status_bits_zero>:
     a32:	e0 e4       	ldi	r30, 0x40	; 64
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	81 11       	cpse	r24, r1
     a3a:	fd cf       	rjmp	.-6      	; 0xa36 <rtc_wait_for_all_status_bits_zero+0x4>
     a3c:	08 95       	ret

00000a3e <rtc_setup>:
}

void rtc_setup(void) {
	flag_wakeup_by_rtc = false;
     a3e:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <flag_wakeup_by_rtc>
	rtc_wait_for_all_status_bits_zero();
     a42:	f7 df       	rcall	.-18     	; 0xa32 <rtc_wait_for_all_status_bits_zero>
void rtc_set_prescaler_and_enable()
{
	/* active in standby mode, prescaler = 32768, periperial enabled */
	//Todo: uncomment 32 seconds configuration !!
	//RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV32768_gc; // <- one counter increment represents 32 seconds
	RTC.CTRLA = RTC_RUNSTDBY_bm | RTC_PRESCALER_DIV1024_gc | RTC_RTCEN_bm; // <- 1 second
     a44:	e0 e4       	ldi	r30, 0x40	; 64
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	81 ed       	ldi	r24, 0xD1	; 209
     a4a:	80 83       	st	Z, r24
	return RTC.CTRLA & RTC_RTCEN_bm;
}

void rtc_set_compare_interrupt()
{
	RTC.INTCTRL = RTC_CMP_bm;
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	82 83       	std	Z+2, r24	; 0x02
}

void rtc_use_internal_1k024_oscillator()
{
	/* actually its the 32768khz oscillator, divided by 32 => fclk = 1,024kHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	87 83       	std	Z+7, r24	; 0x07
     a54:	08 95       	ret

00000a56 <rtc_write_seconds_to_cmp>:
	rtc_use_internal_1k024_oscillator();
}

/* Important Stuff */

void rtc_write_seconds_to_cmp() {
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
	long register_value_next_bu = seconds_to_next_bu / 32;
     a5e:	c0 90 4d 3e 	lds	r12, 0x3E4D	; 0x803e4d <seconds_to_next_bu>
     a62:	d0 90 4e 3e 	lds	r13, 0x3E4E	; 0x803e4e <seconds_to_next_bu+0x1>
     a66:	e0 90 4f 3e 	lds	r14, 0x3E4F	; 0x803e4f <seconds_to_next_bu+0x2>
     a6a:	f0 90 50 3e 	lds	r15, 0x3E50	; 0x803e50 <seconds_to_next_bu+0x3>
     a6e:	ff 20       	and	r15, r15
     a70:	2c f4       	brge	.+10     	; 0xa7c <rtc_write_seconds_to_cmp+0x26>
     a72:	8f e1       	ldi	r24, 0x1F	; 31
     a74:	c8 0e       	add	r12, r24
     a76:	d1 1c       	adc	r13, r1
     a78:	e1 1c       	adc	r14, r1
     a7a:	f1 1c       	adc	r15, r1
     a7c:	68 94       	set
     a7e:	14 f8       	bld	r1, 4
     a80:	f5 94       	asr	r15
     a82:	e7 94       	ror	r14
     a84:	d7 94       	ror	r13
     a86:	c7 94       	ror	r12
     a88:	16 94       	lsr	r1
     a8a:	d1 f7       	brne	.-12     	; 0xa80 <rtc_write_seconds_to_cmp+0x2a>
	sprintf(buffer, "Writing %ld to CMP Register\n", register_value_next_bu);
     a8c:	ff 92       	push	r15
     a8e:	ef 92       	push	r14
     a90:	df 92       	push	r13
     a92:	cf 92       	push	r12
     a94:	87 e2       	ldi	r24, 0x27	; 39
     a96:	99 e9       	ldi	r25, 0x99	; 153
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	83 e8       	ldi	r24, 0x83	; 131
     a9e:	9e e3       	ldi	r25, 0x3E	; 62
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	69 d3       	rcall	.+1746   	; 0x1178 <sprintf>
	USART0_sendString_w_eol(buffer);
     aa6:	83 e8       	ldi	r24, 0x83	; 131
     aa8:	9e e3       	ldi	r25, 0x3E	; 62
     aaa:	7b d0       	rcall	.+246    	; 0xba2 <USART0_sendString_w_eol>
	rtc_reset_counter();
     aac:	bd df       	rcall	.-134    	; 0xa28 <rtc_reset_counter>
	RTC.CMP = register_value_next_bu;
     aae:	8c 2d       	mov	r24, r12
     ab0:	9d 2d       	mov	r25, r13
     ab2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ab6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
}
     aba:	8d b7       	in	r24, 0x3d	; 61
     abc:	9e b7       	in	r25, 0x3e	; 62
     abe:	08 96       	adiw	r24, 0x08	; 8
     ac0:	8d bf       	out	0x3d, r24	; 61
     ac2:	9e bf       	out	0x3e, r25	; 62
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <__vector_6>:

/* Interrupts */

ISR(RTC_CNT_vect) {
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
	RTC.INTFLAGS |= RTC_CMP_bm;
     af0:	e0 e4       	ldi	r30, 0x40	; 64
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	83 81       	ldd	r24, Z+3	; 0x03
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	83 83       	std	Z+3, r24	; 0x03
	USART0_sendString("CMP\n");
     afa:	84 e4       	ldi	r24, 0x44	; 68
     afc:	99 e9       	ldi	r25, 0x99	; 153
     afe:	30 d0       	rcall	.+96     	; 0xb60 <USART0_sendString>
	flag_wakeup_by_rtc = true;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <flag_wakeup_by_rtc>
	next_pwr_state = display_on;
     b06:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <next_pwr_state>
	transition_to_pwr_state(next_pwr_state);
     b0a:	50 df       	rcall	.-352    	; 0x9ac <transition_to_pwr_state>
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <USART0_enable_rx_complete_interrupt>:
	return USART0.RXDATAL;
}

uint8_t USART0_receive_complete() {
	return USART0.STATUS & USART_RXCIF_bm;
}
     b2e:	e0 e0       	ldi	r30, 0x00	; 0
     b30:	f8 e0       	ldi	r31, 0x08	; 8
     b32:	85 81       	ldd	r24, Z+5	; 0x05
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	85 83       	std	Z+5, r24	; 0x05
     b38:	08 95       	ret

00000b3a <init_uart>:
     b3a:	7a db       	rcall	.-2316   	; 0x230 <set_pb2_txd_and_pb3_rxd>
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f8 e0       	ldi	r31, 0x08	; 8
     b40:	8c e6       	ldi	r24, 0x6C	; 108
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	80 87       	std	Z+8, r24	; 0x08
     b46:	91 87       	std	Z+9, r25	; 0x09
     b48:	80 ec       	ldi	r24, 0xC0	; 192
     b4a:	86 83       	std	Z+6, r24	; 0x06
     b4c:	f0 df       	rcall	.-32     	; 0xb2e <USART0_enable_rx_complete_interrupt>
     b4e:	08 95       	ret

00000b50 <USART0_sendChar>:
     b50:	e0 e0       	ldi	r30, 0x00	; 0
     b52:	f8 e0       	ldi	r31, 0x08	; 8
     b54:	94 81       	ldd	r25, Z+4	; 0x04
     b56:	95 ff       	sbrs	r25, 5
     b58:	fd cf       	rjmp	.-6      	; 0xb54 <USART0_sendChar+0x4>
     b5a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     b5e:	08 95       	ret

00000b60 <USART0_sendString>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	8c 01       	movw	r16, r24
     b6e:	7c 01       	movw	r14, r24
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <USART0_sendString+0x20>
     b76:	f7 01       	movw	r30, r14
     b78:	81 91       	ld	r24, Z+
     b7a:	7f 01       	movw	r14, r30
     b7c:	e9 df       	rcall	.-46     	; 0xb50 <USART0_sendChar>
     b7e:	21 96       	adiw	r28, 0x01	; 1
     b80:	f8 01       	movw	r30, r16
     b82:	01 90       	ld	r0, Z+
     b84:	00 20       	and	r0, r0
     b86:	e9 f7       	brne	.-6      	; 0xb82 <USART0_sendString+0x22>
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	e0 1b       	sub	r30, r16
     b8c:	f1 0b       	sbc	r31, r17
     b8e:	ce 17       	cp	r28, r30
     b90:	df 07       	cpc	r29, r31
     b92:	88 f3       	brcs	.-30     	; 0xb76 <USART0_sendString+0x16>
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <USART0_sendString_w_eol>:
     ba2:	de df       	rcall	.-68     	; 0xb60 <USART0_sendString>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	d4 df       	rcall	.-88     	; 0xb50 <USART0_sendChar>
     ba8:	08 95       	ret

00000baa <USART0_read>:
     baa:	e0 e0       	ldi	r30, 0x00	; 0
     bac:	f8 e0       	ldi	r31, 0x08	; 8
     bae:	84 81       	ldd	r24, Z+4	; 0x04
     bb0:	88 23       	and	r24, r24
     bb2:	ec f7       	brge	.-6      	; 0xbae <USART0_read+0x4>
     bb4:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     bb8:	08 95       	ret

00000bba <USART0_read_string>:

void USART0_read_string(char *receive_buffer, int maxlen) {
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	7c 01       	movw	r14, r24
     bcc:	6b 01       	movw	r12, r22
     bce:	61 32       	cpi	r22, 0x21	; 33
     bd0:	71 05       	cpc	r23, r1
     bd2:	24 f0       	brlt	.+8      	; 0xbdc <USART0_read_string+0x22>
     bd4:	68 94       	set
     bd6:	cc 24       	eor	r12, r12
     bd8:	c5 f8       	bld	r12, 5
     bda:	d1 2c       	mov	r13, r1
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     bdc:	dd 20       	and	r13, r13
     bde:	c4 f0       	brlt	.+48     	; 0xc10 <USART0_read_string+0x56>
     be0:	e7 01       	movw	r28, r14
     be2:	00 e0       	ldi	r16, 0x00	; 0
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	7e 01       	movw	r14, r28
		i++;
     be8:	0f 5f       	subi	r16, 0xFF	; 255
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
		*receive_buffer = USART0_read();
     bec:	de df       	rcall	.-68     	; 0xbaa <USART0_read>
     bee:	89 93       	st	Y+, r24
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
     bf0:	8a 30       	cpi	r24, 0x0A	; 10
     bf2:	21 f0       	breq	.+8      	; 0xbfc <USART0_read_string+0x42>
     bf4:	88 23       	and	r24, r24
     bf6:	11 f0       	breq	.+4      	; 0xbfc <USART0_read_string+0x42>
     bf8:	8d 30       	cpi	r24, 0x0D	; 13
     bfa:	31 f4       	brne	.+12     	; 0xc08 <USART0_read_string+0x4e>
			*receive_buffer = '\0';
     bfc:	f7 01       	movw	r30, r14
     bfe:	10 82       	st	Z, r1
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
     c00:	c0 16       	cp	r12, r16
     c02:	d1 06       	cpc	r13, r17
     c04:	3c f4       	brge	.+14     	; 0xc14 <USART0_read_string+0x5a>
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <USART0_read_string+0x56>
		*receive_buffer = USART0_read();
		if ((*receive_buffer == '\n') || (*receive_buffer == '\0') || (*receive_buffer == '\r')) {
			*receive_buffer = '\0';
			break;
		}
		receive_buffer++;
     c08:	7e 01       	movw	r14, r28
void USART0_read_string(char *receive_buffer, int maxlen) {
	if (maxlen > 32) {
		maxlen = 32; //increase size of receive buffer in uart.h if you want to have more space!
	}
	int i = 0;
	while(i <= maxlen) {
     c0a:	c0 16       	cp	r12, r16
     c0c:	d1 06       	cpc	r13, r17
     c0e:	5c f7       	brge	.-42     	; 0xbe6 <USART0_read_string+0x2c>
			break;
		}
		receive_buffer++;
	}
	if (i > maxlen) {
		*receive_buffer = '\0';
     c10:	f7 01       	movw	r30, r14
     c12:	10 82       	st	Z, r1
	}
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	08 95       	ret

00000c26 <convert_str_to_long>:
	if(strcmp(message_code, "DL") == 0) {
		USART0_sendString_w_eol("ACK:DL");
	}
}

long convert_str_to_long(char *str) {
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <convert_str_to_long+0xa>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	08 2f       	mov	r16, r24
     c36:	19 2f       	mov	r17, r25
	char *ptr;
	printf("Parsing '%s':\n", str);
     c38:	9f 93       	push	r25
     c3a:	8f 93       	push	r24
     c3c:	89 e4       	ldi	r24, 0x49	; 73
     c3e:	99 e9       	ldi	r25, 0x99	; 153
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	86 d2       	rcall	.+1292   	; 0x1152 <printf>
	long ret;

	ret = strtol(str, &ptr, 10);
     c46:	4a e0       	ldi	r20, 0x0A	; 10
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	80 2f       	mov	r24, r16
     c52:	91 2f       	mov	r25, r17
     c54:	29 d1       	rcall	.+594    	; 0xea8 <strtol>
	return ret;
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <USART0_process_incoming_message>:
	if (i > maxlen) {
		*receive_buffer = '\0';
	}
}

void USART0_process_incoming_message() {
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
	char *message_code, *payload;
	
	if (strcmp(usart_receive_buffer, "Test") == 0) {
     c74:	68 e5       	ldi	r22, 0x58	; 88
     c76:	79 e9       	ldi	r23, 0x99	; 153
     c78:	83 e6       	ldi	r24, 0x63	; 99
     c7a:	9e e3       	ldi	r25, 0x3E	; 62
     c7c:	33 d2       	rcall	.+1126   	; 0x10e4 <strcmp>
     c7e:	89 2b       	or	r24, r25
     c80:	19 f4       	brne	.+6      	; 0xc88 <USART0_process_incoming_message+0x1c>
		USART0_sendString_w_eol("Echo");
     c82:	8d e5       	ldi	r24, 0x5D	; 93
     c84:	99 e9       	ldi	r25, 0x99	; 153
     c86:	8d df       	rcall	.-230    	; 0xba2 <USART0_sendString_w_eol>
	}
	
    message_code = strtok(usart_receive_buffer, ":");
     c88:	62 e6       	ldi	r22, 0x62	; 98
     c8a:	79 e9       	ldi	r23, 0x99	; 153
     c8c:	83 e6       	ldi	r24, 0x63	; 99
     c8e:	9e e3       	ldi	r25, 0x3E	; 62
     c90:	25 d2       	rcall	.+1098   	; 0x10dc <strtok>
     c92:	d8 2f       	mov	r29, r24
     c94:	c9 2f       	mov	r28, r25
    payload = strtok(NULL,"\0");
     c96:	64 eb       	ldi	r22, 0xB4	; 180
     c98:	77 e9       	ldi	r23, 0x97	; 151
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	1e d2       	rcall	.+1084   	; 0x10dc <strtok>
     ca0:	08 2f       	mov	r16, r24
     ca2:	19 2f       	mov	r17, r25
	sprintf(buffer,"MC: %s, PL: %s\n",message_code, payload);
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	84 e6       	ldi	r24, 0x64	; 100
     cae:	99 e9       	ldi	r25, 0x99	; 153
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	83 e8       	ldi	r24, 0x83	; 131
     cb6:	9e e3       	ldi	r25, 0x3E	; 62
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	5d d2       	rcall	.+1210   	; 0x1178 <sprintf>
	
	if (strcmp(message_code, "D1") == 0) {
     cbe:	68 e7       	ldi	r22, 0x78	; 120
     cc0:	79 e9       	ldi	r23, 0x99	; 153
     cc2:	8d 2f       	mov	r24, r29
     cc4:	9c 2f       	mov	r25, r28
     cc6:	0e d2       	rcall	.+1052   	; 0x10e4 <strcmp>
     cc8:	2d b7       	in	r18, 0x3d	; 61
     cca:	3e b7       	in	r19, 0x3e	; 62
     ccc:	28 5f       	subi	r18, 0xF8	; 248
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	2d bf       	out	0x3d, r18	; 61
     cd2:	3e bf       	out	0x3e, r19	; 62
     cd4:	89 2b       	or	r24, r25
     cd6:	41 f4       	brne	.+16     	; 0xce8 <USART0_process_incoming_message+0x7c>
		USART0_sendString_w_eol("ACK_D1");
     cd8:	84 e7       	ldi	r24, 0x74	; 116
     cda:	99 e9       	ldi	r25, 0x99	; 153
     cdc:	62 df       	rcall	.-316    	; 0xba2 <USART0_sendString_w_eol>
		strcpy(display_line1_content, payload);
     cde:	60 2f       	mov	r22, r16
     ce0:	71 2f       	mov	r23, r17
     ce2:	82 e5       	ldi	r24, 0x52	; 82
     ce4:	9e e3       	ldi	r25, 0x3E	; 62
     ce6:	07 d2       	rcall	.+1038   	; 0x10f6 <strcpy>
	}
	
	if (strcmp(message_code, "D2") == 0) {
     ce8:	6f e7       	ldi	r22, 0x7F	; 127
     cea:	79 e9       	ldi	r23, 0x99	; 153
     cec:	8d 2f       	mov	r24, r29
     cee:	9c 2f       	mov	r25, r28
     cf0:	f9 d1       	rcall	.+1010   	; 0x10e4 <strcmp>
     cf2:	89 2b       	or	r24, r25
     cf4:	59 f4       	brne	.+22     	; 0xd0c <USART0_process_incoming_message+0xa0>
		USART0_sendString_w_eol("ACK_D2");
     cf6:	8b e7       	ldi	r24, 0x7B	; 123
     cf8:	99 e9       	ldi	r25, 0x99	; 153
     cfa:	53 df       	rcall	.-346    	; 0xba2 <USART0_sendString_w_eol>
		strcpy(display_line2_content, payload);
     cfc:	60 2f       	mov	r22, r16
     cfe:	71 2f       	mov	r23, r17
     d00:	8c e3       	ldi	r24, 0x3C	; 60
     d02:	9e e3       	ldi	r25, 0x3E	; 62
     d04:	f8 d1       	rcall	.+1008   	; 0x10f6 <strcpy>
		flag_string_for_display_received = true;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <flag_string_for_display_received>
	}
	
	if (strcmp(message_code, "SR") == 0) {
     d0c:	62 e8       	ldi	r22, 0x82	; 130
     d0e:	79 e9       	ldi	r23, 0x99	; 153
     d10:	8d 2f       	mov	r24, r29
     d12:	9c 2f       	mov	r25, r28
     d14:	e7 d1       	rcall	.+974    	; 0x10e4 <strcmp>
     d16:	89 2b       	or	r24, r25
     d18:	29 f4       	brne	.+10     	; 0xd24 <USART0_process_incoming_message+0xb8>
		flag_pwr_state_change_request = true;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <flag_pwr_state_change_request>
		next_pwr_state = standby;
     d20:	10 92 51 3e 	sts	0x3E51, r1	; 0x803e51 <next_pwr_state>
	}	
	
	if (strcmp(message_code, "BU") == 0) {
     d24:	65 e8       	ldi	r22, 0x85	; 133
     d26:	79 e9       	ldi	r23, 0x99	; 153
     d28:	8d 2f       	mov	r24, r29
     d2a:	9c 2f       	mov	r25, r28
     d2c:	db d1       	rcall	.+950    	; 0x10e4 <strcmp>
     d2e:	89 2b       	or	r24, r25
     d30:	11 f5       	brne	.+68     	; 0xd76 <USART0_process_incoming_message+0x10a>
		sprintf(buffer,"ACK:BU:%s\n", payload);
     d32:	1f 93       	push	r17
     d34:	0f 93       	push	r16
     d36:	88 e8       	ldi	r24, 0x88	; 136
     d38:	99 e9       	ldi	r25, 0x99	; 153
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	83 e8       	ldi	r24, 0x83	; 131
     d40:	9e e3       	ldi	r25, 0x3E	; 62
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	18 d2       	rcall	.+1072   	; 0x1178 <sprintf>
		USART0_sendString_w_eol(buffer);
     d48:	83 e8       	ldi	r24, 0x83	; 131
     d4a:	9e e3       	ldi	r25, 0x3E	; 62
     d4c:	2a df       	rcall	.-428    	; 0xba2 <USART0_sendString_w_eol>
		seconds_to_next_bu = convert_str_to_long(payload);
     d4e:	80 2f       	mov	r24, r16
     d50:	91 2f       	mov	r25, r17
     d52:	69 df       	rcall	.-302    	; 0xc26 <convert_str_to_long>
     d54:	60 93 4d 3e 	sts	0x3E4D, r22	; 0x803e4d <seconds_to_next_bu>
     d58:	70 93 4e 3e 	sts	0x3E4E, r23	; 0x803e4e <seconds_to_next_bu+0x1>
     d5c:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <seconds_to_next_bu+0x2>
     d60:	90 93 50 3e 	sts	0x3E50, r25	; 0x803e50 <seconds_to_next_bu+0x3>
		flag_received_seconds_to_next_bu = true;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <flag_received_seconds_to_next_bu>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
	}
	
	if (strcmp(message_code, "BR") == 0) {
     d76:	63 e9       	ldi	r22, 0x93	; 147
     d78:	79 e9       	ldi	r23, 0x99	; 153
     d7a:	8d 2f       	mov	r24, r29
     d7c:	9c 2f       	mov	r25, r28
     d7e:	b2 d1       	rcall	.+868    	; 0x10e4 <strcmp>
     d80:	89 2b       	or	r24, r25
     d82:	59 f4       	brne	.+22     	; 0xd9a <USART0_process_incoming_message+0x12e>
		/* received human readable timestamp for next backup */
		strcpy(human_readable_timestamp_next_bu, payload);
     d84:	60 2f       	mov	r22, r16
     d86:	71 2f       	mov	r23, r17
     d88:	8b e1       	ldi	r24, 0x1B	; 27
     d8a:	9e e3       	ldi	r25, 0x3E	; 62
     d8c:	b4 d1       	rcall	.+872    	; 0x10f6 <strcpy>
		human_readable_timestamp_next_bu[16] = '\n';
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	80 93 2b 3e 	sts	0x3E2B, r24	; 0x803e2b <human_readable_timestamp_next_bu+0x10>
		flag_human_readable_timestamp_next_bu_received = true;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <flag_human_readable_timestamp_next_bu_received>
	}	
	
	if (strcmp(message_code, "SB") == 0) {
     d9a:	66 e9       	ldi	r22, 0x96	; 150
     d9c:	79 e9       	ldi	r23, 0x99	; 153
     d9e:	8d 2f       	mov	r24, r29
     da0:	9c 2f       	mov	r25, r28
     da2:	a0 d1       	rcall	.+832    	; 0x10e4 <strcmp>
     da4:	89 2b       	or	r24, r25
     da6:	19 f4       	brne	.+6      	; 0xdae <USART0_process_incoming_message+0x142>
		flag_goto_sleep = true;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <flag_goto_sleep>
	}
	
	if (strcmp(message_code, "CC") == 0) {
     dae:	6d e9       	ldi	r22, 0x9D	; 157
     db0:	79 e9       	ldi	r23, 0x99	; 153
     db2:	8d 2f       	mov	r24, r29
     db4:	9c 2f       	mov	r25, r28
     db6:	96 d1       	rcall	.+812    	; 0x10e4 <strcmp>
     db8:	89 2b       	or	r24, r25
     dba:	31 f4       	brne	.+12     	; 0xdc8 <USART0_process_incoming_message+0x15c>
		USART0_sendString_w_eol("ACK:CC");
     dbc:	89 e9       	ldi	r24, 0x99	; 153
     dbe:	99 e9       	ldi	r25, 0x99	; 153
     dc0:	f0 de       	rcall	.-544    	; 0xba2 <USART0_sendString_w_eol>
		flag_request_current_measurement = true;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <flag_request_current_measurement>
	}
	
	if (strcmp(message_code, "TP") == 0) {
     dc8:	64 ea       	ldi	r22, 0xA4	; 164
     dca:	79 e9       	ldi	r23, 0x99	; 153
     dcc:	8d 2f       	mov	r24, r29
     dce:	9c 2f       	mov	r25, r28
     dd0:	89 d1       	rcall	.+786    	; 0x10e4 <strcmp>
     dd2:	89 2b       	or	r24, r25
     dd4:	31 f4       	brne	.+12     	; 0xde2 <USART0_process_incoming_message+0x176>
		USART0_sendString_w_eol("ACK:TP");
     dd6:	80 ea       	ldi	r24, 0xA0	; 160
     dd8:	99 e9       	ldi	r25, 0x99	; 153
     dda:	e3 de       	rcall	.-570    	; 0xba2 <USART0_sendString_w_eol>
		flag_request_temperature_measurement = true;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <flag_request_temperature_measurement>
	}
	
	if (strcmp(message_code, "3V") == 0) {
     de2:	6b ea       	ldi	r22, 0xAB	; 171
     de4:	79 e9       	ldi	r23, 0x99	; 153
     de6:	8d 2f       	mov	r24, r29
     de8:	9c 2f       	mov	r25, r28
     dea:	7c d1       	rcall	.+760    	; 0x10e4 <strcmp>
     dec:	89 2b       	or	r24, r25
     dee:	31 f4       	brne	.+12     	; 0xdfc <USART0_process_incoming_message+0x190>
		USART0_sendString_w_eol("ACK:3V");
     df0:	87 ea       	ldi	r24, 0xA7	; 167
     df2:	99 e9       	ldi	r25, 0x99	; 153
     df4:	d6 de       	rcall	.-596    	; 0xba2 <USART0_sendString_w_eol>
		flag_request_3v3_measurement = true;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 09 3e 	sts	0x3E09, r24	; 0x803e09 <flag_request_3v3_measurement>
	}
	
	if(strcmp(message_code, "ON") == 0) {
     dfc:	6e ea       	ldi	r22, 0xAE	; 174
     dfe:	79 e9       	ldi	r23, 0x99	; 153
     e00:	8d 2f       	mov	r24, r29
     e02:	9c 2f       	mov	r25, r28
     e04:	6f d1       	rcall	.+734    	; 0x10e4 <strcmp>
     e06:	89 2b       	or	r24, r25
     e08:	61 f4       	brne	.+24     	; 0xe22 <USART0_process_incoming_message+0x1b6>
		USART0_sendString_w_eol("ACK:ON\n");
     e0a:	81 eb       	ldi	r24, 0xB1	; 177
     e0c:	99 e9       	ldi	r25, 0x99	; 153
     e0e:	c9 de       	rcall	.-622    	; 0xba2 <USART0_sendString_w_eol>
		if(flag_schedule_backup_now) {
     e10:	80 91 07 3e 	lds	r24, 0x3E07	; 0x803e07 <flag_schedule_backup_now>
     e14:	88 23       	and	r24, r24
     e16:	29 f0       	breq	.+10     	; 0xe22 <USART0_process_incoming_message+0x1b6>
			flag_schedule_backup_now = false;
     e18:	10 92 07 3e 	sts	0x3E07, r1	; 0x803e07 <flag_schedule_backup_now>
			USART0_sendString_w_eol("User Backup\n");
     e1c:	89 eb       	ldi	r24, 0xB9	; 185
     e1e:	99 e9       	ldi	r25, 0x99	; 153
     e20:	c0 de       	rcall	.-640    	; 0xba2 <USART0_sendString_w_eol>
		}
	}
	
	if(strcmp(message_code, "DB") == 0) {
     e22:	66 ec       	ldi	r22, 0xC6	; 198
     e24:	79 e9       	ldi	r23, 0x99	; 153
     e26:	8d 2f       	mov	r24, r29
     e28:	9c 2f       	mov	r25, r28
     e2a:	5c d1       	rcall	.+696    	; 0x10e4 <strcmp>
     e2c:	89 2b       	or	r24, r25
     e2e:	19 f4       	brne	.+6      	; 0xe36 <USART0_process_incoming_message+0x1ca>
		USART0_sendString_w_eol("ACK:DB\n");
     e30:	89 ec       	ldi	r24, 0xC9	; 201
     e32:	99 e9       	ldi	r25, 0x99	; 153
     e34:	b6 de       	rcall	.-660    	; 0xba2 <USART0_sendString_w_eol>
		//dim display
	}
	
	if(strcmp(message_code, "DL") == 0) {
     e36:	65 ed       	ldi	r22, 0xD5	; 213
     e38:	79 e9       	ldi	r23, 0x99	; 153
     e3a:	8d 2f       	mov	r24, r29
     e3c:	9c 2f       	mov	r25, r28
     e3e:	52 d1       	rcall	.+676    	; 0x10e4 <strcmp>
     e40:	89 2b       	or	r24, r25
     e42:	19 f4       	brne	.+6      	; 0xe4a <USART0_process_incoming_message+0x1de>
		USART0_sendString_w_eol("ACK:DL");
     e44:	81 ed       	ldi	r24, 0xD1	; 209
     e46:	99 e9       	ldi	r25, 0x99	; 153
     e48:	ac de       	rcall	.-680    	; 0xba2 <USART0_sendString_w_eol>
	}
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <__vector_22>:
	return ret;
}

/* Interrupts */

ISR(USART0_RXC_vect) {
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
	USART0_read_string(usart_receive_buffer, 32);
     e76:	60 e2       	ldi	r22, 0x20	; 32
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	83 e6       	ldi	r24, 0x63	; 99
     e7c:	9e e3       	ldi	r25, 0x3E	; 62
     e7e:	9d de       	rcall	.-710    	; 0xbba <USART0_read_string>
	flag_usart_string_receive_complete = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <flag_usart_string_receive_complete>
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <strtol>:
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e9 e5       	ldi	r30, 0x59	; 89
     eae:	f7 e0       	ldi	r31, 0x07	; 7
     eb0:	43 c4       	rjmp	.+2182   	; 0x1738 <__prologue_saves__+0x2>
     eb2:	5c 01       	movw	r10, r24
     eb4:	6b 01       	movw	r12, r22
     eb6:	7a 01       	movw	r14, r20
     eb8:	61 15       	cp	r22, r1
     eba:	71 05       	cpc	r23, r1
     ebc:	19 f0       	breq	.+6      	; 0xec4 <strtol+0x1c>
     ebe:	fb 01       	movw	r30, r22
     ec0:	80 83       	st	Z, r24
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	e1 14       	cp	r14, r1
     ec6:	f1 04       	cpc	r15, r1
     ec8:	29 f0       	breq	.+10     	; 0xed4 <strtol+0x2c>
     eca:	c7 01       	movw	r24, r14
     ecc:	02 97       	sbiw	r24, 0x02	; 2
     ece:	83 97       	sbiw	r24, 0x23	; 35
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <strtol+0x2c>
     ed2:	e2 c0       	rjmp	.+452    	; 0x1098 <strtol+0x1f0>
     ed4:	e5 01       	movw	r28, r10
     ed6:	21 96       	adiw	r28, 0x01	; 1
     ed8:	f5 01       	movw	r30, r10
     eda:	10 81       	ld	r17, Z
     edc:	81 2f       	mov	r24, r17
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	f4 d0       	rcall	.+488    	; 0x10ca <isspace>
     ee2:	89 2b       	or	r24, r25
     ee4:	11 f0       	breq	.+4      	; 0xeea <strtol+0x42>
     ee6:	5e 01       	movw	r10, r28
     ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <strtol+0x2c>
     eea:	1d 32       	cpi	r17, 0x2D	; 45
     eec:	29 f4       	brne	.+10     	; 0xef8 <strtol+0x50>
     eee:	21 96       	adiw	r28, 0x01	; 1
     ef0:	f5 01       	movw	r30, r10
     ef2:	11 81       	ldd	r17, Z+1	; 0x01
     ef4:	01 e0       	ldi	r16, 0x01	; 1
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <strtol+0x5e>
     ef8:	1b 32       	cpi	r17, 0x2B	; 43
     efa:	21 f4       	brne	.+8      	; 0xf04 <strtol+0x5c>
     efc:	e5 01       	movw	r28, r10
     efe:	22 96       	adiw	r28, 0x02	; 2
     f00:	f5 01       	movw	r30, r10
     f02:	11 81       	ldd	r17, Z+1	; 0x01
     f04:	00 e0       	ldi	r16, 0x00	; 0
     f06:	e1 14       	cp	r14, r1
     f08:	f1 04       	cpc	r15, r1
     f0a:	09 f1       	breq	.+66     	; 0xf4e <strtol+0xa6>
     f0c:	f0 e1       	ldi	r31, 0x10	; 16
     f0e:	ef 16       	cp	r14, r31
     f10:	f1 04       	cpc	r15, r1
     f12:	29 f4       	brne	.+10     	; 0xf1e <strtol+0x76>
     f14:	3e c0       	rjmp	.+124    	; 0xf92 <strtol+0xea>
     f16:	10 e3       	ldi	r17, 0x30	; 48
     f18:	e1 14       	cp	r14, r1
     f1a:	f1 04       	cpc	r15, r1
     f1c:	21 f1       	breq	.+72     	; 0xf66 <strtol+0xbe>
     f1e:	28 e0       	ldi	r18, 0x08	; 8
     f20:	e2 16       	cp	r14, r18
     f22:	f1 04       	cpc	r15, r1
     f24:	01 f1       	breq	.+64     	; 0xf66 <strtol+0xbe>
     f26:	54 f4       	brge	.+20     	; 0xf3c <strtol+0x94>
     f28:	e2 e0       	ldi	r30, 0x02	; 2
     f2a:	ee 16       	cp	r14, r30
     f2c:	f1 04       	cpc	r15, r1
     f2e:	21 f5       	brne	.+72     	; 0xf78 <strtol+0xd0>
     f30:	81 2c       	mov	r8, r1
     f32:	91 2c       	mov	r9, r1
     f34:	a1 2c       	mov	r10, r1
     f36:	b0 e4       	ldi	r27, 0x40	; 64
     f38:	bb 2e       	mov	r11, r27
     f3a:	3d c0       	rjmp	.+122    	; 0xfb6 <strtol+0x10e>
     f3c:	fa e0       	ldi	r31, 0x0A	; 10
     f3e:	ef 16       	cp	r14, r31
     f40:	f1 04       	cpc	r15, r1
     f42:	39 f0       	breq	.+14     	; 0xf52 <strtol+0xaa>
     f44:	20 e1       	ldi	r18, 0x10	; 16
     f46:	e2 16       	cp	r14, r18
     f48:	f1 04       	cpc	r15, r1
     f4a:	b1 f4       	brne	.+44     	; 0xf78 <strtol+0xd0>
     f4c:	2f c0       	rjmp	.+94     	; 0xfac <strtol+0x104>
     f4e:	10 33       	cpi	r17, 0x30	; 48
     f50:	11 f1       	breq	.+68     	; 0xf96 <strtol+0xee>
     f52:	fa e0       	ldi	r31, 0x0A	; 10
     f54:	ef 2e       	mov	r14, r31
     f56:	f1 2c       	mov	r15, r1
     f58:	ac ec       	ldi	r26, 0xCC	; 204
     f5a:	8a 2e       	mov	r8, r26
     f5c:	98 2c       	mov	r9, r8
     f5e:	a8 2c       	mov	r10, r8
     f60:	ac e0       	ldi	r26, 0x0C	; 12
     f62:	ba 2e       	mov	r11, r26
     f64:	28 c0       	rjmp	.+80     	; 0xfb6 <strtol+0x10e>
     f66:	78 e0       	ldi	r23, 0x08	; 8
     f68:	e7 2e       	mov	r14, r23
     f6a:	f1 2c       	mov	r15, r1
     f6c:	81 2c       	mov	r8, r1
     f6e:	91 2c       	mov	r9, r1
     f70:	a1 2c       	mov	r10, r1
     f72:	e0 e1       	ldi	r30, 0x10	; 16
     f74:	be 2e       	mov	r11, r30
     f76:	1f c0       	rjmp	.+62     	; 0xfb6 <strtol+0x10e>
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e8       	ldi	r25, 0x80	; 128
     f80:	97 01       	movw	r18, r14
     f82:	0f 2c       	mov	r0, r15
     f84:	00 0c       	add	r0, r0
     f86:	44 0b       	sbc	r20, r20
     f88:	55 0b       	sbc	r21, r21
     f8a:	a9 d3       	rcall	.+1874   	; 0x16de <__udivmodsi4>
     f8c:	49 01       	movw	r8, r18
     f8e:	5a 01       	movw	r10, r20
     f90:	12 c0       	rjmp	.+36     	; 0xfb6 <strtol+0x10e>
     f92:	10 33       	cpi	r17, 0x30	; 48
     f94:	59 f4       	brne	.+22     	; 0xfac <strtol+0x104>
     f96:	88 81       	ld	r24, Y
     f98:	8f 7d       	andi	r24, 0xDF	; 223
     f9a:	88 35       	cpi	r24, 0x58	; 88
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <strtol+0xf8>
     f9e:	bb cf       	rjmp	.-138    	; 0xf16 <strtol+0x6e>
     fa0:	19 81       	ldd	r17, Y+1	; 0x01
     fa2:	22 96       	adiw	r28, 0x02	; 2
     fa4:	02 60       	ori	r16, 0x02	; 2
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	e8 2e       	mov	r14, r24
     faa:	f1 2c       	mov	r15, r1
     fac:	81 2c       	mov	r8, r1
     fae:	91 2c       	mov	r9, r1
     fb0:	a1 2c       	mov	r10, r1
     fb2:	68 e0       	ldi	r22, 0x08	; 8
     fb4:	b6 2e       	mov	r11, r22
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	cb 01       	movw	r24, r22
     fbe:	27 01       	movw	r4, r14
     fc0:	0f 2c       	mov	r0, r15
     fc2:	00 0c       	add	r0, r0
     fc4:	66 08       	sbc	r6, r6
     fc6:	77 08       	sbc	r7, r7
     fc8:	fe 01       	movw	r30, r28
     fca:	50 ed       	ldi	r21, 0xD0	; 208
     fcc:	35 2e       	mov	r3, r21
     fce:	31 0e       	add	r3, r17
     fd0:	29 e0       	ldi	r18, 0x09	; 9
     fd2:	23 15       	cp	r18, r3
     fd4:	70 f4       	brcc	.+28     	; 0xff2 <strtol+0x14a>
     fd6:	2f eb       	ldi	r18, 0xBF	; 191
     fd8:	21 0f       	add	r18, r17
     fda:	2a 31       	cpi	r18, 0x1A	; 26
     fdc:	18 f4       	brcc	.+6      	; 0xfe4 <strtol+0x13c>
     fde:	39 ec       	ldi	r19, 0xC9	; 201
     fe0:	33 2e       	mov	r3, r19
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <strtol+0x148>
     fe4:	2f e9       	ldi	r18, 0x9F	; 159
     fe6:	21 0f       	add	r18, r17
     fe8:	2a 31       	cpi	r18, 0x1A	; 26
     fea:	10 f5       	brcc	.+68     	; 0x1030 <strtol+0x188>
     fec:	29 ea       	ldi	r18, 0xA9	; 169
     fee:	32 2e       	mov	r3, r18
     ff0:	31 0e       	add	r3, r17
     ff2:	23 2d       	mov	r18, r3
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	2e 15       	cp	r18, r14
     ff8:	3f 05       	cpc	r19, r15
     ffa:	d4 f4       	brge	.+52     	; 0x1030 <strtol+0x188>
     ffc:	47 fd       	sbrc	r20, 7
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <strtol+0x182>
    1000:	86 16       	cp	r8, r22
    1002:	97 06       	cpc	r9, r23
    1004:	a8 06       	cpc	r10, r24
    1006:	b9 06       	cpc	r11, r25
    1008:	68 f0       	brcs	.+26     	; 0x1024 <strtol+0x17c>
    100a:	a3 01       	movw	r20, r6
    100c:	92 01       	movw	r18, r4
    100e:	58 d3       	rcall	.+1712   	; 0x16c0 <__mulsi3>
    1010:	63 0d       	add	r22, r3
    1012:	71 1d       	adc	r23, r1
    1014:	81 1d       	adc	r24, r1
    1016:	91 1d       	adc	r25, r1
    1018:	61 30       	cpi	r22, 0x01	; 1
    101a:	71 05       	cpc	r23, r1
    101c:	81 05       	cpc	r24, r1
    101e:	20 e8       	ldi	r18, 0x80	; 128
    1020:	92 07       	cpc	r25, r18
    1022:	10 f0       	brcs	.+4      	; 0x1028 <strtol+0x180>
    1024:	4f ef       	ldi	r20, 0xFF	; 255
    1026:	01 c0       	rjmp	.+2      	; 0x102a <strtol+0x182>
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	21 96       	adiw	r28, 0x01	; 1
    102c:	10 81       	ld	r17, Z
    102e:	cc cf       	rjmp	.-104    	; 0xfc8 <strtol+0x120>
    1030:	20 2f       	mov	r18, r16
    1032:	21 70       	andi	r18, 0x01	; 1
    1034:	c1 14       	cp	r12, r1
    1036:	d1 04       	cpc	r13, r1
    1038:	71 f0       	breq	.+28     	; 0x1056 <strtol+0x1ae>
    103a:	44 23       	and	r20, r20
    103c:	29 f0       	breq	.+10     	; 0x1048 <strtol+0x1a0>
    103e:	21 97       	sbiw	r28, 0x01	; 1
    1040:	f6 01       	movw	r30, r12
    1042:	c0 83       	st	Z, r28
    1044:	d1 83       	std	Z+1, r29	; 0x01
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <strtol+0x1ae>
    1048:	01 ff       	sbrs	r16, 1
    104a:	19 c0       	rjmp	.+50     	; 0x107e <strtol+0x1d6>
    104c:	22 97       	sbiw	r28, 0x02	; 2
    104e:	f6 01       	movw	r30, r12
    1050:	c0 83       	st	Z, r28
    1052:	d1 83       	std	Z+1, r29	; 0x01
    1054:	14 c0       	rjmp	.+40     	; 0x107e <strtol+0x1d6>
    1056:	47 ff       	sbrs	r20, 7
    1058:	12 c0       	rjmp	.+36     	; 0x107e <strtol+0x1d6>
    105a:	22 23       	and	r18, r18
    105c:	29 f0       	breq	.+10     	; 0x1068 <strtol+0x1c0>
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e8       	ldi	r25, 0x80	; 128
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <strtol+0x1c8>
    1068:	6f ef       	ldi	r22, 0xFF	; 255
    106a:	7f ef       	ldi	r23, 0xFF	; 255
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f e7       	ldi	r25, 0x7F	; 127
    1070:	22 e2       	ldi	r18, 0x22	; 34
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	20 93 b4 3e 	sts	0x3EB4, r18	; 0x803eb4 <errno>
    1078:	30 93 b5 3e 	sts	0x3EB5, r19	; 0x803eb5 <errno+0x1>
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <strtol+0x1e8>
    107e:	22 23       	and	r18, r18
    1080:	81 f0       	breq	.+32     	; 0x10a2 <strtol+0x1fa>
    1082:	90 95       	com	r25
    1084:	80 95       	com	r24
    1086:	70 95       	com	r23
    1088:	61 95       	neg	r22
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	8f 4f       	sbci	r24, 0xFF	; 255
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	46 2f       	mov	r20, r22
    1092:	37 2f       	mov	r19, r23
    1094:	28 2f       	mov	r18, r24
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <strtol+0x214>
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0d c0       	rjmp	.+26     	; 0x10bc <strtol+0x214>
    10a2:	97 ff       	sbrs	r25, 7
    10a4:	f5 cf       	rjmp	.-22     	; 0x1090 <strtol+0x1e8>
    10a6:	82 e2       	ldi	r24, 0x22	; 34
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <errno>
    10ae:	90 93 b5 3e 	sts	0x3EB5, r25	; 0x803eb5 <errno+0x1>
    10b2:	6f ef       	ldi	r22, 0xFF	; 255
    10b4:	7f ef       	ldi	r23, 0xFF	; 255
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f e7       	ldi	r25, 0x7F	; 127
    10ba:	ea cf       	rjmp	.-44     	; 0x1090 <strtol+0x1e8>
    10bc:	64 2f       	mov	r22, r20
    10be:	73 2f       	mov	r23, r19
    10c0:	82 2f       	mov	r24, r18
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	e1 e1       	ldi	r30, 0x11	; 17
    10c8:	50 c3       	rjmp	.+1696   	; 0x176a <__epilogue_restores__+0x2>

000010ca <isspace>:
    10ca:	91 11       	cpse	r25, r1
    10cc:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__ctype_isfalse>
    10d0:	80 32       	cpi	r24, 0x20	; 32
    10d2:	19 f0       	breq	.+6      	; 0x10da <isspace+0x10>
    10d4:	89 50       	subi	r24, 0x09	; 9
    10d6:	85 50       	subi	r24, 0x05	; 5
    10d8:	c8 f7       	brcc	.-14     	; 0x10cc <isspace+0x2>
    10da:	08 95       	ret

000010dc <strtok>:
    10dc:	44 e0       	ldi	r20, 0x04	; 4
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	11 d0       	rcall	.+34     	; 0x1104 <strtok_r>
    10e2:	08 95       	ret

000010e4 <strcmp>:
    10e4:	fb 01       	movw	r30, r22
    10e6:	dc 01       	movw	r26, r24
    10e8:	8d 91       	ld	r24, X+
    10ea:	01 90       	ld	r0, Z+
    10ec:	80 19       	sub	r24, r0
    10ee:	01 10       	cpse	r0, r1
    10f0:	d9 f3       	breq	.-10     	; 0x10e8 <strcmp+0x4>
    10f2:	99 0b       	sbc	r25, r25
    10f4:	08 95       	ret

000010f6 <strcpy>:
    10f6:	fb 01       	movw	r30, r22
    10f8:	dc 01       	movw	r26, r24
    10fa:	01 90       	ld	r0, Z+
    10fc:	0d 92       	st	X+, r0
    10fe:	00 20       	and	r0, r0
    1100:	e1 f7       	brne	.-8      	; 0x10fa <strcpy+0x4>
    1102:	08 95       	ret

00001104 <strtok_r>:
    1104:	fa 01       	movw	r30, r20
    1106:	a1 91       	ld	r26, Z+
    1108:	b0 81       	ld	r27, Z
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	19 f4       	brne	.+6      	; 0x1114 <strtok_r+0x10>
    110e:	10 97       	sbiw	r26, 0x00	; 0
    1110:	e1 f0       	breq	.+56     	; 0x114a <strtok_r+0x46>
    1112:	cd 01       	movw	r24, r26
    1114:	dc 01       	movw	r26, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0d 90       	ld	r0, X+
    111a:	00 20       	and	r0, r0
    111c:	11 f4       	brne	.+4      	; 0x1122 <strtok_r+0x1e>
    111e:	c0 01       	movw	r24, r0
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <strtok_r+0x44>
    1122:	fb 01       	movw	r30, r22
    1124:	21 91       	ld	r18, Z+
    1126:	22 23       	and	r18, r18
    1128:	19 f0       	breq	.+6      	; 0x1130 <strtok_r+0x2c>
    112a:	20 15       	cp	r18, r0
    112c:	d9 f7       	brne	.-10     	; 0x1124 <strtok_r+0x20>
    112e:	f3 cf       	rjmp	.-26     	; 0x1116 <strtok_r+0x12>
    1130:	fb 01       	movw	r30, r22
    1132:	21 91       	ld	r18, Z+
    1134:	20 15       	cp	r18, r0
    1136:	19 f4       	brne	.+6      	; 0x113e <strtok_r+0x3a>
    1138:	1e 92       	st	-X, r1
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	06 c0       	rjmp	.+12     	; 0x114a <strtok_r+0x46>
    113e:	22 23       	and	r18, r18
    1140:	c1 f7       	brne	.-16     	; 0x1132 <strtok_r+0x2e>
    1142:	0d 90       	ld	r0, X+
    1144:	00 20       	and	r0, r0
    1146:	a1 f7       	brne	.-24     	; 0x1130 <strtok_r+0x2c>
    1148:	d0 01       	movw	r26, r0
    114a:	fa 01       	movw	r30, r20
    114c:	a1 93       	st	Z+, r26
    114e:	b0 83       	st	Z, r27
    1150:	08 95       	ret

00001152 <printf>:
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee ea       	ldi	r30, 0xAE	; 174
    1158:	f8 e0       	ldi	r31, 0x08	; 8
    115a:	fd c2       	rjmp	.+1530   	; 0x1756 <__prologue_saves__+0x20>
    115c:	ae 01       	movw	r20, r28
    115e:	4b 5f       	subi	r20, 0xFB	; 251
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	fa 01       	movw	r30, r20
    1164:	61 91       	ld	r22, Z+
    1166:	71 91       	ld	r23, Z+
    1168:	af 01       	movw	r20, r30
    116a:	80 91 b8 3e 	lds	r24, 0x3EB8	; 0x803eb8 <__iob+0x2>
    116e:	90 91 b9 3e 	lds	r25, 0x3EB9	; 0x803eb9 <__iob+0x3>
    1172:	21 d0       	rcall	.+66     	; 0x11b6 <vfprintf>
    1174:	e2 e0       	ldi	r30, 0x02	; 2
    1176:	08 c3       	rjmp	.+1552   	; 0x1788 <__epilogue_restores__+0x20>

00001178 <sprintf>:
    1178:	ae e0       	ldi	r26, 0x0E	; 14
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 ec       	ldi	r30, 0xC1	; 193
    117e:	f8 e0       	ldi	r31, 0x08	; 8
    1180:	e8 c2       	rjmp	.+1488   	; 0x1752 <__prologue_saves__+0x1c>
    1182:	0d 89       	ldd	r16, Y+21	; 0x15
    1184:	1e 89       	ldd	r17, Y+22	; 0x16
    1186:	86 e0       	ldi	r24, 0x06	; 6
    1188:	8c 83       	std	Y+4, r24	; 0x04
    118a:	09 83       	std	Y+1, r16	; 0x01
    118c:	1a 83       	std	Y+2, r17	; 0x02
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f e7       	ldi	r25, 0x7F	; 127
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	ae 01       	movw	r20, r28
    1198:	47 5e       	subi	r20, 0xE7	; 231
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	6f 89       	ldd	r22, Y+23	; 0x17
    119e:	78 8d       	ldd	r23, Y+24	; 0x18
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	08 d0       	rcall	.+16     	; 0x11b6 <vfprintf>
    11a6:	ef 81       	ldd	r30, Y+7	; 0x07
    11a8:	f8 85       	ldd	r31, Y+8	; 0x08
    11aa:	e0 0f       	add	r30, r16
    11ac:	f1 1f       	adc	r31, r17
    11ae:	10 82       	st	Z, r1
    11b0:	2e 96       	adiw	r28, 0x0e	; 14
    11b2:	e4 e0       	ldi	r30, 0x04	; 4
    11b4:	e7 c2       	rjmp	.+1486   	; 0x1784 <__epilogue_restores__+0x1c>

000011b6 <vfprintf>:
    11b6:	ab e0       	ldi	r26, 0x0B	; 11
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e0 ee       	ldi	r30, 0xE0	; 224
    11bc:	f8 e0       	ldi	r31, 0x08	; 8
    11be:	bb c2       	rjmp	.+1398   	; 0x1736 <__prologue_saves__>
    11c0:	6c 01       	movw	r12, r24
    11c2:	7b 01       	movw	r14, r22
    11c4:	8a 01       	movw	r16, r20
    11c6:	fc 01       	movw	r30, r24
    11c8:	16 82       	std	Z+6, r1	; 0x06
    11ca:	17 82       	std	Z+7, r1	; 0x07
    11cc:	83 81       	ldd	r24, Z+3	; 0x03
    11ce:	81 ff       	sbrs	r24, 1
    11d0:	bf c1       	rjmp	.+894    	; 0x1550 <vfprintf+0x39a>
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	3c 01       	movw	r6, r24
    11d8:	f6 01       	movw	r30, r12
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	f7 01       	movw	r30, r14
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	7f 01       	movw	r14, r30
    11e8:	88 23       	and	r24, r24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <vfprintf+0x38>
    11ec:	ad c1       	rjmp	.+858    	; 0x1548 <vfprintf+0x392>
    11ee:	85 32       	cpi	r24, 0x25	; 37
    11f0:	39 f4       	brne	.+14     	; 0x1200 <vfprintf+0x4a>
    11f2:	93 fd       	sbrc	r25, 3
    11f4:	85 91       	lpm	r24, Z+
    11f6:	93 ff       	sbrs	r25, 3
    11f8:	81 91       	ld	r24, Z+
    11fa:	7f 01       	movw	r14, r30
    11fc:	85 32       	cpi	r24, 0x25	; 37
    11fe:	21 f4       	brne	.+8      	; 0x1208 <vfprintf+0x52>
    1200:	b6 01       	movw	r22, r12
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	c3 d1       	rcall	.+902    	; 0x158c <fputc>
    1206:	e8 cf       	rjmp	.-48     	; 0x11d8 <vfprintf+0x22>
    1208:	91 2c       	mov	r9, r1
    120a:	21 2c       	mov	r2, r1
    120c:	31 2c       	mov	r3, r1
    120e:	ff e1       	ldi	r31, 0x1F	; 31
    1210:	f3 15       	cp	r31, r3
    1212:	d8 f0       	brcs	.+54     	; 0x124a <vfprintf+0x94>
    1214:	8b 32       	cpi	r24, 0x2B	; 43
    1216:	79 f0       	breq	.+30     	; 0x1236 <vfprintf+0x80>
    1218:	38 f4       	brcc	.+14     	; 0x1228 <vfprintf+0x72>
    121a:	80 32       	cpi	r24, 0x20	; 32
    121c:	79 f0       	breq	.+30     	; 0x123c <vfprintf+0x86>
    121e:	83 32       	cpi	r24, 0x23	; 35
    1220:	a1 f4       	brne	.+40     	; 0x124a <vfprintf+0x94>
    1222:	23 2d       	mov	r18, r3
    1224:	20 61       	ori	r18, 0x10	; 16
    1226:	1d c0       	rjmp	.+58     	; 0x1262 <vfprintf+0xac>
    1228:	8d 32       	cpi	r24, 0x2D	; 45
    122a:	61 f0       	breq	.+24     	; 0x1244 <vfprintf+0x8e>
    122c:	80 33       	cpi	r24, 0x30	; 48
    122e:	69 f4       	brne	.+26     	; 0x124a <vfprintf+0x94>
    1230:	23 2d       	mov	r18, r3
    1232:	21 60       	ori	r18, 0x01	; 1
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <vfprintf+0xac>
    1236:	83 2d       	mov	r24, r3
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	38 2e       	mov	r3, r24
    123c:	e3 2d       	mov	r30, r3
    123e:	e4 60       	ori	r30, 0x04	; 4
    1240:	3e 2e       	mov	r3, r30
    1242:	2a c0       	rjmp	.+84     	; 0x1298 <vfprintf+0xe2>
    1244:	f3 2d       	mov	r31, r3
    1246:	f8 60       	ori	r31, 0x08	; 8
    1248:	1d c0       	rjmp	.+58     	; 0x1284 <vfprintf+0xce>
    124a:	37 fc       	sbrc	r3, 7
    124c:	2d c0       	rjmp	.+90     	; 0x12a8 <vfprintf+0xf2>
    124e:	20 ed       	ldi	r18, 0xD0	; 208
    1250:	28 0f       	add	r18, r24
    1252:	2a 30       	cpi	r18, 0x0A	; 10
    1254:	40 f0       	brcs	.+16     	; 0x1266 <vfprintf+0xb0>
    1256:	8e 32       	cpi	r24, 0x2E	; 46
    1258:	b9 f4       	brne	.+46     	; 0x1288 <vfprintf+0xd2>
    125a:	36 fc       	sbrc	r3, 6
    125c:	75 c1       	rjmp	.+746    	; 0x1548 <vfprintf+0x392>
    125e:	23 2d       	mov	r18, r3
    1260:	20 64       	ori	r18, 0x40	; 64
    1262:	32 2e       	mov	r3, r18
    1264:	19 c0       	rjmp	.+50     	; 0x1298 <vfprintf+0xe2>
    1266:	36 fe       	sbrs	r3, 6
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0xc0>
    126a:	8a e0       	ldi	r24, 0x0A	; 10
    126c:	98 9e       	mul	r9, r24
    126e:	20 0d       	add	r18, r0
    1270:	11 24       	eor	r1, r1
    1272:	92 2e       	mov	r9, r18
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <vfprintf+0xe2>
    1276:	ea e0       	ldi	r30, 0x0A	; 10
    1278:	2e 9e       	mul	r2, r30
    127a:	20 0d       	add	r18, r0
    127c:	11 24       	eor	r1, r1
    127e:	22 2e       	mov	r2, r18
    1280:	f3 2d       	mov	r31, r3
    1282:	f0 62       	ori	r31, 0x20	; 32
    1284:	3f 2e       	mov	r3, r31
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <vfprintf+0xe2>
    1288:	8c 36       	cpi	r24, 0x6C	; 108
    128a:	21 f4       	brne	.+8      	; 0x1294 <vfprintf+0xde>
    128c:	83 2d       	mov	r24, r3
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	38 2e       	mov	r3, r24
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0xe2>
    1294:	88 36       	cpi	r24, 0x68	; 104
    1296:	41 f4       	brne	.+16     	; 0x12a8 <vfprintf+0xf2>
    1298:	f7 01       	movw	r30, r14
    129a:	93 fd       	sbrc	r25, 3
    129c:	85 91       	lpm	r24, Z+
    129e:	93 ff       	sbrs	r25, 3
    12a0:	81 91       	ld	r24, Z+
    12a2:	7f 01       	movw	r14, r30
    12a4:	81 11       	cpse	r24, r1
    12a6:	b3 cf       	rjmp	.-154    	; 0x120e <vfprintf+0x58>
    12a8:	98 2f       	mov	r25, r24
    12aa:	9f 7d       	andi	r25, 0xDF	; 223
    12ac:	95 54       	subi	r25, 0x45	; 69
    12ae:	93 30       	cpi	r25, 0x03	; 3
    12b0:	28 f4       	brcc	.+10     	; 0x12bc <vfprintf+0x106>
    12b2:	0c 5f       	subi	r16, 0xFC	; 252
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	9f e3       	ldi	r25, 0x3F	; 63
    12b8:	99 83       	std	Y+1, r25	; 0x01
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <vfprintf+0x120>
    12bc:	83 36       	cpi	r24, 0x63	; 99
    12be:	31 f0       	breq	.+12     	; 0x12cc <vfprintf+0x116>
    12c0:	83 37       	cpi	r24, 0x73	; 115
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <vfprintf+0x12a>
    12c4:	83 35       	cpi	r24, 0x53	; 83
    12c6:	09 f0       	breq	.+2      	; 0x12ca <vfprintf+0x114>
    12c8:	55 c0       	rjmp	.+170    	; 0x1374 <vfprintf+0x1be>
    12ca:	20 c0       	rjmp	.+64     	; 0x130c <vfprintf+0x156>
    12cc:	f8 01       	movw	r30, r16
    12ce:	80 81       	ld	r24, Z
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	0e 5f       	subi	r16, 0xFE	; 254
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	88 24       	eor	r8, r8
    12d8:	83 94       	inc	r8
    12da:	91 2c       	mov	r9, r1
    12dc:	53 01       	movw	r10, r6
    12de:	12 c0       	rjmp	.+36     	; 0x1304 <vfprintf+0x14e>
    12e0:	28 01       	movw	r4, r16
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	4f 0e       	add	r4, r31
    12e6:	51 1c       	adc	r5, r1
    12e8:	f8 01       	movw	r30, r16
    12ea:	a0 80       	ld	r10, Z
    12ec:	b1 80       	ldd	r11, Z+1	; 0x01
    12ee:	36 fe       	sbrs	r3, 6
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <vfprintf+0x142>
    12f2:	69 2d       	mov	r22, r9
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <vfprintf+0x146>
    12f8:	6f ef       	ldi	r22, 0xFF	; 255
    12fa:	7f ef       	ldi	r23, 0xFF	; 255
    12fc:	c5 01       	movw	r24, r10
    12fe:	3b d1       	rcall	.+630    	; 0x1576 <strnlen>
    1300:	4c 01       	movw	r8, r24
    1302:	82 01       	movw	r16, r4
    1304:	f3 2d       	mov	r31, r3
    1306:	ff 77       	andi	r31, 0x7F	; 127
    1308:	3f 2e       	mov	r3, r31
    130a:	15 c0       	rjmp	.+42     	; 0x1336 <vfprintf+0x180>
    130c:	28 01       	movw	r4, r16
    130e:	22 e0       	ldi	r18, 0x02	; 2
    1310:	42 0e       	add	r4, r18
    1312:	51 1c       	adc	r5, r1
    1314:	f8 01       	movw	r30, r16
    1316:	a0 80       	ld	r10, Z
    1318:	b1 80       	ldd	r11, Z+1	; 0x01
    131a:	36 fe       	sbrs	r3, 6
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <vfprintf+0x16e>
    131e:	69 2d       	mov	r22, r9
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x172>
    1324:	6f ef       	ldi	r22, 0xFF	; 255
    1326:	7f ef       	ldi	r23, 0xFF	; 255
    1328:	c5 01       	movw	r24, r10
    132a:	1a d1       	rcall	.+564    	; 0x1560 <strnlen_P>
    132c:	4c 01       	movw	r8, r24
    132e:	f3 2d       	mov	r31, r3
    1330:	f0 68       	ori	r31, 0x80	; 128
    1332:	3f 2e       	mov	r3, r31
    1334:	82 01       	movw	r16, r4
    1336:	33 fc       	sbrc	r3, 3
    1338:	19 c0       	rjmp	.+50     	; 0x136c <vfprintf+0x1b6>
    133a:	82 2d       	mov	r24, r2
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	88 16       	cp	r8, r24
    1340:	99 06       	cpc	r9, r25
    1342:	a0 f4       	brcc	.+40     	; 0x136c <vfprintf+0x1b6>
    1344:	b6 01       	movw	r22, r12
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	20 d1       	rcall	.+576    	; 0x158c <fputc>
    134c:	2a 94       	dec	r2
    134e:	f5 cf       	rjmp	.-22     	; 0x133a <vfprintf+0x184>
    1350:	f5 01       	movw	r30, r10
    1352:	37 fc       	sbrc	r3, 7
    1354:	85 91       	lpm	r24, Z+
    1356:	37 fe       	sbrs	r3, 7
    1358:	81 91       	ld	r24, Z+
    135a:	5f 01       	movw	r10, r30
    135c:	b6 01       	movw	r22, r12
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	15 d1       	rcall	.+554    	; 0x158c <fputc>
    1362:	21 10       	cpse	r2, r1
    1364:	2a 94       	dec	r2
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	82 1a       	sub	r8, r18
    136a:	91 08       	sbc	r9, r1
    136c:	81 14       	cp	r8, r1
    136e:	91 04       	cpc	r9, r1
    1370:	79 f7       	brne	.-34     	; 0x1350 <vfprintf+0x19a>
    1372:	e1 c0       	rjmp	.+450    	; 0x1536 <vfprintf+0x380>
    1374:	84 36       	cpi	r24, 0x64	; 100
    1376:	11 f0       	breq	.+4      	; 0x137c <vfprintf+0x1c6>
    1378:	89 36       	cpi	r24, 0x69	; 105
    137a:	39 f5       	brne	.+78     	; 0x13ca <vfprintf+0x214>
    137c:	f8 01       	movw	r30, r16
    137e:	37 fe       	sbrs	r3, 7
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <vfprintf+0x1da>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0c 5f       	subi	r16, 0xFC	; 252
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <vfprintf+0x1ea>
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	07 2e       	mov	r0, r23
    1396:	00 0c       	add	r0, r0
    1398:	88 0b       	sbc	r24, r24
    139a:	99 0b       	sbc	r25, r25
    139c:	0e 5f       	subi	r16, 0xFE	; 254
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	f3 2d       	mov	r31, r3
    13a2:	ff 76       	andi	r31, 0x6F	; 111
    13a4:	3f 2e       	mov	r3, r31
    13a6:	97 ff       	sbrs	r25, 7
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <vfprintf+0x206>
    13aa:	90 95       	com	r25
    13ac:	80 95       	com	r24
    13ae:	70 95       	com	r23
    13b0:	61 95       	neg	r22
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	f0 68       	ori	r31, 0x80	; 128
    13ba:	3f 2e       	mov	r3, r31
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	a3 01       	movw	r20, r6
    13c2:	20 d1       	rcall	.+576    	; 0x1604 <__ultoa_invert>
    13c4:	88 2e       	mov	r8, r24
    13c6:	86 18       	sub	r8, r6
    13c8:	44 c0       	rjmp	.+136    	; 0x1452 <vfprintf+0x29c>
    13ca:	85 37       	cpi	r24, 0x75	; 117
    13cc:	31 f4       	brne	.+12     	; 0x13da <vfprintf+0x224>
    13ce:	23 2d       	mov	r18, r3
    13d0:	2f 7e       	andi	r18, 0xEF	; 239
    13d2:	b2 2e       	mov	r11, r18
    13d4:	2a e0       	ldi	r18, 0x0A	; 10
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	25 c0       	rjmp	.+74     	; 0x1424 <vfprintf+0x26e>
    13da:	93 2d       	mov	r25, r3
    13dc:	99 7f       	andi	r25, 0xF9	; 249
    13de:	b9 2e       	mov	r11, r25
    13e0:	8f 36       	cpi	r24, 0x6F	; 111
    13e2:	c1 f0       	breq	.+48     	; 0x1414 <vfprintf+0x25e>
    13e4:	18 f4       	brcc	.+6      	; 0x13ec <vfprintf+0x236>
    13e6:	88 35       	cpi	r24, 0x58	; 88
    13e8:	79 f0       	breq	.+30     	; 0x1408 <vfprintf+0x252>
    13ea:	ae c0       	rjmp	.+348    	; 0x1548 <vfprintf+0x392>
    13ec:	80 37       	cpi	r24, 0x70	; 112
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <vfprintf+0x240>
    13f0:	88 37       	cpi	r24, 0x78	; 120
    13f2:	21 f0       	breq	.+8      	; 0x13fc <vfprintf+0x246>
    13f4:	a9 c0       	rjmp	.+338    	; 0x1548 <vfprintf+0x392>
    13f6:	e9 2f       	mov	r30, r25
    13f8:	e0 61       	ori	r30, 0x10	; 16
    13fa:	be 2e       	mov	r11, r30
    13fc:	b4 fe       	sbrs	r11, 4
    13fe:	0d c0       	rjmp	.+26     	; 0x141a <vfprintf+0x264>
    1400:	fb 2d       	mov	r31, r11
    1402:	f4 60       	ori	r31, 0x04	; 4
    1404:	bf 2e       	mov	r11, r31
    1406:	09 c0       	rjmp	.+18     	; 0x141a <vfprintf+0x264>
    1408:	34 fe       	sbrs	r3, 4
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <vfprintf+0x26a>
    140c:	29 2f       	mov	r18, r25
    140e:	26 60       	ori	r18, 0x06	; 6
    1410:	b2 2e       	mov	r11, r18
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <vfprintf+0x26a>
    1414:	28 e0       	ldi	r18, 0x08	; 8
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <vfprintf+0x26e>
    141a:	20 e1       	ldi	r18, 0x10	; 16
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <vfprintf+0x26e>
    1420:	20 e1       	ldi	r18, 0x10	; 16
    1422:	32 e0       	ldi	r19, 0x02	; 2
    1424:	f8 01       	movw	r30, r16
    1426:	b7 fe       	sbrs	r11, 7
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <vfprintf+0x282>
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	0c 5f       	subi	r16, 0xFC	; 252
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <vfprintf+0x28e>
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 5f       	subi	r16, 0xFE	; 254
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	a3 01       	movw	r20, r6
    1446:	de d0       	rcall	.+444    	; 0x1604 <__ultoa_invert>
    1448:	88 2e       	mov	r8, r24
    144a:	86 18       	sub	r8, r6
    144c:	fb 2d       	mov	r31, r11
    144e:	ff 77       	andi	r31, 0x7F	; 127
    1450:	3f 2e       	mov	r3, r31
    1452:	36 fe       	sbrs	r3, 6
    1454:	0d c0       	rjmp	.+26     	; 0x1470 <vfprintf+0x2ba>
    1456:	23 2d       	mov	r18, r3
    1458:	2e 7f       	andi	r18, 0xFE	; 254
    145a:	a2 2e       	mov	r10, r18
    145c:	89 14       	cp	r8, r9
    145e:	58 f4       	brcc	.+22     	; 0x1476 <vfprintf+0x2c0>
    1460:	34 fe       	sbrs	r3, 4
    1462:	0b c0       	rjmp	.+22     	; 0x147a <vfprintf+0x2c4>
    1464:	32 fc       	sbrc	r3, 2
    1466:	09 c0       	rjmp	.+18     	; 0x147a <vfprintf+0x2c4>
    1468:	83 2d       	mov	r24, r3
    146a:	8e 7e       	andi	r24, 0xEE	; 238
    146c:	a8 2e       	mov	r10, r24
    146e:	05 c0       	rjmp	.+10     	; 0x147a <vfprintf+0x2c4>
    1470:	b8 2c       	mov	r11, r8
    1472:	a3 2c       	mov	r10, r3
    1474:	03 c0       	rjmp	.+6      	; 0x147c <vfprintf+0x2c6>
    1476:	b8 2c       	mov	r11, r8
    1478:	01 c0       	rjmp	.+2      	; 0x147c <vfprintf+0x2c6>
    147a:	b9 2c       	mov	r11, r9
    147c:	a4 fe       	sbrs	r10, 4
    147e:	0f c0       	rjmp	.+30     	; 0x149e <vfprintf+0x2e8>
    1480:	fe 01       	movw	r30, r28
    1482:	e8 0d       	add	r30, r8
    1484:	f1 1d       	adc	r31, r1
    1486:	80 81       	ld	r24, Z
    1488:	80 33       	cpi	r24, 0x30	; 48
    148a:	21 f4       	brne	.+8      	; 0x1494 <vfprintf+0x2de>
    148c:	9a 2d       	mov	r25, r10
    148e:	99 7e       	andi	r25, 0xE9	; 233
    1490:	a9 2e       	mov	r10, r25
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <vfprintf+0x2f0>
    1494:	a2 fe       	sbrs	r10, 2
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <vfprintf+0x2ee>
    1498:	b3 94       	inc	r11
    149a:	b3 94       	inc	r11
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <vfprintf+0x2f0>
    149e:	8a 2d       	mov	r24, r10
    14a0:	86 78       	andi	r24, 0x86	; 134
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <vfprintf+0x2f0>
    14a4:	b3 94       	inc	r11
    14a6:	a3 fc       	sbrc	r10, 3
    14a8:	10 c0       	rjmp	.+32     	; 0x14ca <vfprintf+0x314>
    14aa:	a0 fe       	sbrs	r10, 0
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <vfprintf+0x304>
    14ae:	b2 14       	cp	r11, r2
    14b0:	80 f4       	brcc	.+32     	; 0x14d2 <vfprintf+0x31c>
    14b2:	28 0c       	add	r2, r8
    14b4:	92 2c       	mov	r9, r2
    14b6:	9b 18       	sub	r9, r11
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x31e>
    14ba:	b2 14       	cp	r11, r2
    14bc:	58 f4       	brcc	.+22     	; 0x14d4 <vfprintf+0x31e>
    14be:	b6 01       	movw	r22, r12
    14c0:	80 e2       	ldi	r24, 0x20	; 32
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	63 d0       	rcall	.+198    	; 0x158c <fputc>
    14c6:	b3 94       	inc	r11
    14c8:	f8 cf       	rjmp	.-16     	; 0x14ba <vfprintf+0x304>
    14ca:	b2 14       	cp	r11, r2
    14cc:	18 f4       	brcc	.+6      	; 0x14d4 <vfprintf+0x31e>
    14ce:	2b 18       	sub	r2, r11
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x320>
    14d2:	98 2c       	mov	r9, r8
    14d4:	21 2c       	mov	r2, r1
    14d6:	a4 fe       	sbrs	r10, 4
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <vfprintf+0x342>
    14da:	b6 01       	movw	r22, r12
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	55 d0       	rcall	.+170    	; 0x158c <fputc>
    14e2:	a2 fe       	sbrs	r10, 2
    14e4:	16 c0       	rjmp	.+44     	; 0x1512 <vfprintf+0x35c>
    14e6:	a1 fc       	sbrc	r10, 1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <vfprintf+0x33a>
    14ea:	88 e7       	ldi	r24, 0x78	; 120
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x33e>
    14f0:	88 e5       	ldi	r24, 0x58	; 88
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b6 01       	movw	r22, r12
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <vfprintf+0x35a>
    14f8:	8a 2d       	mov	r24, r10
    14fa:	86 78       	andi	r24, 0x86	; 134
    14fc:	51 f0       	breq	.+20     	; 0x1512 <vfprintf+0x35c>
    14fe:	a1 fe       	sbrs	r10, 1
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vfprintf+0x350>
    1502:	8b e2       	ldi	r24, 0x2B	; 43
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x352>
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	a7 fc       	sbrc	r10, 7
    150a:	8d e2       	ldi	r24, 0x2D	; 45
    150c:	b6 01       	movw	r22, r12
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	3d d0       	rcall	.+122    	; 0x158c <fputc>
    1512:	89 14       	cp	r8, r9
    1514:	30 f4       	brcc	.+12     	; 0x1522 <vfprintf+0x36c>
    1516:	b6 01       	movw	r22, r12
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	37 d0       	rcall	.+110    	; 0x158c <fputc>
    151e:	9a 94       	dec	r9
    1520:	f8 cf       	rjmp	.-16     	; 0x1512 <vfprintf+0x35c>
    1522:	8a 94       	dec	r8
    1524:	f3 01       	movw	r30, r6
    1526:	e8 0d       	add	r30, r8
    1528:	f1 1d       	adc	r31, r1
    152a:	80 81       	ld	r24, Z
    152c:	b6 01       	movw	r22, r12
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	2d d0       	rcall	.+90     	; 0x158c <fputc>
    1532:	81 10       	cpse	r8, r1
    1534:	f6 cf       	rjmp	.-20     	; 0x1522 <vfprintf+0x36c>
    1536:	22 20       	and	r2, r2
    1538:	09 f4       	brne	.+2      	; 0x153c <vfprintf+0x386>
    153a:	4e ce       	rjmp	.-868    	; 0x11d8 <vfprintf+0x22>
    153c:	b6 01       	movw	r22, r12
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	24 d0       	rcall	.+72     	; 0x158c <fputc>
    1544:	2a 94       	dec	r2
    1546:	f7 cf       	rjmp	.-18     	; 0x1536 <vfprintf+0x380>
    1548:	f6 01       	movw	r30, r12
    154a:	86 81       	ldd	r24, Z+6	; 0x06
    154c:	97 81       	ldd	r25, Z+7	; 0x07
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x39e>
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	2b 96       	adiw	r28, 0x0b	; 11
    1556:	e2 e1       	ldi	r30, 0x12	; 18
    1558:	07 c1       	rjmp	.+526    	; 0x1768 <__epilogue_restores__>

0000155a <__ctype_isfalse>:
    155a:	99 27       	eor	r25, r25
    155c:	88 27       	eor	r24, r24

0000155e <__ctype_istrue>:
    155e:	08 95       	ret

00001560 <strnlen_P>:
    1560:	fc 01       	movw	r30, r24
    1562:	05 90       	lpm	r0, Z+
    1564:	61 50       	subi	r22, 0x01	; 1
    1566:	70 40       	sbci	r23, 0x00	; 0
    1568:	01 10       	cpse	r0, r1
    156a:	d8 f7       	brcc	.-10     	; 0x1562 <strnlen_P+0x2>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	8e 0f       	add	r24, r30
    1572:	9f 1f       	adc	r25, r31
    1574:	08 95       	ret

00001576 <strnlen>:
    1576:	fc 01       	movw	r30, r24
    1578:	61 50       	subi	r22, 0x01	; 1
    157a:	70 40       	sbci	r23, 0x00	; 0
    157c:	01 90       	ld	r0, Z+
    157e:	01 10       	cpse	r0, r1
    1580:	d8 f7       	brcc	.-10     	; 0x1578 <strnlen+0x2>
    1582:	80 95       	com	r24
    1584:	90 95       	com	r25
    1586:	8e 0f       	add	r24, r30
    1588:	9f 1f       	adc	r25, r31
    158a:	08 95       	ret

0000158c <fputc>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	fb 01       	movw	r30, r22
    1596:	23 81       	ldd	r18, Z+3	; 0x03
    1598:	21 fd       	sbrc	r18, 1
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <fputc+0x16>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	2c c0       	rjmp	.+88     	; 0x15fa <fputc+0x6e>
    15a2:	22 ff       	sbrs	r18, 2
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <fputc+0x46>
    15a6:	46 81       	ldd	r20, Z+6	; 0x06
    15a8:	57 81       	ldd	r21, Z+7	; 0x07
    15aa:	24 81       	ldd	r18, Z+4	; 0x04
    15ac:	35 81       	ldd	r19, Z+5	; 0x05
    15ae:	42 17       	cp	r20, r18
    15b0:	53 07       	cpc	r21, r19
    15b2:	44 f4       	brge	.+16     	; 0x15c4 <fputc+0x38>
    15b4:	a0 81       	ld	r26, Z
    15b6:	b1 81       	ldd	r27, Z+1	; 0x01
    15b8:	9d 01       	movw	r18, r26
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	20 83       	st	Z, r18
    15c0:	31 83       	std	Z+1, r19	; 0x01
    15c2:	8c 93       	st	X, r24
    15c4:	26 81       	ldd	r18, Z+6	; 0x06
    15c6:	37 81       	ldd	r19, Z+7	; 0x07
    15c8:	2f 5f       	subi	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	26 83       	std	Z+6, r18	; 0x06
    15ce:	37 83       	std	Z+7, r19	; 0x07
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <fputc+0x6e>
    15d2:	8b 01       	movw	r16, r22
    15d4:	ec 01       	movw	r28, r24
    15d6:	fb 01       	movw	r30, r22
    15d8:	00 84       	ldd	r0, Z+8	; 0x08
    15da:	f1 85       	ldd	r31, Z+9	; 0x09
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 95       	icall
    15e0:	89 2b       	or	r24, r25
    15e2:	e1 f6       	brne	.-72     	; 0x159c <fputc+0x10>
    15e4:	d8 01       	movw	r26, r16
    15e6:	16 96       	adiw	r26, 0x06	; 6
    15e8:	8d 91       	ld	r24, X+
    15ea:	9c 91       	ld	r25, X
    15ec:	17 97       	sbiw	r26, 0x07	; 7
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	16 96       	adiw	r26, 0x06	; 6
    15f2:	8d 93       	st	X+, r24
    15f4:	9c 93       	st	X, r25
    15f6:	17 97       	sbiw	r26, 0x07	; 7
    15f8:	ce 01       	movw	r24, r28
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <__ultoa_invert>:
    1604:	fa 01       	movw	r30, r20
    1606:	aa 27       	eor	r26, r26
    1608:	28 30       	cpi	r18, 0x08	; 8
    160a:	51 f1       	breq	.+84     	; 0x1660 <__ultoa_invert+0x5c>
    160c:	20 31       	cpi	r18, 0x10	; 16
    160e:	81 f1       	breq	.+96     	; 0x1670 <__ultoa_invert+0x6c>
    1610:	e8 94       	clt
    1612:	6f 93       	push	r22
    1614:	6e 7f       	andi	r22, 0xFE	; 254
    1616:	6e 5f       	subi	r22, 0xFE	; 254
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	af 4f       	sbci	r26, 0xFF	; 255
    1620:	b1 e0       	ldi	r27, 0x01	; 1
    1622:	3e d0       	rcall	.+124    	; 0x16a0 <__ultoa_invert+0x9c>
    1624:	b4 e0       	ldi	r27, 0x04	; 4
    1626:	3c d0       	rcall	.+120    	; 0x16a0 <__ultoa_invert+0x9c>
    1628:	67 0f       	add	r22, r23
    162a:	78 1f       	adc	r23, r24
    162c:	89 1f       	adc	r24, r25
    162e:	9a 1f       	adc	r25, r26
    1630:	a1 1d       	adc	r26, r1
    1632:	68 0f       	add	r22, r24
    1634:	79 1f       	adc	r23, r25
    1636:	8a 1f       	adc	r24, r26
    1638:	91 1d       	adc	r25, r1
    163a:	a1 1d       	adc	r26, r1
    163c:	6a 0f       	add	r22, r26
    163e:	71 1d       	adc	r23, r1
    1640:	81 1d       	adc	r24, r1
    1642:	91 1d       	adc	r25, r1
    1644:	a1 1d       	adc	r26, r1
    1646:	20 d0       	rcall	.+64     	; 0x1688 <__ultoa_invert+0x84>
    1648:	09 f4       	brne	.+2      	; 0x164c <__ultoa_invert+0x48>
    164a:	68 94       	set
    164c:	3f 91       	pop	r19
    164e:	2a e0       	ldi	r18, 0x0A	; 10
    1650:	26 9f       	mul	r18, r22
    1652:	11 24       	eor	r1, r1
    1654:	30 19       	sub	r19, r0
    1656:	30 5d       	subi	r19, 0xD0	; 208
    1658:	31 93       	st	Z+, r19
    165a:	de f6       	brtc	.-74     	; 0x1612 <__ultoa_invert+0xe>
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret
    1660:	46 2f       	mov	r20, r22
    1662:	47 70       	andi	r20, 0x07	; 7
    1664:	40 5d       	subi	r20, 0xD0	; 208
    1666:	41 93       	st	Z+, r20
    1668:	b3 e0       	ldi	r27, 0x03	; 3
    166a:	0f d0       	rcall	.+30     	; 0x168a <__ultoa_invert+0x86>
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__ultoa_invert+0x5c>
    166e:	f6 cf       	rjmp	.-20     	; 0x165c <__ultoa_invert+0x58>
    1670:	46 2f       	mov	r20, r22
    1672:	4f 70       	andi	r20, 0x0F	; 15
    1674:	40 5d       	subi	r20, 0xD0	; 208
    1676:	4a 33       	cpi	r20, 0x3A	; 58
    1678:	18 f0       	brcs	.+6      	; 0x1680 <__ultoa_invert+0x7c>
    167a:	49 5d       	subi	r20, 0xD9	; 217
    167c:	31 fd       	sbrc	r19, 1
    167e:	40 52       	subi	r20, 0x20	; 32
    1680:	41 93       	st	Z+, r20
    1682:	02 d0       	rcall	.+4      	; 0x1688 <__ultoa_invert+0x84>
    1684:	a9 f7       	brne	.-22     	; 0x1670 <__ultoa_invert+0x6c>
    1686:	ea cf       	rjmp	.-44     	; 0x165c <__ultoa_invert+0x58>
    1688:	b4 e0       	ldi	r27, 0x04	; 4
    168a:	a6 95       	lsr	r26
    168c:	97 95       	ror	r25
    168e:	87 95       	ror	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	ba 95       	dec	r27
    1696:	c9 f7       	brne	.-14     	; 0x168a <__ultoa_invert+0x86>
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 05       	cpc	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	08 95       	ret
    16a0:	9b 01       	movw	r18, r22
    16a2:	ac 01       	movw	r20, r24
    16a4:	0a 2e       	mov	r0, r26
    16a6:	06 94       	lsr	r0
    16a8:	57 95       	ror	r21
    16aa:	47 95       	ror	r20
    16ac:	37 95       	ror	r19
    16ae:	27 95       	ror	r18
    16b0:	ba 95       	dec	r27
    16b2:	c9 f7       	brne	.-14     	; 0x16a6 <__ultoa_invert+0xa2>
    16b4:	62 0f       	add	r22, r18
    16b6:	73 1f       	adc	r23, r19
    16b8:	84 1f       	adc	r24, r20
    16ba:	95 1f       	adc	r25, r21
    16bc:	a0 1d       	adc	r26, r0
    16be:	08 95       	ret

000016c0 <__mulsi3>:
    16c0:	db 01       	movw	r26, r22
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	2d d0       	rcall	.+90     	; 0x1722 <__muluhisi3>
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	a2 9f       	mul	r26, r18
    16ce:	80 0d       	add	r24, r0
    16d0:	91 1d       	adc	r25, r1
    16d2:	a3 9f       	mul	r26, r19
    16d4:	90 0d       	add	r25, r0
    16d6:	b2 9f       	mul	r27, r18
    16d8:	90 0d       	add	r25, r0
    16da:	11 24       	eor	r1, r1
    16dc:	08 95       	ret

000016de <__udivmodsi4>:
    16de:	a1 e2       	ldi	r26, 0x21	; 33
    16e0:	1a 2e       	mov	r1, r26
    16e2:	aa 1b       	sub	r26, r26
    16e4:	bb 1b       	sub	r27, r27
    16e6:	fd 01       	movw	r30, r26
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <__udivmodsi4_ep>

000016ea <__udivmodsi4_loop>:
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	ee 1f       	adc	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	a2 17       	cp	r26, r18
    16f4:	b3 07       	cpc	r27, r19
    16f6:	e4 07       	cpc	r30, r20
    16f8:	f5 07       	cpc	r31, r21
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <__udivmodsi4_ep>
    16fc:	a2 1b       	sub	r26, r18
    16fe:	b3 0b       	sbc	r27, r19
    1700:	e4 0b       	sbc	r30, r20
    1702:	f5 0b       	sbc	r31, r21

00001704 <__udivmodsi4_ep>:
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	1a 94       	dec	r1
    170e:	69 f7       	brne	.-38     	; 0x16ea <__udivmodsi4_loop>
    1710:	60 95       	com	r22
    1712:	70 95       	com	r23
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	bd 01       	movw	r22, r26
    171e:	cf 01       	movw	r24, r30
    1720:	08 95       	ret

00001722 <__muluhisi3>:
    1722:	3a d0       	rcall	.+116    	; 0x1798 <__umulhisi3>
    1724:	a5 9f       	mul	r26, r21
    1726:	90 0d       	add	r25, r0
    1728:	b4 9f       	mul	r27, r20
    172a:	90 0d       	add	r25, r0
    172c:	a4 9f       	mul	r26, r20
    172e:	80 0d       	add	r24, r0
    1730:	91 1d       	adc	r25, r1
    1732:	11 24       	eor	r1, r1
    1734:	08 95       	ret

00001736 <__prologue_saves__>:
    1736:	2f 92       	push	r2
    1738:	3f 92       	push	r3
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	ca 1b       	sub	r28, r26
    1760:	db 0b       	sbc	r29, r27
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	09 94       	ijmp

00001768 <__epilogue_restores__>:
    1768:	2a 88       	ldd	r2, Y+18	; 0x12
    176a:	39 88       	ldd	r3, Y+17	; 0x11
    176c:	48 88       	ldd	r4, Y+16	; 0x10
    176e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1770:	6e 84       	ldd	r6, Y+14	; 0x0e
    1772:	7d 84       	ldd	r7, Y+13	; 0x0d
    1774:	8c 84       	ldd	r8, Y+12	; 0x0c
    1776:	9b 84       	ldd	r9, Y+11	; 0x0b
    1778:	aa 84       	ldd	r10, Y+10	; 0x0a
    177a:	b9 84       	ldd	r11, Y+9	; 0x09
    177c:	c8 84       	ldd	r12, Y+8	; 0x08
    177e:	df 80       	ldd	r13, Y+7	; 0x07
    1780:	ee 80       	ldd	r14, Y+6	; 0x06
    1782:	fd 80       	ldd	r15, Y+5	; 0x05
    1784:	0c 81       	ldd	r16, Y+4	; 0x04
    1786:	1b 81       	ldd	r17, Y+3	; 0x03
    1788:	aa 81       	ldd	r26, Y+2	; 0x02
    178a:	b9 81       	ldd	r27, Y+1	; 0x01
    178c:	ce 0f       	add	r28, r30
    178e:	d1 1d       	adc	r29, r1
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	ed 01       	movw	r28, r26
    1796:	08 95       	ret

00001798 <__umulhisi3>:
    1798:	a2 9f       	mul	r26, r18
    179a:	b0 01       	movw	r22, r0
    179c:	b3 9f       	mul	r27, r19
    179e:	c0 01       	movw	r24, r0
    17a0:	a3 9f       	mul	r26, r19
    17a2:	01 d0       	rcall	.+2      	; 0x17a6 <__umulhisi3+0xe>
    17a4:	b2 9f       	mul	r27, r18
    17a6:	70 0d       	add	r23, r0
    17a8:	81 1d       	adc	r24, r1
    17aa:	11 24       	eor	r1, r1
    17ac:	91 1d       	adc	r25, r1
    17ae:	08 95       	ret

000017b0 <_exit>:
    17b0:	f8 94       	cli

000017b2 <__stop_program>:
    17b2:	ff cf       	rjmp	.-2      	; 0x17b2 <__stop_program>
